
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080055d8  080055d8  000155d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005818  08005818  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005820  08005820  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001dc  08005a04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08005a04  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec24  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a7  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  000311d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e2a  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2e7  00000000  00000000  000549ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1453  00000000  00000000  00060cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  001321a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001dc 	.word	0x200001dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080055c0 	.word	0x080055c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e0 	.word	0x200001e0
 8000214:	080055c0 	.word	0x080055c0

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b972 	b.w	8000e4c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	4688      	mov	r8, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14b      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4615      	mov	r5, r2
 8000b92:	d967      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0720 	rsb	r7, r2, #32
 8000b9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba2:	fa20 f707 	lsr.w	r7, r0, r7
 8000ba6:	4095      	lsls	r5, r2
 8000ba8:	ea47 0803 	orr.w	r8, r7, r3
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bb8:	fa1f fc85 	uxth.w	ip, r5
 8000bbc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18eb      	adds	r3, r5, r3
 8000bce:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bd2:	f080 811b 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8118 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000bdc:	3f02      	subs	r7, #2
 8000bde:	442b      	add	r3, r5
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	442c      	add	r4, r5
 8000c0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c10:	eba4 040c 	sub.w	r4, r4, ip
 8000c14:	2700      	movs	r7, #0
 8000c16:	b11e      	cbz	r6, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c20:	4639      	mov	r1, r7
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xbe>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80eb 	beq.w	8000e06 <__udivmoddi4+0x286>
 8000c30:	2700      	movs	r7, #0
 8000c32:	e9c6 0100 	strd	r0, r1, [r6]
 8000c36:	4638      	mov	r0, r7
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f783 	clz	r7, r3
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d147      	bne.n	8000cd6 <__udivmoddi4+0x156>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd0>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80fa 	bhi.w	8000e44 <__udivmoddi4+0x2c4>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4698      	mov	r8, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000c5e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xe8>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 808f 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c72:	1b49      	subs	r1, r1, r5
 8000c74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c78:	fa1f f885 	uxth.w	r8, r5
 8000c7c:	2701      	movs	r7, #1
 8000c7e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c82:	0c23      	lsrs	r3, r4, #16
 8000c84:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c94:	18eb      	adds	r3, r5, r3
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x14c>
 8000cbc:	192c      	adds	r4, r5, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x14a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80b6 	bhi.w	8000e36 <__udivmoddi4+0x2b6>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e79f      	b.n	8000c16 <__udivmoddi4+0x96>
 8000cd6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cda:	40bb      	lsls	r3, r7
 8000cdc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ce4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ce8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cec:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cf4:	4325      	orrs	r5, r4
 8000cf6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cfa:	0c2c      	lsrs	r4, r5, #16
 8000cfc:	fb08 3319 	mls	r3, r8, r9, r3
 8000d00:	fa1f fa8e 	uxth.w	sl, lr
 8000d04:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d08:	fb09 f40a 	mul.w	r4, r9, sl
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d12:	fa00 f107 	lsl.w	r1, r0, r7
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1e 0303 	adds.w	r3, lr, r3
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d20:	f080 8087 	bcs.w	8000e32 <__udivmoddi4+0x2b2>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f240 8084 	bls.w	8000e32 <__udivmoddi4+0x2b2>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4473      	add	r3, lr
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	b2ad      	uxth	r5, r5
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3310 	mls	r3, r8, r0, r3
 8000d3c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d40:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d44:	45a2      	cmp	sl, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1e 0404 	adds.w	r4, lr, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d50:	d26b      	bcs.n	8000e2a <__udivmoddi4+0x2aa>
 8000d52:	45a2      	cmp	sl, r4
 8000d54:	d969      	bls.n	8000e2a <__udivmoddi4+0x2aa>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4474      	add	r4, lr
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	eba4 040a 	sub.w	r4, r4, sl
 8000d66:	454c      	cmp	r4, r9
 8000d68:	46c2      	mov	sl, r8
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	d354      	bcc.n	8000e18 <__udivmoddi4+0x298>
 8000d6e:	d051      	beq.n	8000e14 <__udivmoddi4+0x294>
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d069      	beq.n	8000e48 <__udivmoddi4+0x2c8>
 8000d74:	ebb1 050a 	subs.w	r5, r1, sl
 8000d78:	eb64 0403 	sbc.w	r4, r4, r3
 8000d7c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d80:	40fd      	lsrs	r5, r7
 8000d82:	40fc      	lsrs	r4, r7
 8000d84:	ea4c 0505 	orr.w	r5, ip, r5
 8000d88:	e9c6 5400 	strd	r5, r4, [r6]
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e747      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f703 	lsr.w	r7, r0, r3
 8000d98:	4095      	lsls	r5, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000da2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da6:	4338      	orrs	r0, r7
 8000da8:	0c01      	lsrs	r1, r0, #16
 8000daa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dae:	fa1f f885 	uxth.w	r8, r5
 8000db2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dba:	fb07 f308 	mul.w	r3, r7, r8
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x256>
 8000dc6:	1869      	adds	r1, r5, r1
 8000dc8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dcc:	d22f      	bcs.n	8000e2e <__udivmoddi4+0x2ae>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d92d      	bls.n	8000e2e <__udivmoddi4+0x2ae>
 8000dd2:	3f02      	subs	r7, #2
 8000dd4:	4429      	add	r1, r5
 8000dd6:	1acb      	subs	r3, r1, r3
 8000dd8:	b281      	uxth	r1, r0
 8000dda:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dde:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb00 f308 	mul.w	r3, r0, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x27e>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df4:	d217      	bcs.n	8000e26 <__udivmoddi4+0x2a6>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d915      	bls.n	8000e26 <__udivmoddi4+0x2a6>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e04:	e73b      	b.n	8000c7e <__udivmoddi4+0xfe>
 8000e06:	4637      	mov	r7, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e709      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	e6e7      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e14:	4541      	cmp	r1, r8
 8000e16:	d2ab      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e18:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e1c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e20:	3801      	subs	r0, #1
 8000e22:	4613      	mov	r3, r2
 8000e24:	e7a4      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e26:	4660      	mov	r0, ip
 8000e28:	e7e9      	b.n	8000dfe <__udivmoddi4+0x27e>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	e795      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e2e:	4667      	mov	r7, ip
 8000e30:	e7d1      	b.n	8000dd6 <__udivmoddi4+0x256>
 8000e32:	4681      	mov	r9, r0
 8000e34:	e77c      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	442c      	add	r4, r5
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0x14c>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	442b      	add	r3, r5
 8000e42:	e72f      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e44:	4638      	mov	r0, r7
 8000e46:	e708      	b.n	8000c5a <__udivmoddi4+0xda>
 8000e48:	4637      	mov	r7, r6
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0xa0>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fbbf 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f002 fbea 	bl	800365c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fbd7 	bl	8001666 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fb9f 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000204 	.word	0x20000204

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000204 	.word	0x20000204

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_Delay+0x40>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e033      	b.n	8000ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f002 f876 	bl	8003088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d118      	bne.n	8000fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fbe:	f023 0302 	bic.w	r3, r3, #2
 8000fc2:	f043 0202 	orr.w	r2, r3, #2
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f94a 	bl	8001264 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe6:	e001      	b.n	8000fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_ConfigChannel+0x1c>
 8001018:	2302      	movs	r3, #2
 800101a:	e113      	b.n	8001244 <HAL_ADC_ConfigChannel+0x244>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d925      	bls.n	8001078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68d9      	ldr	r1, [r3, #12]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	3b1e      	subs	r3, #30
 8001042:	2207      	movs	r2, #7
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43da      	mvns	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	400a      	ands	r2, r1
 8001050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68d9      	ldr	r1, [r3, #12]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	4603      	mov	r3, r0
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4403      	add	r3, r0
 800106a:	3b1e      	subs	r3, #30
 800106c:	409a      	lsls	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	e022      	b.n	80010be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6919      	ldr	r1, [r3, #16]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	2207      	movs	r2, #7
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	400a      	ands	r2, r1
 800109a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6919      	ldr	r1, [r3, #16]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4403      	add	r3, r0
 80010b4:	409a      	lsls	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d824      	bhi.n	8001110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b05      	subs	r3, #5
 80010d8:	221f      	movs	r2, #31
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b05      	subs	r3, #5
 8001102:	fa00 f203 	lsl.w	r2, r0, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
 800110e:	e04c      	b.n	80011aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d824      	bhi.n	8001162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b23      	subs	r3, #35	; 0x23
 800112a:	221f      	movs	r2, #31
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43da      	mvns	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	400a      	ands	r2, r1
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b23      	subs	r3, #35	; 0x23
 8001154:	fa00 f203 	lsl.w	r2, r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
 8001160:	e023      	b.n	80011aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b41      	subs	r3, #65	; 0x41
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	400a      	ands	r2, r1
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b41      	subs	r3, #65	; 0x41
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_ADC_ConfigChannel+0x250>)
 80011ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_ADC_ConfigChannel+0x254>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d10f      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d8>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d10b      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_ADC_ConfigChannel+0x254>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12b      	bne.n	800123a <HAL_ADC_ConfigChannel+0x23a>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_ADC_ConfigChannel+0x258>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_ADC_ConfigChannel+0x1f4>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b11      	cmp	r3, #17
 80011f2:	d122      	bne.n	800123a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_ADC_ConfigChannel+0x258>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d111      	bne.n	800123a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_ADC_ConfigChannel+0x25c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_ADC_ConfigChannel+0x260>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9a      	lsrs	r2, r3, #18
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800122c:	e002      	b.n	8001234 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40012300 	.word	0x40012300
 8001254:	40012000 	.word	0x40012000
 8001258:	10000012 	.word	0x10000012
 800125c:	20000008 	.word	0x20000008
 8001260:	431bde83 	.word	0x431bde83

08001264 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126c:	4b79      	ldr	r3, [pc, #484]	; (8001454 <ADC_Init+0x1f0>)
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	431a      	orrs	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	021a      	lsls	r2, r3, #8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6899      	ldr	r1, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	4a58      	ldr	r2, [pc, #352]	; (8001458 <ADC_Init+0x1f4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d022      	beq.n	8001342 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800130a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800132c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6899      	ldr	r1, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e00f      	b.n	8001362 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001360:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0202 	bic.w	r2, r2, #2
 8001370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e1b      	ldrb	r3, [r3, #24]
 800137c:	005a      	lsls	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01b      	beq.n	80013c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800139e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	3b01      	subs	r3, #1
 80013bc:	035a      	lsls	r2, r3, #13
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	e007      	b.n	80013d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	051a      	lsls	r2, r3, #20
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800140c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6899      	ldr	r1, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800141a:	025a      	lsls	r2, r3, #9
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	029a      	lsls	r2, r3, #10
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40012300 	.word	0x40012300
 8001458:	0f000001 	.word	0x0f000001

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff3e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff31 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fc46 	bl	8000f1c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e099      	b.n	80017d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016bc:	e00f      	b.n	80016de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016be:	f7ff fc2d 	bl	8000f1c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d908      	bls.n	80016de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e078      	b.n	80017d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e8      	bne.n	80016be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_DMA_Init+0x158>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4313      	orrs	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2b04      	cmp	r3, #4
 8001736:	d107      	bne.n	8001748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4313      	orrs	r3, r2
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f023 0307 	bic.w	r3, r3, #7
 800175e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	2b04      	cmp	r3, #4
 8001770:	d117      	bne.n	80017a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00e      	beq.n	80017a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9e9 	bl	8001b5c <DMA_CheckFifoParam>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800179e:	2301      	movs	r3, #1
 80017a0:	e016      	b.n	80017d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f9a0 	bl	8001af0 <DMA_CalcBaseAndBitshift>
 80017b0:	4603      	mov	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	223f      	movs	r2, #63	; 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	e010803f 	.word	0xe010803f

080017dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017e8:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <HAL_DMA_IRQHandler+0x258>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a92      	ldr	r2, [pc, #584]	; (8001a38 <HAL_DMA_IRQHandler+0x25c>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0a9b      	lsrs	r3, r3, #10
 80017f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2208      	movs	r2, #8
 8001808:	409a      	lsls	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01a      	beq.n	8001848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0204 	bic.w	r2, r2, #4
 800182e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2208      	movs	r2, #8
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2201      	movs	r2, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d012      	beq.n	800187e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2201      	movs	r2, #1
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	f043 0202 	orr.w	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2204      	movs	r2, #4
 8001884:	409a      	lsls	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d012      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00b      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	2204      	movs	r2, #4
 80018a2:	409a      	lsls	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f043 0204 	orr.w	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2210      	movs	r2, #16
 80018ba:	409a      	lsls	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d043      	beq.n	800194c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d03c      	beq.n	800194c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2210      	movs	r2, #16
 80018d8:	409a      	lsls	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d018      	beq.n	800191e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d024      	beq.n	800194c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
 800190a:	e01f      	b.n	800194c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e016      	b.n	800194c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0208 	bic.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2220      	movs	r2, #32
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 808e 	beq.w	8001a7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8086 	beq.w	8001a7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2220      	movs	r2, #32
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b05      	cmp	r3, #5
 8001984:	d136      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0216 	bic.w	r2, r2, #22
 8001994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x1da>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0208 	bic.w	r2, r2, #8
 80019c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	223f      	movs	r2, #63	; 0x3f
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d07d      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
        }
        return;
 80019f2:	e078      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01c      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d108      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d030      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
 8001a20:	e02b      	b.n	8001a7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
 8001a32:	e022      	b.n	8001a7a <HAL_DMA_IRQHandler+0x29e>
 8001a34:	20000008 	.word	0x20000008
 8001a38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d022      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d307      	bcc.n	8001ac2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f2      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x2ca>
 8001ac0:	e000      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ac2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
 8001ae4:	e000      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ae6:	bf00      	nop
    }
  }
}
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop

08001af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3b10      	subs	r3, #16
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <DMA_CalcBaseAndBitshift+0x64>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <DMA_CalcBaseAndBitshift+0x68>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d909      	bls.n	8001b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	1d1a      	adds	r2, r3, #4
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b30:	e007      	b.n	8001b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	aaaaaaab 	.word	0xaaaaaaab
 8001b58:	080055d8 	.word	0x080055d8

08001b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11f      	bne.n	8001bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d855      	bhi.n	8001c28 <DMA_CheckFifoParam+0xcc>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <DMA_CheckFifoParam+0x28>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001ba7 	.word	0x08001ba7
 8001b8c:	08001b95 	.word	0x08001b95
 8001b90:	08001c29 	.word	0x08001c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d045      	beq.n	8001c2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e042      	b.n	8001c2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bae:	d13f      	bne.n	8001c30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb4:	e03c      	b.n	8001c30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbe:	d121      	bne.n	8001c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d836      	bhi.n	8001c34 <DMA_CheckFifoParam+0xd8>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <DMA_CheckFifoParam+0x70>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be3 	.word	0x08001be3
 8001bd4:	08001bdd 	.word	0x08001bdd
 8001bd8:	08001bf5 	.word	0x08001bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
      break;
 8001be0:	e02f      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf2:	e021      	b.n	8001c38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bfc:	d11e      	bne.n	8001c3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c02:	e01b      	b.n	8001c3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d902      	bls.n	8001c10 <DMA_CheckFifoParam+0xb4>
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d003      	beq.n	8001c16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c0e:	e018      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      break;
 8001c14:	e015      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
      break;
 8001c26:	e00b      	b.n	8001c40 <DMA_CheckFifoParam+0xe4>
      break;
 8001c28:	bf00      	nop
 8001c2a:	e00a      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c2c:	bf00      	nop
 8001c2e:	e008      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c30:	bf00      	nop
 8001c32:	e006      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c34:	bf00      	nop
 8001c36:	e004      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c38:	bf00      	nop
 8001c3a:	e002      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c40:	bf00      	nop
    }
  } 
  
  return status; 
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e165      	b.n	8001f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8154 	bne.w	8001f32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x4a>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d123      	bne.n	8001ce2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	69b9      	ldr	r1, [r7, #24]
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00b      	beq.n	8001d36 <HAL_GPIO_Init+0xe6>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80ae 	beq.w	8001f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <HAL_GPIO_Init+0x2fc>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a5b      	ldr	r2, [pc, #364]	; (8001f4c <HAL_GPIO_Init+0x2fc>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_GPIO_Init+0x2fc>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df2:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_GPIO_Init+0x300>)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_GPIO_Init+0x304>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d025      	beq.n	8001e6a <HAL_GPIO_Init+0x21a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_GPIO_Init+0x308>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <HAL_GPIO_Init+0x216>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x30c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x212>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_GPIO_Init+0x310>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_GPIO_Init+0x314>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x20a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_GPIO_Init+0x318>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x206>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_GPIO_Init+0x31c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x202>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00c      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00a      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x21c>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4934      	ldr	r1, [pc, #208]	; (8001f50 <HAL_GPIO_Init+0x300>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eae:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_GPIO_Init+0x320>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f ae96 	bls.w	8001c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0ca      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d90c      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b6      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b52      	ldr	r3, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494c      	ldr	r1, [pc, #304]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d044      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07d      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	2b03      	cmp	r3, #3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06d      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e065      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4933      	ldr	r1, [pc, #204]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe ff40 	bl	8000f1c <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe ff3c 	bl	8000f1c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04d      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d20c      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_RCC_ClockConfig+0x1b4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e030      	b.n	8002152 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4915      	ldr	r1, [pc, #84]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490d      	ldr	r1, [pc, #52]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f81d 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	fa21 f303 	lsr.w	r3, r1, r3
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fea2 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00
 8002160:	40023800 	.word	0x40023800
 8002164:	080055e0 	.word	0x080055e0
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d007      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x32>
 800218e:	2b08      	cmp	r3, #8
 8002190:	d008      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x38>
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80b4 	bne.w	8002300 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800219a:	60bb      	str	r3, [r7, #8]
       break;
 800219c:	e0b3      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021a0:	60bb      	str	r3, [r7, #8]
      break;
 80021a2:	e0b0      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04a      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	f04f 0400 	mov.w	r4, #0
 80021c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	ea03 0501 	and.w	r5, r3, r1
 80021d0:	ea04 0602 	and.w	r6, r4, r2
 80021d4:	4629      	mov	r1, r5
 80021d6:	4632      	mov	r2, r6
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	f04f 0400 	mov.w	r4, #0
 80021e0:	0154      	lsls	r4, r2, #5
 80021e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e6:	014b      	lsls	r3, r1, #5
 80021e8:	4619      	mov	r1, r3
 80021ea:	4622      	mov	r2, r4
 80021ec:	1b49      	subs	r1, r1, r5
 80021ee:	eb62 0206 	sbc.w	r2, r2, r6
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f04f 0400 	mov.w	r4, #0
 80021fa:	0194      	lsls	r4, r2, #6
 80021fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002200:	018b      	lsls	r3, r1, #6
 8002202:	1a5b      	subs	r3, r3, r1
 8002204:	eb64 0402 	sbc.w	r4, r4, r2
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	00e2      	lsls	r2, r4, #3
 8002212:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002216:	00d9      	lsls	r1, r3, #3
 8002218:	460b      	mov	r3, r1
 800221a:	4614      	mov	r4, r2
 800221c:	195b      	adds	r3, r3, r5
 800221e:	eb44 0406 	adc.w	r4, r4, r6
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	02a2      	lsls	r2, r4, #10
 800222c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002230:	0299      	lsls	r1, r3, #10
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	4618      	mov	r0, r3
 8002238:	4621      	mov	r1, r4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f04f 0400 	mov.w	r4, #0
 8002240:	461a      	mov	r2, r3
 8002242:	4623      	mov	r3, r4
 8002244:	f7fe fc84 	bl	8000b50 <__aeabi_uldivmod>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e049      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	f04f 0400 	mov.w	r4, #0
 800225a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	ea03 0501 	and.w	r5, r3, r1
 8002266:	ea04 0602 	and.w	r6, r4, r2
 800226a:	4629      	mov	r1, r5
 800226c:	4632      	mov	r2, r6
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	f04f 0400 	mov.w	r4, #0
 8002276:	0154      	lsls	r4, r2, #5
 8002278:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227c:	014b      	lsls	r3, r1, #5
 800227e:	4619      	mov	r1, r3
 8002280:	4622      	mov	r2, r4
 8002282:	1b49      	subs	r1, r1, r5
 8002284:	eb62 0206 	sbc.w	r2, r2, r6
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	0194      	lsls	r4, r2, #6
 8002292:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002296:	018b      	lsls	r3, r1, #6
 8002298:	1a5b      	subs	r3, r3, r1
 800229a:	eb64 0402 	sbc.w	r4, r4, r2
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	00e2      	lsls	r2, r4, #3
 80022a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022ac:	00d9      	lsls	r1, r3, #3
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	195b      	adds	r3, r3, r5
 80022b4:	eb44 0406 	adc.w	r4, r4, r6
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	02a2      	lsls	r2, r4, #10
 80022c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022c6:	0299      	lsls	r1, r3, #10
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	4621      	mov	r1, r4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4623      	mov	r3, r4
 80022da:	f7fe fc39 	bl	8000b50 <__aeabi_uldivmod>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	60bb      	str	r3, [r7, #8]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002302:	60bb      	str	r3, [r7, #8]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	68bb      	ldr	r3, [r7, #8]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	00f42400 	.word	0x00f42400

08002318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d075      	beq.n	800241c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002330:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233c:	4b9f      	ldr	r3, [pc, #636]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002348:	4b9c      	ldr	r3, [pc, #624]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d05b      	beq.n	800241a <HAL_RCC_OscConfig+0x102>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d157      	bne.n	800241a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e20b      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x6e>
 8002378:	4b90      	ldr	r3, [pc, #576]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a8f      	ldr	r2, [pc, #572]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e01d      	b.n	80023c2 <HAL_RCC_OscConfig+0xaa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x92>
 8002390:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a89      	ldr	r2, [pc, #548]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b87      	ldr	r3, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a86      	ldr	r2, [pc, #536]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e00b      	b.n	80023c2 <HAL_RCC_OscConfig+0xaa>
 80023aa:	4b84      	ldr	r3, [pc, #528]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a83      	ldr	r2, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d013      	beq.n	80023f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fda7 	bl	8000f1c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d2:	f7fe fda3 	bl	8000f1c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1d0      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0xba>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd93 	bl	8000f1c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fa:	f7fe fd8f 	bl	8000f1c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1bc      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0xe2>
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d063      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243c:	2b08      	cmp	r3, #8
 800243e:	d11c      	bne.n	800247a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244c:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_OscConfig+0x14c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e190      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4952      	ldr	r1, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002478:	e03a      	b.n	80024f0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002482:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_OscConfig+0x2a8>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fd48 	bl	8000f1c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe fd44 	bl	8000f1c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e171      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	493f      	ldr	r1, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0x2a8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd27 	bl	8000f1c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe fd23 	bl	8000f1c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e150      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d030      	beq.n	800255e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe fd07 	bl	8000f1c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fd03 	bl	8000f1c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e130      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x1fa>
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fcf0 	bl	8000f1c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fcec 	bl	8000f1c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e119      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 809f 	beq.w	80026aa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x2a4>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002598:	2301      	movs	r3, #1
 800259a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x2b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d120      	bne.n	80025ea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_RCC_OscConfig+0x2b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x2b0>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b4:	f7fe fcb2 	bl	8000f1c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	e010      	b.n	80025de <HAL_RCC_OscConfig+0x2c6>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470000 	.word	0x42470000
 80025c4:	42470e80 	.word	0x42470e80
 80025c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7fe fca6 	bl	8000f1c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0d3      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x478>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x2e8>
 80025f2:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a67      	ldr	r2, [pc, #412]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x322>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x30a>
 8002608:	4b62      	ldr	r3, [pc, #392]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a61      	ldr	r2, [pc, #388]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x322>
 8002622:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d015      	beq.n	800266e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fc6b 	bl	8000f1c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fc67 	bl	8000f1c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e092      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ee      	beq.n	800264a <HAL_RCC_OscConfig+0x332>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fc55 	bl	8000f1c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fc51 	bl	8000f1c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e07c      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a3c      	ldr	r2, [pc, #240]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d068      	beq.n	8002784 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d060      	beq.n	8002780 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d145      	bne.n	8002752 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_OscConfig+0x480>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc26 	bl	8000f1c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fc22 	bl	8000f1c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	071b      	lsls	r3, r3, #28
 800271e:	491d      	ldr	r1, [pc, #116]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCC_OscConfig+0x480>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fbf7 	bl	8000f1c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fbf3 	bl	8000f1c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e020      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x41a>
 8002750:	e018      	b.n	8002784 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_RCC_OscConfig+0x480>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fbe0 	bl	8000f1c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fbdc 	bl	8000f1c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x47c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x448>
 800277e:	e001      	b.n	8002784 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000
 8002794:	40023800 	.word	0x40023800
 8002798:	42470060 	.word	0x42470060

0800279c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e056      	b.n	800285c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 feb9 	bl	8003540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	ea42 0103 	orr.w	r1, r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 0104 	and.w	r1, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e01d      	b.n	80028b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f001 f862 	bl	8003954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 f8d0 	bl	8002a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0b4      	b.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	f200 809f 	bhi.w	8002a2c <HAL_TIM_PWM_ConfigChannel+0x170>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002929 	.word	0x08002929
 80028f8:	08002a2d 	.word	0x08002a2d
 80028fc:	08002a2d 	.word	0x08002a2d
 8002900:	08002a2d 	.word	0x08002a2d
 8002904:	08002969 	.word	0x08002969
 8002908:	08002a2d 	.word	0x08002a2d
 800290c:	08002a2d 	.word	0x08002a2d
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	080029ab 	.word	0x080029ab
 8002918:	08002a2d 	.word	0x08002a2d
 800291c:	08002a2d 	.word	0x08002a2d
 8002920:	08002a2d 	.word	0x08002a2d
 8002924:	080029eb 	.word	0x080029eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f92a 	bl	8002b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
      break;
 8002966:	e062      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f97a 	bl	8002c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
      break;
 80029a8:	e041      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f9cf 	bl	8002d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0208 	orr.w	r2, r2, #8
 80029c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	61da      	str	r2, [r3, #28]
      break;
 80029e8:	e021      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fa23 	bl	8002e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	61da      	str	r2, [r3, #28]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <TIM_Base_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d00f      	beq.n	8002a88 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	; (8002b60 <TIM_Base_SetConfig+0x118>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3c      	ldr	r2, [pc, #240]	; (8002b64 <TIM_Base_SetConfig+0x11c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3b      	ldr	r2, [pc, #236]	; (8002b68 <TIM_Base_SetConfig+0x120>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3a      	ldr	r2, [pc, #232]	; (8002b6c <TIM_Base_SetConfig+0x124>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <TIM_Base_SetConfig+0x114>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d02b      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d027      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <TIM_Base_SetConfig+0x118>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d023      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <TIM_Base_SetConfig+0x11c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01f      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <TIM_Base_SetConfig+0x120>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01b      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <TIM_Base_SetConfig+0x124>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d017      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <TIM_Base_SetConfig+0x128>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <TIM_Base_SetConfig+0x12c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00f      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <TIM_Base_SetConfig+0x130>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <TIM_Base_SetConfig+0x134>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <TIM_Base_SetConfig+0x138>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <TIM_Base_SetConfig+0x13c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <TIM_Base_SetConfig+0x114>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_Base_SetConfig+0xf8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <TIM_Base_SetConfig+0x124>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d103      	bne.n	8002b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800
 8002b68:	40000c00 	.word	0x40000c00
 8002b6c:	40010400 	.word	0x40010400
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800
 8002b7c:	40001800 	.word	0x40001800
 8002b80:	40001c00 	.word	0x40001c00
 8002b84:	40002000 	.word	0x40002000

08002b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 0302 	bic.w	r3, r3, #2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a20      	ldr	r2, [pc, #128]	; (8002c60 <TIM_OC1_SetConfig+0xd8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_OC1_SetConfig+0x64>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <TIM_OC1_SetConfig+0xdc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10c      	bne.n	8002c06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0308 	bic.w	r3, r3, #8
 8002bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <TIM_OC1_SetConfig+0xd8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC1_SetConfig+0x8e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <TIM_OC1_SetConfig+0xdc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d111      	bne.n	8002c3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 0210 	bic.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0320 	bic.w	r3, r3, #32
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <TIM_OC2_SetConfig+0xe4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_OC2_SetConfig+0x68>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <TIM_OC2_SetConfig+0xe8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10d      	bne.n	8002cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <TIM_OC2_SetConfig+0xe4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_OC2_SetConfig+0x94>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <TIM_OC2_SetConfig+0xe8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d113      	bne.n	8002d24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40010400 	.word	0x40010400

08002d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <TIM_OC3_SetConfig+0xe0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_OC3_SetConfig+0x66>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <TIM_OC3_SetConfig+0xe4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <TIM_OC3_SetConfig+0xe0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC3_SetConfig+0x92>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <TIM_OC3_SetConfig+0xe4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d113      	bne.n	8002e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40010400 	.word	0x40010400

08002e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	031b      	lsls	r3, r3, #12
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <TIM_OC4_SetConfig+0xa4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_OC4_SetConfig+0x68>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <TIM_OC4_SetConfig+0xa8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d109      	bne.n	8002eb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40010400 	.word	0x40010400

08002ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e032      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f38:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <MX_ADC1_Init+0x108>)
 8002f88:	4a3d      	ldr	r2, [pc, #244]	; (8003080 <MX_ADC1_Init+0x10c>)
 8002f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <MX_ADC1_Init+0x108>)
 8002f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <MX_ADC1_Init+0x108>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <MX_ADC1_Init+0x108>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <MX_ADC1_Init+0x108>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fa6:	4b35      	ldr	r3, [pc, #212]	; (800307c <MX_ADC1_Init+0x108>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <MX_ADC1_Init+0x108>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <MX_ADC1_Init+0x108>)
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <MX_ADC1_Init+0x110>)
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <MX_ADC1_Init+0x108>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <MX_ADC1_Init+0x108>)
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <MX_ADC1_Init+0x108>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <MX_ADC1_Init+0x108>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fd4:	4829      	ldr	r0, [pc, #164]	; (800307c <MX_ADC1_Init+0x108>)
 8002fd6:	f7fd ffcf 	bl	8000f78 <HAL_ADC_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fe0:	f000 fa3a 	bl	8003458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002fec:	2301      	movs	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4821      	ldr	r0, [pc, #132]	; (800307c <MX_ADC1_Init+0x108>)
 8002ff6:	f7fe f803 	bl	8001000 <HAL_ADC_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003000:	f000 fa2a 	bl	8003458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003008:	2302      	movs	r3, #2
 800300a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	481a      	ldr	r0, [pc, #104]	; (800307c <MX_ADC1_Init+0x108>)
 8003012:	f7fd fff5 	bl	8001000 <HAL_ADC_ConfigChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800301c:	f000 fa1c 	bl	8003458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003020:	2301      	movs	r3, #1
 8003022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003024:	2303      	movs	r3, #3
 8003026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003028:	463b      	mov	r3, r7
 800302a:	4619      	mov	r1, r3
 800302c:	4813      	ldr	r0, [pc, #76]	; (800307c <MX_ADC1_Init+0x108>)
 800302e:	f7fd ffe7 	bl	8001000 <HAL_ADC_ConfigChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003038:	f000 fa0e 	bl	8003458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800303c:	2302      	movs	r3, #2
 800303e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003040:	2304      	movs	r3, #4
 8003042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003044:	463b      	mov	r3, r7
 8003046:	4619      	mov	r1, r3
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <MX_ADC1_Init+0x108>)
 800304a:	f7fd ffd9 	bl	8001000 <HAL_ADC_ConfigChannel>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003054:	f000 fa00 	bl	8003458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003058:	2303      	movs	r3, #3
 800305a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800305c:	2305      	movs	r3, #5
 800305e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	4619      	mov	r1, r3
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_ADC1_Init+0x108>)
 8003066:	f7fd ffcb 	bl	8001000 <HAL_ADC_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003070:	f000 f9f2 	bl	8003458 <Error_Handler>
  }

}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000208 	.word	0x20000208
 8003080:	40012000 	.word	0x40012000
 8003084:	0f000001 	.word	0x0f000001

08003088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_ADC_MspInit+0x10c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d170      	bne.n	800318c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a39      	ldr	r2, [pc, #228]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a32      	ldr	r2, [pc, #200]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_ADC_MspInit+0x110>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 80030fe:	230f      	movs	r3, #15
 8003100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003102:	2303      	movs	r3, #3
 8003104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	4619      	mov	r1, r3
 8003110:	4822      	ldr	r0, [pc, #136]	; (800319c <HAL_ADC_MspInit+0x114>)
 8003112:	f7fe fd9d 	bl	8001c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8003116:	2302      	movs	r3, #2
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311a:	2303      	movs	r3, #3
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	481d      	ldr	r0, [pc, #116]	; (80031a0 <HAL_ADC_MspInit+0x118>)
 800312a:	f7fe fd91 	bl	8001c50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_ADC_MspInit+0x120>)
 8003132:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800314c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003166:	2200      	movs	r2, #0
 8003168:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003172:	f7fe fa85 	bl	8001680 <HAL_DMA_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800317c:	f000 f96c 	bl	8003458 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
 8003186:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_ADC_MspInit+0x11c>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40012000 	.word	0x40012000
 8003198:	40023800 	.word	0x40023800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	20000250 	.word	0x20000250
 80031a8:	40026410 	.word	0x40026410

080031ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <MX_DMA_Init+0x3c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <MX_DMA_Init+0x3c>)
 80031bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <MX_DMA_Init+0x3c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	2038      	movs	r0, #56	; 0x38
 80031d4:	f7fe fa1d 	bl	8001612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031d8:	2038      	movs	r0, #56	; 0x38
 80031da:	f7fe fa36 	bl	800164a <HAL_NVIC_EnableIRQ>

}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <MX_GPIO_Init+0x128>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a42      	ldr	r2, [pc, #264]	; (8003314 <MX_GPIO_Init+0x128>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <MX_GPIO_Init+0x128>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <MX_GPIO_Init+0x128>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <MX_GPIO_Init+0x128>)
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <MX_GPIO_Init+0x128>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	4b35      	ldr	r3, [pc, #212]	; (8003314 <MX_GPIO_Init+0x128>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <MX_GPIO_Init+0x128>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <MX_GPIO_Init+0x128>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <MX_GPIO_Init+0x128>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <MX_GPIO_Init+0x128>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <MX_GPIO_Init+0x128>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SENLED_R_Pin, GPIO_PIN_RESET);
 8003272:	2200      	movs	r2, #0
 8003274:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003278:	4827      	ldr	r0, [pc, #156]	; (8003318 <MX_GPIO_Init+0x12c>)
 800327a:	f7fe fe7b 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 800327e:	2200      	movs	r2, #0
 8003280:	f641 3170 	movw	r1, #7024	; 0x1b70
 8003284:	4825      	ldr	r0, [pc, #148]	; (800331c <MX_GPIO_Init+0x130>)
 8003286:	f7fe fe75 	bl	8001f74 <HAL_GPIO_WritePin>
                          |FLAG_LED_Pin|GPIO_PIN_11|SEN_LED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 800328a:	2200      	movs	r2, #0
 800328c:	f240 31c1 	movw	r1, #961	; 0x3c1
 8003290:	4823      	ldr	r0, [pc, #140]	; (8003320 <MX_GPIO_Init+0x134>)
 8003292:	f7fe fe6f 	bl	8001f74 <HAL_GPIO_WritePin>
                          |MOTER_L_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SENLED_R_Pin;
 8003296:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329c:	2301      	movs	r3, #1
 800329e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4619      	mov	r1, r3
 80032ae:	481a      	ldr	r0, [pc, #104]	; (8003318 <MX_GPIO_Init+0x12c>)
 80032b0:	f7fe fcce 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 80032b4:	f641 3370 	movw	r3, #7024	; 0x1b70
 80032b8:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|GPIO_PIN_11|SEN_LED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	4813      	ldr	r0, [pc, #76]	; (800331c <MX_GPIO_Init+0x130>)
 80032ce:	f7fe fcbf 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 80032d2:	f240 33c1 	movw	r3, #961	; 0x3c1
 80032d6:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_GPIO_Init+0x134>)
 80032ec:	f7fe fcb0 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80032f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4806      	ldr	r0, [pc, #24]	; (8003320 <MX_GPIO_Init+0x134>)
 8003306:	f7fe fca3 	bl	8001c50 <HAL_GPIO_Init>

}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400

08003324 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800332a:	f7fd fd91 	bl	8000e50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800332e:	f000 f829 	bl	8003384 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003332:	f7ff ff5b 	bl	80031ec <MX_GPIO_Init>
	MX_DMA_Init();
 8003336:	f7ff ff39 	bl	80031ac <MX_DMA_Init>
	MX_ADC1_Init();
 800333a:	f7ff fe1b 	bl	8002f74 <MX_ADC1_Init>
	MX_SPI2_Init();
 800333e:	f000 f893 	bl	8003468 <MX_SPI2_Init>
	MX_SPI3_Init();
 8003342:	f000 f8c7 	bl	80034d4 <MX_SPI3_Init>
	MX_TIM2_Init();
 8003346:	f000 fa4b 	bl	80037e0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800334a:	f000 faab 	bl	80038a4 <MX_TIM3_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i = 33;
 800334e:	2321      	movs	r3, #33	; 0x21
 8003350:	607b      	str	r3, [r7, #4]
	float pi = 3.14;
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <main+0x58>)
 8003354:	603b      	str	r3, [r7, #0]

//	  SEGGER_RTT_WriteString(0, "SEGGER Real-Time-Terminal Sample\r\n\r\n");
//	  SEGGER_RTT_WriteString(0, "###### Testing SEGGER_printf() ######\r\n");
//		printf("Hello World!\n");
//		printf("i=%d,pi=%f\r\n",i,pi);
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, 1);
 8003356:	2201      	movs	r2, #1
 8003358:	2110      	movs	r1, #16
 800335a:	4809      	ldr	r0, [pc, #36]	; (8003380 <main+0x5c>)
 800335c:	f7fe fe0a 	bl	8001f74 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003364:	f7fd fde6 	bl	8000f34 <HAL_Delay>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, 0);
 8003368:	2200      	movs	r2, #0
 800336a:	2110      	movs	r1, #16
 800336c:	4804      	ldr	r0, [pc, #16]	; (8003380 <main+0x5c>)
 800336e:	f7fe fe01 	bl	8001f74 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003376:	f7fd fddd 	bl	8000f34 <HAL_Delay>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, 1);
 800337a:	e7ec      	b.n	8003356 <main+0x32>
 800337c:	4048f5c3 	.word	0x4048f5c3
 8003380:	40020000 	.word	0x40020000

08003384 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b094      	sub	sp, #80	; 0x50
 8003388:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	2234      	movs	r2, #52	; 0x34
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fbf1 	bl	8003b7a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003398:	f107 0308 	add.w	r3, r7, #8
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <SystemClock_Config+0xcc>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <SystemClock_Config+0xcc>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6413      	str	r3, [r2, #64]	; 0x40
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <SystemClock_Config+0xcc>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c4:	2300      	movs	r3, #0
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <SystemClock_Config+0xd0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a21      	ldr	r2, [pc, #132]	; (8003454 <SystemClock_Config+0xd0>)
 80033ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <SystemClock_Config+0xd0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ea:	2302      	movs	r3, #2
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80033f4:	2308      	movs	r3, #8
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 80033f8:	2364      	movs	r3, #100	; 0x64
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033fc:	2302      	movs	r3, #2
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003400:	2302      	movs	r3, #2
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003404:	2302      	movs	r3, #2
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ff83 	bl	8002318 <HAL_RCC_OscConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <SystemClock_Config+0x98>
		Error_Handler();
 8003418:	f000 f81e 	bl	8003458 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800341c:	230f      	movs	r3, #15
 800341e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003420:	2302      	movs	r3, #2
 8003422:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	2103      	movs	r1, #3
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fdb5 	bl	8001fa8 <HAL_RCC_ClockConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <SystemClock_Config+0xc4>
		Error_Handler();
 8003444:	f000 f808 	bl	8003458 <Error_Handler>
	}
}
 8003448:	bf00      	nop
 800344a:	3750      	adds	r7, #80	; 0x50
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000

08003458 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <MX_SPI2_Init+0x64>)
 800346e:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <MX_SPI2_Init+0x68>)
 8003470:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003472:	4b16      	ldr	r3, [pc, #88]	; (80034cc <MX_SPI2_Init+0x64>)
 8003474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003478:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <MX_SPI2_Init+0x64>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_SPI2_Init+0x64>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_SPI2_Init+0x64>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <MX_SPI2_Init+0x64>)
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_SPI2_Init+0x64>)
 8003494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003498:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_SPI2_Init+0x64>)
 800349c:	2200      	movs	r2, #0
 800349e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <MX_SPI2_Init+0x64>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_SPI2_Init+0x64>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <MX_SPI2_Init+0x64>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_SPI2_Init+0x64>)
 80034b4:	220a      	movs	r2, #10
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	; (80034cc <MX_SPI2_Init+0x64>)
 80034ba:	f7ff f96f 	bl	800279c <HAL_SPI_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80034c4:	f7ff ffc8 	bl	8003458 <Error_Handler>
  }

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200002b0 	.word	0x200002b0
 80034d0:	40003800 	.word	0x40003800

080034d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <MX_SPI3_Init+0x64>)
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <MX_SPI3_Init+0x68>)
 80034dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <MX_SPI3_Init+0x64>)
 80034e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <MX_SPI3_Init+0x64>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <MX_SPI3_Init+0x64>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_SPI3_Init+0x64>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <MX_SPI3_Init+0x64>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_SPI3_Init+0x64>)
 8003500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003504:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <MX_SPI3_Init+0x64>)
 8003508:	2200      	movs	r2, #0
 800350a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <MX_SPI3_Init+0x64>)
 800350e:	2200      	movs	r2, #0
 8003510:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <MX_SPI3_Init+0x64>)
 8003514:	2200      	movs	r2, #0
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <MX_SPI3_Init+0x64>)
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_SPI3_Init+0x64>)
 8003520:	220a      	movs	r2, #10
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <MX_SPI3_Init+0x64>)
 8003526:	f7ff f939 	bl	800279c <HAL_SPI_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003530:	f7ff ff92 	bl	8003458 <Error_Handler>
  }

}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000308 	.word	0x20000308
 800353c:	40003c00 	.word	0x40003c00

08003540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3b      	ldr	r2, [pc, #236]	; (800364c <HAL_SPI_MspInit+0x10c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12d      	bne.n	80035be <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <HAL_SPI_MspInit+0x110>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a39      	ldr	r2, [pc, #228]	; (8003650 <HAL_SPI_MspInit+0x110>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_SPI_MspInit+0x110>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <HAL_SPI_MspInit+0x110>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a32      	ldr	r2, [pc, #200]	; (8003650 <HAL_SPI_MspInit+0x110>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_SPI_MspInit+0x110>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 800359a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a8:	2303      	movs	r3, #3
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035ac:	2305      	movs	r3, #5
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	4827      	ldr	r0, [pc, #156]	; (8003654 <HAL_SPI_MspInit+0x114>)
 80035b8:	f7fe fb4a 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80035bc:	e041      	b.n	8003642 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a25      	ldr	r2, [pc, #148]	; (8003658 <HAL_SPI_MspInit+0x118>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d13c      	bne.n	8003642 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d6:	6413      	str	r3, [r2, #64]	; 0x40
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6313      	str	r3, [r2, #48]	; 0x30
 80035f4:	4b16      	ldr	r3, [pc, #88]	; (8003650 <HAL_SPI_MspInit+0x110>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 8003600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003612:	2307      	movs	r3, #7
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 8003616:	f107 031c 	add.w	r3, r7, #28
 800361a:	4619      	mov	r1, r3
 800361c:	480d      	ldr	r0, [pc, #52]	; (8003654 <HAL_SPI_MspInit+0x114>)
 800361e:	f7fe fb17 	bl	8001c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362e:	2303      	movs	r3, #3
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003632:	2306      	movs	r3, #6
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	; (8003654 <HAL_SPI_MspInit+0x114>)
 800363e:	f7fe fb07 	bl	8001c50 <HAL_GPIO_Init>
}
 8003642:	bf00      	nop
 8003644:	3730      	adds	r7, #48	; 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40003800 	.word	0x40003800
 8003650:	40023800 	.word	0x40023800
 8003654:	40020400 	.word	0x40020400
 8003658:	40003c00 	.word	0x40003c00

0800365c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_MspInit+0x4c>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <HAL_MspInit+0x4c>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_MspInit+0x4c>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_MspInit+0x4c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_MspInit+0x4c>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_MspInit+0x4c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036be:	e7fe      	b.n	80036be <HardFault_Handler+0x4>

080036c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <MemManage_Handler+0x4>

080036c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ca:	e7fe      	b.n	80036ca <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003700:	f7fd fbf8 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}

08003708 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <DMA2_Stream0_IRQHandler+0x10>)
 800370e:	f7fe f865 	bl	80017dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000250 	.word	0x20000250

0800371c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <_sbrk+0x50>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x16>
		heap_end = &end;
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <_sbrk+0x50>)
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <_sbrk+0x54>)
 8003730:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <_sbrk+0x50>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <_sbrk+0x50>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	466a      	mov	r2, sp
 8003742:	4293      	cmp	r3, r2
 8003744:	d907      	bls.n	8003756 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003746:	f000 f9e3 	bl	8003b10 <__errno>
 800374a:	4602      	mov	r2, r0
 800374c:	230c      	movs	r3, #12
 800374e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e006      	b.n	8003764 <_sbrk+0x48>
	}

	heap_end += incr;
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <_sbrk+0x50>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	4a03      	ldr	r2, [pc, #12]	; (800376c <_sbrk+0x50>)
 8003760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200001f8 	.word	0x200001f8
 8003770:	200003e8 	.word	0x200003e8

08003774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <SystemInit+0x60>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <SystemInit+0x60>)
 8003780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <SystemInit+0x64>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <SystemInit+0x64>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <SystemInit+0x64>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <SystemInit+0x64>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <SystemInit+0x64>)
 80037a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <SystemInit+0x64>)
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <SystemInit+0x68>)
 80037ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <SystemInit+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <SystemInit+0x64>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <SystemInit+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SystemInit+0x60>)
 80037c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c8:	609a      	str	r2, [r3, #8]
#endif
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00
 80037d8:	40023800 	.word	0x40023800
 80037dc:	24003010 	.word	0x24003010

080037e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e6:	f107 0320 	add.w	r3, r7, #32
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <MX_TIM2_Init+0xc0>)
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <MX_TIM2_Init+0xc0>)
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003828:	481d      	ldr	r0, [pc, #116]	; (80038a0 <MX_TIM2_Init+0xc0>)
 800382a:	f7ff f81b 	bl	8002864 <HAL_TIM_PWM_Init>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003834:	f7ff fe10 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003840:	f107 0320 	add.w	r3, r7, #32
 8003844:	4619      	mov	r1, r3
 8003846:	4816      	ldr	r0, [pc, #88]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003848:	f7ff fb4e 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8003852:	f7ff fe01 	bl	8003458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003856:	2360      	movs	r3, #96	; 0x60
 8003858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	4619      	mov	r1, r3
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <MX_TIM2_Init+0xc0>)
 800386e:	f7ff f825 	bl	80028bc <HAL_TIM_PWM_ConfigChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003878:	f7ff fdee 	bl	8003458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	2204      	movs	r2, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003884:	f7ff f81a 	bl	80028bc <HAL_TIM_PWM_ConfigChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800388e:	f7ff fde3 	bl	8003458 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003892:	4803      	ldr	r0, [pc, #12]	; (80038a0 <MX_TIM2_Init+0xc0>)
 8003894:	f000 f894 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8003898:	bf00      	nop
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200003a0 	.word	0x200003a0

080038a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038aa:	f107 0320 	add.w	r3, r7, #32
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	615a      	str	r2, [r3, #20]
 80038c4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <MX_TIM3_Init+0xa8>)
 80038c8:	4a21      	ldr	r2, [pc, #132]	; (8003950 <MX_TIM3_Init+0xac>)
 80038ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <MX_TIM3_Init+0xa8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <MX_TIM3_Init+0xa8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <MX_TIM3_Init+0xa8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <MX_TIM3_Init+0xa8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <MX_TIM3_Init+0xa8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038ea:	4818      	ldr	r0, [pc, #96]	; (800394c <MX_TIM3_Init+0xa8>)
 80038ec:	f7fe ffba 	bl	8002864 <HAL_TIM_PWM_Init>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80038f6:	f7ff fdaf 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003902:	f107 0320 	add.w	r3, r7, #32
 8003906:	4619      	mov	r1, r3
 8003908:	4810      	ldr	r0, [pc, #64]	; (800394c <MX_TIM3_Init+0xa8>)
 800390a:	f7ff faed 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003914:	f7ff fda0 	bl	8003458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003918:	2360      	movs	r3, #96	; 0x60
 800391a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	2204      	movs	r2, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <MX_TIM3_Init+0xa8>)
 8003930:	f7fe ffc4 	bl	80028bc <HAL_TIM_PWM_ConfigChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800393a:	f7ff fd8d 	bl	8003458 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <MX_TIM3_Init+0xa8>)
 8003940:	f000 f83e 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8003944:	bf00      	nop
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000360 	.word	0x20000360
 8003950:	40000400 	.word	0x40000400

08003954 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003982:	e012      	b.n	80039aa <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_TIM_PWM_MspInit+0x68>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10d      	bne.n	80039aa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_TIM_PWM_MspInit+0x64>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40000400 	.word	0x40000400

080039c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d13d      	bne.n	8003a5e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4a30      	ldr	r2, [pc, #192]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 8003a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	4619      	mov	r1, r3
 8003a36:	481e      	ldr	r0, [pc, #120]	; (8003ab0 <HAL_TIM_MspPostInit+0xf0>)
 8003a38:	f7fe f90a 	bl	8001c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <HAL_TIM_MspPostInit+0xf4>)
 8003a58:	f7fe f8fa 	bl	8001c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a5c:	e022      	b.n	8003aa4 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <HAL_TIM_MspPostInit+0xf8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d11d      	bne.n	8003aa4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6313      	str	r3, [r2, #48]	; 0x30
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_TIM_MspPostInit+0xec>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a90:	2300      	movs	r3, #0
 8003a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a94:	2302      	movs	r3, #2
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <HAL_TIM_MspPostInit+0xf0>)
 8003aa0:	f7fe f8d6 	bl	8001c50 <HAL_GPIO_Init>
}
 8003aa4:	bf00      	nop
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40000400 	.word	0x40000400

08003abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac2:	e003      	b.n	8003acc <LoopCopyDataInit>

08003ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aca:	3104      	adds	r1, #4

08003acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad4:	d3f6      	bcc.n	8003ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ad8:	e002      	b.n	8003ae0 <LoopFillZerobss>

08003ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003adc:	f842 3b04 	str.w	r3, [r2], #4

08003ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae4:	d3f9      	bcc.n	8003ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ae6:	f7ff fe45 	bl	8003774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aea:	f000 f817 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aee:	f7ff fc19 	bl	8003324 <main>
  bx  lr    
 8003af2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003af4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003af8:	08005828 	.word	0x08005828
  ldr  r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b00:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003b04:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003b08:	200003e4 	.word	0x200003e4

08003b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b0c:	e7fe      	b.n	8003b0c <ADC_IRQHandler>
	...

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	2000000c 	.word	0x2000000c

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4e0d      	ldr	r6, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1ba4      	subs	r4, r4, r6
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2500      	movs	r5, #0
 8003b28:	42a5      	cmp	r5, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4e0b      	ldr	r6, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f001 fd46 	bl	80055c0 <_init>
 8003b34:	1ba4      	subs	r4, r4, r6
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2500      	movs	r5, #0
 8003b3a:	42a5      	cmp	r5, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b44:	4798      	blx	r3
 8003b46:	3501      	adds	r5, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4e:	4798      	blx	r3
 8003b50:	3501      	adds	r5, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08005820 	.word	0x08005820
 8003b58:	08005820 	.word	0x08005820
 8003b5c:	08005820 	.word	0x08005820
 8003b60:	08005824 	.word	0x08005824

08003b64 <memcpy>:
 8003b64:	b510      	push	{r4, lr}
 8003b66:	1e43      	subs	r3, r0, #1
 8003b68:	440a      	add	r2, r1
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	bd10      	pop	{r4, pc}
 8003b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b78:	e7f7      	b.n	8003b6a <memcpy+0x6>

08003b7a <memset>:
 8003b7a:	4402      	add	r2, r0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d100      	bne.n	8003b84 <memset+0xa>
 8003b82:	4770      	bx	lr
 8003b84:	f803 1b01 	strb.w	r1, [r3], #1
 8003b88:	e7f9      	b.n	8003b7e <memset+0x4>

08003b8a <__cvt>:
 8003b8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8e:	ec55 4b10 	vmov	r4, r5, d0
 8003b92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003b94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	460e      	mov	r6, r1
 8003b9c:	4691      	mov	r9, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	bfb8      	it	lt
 8003ba2:	4622      	movlt	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f027 0720 	bic.w	r7, r7, #32
 8003baa:	bfbb      	ittet	lt
 8003bac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003bb0:	461d      	movlt	r5, r3
 8003bb2:	2300      	movge	r3, #0
 8003bb4:	232d      	movlt	r3, #45	; 0x2d
 8003bb6:	bfb8      	it	lt
 8003bb8:	4614      	movlt	r4, r2
 8003bba:	2f46      	cmp	r7, #70	; 0x46
 8003bbc:	700b      	strb	r3, [r1, #0]
 8003bbe:	d004      	beq.n	8003bca <__cvt+0x40>
 8003bc0:	2f45      	cmp	r7, #69	; 0x45
 8003bc2:	d100      	bne.n	8003bc6 <__cvt+0x3c>
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	e000      	b.n	8003bcc <__cvt+0x42>
 8003bca:	2103      	movs	r1, #3
 8003bcc:	ab03      	add	r3, sp, #12
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	ab02      	add	r3, sp, #8
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	4653      	mov	r3, sl
 8003bd8:	ec45 4b10 	vmov	d0, r4, r5
 8003bdc:	f000 fbac 	bl	8004338 <_dtoa_r>
 8003be0:	2f47      	cmp	r7, #71	; 0x47
 8003be2:	4680      	mov	r8, r0
 8003be4:	d102      	bne.n	8003bec <__cvt+0x62>
 8003be6:	f019 0f01 	tst.w	r9, #1
 8003bea:	d026      	beq.n	8003c3a <__cvt+0xb0>
 8003bec:	2f46      	cmp	r7, #70	; 0x46
 8003bee:	eb08 0906 	add.w	r9, r8, r6
 8003bf2:	d111      	bne.n	8003c18 <__cvt+0x8e>
 8003bf4:	f898 3000 	ldrb.w	r3, [r8]
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d10a      	bne.n	8003c12 <__cvt+0x88>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc ff34 	bl	8000a70 <__aeabi_dcmpeq>
 8003c08:	b918      	cbnz	r0, 8003c12 <__cvt+0x88>
 8003c0a:	f1c6 0601 	rsb	r6, r6, #1
 8003c0e:	f8ca 6000 	str.w	r6, [sl]
 8003c12:	f8da 3000 	ldr.w	r3, [sl]
 8003c16:	4499      	add	r9, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc ff26 	bl	8000a70 <__aeabi_dcmpeq>
 8003c24:	b938      	cbnz	r0, 8003c36 <__cvt+0xac>
 8003c26:	2230      	movs	r2, #48	; 0x30
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	454b      	cmp	r3, r9
 8003c2c:	d205      	bcs.n	8003c3a <__cvt+0xb0>
 8003c2e:	1c59      	adds	r1, r3, #1
 8003c30:	9103      	str	r1, [sp, #12]
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e7f8      	b.n	8003c28 <__cvt+0x9e>
 8003c36:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c3e:	eba3 0308 	sub.w	r3, r3, r8
 8003c42:	4640      	mov	r0, r8
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	b004      	add	sp, #16
 8003c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c4c <__exponent>:
 8003c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	4604      	mov	r4, r0
 8003c52:	bfba      	itte	lt
 8003c54:	4249      	neglt	r1, r1
 8003c56:	232d      	movlt	r3, #45	; 0x2d
 8003c58:	232b      	movge	r3, #43	; 0x2b
 8003c5a:	2909      	cmp	r1, #9
 8003c5c:	f804 2b02 	strb.w	r2, [r4], #2
 8003c60:	7043      	strb	r3, [r0, #1]
 8003c62:	dd20      	ble.n	8003ca6 <__exponent+0x5a>
 8003c64:	f10d 0307 	add.w	r3, sp, #7
 8003c68:	461f      	mov	r7, r3
 8003c6a:	260a      	movs	r6, #10
 8003c6c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c70:	fb06 1115 	mls	r1, r6, r5, r1
 8003c74:	3130      	adds	r1, #48	; 0x30
 8003c76:	2d09      	cmp	r5, #9
 8003c78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c7c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003c80:	4629      	mov	r1, r5
 8003c82:	dc09      	bgt.n	8003c98 <__exponent+0x4c>
 8003c84:	3130      	adds	r1, #48	; 0x30
 8003c86:	3b02      	subs	r3, #2
 8003c88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c8c:	42bb      	cmp	r3, r7
 8003c8e:	4622      	mov	r2, r4
 8003c90:	d304      	bcc.n	8003c9c <__exponent+0x50>
 8003c92:	1a10      	subs	r0, r2, r0
 8003c94:	b003      	add	sp, #12
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c98:	4613      	mov	r3, r2
 8003c9a:	e7e7      	b.n	8003c6c <__exponent+0x20>
 8003c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca0:	f804 2b01 	strb.w	r2, [r4], #1
 8003ca4:	e7f2      	b.n	8003c8c <__exponent+0x40>
 8003ca6:	2330      	movs	r3, #48	; 0x30
 8003ca8:	4419      	add	r1, r3
 8003caa:	7083      	strb	r3, [r0, #2]
 8003cac:	1d02      	adds	r2, r0, #4
 8003cae:	70c1      	strb	r1, [r0, #3]
 8003cb0:	e7ef      	b.n	8003c92 <__exponent+0x46>
	...

08003cb4 <_printf_float>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	b08d      	sub	sp, #52	; 0x34
 8003cba:	460c      	mov	r4, r1
 8003cbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	f001 f8ef 	bl	8004ea8 <_localeconv_r>
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc faa2 	bl	8000218 <strlen>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8003cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cdc:	9005      	str	r0, [sp, #20]
 8003cde:	3307      	adds	r3, #7
 8003ce0:	f023 0307 	bic.w	r3, r3, #7
 8003ce4:	f103 0208 	add.w	r2, r3, #8
 8003ce8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cec:	f8d4 b000 	ldr.w	fp, [r4]
 8003cf0:	f8c8 2000 	str.w	r2, [r8]
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003cfc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003d00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d04:	9307      	str	r3, [sp, #28]
 8003d06:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	4ba7      	ldr	r3, [pc, #668]	; (8003fac <_printf_float+0x2f8>)
 8003d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d14:	f7fc fede 	bl	8000ad4 <__aeabi_dcmpun>
 8003d18:	bb70      	cbnz	r0, 8003d78 <_printf_float+0xc4>
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	4ba3      	ldr	r3, [pc, #652]	; (8003fac <_printf_float+0x2f8>)
 8003d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d24:	f7fc feb8 	bl	8000a98 <__aeabi_dcmple>
 8003d28:	bb30      	cbnz	r0, 8003d78 <_printf_float+0xc4>
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	f7fc fea7 	bl	8000a84 <__aeabi_dcmplt>
 8003d36:	b110      	cbz	r0, 8003d3e <_printf_float+0x8a>
 8003d38:	232d      	movs	r3, #45	; 0x2d
 8003d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3e:	4a9c      	ldr	r2, [pc, #624]	; (8003fb0 <_printf_float+0x2fc>)
 8003d40:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <_printf_float+0x300>)
 8003d42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003d46:	bf8c      	ite	hi
 8003d48:	4690      	movhi	r8, r2
 8003d4a:	4698      	movls	r8, r3
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	f02b 0204 	bic.w	r2, fp, #4
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	f04f 0900 	mov.w	r9, #0
 8003d5a:	9700      	str	r7, [sp, #0]
 8003d5c:	4633      	mov	r3, r6
 8003d5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d60:	4621      	mov	r1, r4
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 f9e6 	bl	8004134 <_printf_common>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	f040 808d 	bne.w	8003e88 <_printf_float+0x1d4>
 8003d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d72:	b00d      	add	sp, #52	; 0x34
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	4649      	mov	r1, r9
 8003d80:	f7fc fea8 	bl	8000ad4 <__aeabi_dcmpun>
 8003d84:	b110      	cbz	r0, 8003d8c <_printf_float+0xd8>
 8003d86:	4a8c      	ldr	r2, [pc, #560]	; (8003fb8 <_printf_float+0x304>)
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <_printf_float+0x308>)
 8003d8a:	e7da      	b.n	8003d42 <_printf_float+0x8e>
 8003d8c:	6861      	ldr	r1, [r4, #4]
 8003d8e:	1c4b      	adds	r3, r1, #1
 8003d90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003d94:	a80a      	add	r0, sp, #40	; 0x28
 8003d96:	d13e      	bne.n	8003e16 <_printf_float+0x162>
 8003d98:	2306      	movs	r3, #6
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003da2:	ab09      	add	r3, sp, #36	; 0x24
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	ec49 8b10 	vmov	d0, r8, r9
 8003daa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003dae:	6022      	str	r2, [r4, #0]
 8003db0:	f8cd a004 	str.w	sl, [sp, #4]
 8003db4:	6861      	ldr	r1, [r4, #4]
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff fee7 	bl	8003b8a <__cvt>
 8003dbc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003dc0:	2b47      	cmp	r3, #71	; 0x47
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	d109      	bne.n	8003dda <_printf_float+0x126>
 8003dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc8:	1cd8      	adds	r0, r3, #3
 8003dca:	db02      	blt.n	8003dd2 <_printf_float+0x11e>
 8003dcc:	6862      	ldr	r2, [r4, #4]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	dd47      	ble.n	8003e62 <_printf_float+0x1ae>
 8003dd2:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dd6:	fa5f fa8a 	uxtb.w	sl, sl
 8003dda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003de0:	d824      	bhi.n	8003e2c <_printf_float+0x178>
 8003de2:	3901      	subs	r1, #1
 8003de4:	4652      	mov	r2, sl
 8003de6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dea:	9109      	str	r1, [sp, #36]	; 0x24
 8003dec:	f7ff ff2e 	bl	8003c4c <__exponent>
 8003df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003df2:	1813      	adds	r3, r2, r0
 8003df4:	2a01      	cmp	r2, #1
 8003df6:	4681      	mov	r9, r0
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	dc02      	bgt.n	8003e02 <_printf_float+0x14e>
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	07d1      	lsls	r1, r2, #31
 8003e00:	d501      	bpl.n	8003e06 <_printf_float+0x152>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0a5      	beq.n	8003d5a <_printf_float+0xa6>
 8003e0e:	232d      	movs	r3, #45	; 0x2d
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e14:	e7a1      	b.n	8003d5a <_printf_float+0xa6>
 8003e16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003e1a:	f000 8177 	beq.w	800410c <_printf_float+0x458>
 8003e1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e22:	d1bb      	bne.n	8003d9c <_printf_float+0xe8>
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d1b9      	bne.n	8003d9c <_printf_float+0xe8>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e7b6      	b.n	8003d9a <_printf_float+0xe6>
 8003e2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003e30:	d119      	bne.n	8003e66 <_printf_float+0x1b2>
 8003e32:	2900      	cmp	r1, #0
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	dd0c      	ble.n	8003e52 <_printf_float+0x19e>
 8003e38:	6121      	str	r1, [r4, #16]
 8003e3a:	b913      	cbnz	r3, 8003e42 <_printf_float+0x18e>
 8003e3c:	6822      	ldr	r2, [r4, #0]
 8003e3e:	07d2      	lsls	r2, r2, #31
 8003e40:	d502      	bpl.n	8003e48 <_printf_float+0x194>
 8003e42:	3301      	adds	r3, #1
 8003e44:	440b      	add	r3, r1
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e4c:	f04f 0900 	mov.w	r9, #0
 8003e50:	e7d9      	b.n	8003e06 <_printf_float+0x152>
 8003e52:	b913      	cbnz	r3, 8003e5a <_printf_float+0x1a6>
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	07d0      	lsls	r0, r2, #31
 8003e58:	d501      	bpl.n	8003e5e <_printf_float+0x1aa>
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	e7f3      	b.n	8003e46 <_printf_float+0x192>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e7f1      	b.n	8003e46 <_printf_float+0x192>
 8003e62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003e66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	db05      	blt.n	8003e7a <_printf_float+0x1c6>
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	07d1      	lsls	r1, r2, #31
 8003e74:	d5e8      	bpl.n	8003e48 <_printf_float+0x194>
 8003e76:	3301      	adds	r3, #1
 8003e78:	e7e5      	b.n	8003e46 <_printf_float+0x192>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfd4      	ite	le
 8003e7e:	f1c3 0302 	rsble	r3, r3, #2
 8003e82:	2301      	movgt	r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	e7de      	b.n	8003e46 <_printf_float+0x192>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	055a      	lsls	r2, r3, #21
 8003e8c:	d407      	bmi.n	8003e9e <_printf_float+0x1ea>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	4642      	mov	r2, r8
 8003e92:	4631      	mov	r1, r6
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b8      	blx	r7
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d12b      	bne.n	8003ef4 <_printf_float+0x240>
 8003e9c:	e767      	b.n	8003d6e <_printf_float+0xba>
 8003e9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ea2:	f240 80dc 	bls.w	800405e <_printf_float+0x3aa>
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003eae:	f7fc fddf 	bl	8000a70 <__aeabi_dcmpeq>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d033      	beq.n	8003f1e <_printf_float+0x26a>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <_printf_float+0x30c>)
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f af54 	beq.w	8003d6e <_printf_float+0xba>
 8003ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	db02      	blt.n	8003ed4 <_printf_float+0x220>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	07d8      	lsls	r0, r3, #31
 8003ed2:	d50f      	bpl.n	8003ef4 <_printf_float+0x240>
 8003ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ed8:	4631      	mov	r1, r6
 8003eda:	4628      	mov	r0, r5
 8003edc:	47b8      	blx	r7
 8003ede:	3001      	adds	r0, #1
 8003ee0:	f43f af45 	beq.w	8003d6e <_printf_float+0xba>
 8003ee4:	f04f 0800 	mov.w	r8, #0
 8003ee8:	f104 091a 	add.w	r9, r4, #26
 8003eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	4543      	cmp	r3, r8
 8003ef2:	dc09      	bgt.n	8003f08 <_printf_float+0x254>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	079b      	lsls	r3, r3, #30
 8003ef8:	f100 8103 	bmi.w	8004102 <_printf_float+0x44e>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e734      	b.n	8003d72 <_printf_float+0xbe>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	464a      	mov	r2, r9
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4628      	mov	r0, r5
 8003f10:	47b8      	blx	r7
 8003f12:	3001      	adds	r0, #1
 8003f14:	f43f af2b 	beq.w	8003d6e <_printf_float+0xba>
 8003f18:	f108 0801 	add.w	r8, r8, #1
 8003f1c:	e7e6      	b.n	8003eec <_printf_float+0x238>
 8003f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	dc2b      	bgt.n	8003f7c <_printf_float+0x2c8>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <_printf_float+0x30c>)
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f af1d 	beq.w	8003d6e <_printf_float+0xba>
 8003f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f36:	b923      	cbnz	r3, 8003f42 <_printf_float+0x28e>
 8003f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f3a:	b913      	cbnz	r3, 8003f42 <_printf_float+0x28e>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	07d9      	lsls	r1, r3, #31
 8003f40:	d5d8      	bpl.n	8003ef4 <_printf_float+0x240>
 8003f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f43f af0e 	beq.w	8003d6e <_printf_float+0xba>
 8003f52:	f04f 0900 	mov.w	r9, #0
 8003f56:	f104 0a1a 	add.w	sl, r4, #26
 8003f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	454b      	cmp	r3, r9
 8003f60:	dc01      	bgt.n	8003f66 <_printf_float+0x2b2>
 8003f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f64:	e794      	b.n	8003e90 <_printf_float+0x1dc>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4652      	mov	r2, sl
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f aefc 	beq.w	8003d6e <_printf_float+0xba>
 8003f76:	f109 0901 	add.w	r9, r9, #1
 8003f7a:	e7ee      	b.n	8003f5a <_printf_float+0x2a6>
 8003f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bfa8      	it	ge
 8003f84:	461a      	movge	r2, r3
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	4691      	mov	r9, r2
 8003f8a:	dd07      	ble.n	8003f9c <_printf_float+0x2e8>
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4642      	mov	r2, r8
 8003f92:	4628      	mov	r0, r5
 8003f94:	47b8      	blx	r7
 8003f96:	3001      	adds	r0, #1
 8003f98:	f43f aee9 	beq.w	8003d6e <_printf_float+0xba>
 8003f9c:	f104 031a 	add.w	r3, r4, #26
 8003fa0:	f04f 0b00 	mov.w	fp, #0
 8003fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	e015      	b.n	8003fd8 <_printf_float+0x324>
 8003fac:	7fefffff 	.word	0x7fefffff
 8003fb0:	080055f4 	.word	0x080055f4
 8003fb4:	080055f0 	.word	0x080055f0
 8003fb8:	080055fc 	.word	0x080055fc
 8003fbc:	080055f8 	.word	0x080055f8
 8003fc0:	08005600 	.word	0x08005600
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9a06      	ldr	r2, [sp, #24]
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4628      	mov	r0, r5
 8003fcc:	47b8      	blx	r7
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f43f aecd 	beq.w	8003d6e <_printf_float+0xba>
 8003fd4:	f10b 0b01 	add.w	fp, fp, #1
 8003fd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003fdc:	ebaa 0309 	sub.w	r3, sl, r9
 8003fe0:	455b      	cmp	r3, fp
 8003fe2:	dcef      	bgt.n	8003fc4 <_printf_float+0x310>
 8003fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	44d0      	add	r8, sl
 8003fec:	db15      	blt.n	800401a <_printf_float+0x366>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	07da      	lsls	r2, r3, #31
 8003ff2:	d412      	bmi.n	800401a <_printf_float+0x366>
 8003ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ff8:	eba3 020a 	sub.w	r2, r3, sl
 8003ffc:	eba3 0a01 	sub.w	sl, r3, r1
 8004000:	4592      	cmp	sl, r2
 8004002:	bfa8      	it	ge
 8004004:	4692      	movge	sl, r2
 8004006:	f1ba 0f00 	cmp.w	sl, #0
 800400a:	dc0e      	bgt.n	800402a <_printf_float+0x376>
 800400c:	f04f 0800 	mov.w	r8, #0
 8004010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004014:	f104 091a 	add.w	r9, r4, #26
 8004018:	e019      	b.n	800404e <_printf_float+0x39a>
 800401a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d1e5      	bne.n	8003ff4 <_printf_float+0x340>
 8004028:	e6a1      	b.n	8003d6e <_printf_float+0xba>
 800402a:	4653      	mov	r3, sl
 800402c:	4642      	mov	r2, r8
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	d1e9      	bne.n	800400c <_printf_float+0x358>
 8004038:	e699      	b.n	8003d6e <_printf_float+0xba>
 800403a:	2301      	movs	r3, #1
 800403c:	464a      	mov	r2, r9
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	f43f ae92 	beq.w	8003d6e <_printf_float+0xba>
 800404a:	f108 0801 	add.w	r8, r8, #1
 800404e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	eba3 030a 	sub.w	r3, r3, sl
 8004058:	4543      	cmp	r3, r8
 800405a:	dcee      	bgt.n	800403a <_printf_float+0x386>
 800405c:	e74a      	b.n	8003ef4 <_printf_float+0x240>
 800405e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004060:	2a01      	cmp	r2, #1
 8004062:	dc01      	bgt.n	8004068 <_printf_float+0x3b4>
 8004064:	07db      	lsls	r3, r3, #31
 8004066:	d53a      	bpl.n	80040de <_printf_float+0x42a>
 8004068:	2301      	movs	r3, #1
 800406a:	4642      	mov	r2, r8
 800406c:	4631      	mov	r1, r6
 800406e:	4628      	mov	r0, r5
 8004070:	47b8      	blx	r7
 8004072:	3001      	adds	r0, #1
 8004074:	f43f ae7b 	beq.w	8003d6e <_printf_float+0xba>
 8004078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407c:	4631      	mov	r1, r6
 800407e:	4628      	mov	r0, r5
 8004080:	47b8      	blx	r7
 8004082:	3001      	adds	r0, #1
 8004084:	f108 0801 	add.w	r8, r8, #1
 8004088:	f43f ae71 	beq.w	8003d6e <_printf_float+0xba>
 800408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408e:	2200      	movs	r2, #0
 8004090:	f103 3aff 	add.w	sl, r3, #4294967295
 8004094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004098:	2300      	movs	r3, #0
 800409a:	f7fc fce9 	bl	8000a70 <__aeabi_dcmpeq>
 800409e:	b9c8      	cbnz	r0, 80040d4 <_printf_float+0x420>
 80040a0:	4653      	mov	r3, sl
 80040a2:	4642      	mov	r2, r8
 80040a4:	4631      	mov	r1, r6
 80040a6:	4628      	mov	r0, r5
 80040a8:	47b8      	blx	r7
 80040aa:	3001      	adds	r0, #1
 80040ac:	d10e      	bne.n	80040cc <_printf_float+0x418>
 80040ae:	e65e      	b.n	8003d6e <_printf_float+0xba>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4652      	mov	r2, sl
 80040b4:	4631      	mov	r1, r6
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b8      	blx	r7
 80040ba:	3001      	adds	r0, #1
 80040bc:	f43f ae57 	beq.w	8003d6e <_printf_float+0xba>
 80040c0:	f108 0801 	add.w	r8, r8, #1
 80040c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	4543      	cmp	r3, r8
 80040ca:	dcf1      	bgt.n	80040b0 <_printf_float+0x3fc>
 80040cc:	464b      	mov	r3, r9
 80040ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040d2:	e6de      	b.n	8003e92 <_printf_float+0x1de>
 80040d4:	f04f 0800 	mov.w	r8, #0
 80040d8:	f104 0a1a 	add.w	sl, r4, #26
 80040dc:	e7f2      	b.n	80040c4 <_printf_float+0x410>
 80040de:	2301      	movs	r3, #1
 80040e0:	e7df      	b.n	80040a2 <_printf_float+0x3ee>
 80040e2:	2301      	movs	r3, #1
 80040e4:	464a      	mov	r2, r9
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae3e 	beq.w	8003d6e <_printf_float+0xba>
 80040f2:	f108 0801 	add.w	r8, r8, #1
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	4543      	cmp	r3, r8
 80040fe:	dcf0      	bgt.n	80040e2 <_printf_float+0x42e>
 8004100:	e6fc      	b.n	8003efc <_printf_float+0x248>
 8004102:	f04f 0800 	mov.w	r8, #0
 8004106:	f104 0919 	add.w	r9, r4, #25
 800410a:	e7f4      	b.n	80040f6 <_printf_float+0x442>
 800410c:	2900      	cmp	r1, #0
 800410e:	f43f ae8b 	beq.w	8003e28 <_printf_float+0x174>
 8004112:	2300      	movs	r3, #0
 8004114:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004118:	ab09      	add	r3, sp, #36	; 0x24
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	ec49 8b10 	vmov	d0, r8, r9
 8004120:	6022      	str	r2, [r4, #0]
 8004122:	f8cd a004 	str.w	sl, [sp, #4]
 8004126:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800412a:	4628      	mov	r0, r5
 800412c:	f7ff fd2d 	bl	8003b8a <__cvt>
 8004130:	4680      	mov	r8, r0
 8004132:	e648      	b.n	8003dc6 <_printf_float+0x112>

08004134 <_printf_common>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4691      	mov	r9, r2
 800413a:	461f      	mov	r7, r3
 800413c:	688a      	ldr	r2, [r1, #8]
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004144:	4293      	cmp	r3, r2
 8004146:	bfb8      	it	lt
 8004148:	4613      	movlt	r3, r2
 800414a:	f8c9 3000 	str.w	r3, [r9]
 800414e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004152:	4606      	mov	r6, r0
 8004154:	460c      	mov	r4, r1
 8004156:	b112      	cbz	r2, 800415e <_printf_common+0x2a>
 8004158:	3301      	adds	r3, #1
 800415a:	f8c9 3000 	str.w	r3, [r9]
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	0699      	lsls	r1, r3, #26
 8004162:	bf42      	ittt	mi
 8004164:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004168:	3302      	addmi	r3, #2
 800416a:	f8c9 3000 	strmi.w	r3, [r9]
 800416e:	6825      	ldr	r5, [r4, #0]
 8004170:	f015 0506 	ands.w	r5, r5, #6
 8004174:	d107      	bne.n	8004186 <_printf_common+0x52>
 8004176:	f104 0a19 	add.w	sl, r4, #25
 800417a:	68e3      	ldr	r3, [r4, #12]
 800417c:	f8d9 2000 	ldr.w	r2, [r9]
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	42ab      	cmp	r3, r5
 8004184:	dc28      	bgt.n	80041d8 <_printf_common+0xa4>
 8004186:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	3300      	adds	r3, #0
 800418e:	bf18      	it	ne
 8004190:	2301      	movne	r3, #1
 8004192:	0692      	lsls	r2, r2, #26
 8004194:	d42d      	bmi.n	80041f2 <_printf_common+0xbe>
 8004196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800419a:	4639      	mov	r1, r7
 800419c:	4630      	mov	r0, r6
 800419e:	47c0      	blx	r8
 80041a0:	3001      	adds	r0, #1
 80041a2:	d020      	beq.n	80041e6 <_printf_common+0xb2>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	68e5      	ldr	r5, [r4, #12]
 80041a8:	f8d9 2000 	ldr.w	r2, [r9]
 80041ac:	f003 0306 	and.w	r3, r3, #6
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	bf08      	it	eq
 80041b4:	1aad      	subeq	r5, r5, r2
 80041b6:	68a3      	ldr	r3, [r4, #8]
 80041b8:	6922      	ldr	r2, [r4, #16]
 80041ba:	bf0c      	ite	eq
 80041bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041c0:	2500      	movne	r5, #0
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bfc4      	itt	gt
 80041c6:	1a9b      	subgt	r3, r3, r2
 80041c8:	18ed      	addgt	r5, r5, r3
 80041ca:	f04f 0900 	mov.w	r9, #0
 80041ce:	341a      	adds	r4, #26
 80041d0:	454d      	cmp	r5, r9
 80041d2:	d11a      	bne.n	800420a <_printf_common+0xd6>
 80041d4:	2000      	movs	r0, #0
 80041d6:	e008      	b.n	80041ea <_printf_common+0xb6>
 80041d8:	2301      	movs	r3, #1
 80041da:	4652      	mov	r2, sl
 80041dc:	4639      	mov	r1, r7
 80041de:	4630      	mov	r0, r6
 80041e0:	47c0      	blx	r8
 80041e2:	3001      	adds	r0, #1
 80041e4:	d103      	bne.n	80041ee <_printf_common+0xba>
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ee:	3501      	adds	r5, #1
 80041f0:	e7c3      	b.n	800417a <_printf_common+0x46>
 80041f2:	18e1      	adds	r1, r4, r3
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	2030      	movs	r0, #48	; 0x30
 80041f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041fc:	4422      	add	r2, r4
 80041fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004202:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004206:	3302      	adds	r3, #2
 8004208:	e7c5      	b.n	8004196 <_printf_common+0x62>
 800420a:	2301      	movs	r3, #1
 800420c:	4622      	mov	r2, r4
 800420e:	4639      	mov	r1, r7
 8004210:	4630      	mov	r0, r6
 8004212:	47c0      	blx	r8
 8004214:	3001      	adds	r0, #1
 8004216:	d0e6      	beq.n	80041e6 <_printf_common+0xb2>
 8004218:	f109 0901 	add.w	r9, r9, #1
 800421c:	e7d8      	b.n	80041d0 <_printf_common+0x9c>

0800421e <quorem>:
 800421e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004222:	6903      	ldr	r3, [r0, #16]
 8004224:	690c      	ldr	r4, [r1, #16]
 8004226:	42a3      	cmp	r3, r4
 8004228:	4680      	mov	r8, r0
 800422a:	f2c0 8082 	blt.w	8004332 <quorem+0x114>
 800422e:	3c01      	subs	r4, #1
 8004230:	f101 0714 	add.w	r7, r1, #20
 8004234:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004238:	f100 0614 	add.w	r6, r0, #20
 800423c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004240:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004244:	eb06 030c 	add.w	r3, r6, ip
 8004248:	3501      	adds	r5, #1
 800424a:	eb07 090c 	add.w	r9, r7, ip
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	fbb0 f5f5 	udiv	r5, r0, r5
 8004254:	b395      	cbz	r5, 80042bc <quorem+0x9e>
 8004256:	f04f 0a00 	mov.w	sl, #0
 800425a:	4638      	mov	r0, r7
 800425c:	46b6      	mov	lr, r6
 800425e:	46d3      	mov	fp, sl
 8004260:	f850 2b04 	ldr.w	r2, [r0], #4
 8004264:	b293      	uxth	r3, r2
 8004266:	fb05 a303 	mla	r3, r5, r3, sl
 800426a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800426e:	b29b      	uxth	r3, r3
 8004270:	ebab 0303 	sub.w	r3, fp, r3
 8004274:	0c12      	lsrs	r2, r2, #16
 8004276:	f8de b000 	ldr.w	fp, [lr]
 800427a:	fb05 a202 	mla	r2, r5, r2, sl
 800427e:	fa13 f38b 	uxtah	r3, r3, fp
 8004282:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004286:	fa1f fb82 	uxth.w	fp, r2
 800428a:	f8de 2000 	ldr.w	r2, [lr]
 800428e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004292:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004296:	b29b      	uxth	r3, r3
 8004298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800429c:	4581      	cmp	r9, r0
 800429e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80042a2:	f84e 3b04 	str.w	r3, [lr], #4
 80042a6:	d2db      	bcs.n	8004260 <quorem+0x42>
 80042a8:	f856 300c 	ldr.w	r3, [r6, ip]
 80042ac:	b933      	cbnz	r3, 80042bc <quorem+0x9e>
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	3b04      	subs	r3, #4
 80042b2:	429e      	cmp	r6, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	d330      	bcc.n	800431a <quorem+0xfc>
 80042b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80042bc:	4640      	mov	r0, r8
 80042be:	f001 f81f 	bl	8005300 <__mcmp>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	db25      	blt.n	8004312 <quorem+0xf4>
 80042c6:	3501      	adds	r5, #1
 80042c8:	4630      	mov	r0, r6
 80042ca:	f04f 0c00 	mov.w	ip, #0
 80042ce:	f857 2b04 	ldr.w	r2, [r7], #4
 80042d2:	f8d0 e000 	ldr.w	lr, [r0]
 80042d6:	b293      	uxth	r3, r2
 80042d8:	ebac 0303 	sub.w	r3, ip, r3
 80042dc:	0c12      	lsrs	r2, r2, #16
 80042de:	fa13 f38e 	uxtah	r3, r3, lr
 80042e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80042e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042f0:	45b9      	cmp	r9, r7
 80042f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80042f6:	f840 3b04 	str.w	r3, [r0], #4
 80042fa:	d2e8      	bcs.n	80042ce <quorem+0xb0>
 80042fc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004300:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004304:	b92a      	cbnz	r2, 8004312 <quorem+0xf4>
 8004306:	3b04      	subs	r3, #4
 8004308:	429e      	cmp	r6, r3
 800430a:	461a      	mov	r2, r3
 800430c:	d30b      	bcc.n	8004326 <quorem+0x108>
 800430e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004312:	4628      	mov	r0, r5
 8004314:	b003      	add	sp, #12
 8004316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	3b04      	subs	r3, #4
 800431e:	2a00      	cmp	r2, #0
 8004320:	d1ca      	bne.n	80042b8 <quorem+0x9a>
 8004322:	3c01      	subs	r4, #1
 8004324:	e7c5      	b.n	80042b2 <quorem+0x94>
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	3b04      	subs	r3, #4
 800432a:	2a00      	cmp	r2, #0
 800432c:	d1ef      	bne.n	800430e <quorem+0xf0>
 800432e:	3c01      	subs	r4, #1
 8004330:	e7ea      	b.n	8004308 <quorem+0xea>
 8004332:	2000      	movs	r0, #0
 8004334:	e7ee      	b.n	8004314 <quorem+0xf6>
	...

08004338 <_dtoa_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	ec57 6b10 	vmov	r6, r7, d0
 8004340:	b097      	sub	sp, #92	; 0x5c
 8004342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004344:	9106      	str	r1, [sp, #24]
 8004346:	4604      	mov	r4, r0
 8004348:	920b      	str	r2, [sp, #44]	; 0x2c
 800434a:	9312      	str	r3, [sp, #72]	; 0x48
 800434c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004350:	e9cd 6700 	strd	r6, r7, [sp]
 8004354:	b93d      	cbnz	r5, 8004366 <_dtoa_r+0x2e>
 8004356:	2010      	movs	r0, #16
 8004358:	f000 fdb4 	bl	8004ec4 <malloc>
 800435c:	6260      	str	r0, [r4, #36]	; 0x24
 800435e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004362:	6005      	str	r5, [r0, #0]
 8004364:	60c5      	str	r5, [r0, #12]
 8004366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	b151      	cbz	r1, 8004382 <_dtoa_r+0x4a>
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	604a      	str	r2, [r1, #4]
 8004370:	2301      	movs	r3, #1
 8004372:	4093      	lsls	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
 8004376:	4620      	mov	r0, r4
 8004378:	f000 fde0 	bl	8004f3c <_Bfree>
 800437c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	1e3b      	subs	r3, r7, #0
 8004384:	bfbb      	ittet	lt
 8004386:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800438a:	9301      	strlt	r3, [sp, #4]
 800438c:	2300      	movge	r3, #0
 800438e:	2201      	movlt	r2, #1
 8004390:	bfac      	ite	ge
 8004392:	f8c8 3000 	strge.w	r3, [r8]
 8004396:	f8c8 2000 	strlt.w	r2, [r8]
 800439a:	4baf      	ldr	r3, [pc, #700]	; (8004658 <_dtoa_r+0x320>)
 800439c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80043a0:	ea33 0308 	bics.w	r3, r3, r8
 80043a4:	d114      	bne.n	80043d0 <_dtoa_r+0x98>
 80043a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	9b00      	ldr	r3, [sp, #0]
 80043b0:	b923      	cbnz	r3, 80043bc <_dtoa_r+0x84>
 80043b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f000 8542 	beq.w	8004e40 <_dtoa_r+0xb08>
 80043bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800466c <_dtoa_r+0x334>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8544 	beq.w	8004e50 <_dtoa_r+0xb18>
 80043c8:	f10b 0303 	add.w	r3, fp, #3
 80043cc:	f000 bd3e 	b.w	8004e4c <_dtoa_r+0xb14>
 80043d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2300      	movs	r3, #0
 80043d8:	4630      	mov	r0, r6
 80043da:	4639      	mov	r1, r7
 80043dc:	f7fc fb48 	bl	8000a70 <__aeabi_dcmpeq>
 80043e0:	4681      	mov	r9, r0
 80043e2:	b168      	cbz	r0, 8004400 <_dtoa_r+0xc8>
 80043e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043e6:	2301      	movs	r3, #1
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8524 	beq.w	8004e3a <_dtoa_r+0xb02>
 80043f2:	4b9a      	ldr	r3, [pc, #616]	; (800465c <_dtoa_r+0x324>)
 80043f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80043f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	f000 bd28 	b.w	8004e50 <_dtoa_r+0xb18>
 8004400:	aa14      	add	r2, sp, #80	; 0x50
 8004402:	a915      	add	r1, sp, #84	; 0x54
 8004404:	ec47 6b10 	vmov	d0, r6, r7
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fff0 	bl	80053ee <__d2b>
 800440e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004412:	9004      	str	r0, [sp, #16]
 8004414:	2d00      	cmp	r5, #0
 8004416:	d07c      	beq.n	8004512 <_dtoa_r+0x1da>
 8004418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800441c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004420:	46b2      	mov	sl, r6
 8004422:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800442a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800442e:	2200      	movs	r2, #0
 8004430:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <_dtoa_r+0x328>)
 8004432:	4650      	mov	r0, sl
 8004434:	4659      	mov	r1, fp
 8004436:	f7fb fefb 	bl	8000230 <__aeabi_dsub>
 800443a:	a381      	add	r3, pc, #516	; (adr r3, 8004640 <_dtoa_r+0x308>)
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f7fc f8ae 	bl	80005a0 <__aeabi_dmul>
 8004444:	a380      	add	r3, pc, #512	; (adr r3, 8004648 <_dtoa_r+0x310>)
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f7fb fef3 	bl	8000234 <__adddf3>
 800444e:	4606      	mov	r6, r0
 8004450:	4628      	mov	r0, r5
 8004452:	460f      	mov	r7, r1
 8004454:	f7fc f83a 	bl	80004cc <__aeabi_i2d>
 8004458:	a37d      	add	r3, pc, #500	; (adr r3, 8004650 <_dtoa_r+0x318>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f89f 	bl	80005a0 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4630      	mov	r0, r6
 8004468:	4639      	mov	r1, r7
 800446a:	f7fb fee3 	bl	8000234 <__adddf3>
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	f7fc fb45 	bl	8000b00 <__aeabi_d2iz>
 8004476:	2200      	movs	r2, #0
 8004478:	4682      	mov	sl, r0
 800447a:	2300      	movs	r3, #0
 800447c:	4630      	mov	r0, r6
 800447e:	4639      	mov	r1, r7
 8004480:	f7fc fb00 	bl	8000a84 <__aeabi_dcmplt>
 8004484:	b148      	cbz	r0, 800449a <_dtoa_r+0x162>
 8004486:	4650      	mov	r0, sl
 8004488:	f7fc f820 	bl	80004cc <__aeabi_i2d>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	f7fc faee 	bl	8000a70 <__aeabi_dcmpeq>
 8004494:	b908      	cbnz	r0, 800449a <_dtoa_r+0x162>
 8004496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800449a:	f1ba 0f16 	cmp.w	sl, #22
 800449e:	d859      	bhi.n	8004554 <_dtoa_r+0x21c>
 80044a0:	4970      	ldr	r1, [pc, #448]	; (8004664 <_dtoa_r+0x32c>)
 80044a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80044a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ae:	f7fc fb07 	bl	8000ac0 <__aeabi_dcmpgt>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d050      	beq.n	8004558 <_dtoa_r+0x220>
 80044b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ba:	2300      	movs	r3, #0
 80044bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80044be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044c0:	1b5d      	subs	r5, r3, r5
 80044c2:	f1b5 0801 	subs.w	r8, r5, #1
 80044c6:	bf49      	itett	mi
 80044c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80044cc:	2300      	movpl	r3, #0
 80044ce:	9305      	strmi	r3, [sp, #20]
 80044d0:	f04f 0800 	movmi.w	r8, #0
 80044d4:	bf58      	it	pl
 80044d6:	9305      	strpl	r3, [sp, #20]
 80044d8:	f1ba 0f00 	cmp.w	sl, #0
 80044dc:	db3e      	blt.n	800455c <_dtoa_r+0x224>
 80044de:	2300      	movs	r3, #0
 80044e0:	44d0      	add	r8, sl
 80044e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80044e6:	9307      	str	r3, [sp, #28]
 80044e8:	9b06      	ldr	r3, [sp, #24]
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	f200 8090 	bhi.w	8004610 <_dtoa_r+0x2d8>
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	bfc4      	itt	gt
 80044f4:	3b04      	subgt	r3, #4
 80044f6:	9306      	strgt	r3, [sp, #24]
 80044f8:	9b06      	ldr	r3, [sp, #24]
 80044fa:	f1a3 0302 	sub.w	r3, r3, #2
 80044fe:	bfcc      	ite	gt
 8004500:	2500      	movgt	r5, #0
 8004502:	2501      	movle	r5, #1
 8004504:	2b03      	cmp	r3, #3
 8004506:	f200 808f 	bhi.w	8004628 <_dtoa_r+0x2f0>
 800450a:	e8df f003 	tbb	[pc, r3]
 800450e:	7f7d      	.short	0x7f7d
 8004510:	7131      	.short	0x7131
 8004512:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004516:	441d      	add	r5, r3
 8004518:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800451c:	2820      	cmp	r0, #32
 800451e:	dd13      	ble.n	8004548 <_dtoa_r+0x210>
 8004520:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004524:	9b00      	ldr	r3, [sp, #0]
 8004526:	fa08 f800 	lsl.w	r8, r8, r0
 800452a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800452e:	fa23 f000 	lsr.w	r0, r3, r0
 8004532:	ea48 0000 	orr.w	r0, r8, r0
 8004536:	f7fb ffb9 	bl	80004ac <__aeabi_ui2d>
 800453a:	2301      	movs	r3, #1
 800453c:	4682      	mov	sl, r0
 800453e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004542:	3d01      	subs	r5, #1
 8004544:	9313      	str	r3, [sp, #76]	; 0x4c
 8004546:	e772      	b.n	800442e <_dtoa_r+0xf6>
 8004548:	9b00      	ldr	r3, [sp, #0]
 800454a:	f1c0 0020 	rsb	r0, r0, #32
 800454e:	fa03 f000 	lsl.w	r0, r3, r0
 8004552:	e7f0      	b.n	8004536 <_dtoa_r+0x1fe>
 8004554:	2301      	movs	r3, #1
 8004556:	e7b1      	b.n	80044bc <_dtoa_r+0x184>
 8004558:	900f      	str	r0, [sp, #60]	; 0x3c
 800455a:	e7b0      	b.n	80044be <_dtoa_r+0x186>
 800455c:	9b05      	ldr	r3, [sp, #20]
 800455e:	eba3 030a 	sub.w	r3, r3, sl
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	f1ca 0300 	rsb	r3, sl, #0
 8004568:	9307      	str	r3, [sp, #28]
 800456a:	2300      	movs	r3, #0
 800456c:	930e      	str	r3, [sp, #56]	; 0x38
 800456e:	e7bb      	b.n	80044e8 <_dtoa_r+0x1b0>
 8004570:	2301      	movs	r3, #1
 8004572:	930a      	str	r3, [sp, #40]	; 0x28
 8004574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004576:	2b00      	cmp	r3, #0
 8004578:	dd59      	ble.n	800462e <_dtoa_r+0x2f6>
 800457a:	9302      	str	r3, [sp, #8]
 800457c:	4699      	mov	r9, r3
 800457e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004580:	2200      	movs	r2, #0
 8004582:	6072      	str	r2, [r6, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	f102 0014 	add.w	r0, r2, #20
 800458a:	4298      	cmp	r0, r3
 800458c:	6871      	ldr	r1, [r6, #4]
 800458e:	d953      	bls.n	8004638 <_dtoa_r+0x300>
 8004590:	4620      	mov	r0, r4
 8004592:	f000 fc9f 	bl	8004ed4 <_Balloc>
 8004596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004598:	6030      	str	r0, [r6, #0]
 800459a:	f1b9 0f0e 	cmp.w	r9, #14
 800459e:	f8d3 b000 	ldr.w	fp, [r3]
 80045a2:	f200 80e6 	bhi.w	8004772 <_dtoa_r+0x43a>
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	f000 80e3 	beq.w	8004772 <_dtoa_r+0x43a>
 80045ac:	ed9d 7b00 	vldr	d7, [sp]
 80045b0:	f1ba 0f00 	cmp.w	sl, #0
 80045b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80045b8:	dd74      	ble.n	80046a4 <_dtoa_r+0x36c>
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <_dtoa_r+0x32c>)
 80045bc:	f00a 030f 	and.w	r3, sl, #15
 80045c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045c4:	ed93 7b00 	vldr	d7, [r3]
 80045c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80045cc:	06f0      	lsls	r0, r6, #27
 80045ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80045d2:	d565      	bpl.n	80046a0 <_dtoa_r+0x368>
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <_dtoa_r+0x330>)
 80045d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045de:	f7fc f909 	bl	80007f4 <__aeabi_ddiv>
 80045e2:	e9cd 0100 	strd	r0, r1, [sp]
 80045e6:	f006 060f 	and.w	r6, r6, #15
 80045ea:	2503      	movs	r5, #3
 80045ec:	4f1e      	ldr	r7, [pc, #120]	; (8004668 <_dtoa_r+0x330>)
 80045ee:	e04c      	b.n	800468a <_dtoa_r+0x352>
 80045f0:	2301      	movs	r3, #1
 80045f2:	930a      	str	r3, [sp, #40]	; 0x28
 80045f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f6:	4453      	add	r3, sl
 80045f8:	f103 0901 	add.w	r9, r3, #1
 80045fc:	9302      	str	r3, [sp, #8]
 80045fe:	464b      	mov	r3, r9
 8004600:	2b01      	cmp	r3, #1
 8004602:	bfb8      	it	lt
 8004604:	2301      	movlt	r3, #1
 8004606:	e7ba      	b.n	800457e <_dtoa_r+0x246>
 8004608:	2300      	movs	r3, #0
 800460a:	e7b2      	b.n	8004572 <_dtoa_r+0x23a>
 800460c:	2300      	movs	r3, #0
 800460e:	e7f0      	b.n	80045f2 <_dtoa_r+0x2ba>
 8004610:	2501      	movs	r5, #1
 8004612:	2300      	movs	r3, #0
 8004614:	9306      	str	r3, [sp, #24]
 8004616:	950a      	str	r5, [sp, #40]	; 0x28
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	4699      	mov	r9, r3
 8004620:	2200      	movs	r2, #0
 8004622:	2312      	movs	r3, #18
 8004624:	920b      	str	r2, [sp, #44]	; 0x2c
 8004626:	e7aa      	b.n	800457e <_dtoa_r+0x246>
 8004628:	2301      	movs	r3, #1
 800462a:	930a      	str	r3, [sp, #40]	; 0x28
 800462c:	e7f4      	b.n	8004618 <_dtoa_r+0x2e0>
 800462e:	2301      	movs	r3, #1
 8004630:	9302      	str	r3, [sp, #8]
 8004632:	4699      	mov	r9, r3
 8004634:	461a      	mov	r2, r3
 8004636:	e7f5      	b.n	8004624 <_dtoa_r+0x2ec>
 8004638:	3101      	adds	r1, #1
 800463a:	6071      	str	r1, [r6, #4]
 800463c:	0052      	lsls	r2, r2, #1
 800463e:	e7a2      	b.n	8004586 <_dtoa_r+0x24e>
 8004640:	636f4361 	.word	0x636f4361
 8004644:	3fd287a7 	.word	0x3fd287a7
 8004648:	8b60c8b3 	.word	0x8b60c8b3
 800464c:	3fc68a28 	.word	0x3fc68a28
 8004650:	509f79fb 	.word	0x509f79fb
 8004654:	3fd34413 	.word	0x3fd34413
 8004658:	7ff00000 	.word	0x7ff00000
 800465c:	08005601 	.word	0x08005601
 8004660:	3ff80000 	.word	0x3ff80000
 8004664:	08005638 	.word	0x08005638
 8004668:	08005610 	.word	0x08005610
 800466c:	0800560b 	.word	0x0800560b
 8004670:	07f1      	lsls	r1, r6, #31
 8004672:	d508      	bpl.n	8004686 <_dtoa_r+0x34e>
 8004674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	f7fb ff90 	bl	80005a0 <__aeabi_dmul>
 8004680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004684:	3501      	adds	r5, #1
 8004686:	1076      	asrs	r6, r6, #1
 8004688:	3708      	adds	r7, #8
 800468a:	2e00      	cmp	r6, #0
 800468c:	d1f0      	bne.n	8004670 <_dtoa_r+0x338>
 800468e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004696:	f7fc f8ad 	bl	80007f4 <__aeabi_ddiv>
 800469a:	e9cd 0100 	strd	r0, r1, [sp]
 800469e:	e01a      	b.n	80046d6 <_dtoa_r+0x39e>
 80046a0:	2502      	movs	r5, #2
 80046a2:	e7a3      	b.n	80045ec <_dtoa_r+0x2b4>
 80046a4:	f000 80a0 	beq.w	80047e8 <_dtoa_r+0x4b0>
 80046a8:	f1ca 0600 	rsb	r6, sl, #0
 80046ac:	4b9f      	ldr	r3, [pc, #636]	; (800492c <_dtoa_r+0x5f4>)
 80046ae:	4fa0      	ldr	r7, [pc, #640]	; (8004930 <_dtoa_r+0x5f8>)
 80046b0:	f006 020f 	and.w	r2, r6, #15
 80046b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046c0:	f7fb ff6e 	bl	80005a0 <__aeabi_dmul>
 80046c4:	e9cd 0100 	strd	r0, r1, [sp]
 80046c8:	1136      	asrs	r6, r6, #4
 80046ca:	2300      	movs	r3, #0
 80046cc:	2502      	movs	r5, #2
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d17f      	bne.n	80047d2 <_dtoa_r+0x49a>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e1      	bne.n	800469a <_dtoa_r+0x362>
 80046d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8087 	beq.w	80047ec <_dtoa_r+0x4b4>
 80046de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80046e2:	2200      	movs	r2, #0
 80046e4:	4b93      	ldr	r3, [pc, #588]	; (8004934 <_dtoa_r+0x5fc>)
 80046e6:	4630      	mov	r0, r6
 80046e8:	4639      	mov	r1, r7
 80046ea:	f7fc f9cb 	bl	8000a84 <__aeabi_dcmplt>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d07c      	beq.n	80047ec <_dtoa_r+0x4b4>
 80046f2:	f1b9 0f00 	cmp.w	r9, #0
 80046f6:	d079      	beq.n	80047ec <_dtoa_r+0x4b4>
 80046f8:	9b02      	ldr	r3, [sp, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	dd35      	ble.n	800476a <_dtoa_r+0x432>
 80046fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004702:	9308      	str	r3, [sp, #32]
 8004704:	4639      	mov	r1, r7
 8004706:	2200      	movs	r2, #0
 8004708:	4b8b      	ldr	r3, [pc, #556]	; (8004938 <_dtoa_r+0x600>)
 800470a:	4630      	mov	r0, r6
 800470c:	f7fb ff48 	bl	80005a0 <__aeabi_dmul>
 8004710:	e9cd 0100 	strd	r0, r1, [sp]
 8004714:	9f02      	ldr	r7, [sp, #8]
 8004716:	3501      	adds	r5, #1
 8004718:	4628      	mov	r0, r5
 800471a:	f7fb fed7 	bl	80004cc <__aeabi_i2d>
 800471e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004722:	f7fb ff3d 	bl	80005a0 <__aeabi_dmul>
 8004726:	2200      	movs	r2, #0
 8004728:	4b84      	ldr	r3, [pc, #528]	; (800493c <_dtoa_r+0x604>)
 800472a:	f7fb fd83 	bl	8000234 <__adddf3>
 800472e:	4605      	mov	r5, r0
 8004730:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004734:	2f00      	cmp	r7, #0
 8004736:	d15d      	bne.n	80047f4 <_dtoa_r+0x4bc>
 8004738:	2200      	movs	r2, #0
 800473a:	4b81      	ldr	r3, [pc, #516]	; (8004940 <_dtoa_r+0x608>)
 800473c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004740:	f7fb fd76 	bl	8000230 <__aeabi_dsub>
 8004744:	462a      	mov	r2, r5
 8004746:	4633      	mov	r3, r6
 8004748:	e9cd 0100 	strd	r0, r1, [sp]
 800474c:	f7fc f9b8 	bl	8000ac0 <__aeabi_dcmpgt>
 8004750:	2800      	cmp	r0, #0
 8004752:	f040 8288 	bne.w	8004c66 <_dtoa_r+0x92e>
 8004756:	462a      	mov	r2, r5
 8004758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800475c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004760:	f7fc f990 	bl	8000a84 <__aeabi_dcmplt>
 8004764:	2800      	cmp	r0, #0
 8004766:	f040 827c 	bne.w	8004c62 <_dtoa_r+0x92a>
 800476a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800476e:	e9cd 2300 	strd	r2, r3, [sp]
 8004772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004774:	2b00      	cmp	r3, #0
 8004776:	f2c0 8150 	blt.w	8004a1a <_dtoa_r+0x6e2>
 800477a:	f1ba 0f0e 	cmp.w	sl, #14
 800477e:	f300 814c 	bgt.w	8004a1a <_dtoa_r+0x6e2>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <_dtoa_r+0x5f4>)
 8004784:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004788:	ed93 7b00 	vldr	d7, [r3]
 800478c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800478e:	2b00      	cmp	r3, #0
 8004790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004794:	f280 80d8 	bge.w	8004948 <_dtoa_r+0x610>
 8004798:	f1b9 0f00 	cmp.w	r9, #0
 800479c:	f300 80d4 	bgt.w	8004948 <_dtoa_r+0x610>
 80047a0:	f040 825e 	bne.w	8004c60 <_dtoa_r+0x928>
 80047a4:	2200      	movs	r2, #0
 80047a6:	4b66      	ldr	r3, [pc, #408]	; (8004940 <_dtoa_r+0x608>)
 80047a8:	ec51 0b17 	vmov	r0, r1, d7
 80047ac:	f7fb fef8 	bl	80005a0 <__aeabi_dmul>
 80047b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047b4:	f7fc f97a 	bl	8000aac <__aeabi_dcmpge>
 80047b8:	464f      	mov	r7, r9
 80047ba:	464e      	mov	r6, r9
 80047bc:	2800      	cmp	r0, #0
 80047be:	f040 8234 	bne.w	8004c2a <_dtoa_r+0x8f2>
 80047c2:	2331      	movs	r3, #49	; 0x31
 80047c4:	f10b 0501 	add.w	r5, fp, #1
 80047c8:	f88b 3000 	strb.w	r3, [fp]
 80047cc:	f10a 0a01 	add.w	sl, sl, #1
 80047d0:	e22f      	b.n	8004c32 <_dtoa_r+0x8fa>
 80047d2:	07f2      	lsls	r2, r6, #31
 80047d4:	d505      	bpl.n	80047e2 <_dtoa_r+0x4aa>
 80047d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047da:	f7fb fee1 	bl	80005a0 <__aeabi_dmul>
 80047de:	3501      	adds	r5, #1
 80047e0:	2301      	movs	r3, #1
 80047e2:	1076      	asrs	r6, r6, #1
 80047e4:	3708      	adds	r7, #8
 80047e6:	e772      	b.n	80046ce <_dtoa_r+0x396>
 80047e8:	2502      	movs	r5, #2
 80047ea:	e774      	b.n	80046d6 <_dtoa_r+0x39e>
 80047ec:	f8cd a020 	str.w	sl, [sp, #32]
 80047f0:	464f      	mov	r7, r9
 80047f2:	e791      	b.n	8004718 <_dtoa_r+0x3e0>
 80047f4:	4b4d      	ldr	r3, [pc, #308]	; (800492c <_dtoa_r+0x5f4>)
 80047f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d047      	beq.n	8004894 <_dtoa_r+0x55c>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	2000      	movs	r0, #0
 800480a:	494e      	ldr	r1, [pc, #312]	; (8004944 <_dtoa_r+0x60c>)
 800480c:	f7fb fff2 	bl	80007f4 <__aeabi_ddiv>
 8004810:	462a      	mov	r2, r5
 8004812:	4633      	mov	r3, r6
 8004814:	f7fb fd0c 	bl	8000230 <__aeabi_dsub>
 8004818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800481c:	465d      	mov	r5, fp
 800481e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004822:	f7fc f96d 	bl	8000b00 <__aeabi_d2iz>
 8004826:	4606      	mov	r6, r0
 8004828:	f7fb fe50 	bl	80004cc <__aeabi_i2d>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004834:	f7fb fcfc 	bl	8000230 <__aeabi_dsub>
 8004838:	3630      	adds	r6, #48	; 0x30
 800483a:	f805 6b01 	strb.w	r6, [r5], #1
 800483e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004842:	e9cd 0100 	strd	r0, r1, [sp]
 8004846:	f7fc f91d 	bl	8000a84 <__aeabi_dcmplt>
 800484a:	2800      	cmp	r0, #0
 800484c:	d163      	bne.n	8004916 <_dtoa_r+0x5de>
 800484e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004852:	2000      	movs	r0, #0
 8004854:	4937      	ldr	r1, [pc, #220]	; (8004934 <_dtoa_r+0x5fc>)
 8004856:	f7fb fceb 	bl	8000230 <__aeabi_dsub>
 800485a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800485e:	f7fc f911 	bl	8000a84 <__aeabi_dcmplt>
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 80b7 	bne.w	80049d6 <_dtoa_r+0x69e>
 8004868:	eba5 030b 	sub.w	r3, r5, fp
 800486c:	429f      	cmp	r7, r3
 800486e:	f77f af7c 	ble.w	800476a <_dtoa_r+0x432>
 8004872:	2200      	movs	r2, #0
 8004874:	4b30      	ldr	r3, [pc, #192]	; (8004938 <_dtoa_r+0x600>)
 8004876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800487a:	f7fb fe91 	bl	80005a0 <__aeabi_dmul>
 800487e:	2200      	movs	r2, #0
 8004880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004884:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <_dtoa_r+0x600>)
 8004886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800488a:	f7fb fe89 	bl	80005a0 <__aeabi_dmul>
 800488e:	e9cd 0100 	strd	r0, r1, [sp]
 8004892:	e7c4      	b.n	800481e <_dtoa_r+0x4e6>
 8004894:	462a      	mov	r2, r5
 8004896:	4633      	mov	r3, r6
 8004898:	f7fb fe82 	bl	80005a0 <__aeabi_dmul>
 800489c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80048a0:	eb0b 0507 	add.w	r5, fp, r7
 80048a4:	465e      	mov	r6, fp
 80048a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048aa:	f7fc f929 	bl	8000b00 <__aeabi_d2iz>
 80048ae:	4607      	mov	r7, r0
 80048b0:	f7fb fe0c 	bl	80004cc <__aeabi_i2d>
 80048b4:	3730      	adds	r7, #48	; 0x30
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048be:	f7fb fcb7 	bl	8000230 <__aeabi_dsub>
 80048c2:	f806 7b01 	strb.w	r7, [r6], #1
 80048c6:	42ae      	cmp	r6, r5
 80048c8:	e9cd 0100 	strd	r0, r1, [sp]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	d126      	bne.n	8004920 <_dtoa_r+0x5e8>
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <_dtoa_r+0x60c>)
 80048d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048d8:	f7fb fcac 	bl	8000234 <__adddf3>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048e4:	f7fc f8ec 	bl	8000ac0 <__aeabi_dcmpgt>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d174      	bne.n	80049d6 <_dtoa_r+0x69e>
 80048ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048f0:	2000      	movs	r0, #0
 80048f2:	4914      	ldr	r1, [pc, #80]	; (8004944 <_dtoa_r+0x60c>)
 80048f4:	f7fb fc9c 	bl	8000230 <__aeabi_dsub>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004900:	f7fc f8c0 	bl	8000a84 <__aeabi_dcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	f43f af30 	beq.w	800476a <_dtoa_r+0x432>
 800490a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	f105 32ff 	add.w	r2, r5, #4294967295
 8004914:	d002      	beq.n	800491c <_dtoa_r+0x5e4>
 8004916:	f8dd a020 	ldr.w	sl, [sp, #32]
 800491a:	e04a      	b.n	80049b2 <_dtoa_r+0x67a>
 800491c:	4615      	mov	r5, r2
 800491e:	e7f4      	b.n	800490a <_dtoa_r+0x5d2>
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <_dtoa_r+0x600>)
 8004922:	f7fb fe3d 	bl	80005a0 <__aeabi_dmul>
 8004926:	e9cd 0100 	strd	r0, r1, [sp]
 800492a:	e7bc      	b.n	80048a6 <_dtoa_r+0x56e>
 800492c:	08005638 	.word	0x08005638
 8004930:	08005610 	.word	0x08005610
 8004934:	3ff00000 	.word	0x3ff00000
 8004938:	40240000 	.word	0x40240000
 800493c:	401c0000 	.word	0x401c0000
 8004940:	40140000 	.word	0x40140000
 8004944:	3fe00000 	.word	0x3fe00000
 8004948:	e9dd 6700 	ldrd	r6, r7, [sp]
 800494c:	465d      	mov	r5, fp
 800494e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004952:	4630      	mov	r0, r6
 8004954:	4639      	mov	r1, r7
 8004956:	f7fb ff4d 	bl	80007f4 <__aeabi_ddiv>
 800495a:	f7fc f8d1 	bl	8000b00 <__aeabi_d2iz>
 800495e:	4680      	mov	r8, r0
 8004960:	f7fb fdb4 	bl	80004cc <__aeabi_i2d>
 8004964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004968:	f7fb fe1a 	bl	80005a0 <__aeabi_dmul>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004978:	f7fb fc5a 	bl	8000230 <__aeabi_dsub>
 800497c:	f805 6b01 	strb.w	r6, [r5], #1
 8004980:	eba5 060b 	sub.w	r6, r5, fp
 8004984:	45b1      	cmp	r9, r6
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	d139      	bne.n	8004a00 <_dtoa_r+0x6c8>
 800498c:	f7fb fc52 	bl	8000234 <__adddf3>
 8004990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	f7fc f892 	bl	8000ac0 <__aeabi_dcmpgt>
 800499c:	b9c8      	cbnz	r0, 80049d2 <_dtoa_r+0x69a>
 800499e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049a2:	4630      	mov	r0, r6
 80049a4:	4639      	mov	r1, r7
 80049a6:	f7fc f863 	bl	8000a70 <__aeabi_dcmpeq>
 80049aa:	b110      	cbz	r0, 80049b2 <_dtoa_r+0x67a>
 80049ac:	f018 0f01 	tst.w	r8, #1
 80049b0:	d10f      	bne.n	80049d2 <_dtoa_r+0x69a>
 80049b2:	9904      	ldr	r1, [sp, #16]
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 fac1 	bl	8004f3c <_Bfree>
 80049ba:	2300      	movs	r3, #0
 80049bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049be:	702b      	strb	r3, [r5, #0]
 80049c0:	f10a 0301 	add.w	r3, sl, #1
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8241 	beq.w	8004e50 <_dtoa_r+0xb18>
 80049ce:	601d      	str	r5, [r3, #0]
 80049d0:	e23e      	b.n	8004e50 <_dtoa_r+0xb18>
 80049d2:	f8cd a020 	str.w	sl, [sp, #32]
 80049d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80049da:	2a39      	cmp	r2, #57	; 0x39
 80049dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80049e0:	d108      	bne.n	80049f4 <_dtoa_r+0x6bc>
 80049e2:	459b      	cmp	fp, r3
 80049e4:	d10a      	bne.n	80049fc <_dtoa_r+0x6c4>
 80049e6:	9b08      	ldr	r3, [sp, #32]
 80049e8:	3301      	adds	r3, #1
 80049ea:	9308      	str	r3, [sp, #32]
 80049ec:	2330      	movs	r3, #48	; 0x30
 80049ee:	f88b 3000 	strb.w	r3, [fp]
 80049f2:	465b      	mov	r3, fp
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	3201      	adds	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e78c      	b.n	8004916 <_dtoa_r+0x5de>
 80049fc:	461d      	mov	r5, r3
 80049fe:	e7ea      	b.n	80049d6 <_dtoa_r+0x69e>
 8004a00:	2200      	movs	r2, #0
 8004a02:	4b9b      	ldr	r3, [pc, #620]	; (8004c70 <_dtoa_r+0x938>)
 8004a04:	f7fb fdcc 	bl	80005a0 <__aeabi_dmul>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	f7fc f82e 	bl	8000a70 <__aeabi_dcmpeq>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d09a      	beq.n	800494e <_dtoa_r+0x616>
 8004a18:	e7cb      	b.n	80049b2 <_dtoa_r+0x67a>
 8004a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	f000 808b 	beq.w	8004b38 <_dtoa_r+0x800>
 8004a22:	9a06      	ldr	r2, [sp, #24]
 8004a24:	2a01      	cmp	r2, #1
 8004a26:	dc6e      	bgt.n	8004b06 <_dtoa_r+0x7ce>
 8004a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	d067      	beq.n	8004afe <_dtoa_r+0x7c6>
 8004a2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a32:	9f07      	ldr	r7, [sp, #28]
 8004a34:	9d05      	ldr	r5, [sp, #20]
 8004a36:	9a05      	ldr	r2, [sp, #20]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	441a      	add	r2, r3
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	9205      	str	r2, [sp, #20]
 8004a40:	4498      	add	r8, r3
 8004a42:	f000 fb1b 	bl	800507c <__i2b>
 8004a46:	4606      	mov	r6, r0
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	dd0c      	ble.n	8004a66 <_dtoa_r+0x72e>
 8004a4c:	f1b8 0f00 	cmp.w	r8, #0
 8004a50:	dd09      	ble.n	8004a66 <_dtoa_r+0x72e>
 8004a52:	4545      	cmp	r5, r8
 8004a54:	9a05      	ldr	r2, [sp, #20]
 8004a56:	462b      	mov	r3, r5
 8004a58:	bfa8      	it	ge
 8004a5a:	4643      	movge	r3, r8
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	9205      	str	r2, [sp, #20]
 8004a60:	1aed      	subs	r5, r5, r3
 8004a62:	eba8 0803 	sub.w	r8, r8, r3
 8004a66:	9b07      	ldr	r3, [sp, #28]
 8004a68:	b1eb      	cbz	r3, 8004aa6 <_dtoa_r+0x76e>
 8004a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d067      	beq.n	8004b40 <_dtoa_r+0x808>
 8004a70:	b18f      	cbz	r7, 8004a96 <_dtoa_r+0x75e>
 8004a72:	4631      	mov	r1, r6
 8004a74:	463a      	mov	r2, r7
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 fba0 	bl	80051bc <__pow5mult>
 8004a7c:	9a04      	ldr	r2, [sp, #16]
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4606      	mov	r6, r0
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 fb03 	bl	800508e <__multiply>
 8004a88:	9904      	ldr	r1, [sp, #16]
 8004a8a:	9008      	str	r0, [sp, #32]
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fa55 	bl	8004f3c <_Bfree>
 8004a92:	9b08      	ldr	r3, [sp, #32]
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	9b07      	ldr	r3, [sp, #28]
 8004a98:	1bda      	subs	r2, r3, r7
 8004a9a:	d004      	beq.n	8004aa6 <_dtoa_r+0x76e>
 8004a9c:	9904      	ldr	r1, [sp, #16]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 fb8c 	bl	80051bc <__pow5mult>
 8004aa4:	9004      	str	r0, [sp, #16]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 fae7 	bl	800507c <__i2b>
 8004aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 81d0 	beq.w	8004e58 <_dtoa_r+0xb20>
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4601      	mov	r1, r0
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 fb7d 	bl	80051bc <__pow5mult>
 8004ac2:	9b06      	ldr	r3, [sp, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	dc40      	bgt.n	8004b4c <_dtoa_r+0x814>
 8004aca:	9b00      	ldr	r3, [sp, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d139      	bne.n	8004b44 <_dtoa_r+0x80c>
 8004ad0:	9b01      	ldr	r3, [sp, #4]
 8004ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d136      	bne.n	8004b48 <_dtoa_r+0x810>
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	0d1b      	lsrs	r3, r3, #20
 8004ae2:	051b      	lsls	r3, r3, #20
 8004ae4:	b12b      	cbz	r3, 8004af2 <_dtoa_r+0x7ba>
 8004ae6:	9b05      	ldr	r3, [sp, #20]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	f108 0801 	add.w	r8, r8, #1
 8004af0:	2301      	movs	r3, #1
 8004af2:	9307      	str	r3, [sp, #28]
 8004af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d12a      	bne.n	8004b50 <_dtoa_r+0x818>
 8004afa:	2001      	movs	r0, #1
 8004afc:	e030      	b.n	8004b60 <_dtoa_r+0x828>
 8004afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b04:	e795      	b.n	8004a32 <_dtoa_r+0x6fa>
 8004b06:	9b07      	ldr	r3, [sp, #28]
 8004b08:	f109 37ff 	add.w	r7, r9, #4294967295
 8004b0c:	42bb      	cmp	r3, r7
 8004b0e:	bfbf      	itttt	lt
 8004b10:	9b07      	ldrlt	r3, [sp, #28]
 8004b12:	9707      	strlt	r7, [sp, #28]
 8004b14:	1afa      	sublt	r2, r7, r3
 8004b16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004b18:	bfbb      	ittet	lt
 8004b1a:	189b      	addlt	r3, r3, r2
 8004b1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b1e:	1bdf      	subge	r7, r3, r7
 8004b20:	2700      	movlt	r7, #0
 8004b22:	f1b9 0f00 	cmp.w	r9, #0
 8004b26:	bfb5      	itete	lt
 8004b28:	9b05      	ldrlt	r3, [sp, #20]
 8004b2a:	9d05      	ldrge	r5, [sp, #20]
 8004b2c:	eba3 0509 	sublt.w	r5, r3, r9
 8004b30:	464b      	movge	r3, r9
 8004b32:	bfb8      	it	lt
 8004b34:	2300      	movlt	r3, #0
 8004b36:	e77e      	b.n	8004a36 <_dtoa_r+0x6fe>
 8004b38:	9f07      	ldr	r7, [sp, #28]
 8004b3a:	9d05      	ldr	r5, [sp, #20]
 8004b3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004b3e:	e783      	b.n	8004a48 <_dtoa_r+0x710>
 8004b40:	9a07      	ldr	r2, [sp, #28]
 8004b42:	e7ab      	b.n	8004a9c <_dtoa_r+0x764>
 8004b44:	2300      	movs	r3, #0
 8004b46:	e7d4      	b.n	8004af2 <_dtoa_r+0x7ba>
 8004b48:	9b00      	ldr	r3, [sp, #0]
 8004b4a:	e7d2      	b.n	8004af2 <_dtoa_r+0x7ba>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004b56:	6918      	ldr	r0, [r3, #16]
 8004b58:	f000 fa42 	bl	8004fe0 <__hi0bits>
 8004b5c:	f1c0 0020 	rsb	r0, r0, #32
 8004b60:	4440      	add	r0, r8
 8004b62:	f010 001f 	ands.w	r0, r0, #31
 8004b66:	d047      	beq.n	8004bf8 <_dtoa_r+0x8c0>
 8004b68:	f1c0 0320 	rsb	r3, r0, #32
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	dd3b      	ble.n	8004be8 <_dtoa_r+0x8b0>
 8004b70:	9b05      	ldr	r3, [sp, #20]
 8004b72:	f1c0 001c 	rsb	r0, r0, #28
 8004b76:	4403      	add	r3, r0
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	4405      	add	r5, r0
 8004b7c:	4480      	add	r8, r0
 8004b7e:	9b05      	ldr	r3, [sp, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dd05      	ble.n	8004b90 <_dtoa_r+0x858>
 8004b84:	461a      	mov	r2, r3
 8004b86:	9904      	ldr	r1, [sp, #16]
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fb65 	bl	8005258 <__lshift>
 8004b8e:	9004      	str	r0, [sp, #16]
 8004b90:	f1b8 0f00 	cmp.w	r8, #0
 8004b94:	dd05      	ble.n	8004ba2 <_dtoa_r+0x86a>
 8004b96:	4639      	mov	r1, r7
 8004b98:	4642      	mov	r2, r8
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fb5c 	bl	8005258 <__lshift>
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ba4:	b353      	cbz	r3, 8004bfc <_dtoa_r+0x8c4>
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	9804      	ldr	r0, [sp, #16]
 8004baa:	f000 fba9 	bl	8005300 <__mcmp>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	da24      	bge.n	8004bfc <_dtoa_r+0x8c4>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	220a      	movs	r2, #10
 8004bb6:	9904      	ldr	r1, [sp, #16]
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 f9d6 	bl	8004f6a <__multadd>
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	9004      	str	r0, [sp, #16]
 8004bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 814d 	beq.w	8004e66 <_dtoa_r+0xb2e>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4631      	mov	r1, r6
 8004bd0:	220a      	movs	r2, #10
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f9c9 	bl	8004f6a <__multadd>
 8004bd8:	9b02      	ldr	r3, [sp, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	4606      	mov	r6, r0
 8004bde:	dc4f      	bgt.n	8004c80 <_dtoa_r+0x948>
 8004be0:	9b06      	ldr	r3, [sp, #24]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	dd4c      	ble.n	8004c80 <_dtoa_r+0x948>
 8004be6:	e011      	b.n	8004c0c <_dtoa_r+0x8d4>
 8004be8:	d0c9      	beq.n	8004b7e <_dtoa_r+0x846>
 8004bea:	9a05      	ldr	r2, [sp, #20]
 8004bec:	331c      	adds	r3, #28
 8004bee:	441a      	add	r2, r3
 8004bf0:	9205      	str	r2, [sp, #20]
 8004bf2:	441d      	add	r5, r3
 8004bf4:	4498      	add	r8, r3
 8004bf6:	e7c2      	b.n	8004b7e <_dtoa_r+0x846>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	e7f6      	b.n	8004bea <_dtoa_r+0x8b2>
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dc38      	bgt.n	8004c74 <_dtoa_r+0x93c>
 8004c02:	9b06      	ldr	r3, [sp, #24]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	dd35      	ble.n	8004c74 <_dtoa_r+0x93c>
 8004c08:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c0c:	9b02      	ldr	r3, [sp, #8]
 8004c0e:	b963      	cbnz	r3, 8004c2a <_dtoa_r+0x8f2>
 8004c10:	4639      	mov	r1, r7
 8004c12:	2205      	movs	r2, #5
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 f9a8 	bl	8004f6a <__multadd>
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	9804      	ldr	r0, [sp, #16]
 8004c20:	f000 fb6e 	bl	8005300 <__mcmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f73f adcc 	bgt.w	80047c2 <_dtoa_r+0x48a>
 8004c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c2c:	465d      	mov	r5, fp
 8004c2e:	ea6f 0a03 	mvn.w	sl, r3
 8004c32:	f04f 0900 	mov.w	r9, #0
 8004c36:	4639      	mov	r1, r7
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f97f 	bl	8004f3c <_Bfree>
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	f43f aeb7 	beq.w	80049b2 <_dtoa_r+0x67a>
 8004c44:	f1b9 0f00 	cmp.w	r9, #0
 8004c48:	d005      	beq.n	8004c56 <_dtoa_r+0x91e>
 8004c4a:	45b1      	cmp	r9, r6
 8004c4c:	d003      	beq.n	8004c56 <_dtoa_r+0x91e>
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 f973 	bl	8004f3c <_Bfree>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f000 f96f 	bl	8004f3c <_Bfree>
 8004c5e:	e6a8      	b.n	80049b2 <_dtoa_r+0x67a>
 8004c60:	2700      	movs	r7, #0
 8004c62:	463e      	mov	r6, r7
 8004c64:	e7e1      	b.n	8004c2a <_dtoa_r+0x8f2>
 8004c66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004c6a:	463e      	mov	r6, r7
 8004c6c:	e5a9      	b.n	80047c2 <_dtoa_r+0x48a>
 8004c6e:	bf00      	nop
 8004c70:	40240000 	.word	0x40240000
 8004c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c76:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80fa 	beq.w	8004e74 <_dtoa_r+0xb3c>
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	dd05      	ble.n	8004c90 <_dtoa_r+0x958>
 8004c84:	4631      	mov	r1, r6
 8004c86:	462a      	mov	r2, r5
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 fae5 	bl	8005258 <__lshift>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	9b07      	ldr	r3, [sp, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04c      	beq.n	8004d30 <_dtoa_r+0x9f8>
 8004c96:	6871      	ldr	r1, [r6, #4]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f91b 	bl	8004ed4 <_Balloc>
 8004c9e:	6932      	ldr	r2, [r6, #16]
 8004ca0:	3202      	adds	r2, #2
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	f106 010c 	add.w	r1, r6, #12
 8004caa:	300c      	adds	r0, #12
 8004cac:	f7fe ff5a 	bl	8003b64 <memcpy>
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 facf 	bl	8005258 <__lshift>
 8004cba:	9b00      	ldr	r3, [sp, #0]
 8004cbc:	f8cd b014 	str.w	fp, [sp, #20]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	46b1      	mov	r9, r6
 8004cc6:	9307      	str	r3, [sp, #28]
 8004cc8:	4606      	mov	r6, r0
 8004cca:	4639      	mov	r1, r7
 8004ccc:	9804      	ldr	r0, [sp, #16]
 8004cce:	f7ff faa6 	bl	800421e <quorem>
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004cda:	9804      	ldr	r0, [sp, #16]
 8004cdc:	f000 fb10 	bl	8005300 <__mcmp>
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	9000      	str	r0, [sp, #0]
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 fb24 	bl	8005334 <__mdiff>
 8004cec:	68c3      	ldr	r3, [r0, #12]
 8004cee:	4602      	mov	r2, r0
 8004cf0:	bb03      	cbnz	r3, 8004d34 <_dtoa_r+0x9fc>
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	9008      	str	r0, [sp, #32]
 8004cf6:	9804      	ldr	r0, [sp, #16]
 8004cf8:	f000 fb02 	bl	8005300 <__mcmp>
 8004cfc:	9a08      	ldr	r2, [sp, #32]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4611      	mov	r1, r2
 8004d02:	4620      	mov	r0, r4
 8004d04:	9308      	str	r3, [sp, #32]
 8004d06:	f000 f919 	bl	8004f3c <_Bfree>
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	b9a3      	cbnz	r3, 8004d38 <_dtoa_r+0xa00>
 8004d0e:	9a06      	ldr	r2, [sp, #24]
 8004d10:	b992      	cbnz	r2, 8004d38 <_dtoa_r+0xa00>
 8004d12:	9a07      	ldr	r2, [sp, #28]
 8004d14:	b982      	cbnz	r2, 8004d38 <_dtoa_r+0xa00>
 8004d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d1a:	d029      	beq.n	8004d70 <_dtoa_r+0xa38>
 8004d1c:	9b00      	ldr	r3, [sp, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	dd01      	ble.n	8004d26 <_dtoa_r+0x9ee>
 8004d22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004d26:	9b05      	ldr	r3, [sp, #20]
 8004d28:	1c5d      	adds	r5, r3, #1
 8004d2a:	f883 8000 	strb.w	r8, [r3]
 8004d2e:	e782      	b.n	8004c36 <_dtoa_r+0x8fe>
 8004d30:	4630      	mov	r0, r6
 8004d32:	e7c2      	b.n	8004cba <_dtoa_r+0x982>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e7e3      	b.n	8004d00 <_dtoa_r+0x9c8>
 8004d38:	9a00      	ldr	r2, [sp, #0]
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	db04      	blt.n	8004d48 <_dtoa_r+0xa10>
 8004d3e:	d125      	bne.n	8004d8c <_dtoa_r+0xa54>
 8004d40:	9a06      	ldr	r2, [sp, #24]
 8004d42:	bb1a      	cbnz	r2, 8004d8c <_dtoa_r+0xa54>
 8004d44:	9a07      	ldr	r2, [sp, #28]
 8004d46:	bb0a      	cbnz	r2, 8004d8c <_dtoa_r+0xa54>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	ddec      	ble.n	8004d26 <_dtoa_r+0x9ee>
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	9904      	ldr	r1, [sp, #16]
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fa81 	bl	8005258 <__lshift>
 8004d56:	4639      	mov	r1, r7
 8004d58:	9004      	str	r0, [sp, #16]
 8004d5a:	f000 fad1 	bl	8005300 <__mcmp>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	dc03      	bgt.n	8004d6a <_dtoa_r+0xa32>
 8004d62:	d1e0      	bne.n	8004d26 <_dtoa_r+0x9ee>
 8004d64:	f018 0f01 	tst.w	r8, #1
 8004d68:	d0dd      	beq.n	8004d26 <_dtoa_r+0x9ee>
 8004d6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d6e:	d1d8      	bne.n	8004d22 <_dtoa_r+0x9ea>
 8004d70:	9b05      	ldr	r3, [sp, #20]
 8004d72:	9a05      	ldr	r2, [sp, #20]
 8004d74:	1c5d      	adds	r5, r3, #1
 8004d76:	2339      	movs	r3, #57	; 0x39
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d7e:	2b39      	cmp	r3, #57	; 0x39
 8004d80:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d84:	d04f      	beq.n	8004e26 <_dtoa_r+0xaee>
 8004d86:	3301      	adds	r3, #1
 8004d88:	7013      	strb	r3, [r2, #0]
 8004d8a:	e754      	b.n	8004c36 <_dtoa_r+0x8fe>
 8004d8c:	9a05      	ldr	r2, [sp, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f102 0501 	add.w	r5, r2, #1
 8004d94:	dd06      	ble.n	8004da4 <_dtoa_r+0xa6c>
 8004d96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d9a:	d0e9      	beq.n	8004d70 <_dtoa_r+0xa38>
 8004d9c:	f108 0801 	add.w	r8, r8, #1
 8004da0:	9b05      	ldr	r3, [sp, #20]
 8004da2:	e7c2      	b.n	8004d2a <_dtoa_r+0x9f2>
 8004da4:	9a02      	ldr	r2, [sp, #8]
 8004da6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004daa:	eba5 030b 	sub.w	r3, r5, fp
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d021      	beq.n	8004df6 <_dtoa_r+0xabe>
 8004db2:	2300      	movs	r3, #0
 8004db4:	220a      	movs	r2, #10
 8004db6:	9904      	ldr	r1, [sp, #16]
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f8d6 	bl	8004f6a <__multadd>
 8004dbe:	45b1      	cmp	r9, r6
 8004dc0:	9004      	str	r0, [sp, #16]
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	f04f 020a 	mov.w	r2, #10
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4620      	mov	r0, r4
 8004dce:	d105      	bne.n	8004ddc <_dtoa_r+0xaa4>
 8004dd0:	f000 f8cb 	bl	8004f6a <__multadd>
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	9505      	str	r5, [sp, #20]
 8004dda:	e776      	b.n	8004cca <_dtoa_r+0x992>
 8004ddc:	f000 f8c5 	bl	8004f6a <__multadd>
 8004de0:	4631      	mov	r1, r6
 8004de2:	4681      	mov	r9, r0
 8004de4:	2300      	movs	r3, #0
 8004de6:	220a      	movs	r2, #10
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 f8be 	bl	8004f6a <__multadd>
 8004dee:	4606      	mov	r6, r0
 8004df0:	e7f2      	b.n	8004dd8 <_dtoa_r+0xaa0>
 8004df2:	f04f 0900 	mov.w	r9, #0
 8004df6:	2201      	movs	r2, #1
 8004df8:	9904      	ldr	r1, [sp, #16]
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 fa2c 	bl	8005258 <__lshift>
 8004e00:	4639      	mov	r1, r7
 8004e02:	9004      	str	r0, [sp, #16]
 8004e04:	f000 fa7c 	bl	8005300 <__mcmp>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	dcb6      	bgt.n	8004d7a <_dtoa_r+0xa42>
 8004e0c:	d102      	bne.n	8004e14 <_dtoa_r+0xadc>
 8004e0e:	f018 0f01 	tst.w	r8, #1
 8004e12:	d1b2      	bne.n	8004d7a <_dtoa_r+0xa42>
 8004e14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8004e1e:	f47f af0a 	bne.w	8004c36 <_dtoa_r+0x8fe>
 8004e22:	4615      	mov	r5, r2
 8004e24:	e7f6      	b.n	8004e14 <_dtoa_r+0xadc>
 8004e26:	4593      	cmp	fp, r2
 8004e28:	d105      	bne.n	8004e36 <_dtoa_r+0xafe>
 8004e2a:	2331      	movs	r3, #49	; 0x31
 8004e2c:	f10a 0a01 	add.w	sl, sl, #1
 8004e30:	f88b 3000 	strb.w	r3, [fp]
 8004e34:	e6ff      	b.n	8004c36 <_dtoa_r+0x8fe>
 8004e36:	4615      	mov	r5, r2
 8004e38:	e79f      	b.n	8004d7a <_dtoa_r+0xa42>
 8004e3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004ea0 <_dtoa_r+0xb68>
 8004e3e:	e007      	b.n	8004e50 <_dtoa_r+0xb18>
 8004e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004ea4 <_dtoa_r+0xb6c>
 8004e46:	b11b      	cbz	r3, 8004e50 <_dtoa_r+0xb18>
 8004e48:	f10b 0308 	add.w	r3, fp, #8
 8004e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4658      	mov	r0, fp
 8004e52:	b017      	add	sp, #92	; 0x5c
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	9b06      	ldr	r3, [sp, #24]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	f77f ae35 	ble.w	8004aca <_dtoa_r+0x792>
 8004e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e62:	9307      	str	r3, [sp, #28]
 8004e64:	e649      	b.n	8004afa <_dtoa_r+0x7c2>
 8004e66:	9b02      	ldr	r3, [sp, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dc03      	bgt.n	8004e74 <_dtoa_r+0xb3c>
 8004e6c:	9b06      	ldr	r3, [sp, #24]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	f73f aecc 	bgt.w	8004c0c <_dtoa_r+0x8d4>
 8004e74:	465d      	mov	r5, fp
 8004e76:	4639      	mov	r1, r7
 8004e78:	9804      	ldr	r0, [sp, #16]
 8004e7a:	f7ff f9d0 	bl	800421e <quorem>
 8004e7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e82:	f805 8b01 	strb.w	r8, [r5], #1
 8004e86:	9a02      	ldr	r2, [sp, #8]
 8004e88:	eba5 030b 	sub.w	r3, r5, fp
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	ddb0      	ble.n	8004df2 <_dtoa_r+0xaba>
 8004e90:	2300      	movs	r3, #0
 8004e92:	220a      	movs	r2, #10
 8004e94:	9904      	ldr	r1, [sp, #16]
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f867 	bl	8004f6a <__multadd>
 8004e9c:	9004      	str	r0, [sp, #16]
 8004e9e:	e7ea      	b.n	8004e76 <_dtoa_r+0xb3e>
 8004ea0:	08005600 	.word	0x08005600
 8004ea4:	08005602 	.word	0x08005602

08004ea8 <_localeconv_r>:
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <_localeconv_r+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a18      	ldr	r0, [r3, #32]
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <_localeconv_r+0x18>)
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	bf08      	it	eq
 8004eb4:	4618      	moveq	r0, r3
 8004eb6:	30f0      	adds	r0, #240	; 0xf0
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	2000000c 	.word	0x2000000c
 8004ec0:	20000070 	.word	0x20000070

08004ec4 <malloc>:
 8004ec4:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <malloc+0xc>)
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f000 baed 	b.w	80054a8 <_malloc_r>
 8004ece:	bf00      	nop
 8004ed0:	2000000c 	.word	0x2000000c

08004ed4 <_Balloc>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460e      	mov	r6, r1
 8004edc:	b93d      	cbnz	r5, 8004eee <_Balloc+0x1a>
 8004ede:	2010      	movs	r0, #16
 8004ee0:	f7ff fff0 	bl	8004ec4 <malloc>
 8004ee4:	6260      	str	r0, [r4, #36]	; 0x24
 8004ee6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004eea:	6005      	str	r5, [r0, #0]
 8004eec:	60c5      	str	r5, [r0, #12]
 8004eee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ef0:	68eb      	ldr	r3, [r5, #12]
 8004ef2:	b183      	cbz	r3, 8004f16 <_Balloc+0x42>
 8004ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004efc:	b9b8      	cbnz	r0, 8004f2e <_Balloc+0x5a>
 8004efe:	2101      	movs	r1, #1
 8004f00:	fa01 f506 	lsl.w	r5, r1, r6
 8004f04:	1d6a      	adds	r2, r5, #5
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fabf 	bl	800548c <_calloc_r>
 8004f0e:	b160      	cbz	r0, 8004f2a <_Balloc+0x56>
 8004f10:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004f14:	e00e      	b.n	8004f34 <_Balloc+0x60>
 8004f16:	2221      	movs	r2, #33	; 0x21
 8004f18:	2104      	movs	r1, #4
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 fab6 	bl	800548c <_calloc_r>
 8004f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f22:	60e8      	str	r0, [r5, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e4      	bne.n	8004ef4 <_Balloc+0x20>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
 8004f2e:	6802      	ldr	r2, [r0, #0]
 8004f30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004f34:	2300      	movs	r3, #0
 8004f36:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f3a:	e7f7      	b.n	8004f2c <_Balloc+0x58>

08004f3c <_Bfree>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f40:	4606      	mov	r6, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	b93c      	cbnz	r4, 8004f56 <_Bfree+0x1a>
 8004f46:	2010      	movs	r0, #16
 8004f48:	f7ff ffbc 	bl	8004ec4 <malloc>
 8004f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8004f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f52:	6004      	str	r4, [r0, #0]
 8004f54:	60c4      	str	r4, [r0, #12]
 8004f56:	b13d      	cbz	r5, 8004f68 <_Bfree+0x2c>
 8004f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004f5a:	686a      	ldr	r2, [r5, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f62:	6029      	str	r1, [r5, #0]
 8004f64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004f68:	bd70      	pop	{r4, r5, r6, pc}

08004f6a <__multadd>:
 8004f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	690d      	ldr	r5, [r1, #16]
 8004f70:	461f      	mov	r7, r3
 8004f72:	4606      	mov	r6, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	f101 0c14 	add.w	ip, r1, #20
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f8dc 0000 	ldr.w	r0, [ip]
 8004f80:	b281      	uxth	r1, r0
 8004f82:	fb02 7101 	mla	r1, r2, r1, r7
 8004f86:	0c0f      	lsrs	r7, r1, #16
 8004f88:	0c00      	lsrs	r0, r0, #16
 8004f8a:	fb02 7000 	mla	r0, r2, r0, r7
 8004f8e:	b289      	uxth	r1, r1
 8004f90:	3301      	adds	r3, #1
 8004f92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f96:	429d      	cmp	r5, r3
 8004f98:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004f9c:	f84c 1b04 	str.w	r1, [ip], #4
 8004fa0:	dcec      	bgt.n	8004f7c <__multadd+0x12>
 8004fa2:	b1d7      	cbz	r7, 8004fda <__multadd+0x70>
 8004fa4:	68a3      	ldr	r3, [r4, #8]
 8004fa6:	42ab      	cmp	r3, r5
 8004fa8:	dc12      	bgt.n	8004fd0 <__multadd+0x66>
 8004faa:	6861      	ldr	r1, [r4, #4]
 8004fac:	4630      	mov	r0, r6
 8004fae:	3101      	adds	r1, #1
 8004fb0:	f7ff ff90 	bl	8004ed4 <_Balloc>
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	3202      	adds	r2, #2
 8004fb8:	f104 010c 	add.w	r1, r4, #12
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	300c      	adds	r0, #12
 8004fc2:	f7fe fdcf 	bl	8003b64 <memcpy>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f7ff ffb7 	bl	8004f3c <_Bfree>
 8004fce:	4644      	mov	r4, r8
 8004fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	615f      	str	r7, [r3, #20]
 8004fd8:	6125      	str	r5, [r4, #16]
 8004fda:	4620      	mov	r0, r4
 8004fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fe0 <__hi0bits>:
 8004fe0:	0c02      	lsrs	r2, r0, #16
 8004fe2:	0412      	lsls	r2, r2, #16
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	b9b2      	cbnz	r2, 8005016 <__hi0bits+0x36>
 8004fe8:	0403      	lsls	r3, r0, #16
 8004fea:	2010      	movs	r0, #16
 8004fec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004ff0:	bf04      	itt	eq
 8004ff2:	021b      	lsleq	r3, r3, #8
 8004ff4:	3008      	addeq	r0, #8
 8004ff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ffa:	bf04      	itt	eq
 8004ffc:	011b      	lsleq	r3, r3, #4
 8004ffe:	3004      	addeq	r0, #4
 8005000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005004:	bf04      	itt	eq
 8005006:	009b      	lsleq	r3, r3, #2
 8005008:	3002      	addeq	r0, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	db06      	blt.n	800501c <__hi0bits+0x3c>
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	d503      	bpl.n	800501a <__hi0bits+0x3a>
 8005012:	3001      	adds	r0, #1
 8005014:	4770      	bx	lr
 8005016:	2000      	movs	r0, #0
 8005018:	e7e8      	b.n	8004fec <__hi0bits+0xc>
 800501a:	2020      	movs	r0, #32
 800501c:	4770      	bx	lr

0800501e <__lo0bits>:
 800501e:	6803      	ldr	r3, [r0, #0]
 8005020:	f013 0207 	ands.w	r2, r3, #7
 8005024:	4601      	mov	r1, r0
 8005026:	d00b      	beq.n	8005040 <__lo0bits+0x22>
 8005028:	07da      	lsls	r2, r3, #31
 800502a:	d423      	bmi.n	8005074 <__lo0bits+0x56>
 800502c:	0798      	lsls	r0, r3, #30
 800502e:	bf49      	itett	mi
 8005030:	085b      	lsrmi	r3, r3, #1
 8005032:	089b      	lsrpl	r3, r3, #2
 8005034:	2001      	movmi	r0, #1
 8005036:	600b      	strmi	r3, [r1, #0]
 8005038:	bf5c      	itt	pl
 800503a:	600b      	strpl	r3, [r1, #0]
 800503c:	2002      	movpl	r0, #2
 800503e:	4770      	bx	lr
 8005040:	b298      	uxth	r0, r3
 8005042:	b9a8      	cbnz	r0, 8005070 <__lo0bits+0x52>
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	2010      	movs	r0, #16
 8005048:	f013 0fff 	tst.w	r3, #255	; 0xff
 800504c:	bf04      	itt	eq
 800504e:	0a1b      	lsreq	r3, r3, #8
 8005050:	3008      	addeq	r0, #8
 8005052:	071a      	lsls	r2, r3, #28
 8005054:	bf04      	itt	eq
 8005056:	091b      	lsreq	r3, r3, #4
 8005058:	3004      	addeq	r0, #4
 800505a:	079a      	lsls	r2, r3, #30
 800505c:	bf04      	itt	eq
 800505e:	089b      	lsreq	r3, r3, #2
 8005060:	3002      	addeq	r0, #2
 8005062:	07da      	lsls	r2, r3, #31
 8005064:	d402      	bmi.n	800506c <__lo0bits+0x4e>
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	d006      	beq.n	8005078 <__lo0bits+0x5a>
 800506a:	3001      	adds	r0, #1
 800506c:	600b      	str	r3, [r1, #0]
 800506e:	4770      	bx	lr
 8005070:	4610      	mov	r0, r2
 8005072:	e7e9      	b.n	8005048 <__lo0bits+0x2a>
 8005074:	2000      	movs	r0, #0
 8005076:	4770      	bx	lr
 8005078:	2020      	movs	r0, #32
 800507a:	4770      	bx	lr

0800507c <__i2b>:
 800507c:	b510      	push	{r4, lr}
 800507e:	460c      	mov	r4, r1
 8005080:	2101      	movs	r1, #1
 8005082:	f7ff ff27 	bl	8004ed4 <_Balloc>
 8005086:	2201      	movs	r2, #1
 8005088:	6144      	str	r4, [r0, #20]
 800508a:	6102      	str	r2, [r0, #16]
 800508c:	bd10      	pop	{r4, pc}

0800508e <__multiply>:
 800508e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005092:	4614      	mov	r4, r2
 8005094:	690a      	ldr	r2, [r1, #16]
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	bfb8      	it	lt
 800509c:	460b      	movlt	r3, r1
 800509e:	4688      	mov	r8, r1
 80050a0:	bfbc      	itt	lt
 80050a2:	46a0      	movlt	r8, r4
 80050a4:	461c      	movlt	r4, r3
 80050a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80050aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80050ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80050b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80050b6:	eb07 0609 	add.w	r6, r7, r9
 80050ba:	42b3      	cmp	r3, r6
 80050bc:	bfb8      	it	lt
 80050be:	3101      	addlt	r1, #1
 80050c0:	f7ff ff08 	bl	8004ed4 <_Balloc>
 80050c4:	f100 0514 	add.w	r5, r0, #20
 80050c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80050cc:	462b      	mov	r3, r5
 80050ce:	2200      	movs	r2, #0
 80050d0:	4573      	cmp	r3, lr
 80050d2:	d316      	bcc.n	8005102 <__multiply+0x74>
 80050d4:	f104 0214 	add.w	r2, r4, #20
 80050d8:	f108 0114 	add.w	r1, r8, #20
 80050dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80050e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	9b00      	ldr	r3, [sp, #0]
 80050e8:	9201      	str	r2, [sp, #4]
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d80c      	bhi.n	8005108 <__multiply+0x7a>
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	dd03      	ble.n	80050fa <__multiply+0x6c>
 80050f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d05d      	beq.n	80051b6 <__multiply+0x128>
 80050fa:	6106      	str	r6, [r0, #16]
 80050fc:	b003      	add	sp, #12
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005102:	f843 2b04 	str.w	r2, [r3], #4
 8005106:	e7e3      	b.n	80050d0 <__multiply+0x42>
 8005108:	f8b2 b000 	ldrh.w	fp, [r2]
 800510c:	f1bb 0f00 	cmp.w	fp, #0
 8005110:	d023      	beq.n	800515a <__multiply+0xcc>
 8005112:	4689      	mov	r9, r1
 8005114:	46ac      	mov	ip, r5
 8005116:	f04f 0800 	mov.w	r8, #0
 800511a:	f859 4b04 	ldr.w	r4, [r9], #4
 800511e:	f8dc a000 	ldr.w	sl, [ip]
 8005122:	b2a3      	uxth	r3, r4
 8005124:	fa1f fa8a 	uxth.w	sl, sl
 8005128:	fb0b a303 	mla	r3, fp, r3, sl
 800512c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005130:	f8dc 4000 	ldr.w	r4, [ip]
 8005134:	4443      	add	r3, r8
 8005136:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800513a:	fb0b 840a 	mla	r4, fp, sl, r8
 800513e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005142:	46e2      	mov	sl, ip
 8005144:	b29b      	uxth	r3, r3
 8005146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800514a:	454f      	cmp	r7, r9
 800514c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005150:	f84a 3b04 	str.w	r3, [sl], #4
 8005154:	d82b      	bhi.n	80051ae <__multiply+0x120>
 8005156:	f8cc 8004 	str.w	r8, [ip, #4]
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005160:	3204      	adds	r2, #4
 8005162:	f1ba 0f00 	cmp.w	sl, #0
 8005166:	d020      	beq.n	80051aa <__multiply+0x11c>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	4689      	mov	r9, r1
 800516c:	46a8      	mov	r8, r5
 800516e:	f04f 0b00 	mov.w	fp, #0
 8005172:	f8b9 c000 	ldrh.w	ip, [r9]
 8005176:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800517a:	fb0a 440c 	mla	r4, sl, ip, r4
 800517e:	445c      	add	r4, fp
 8005180:	46c4      	mov	ip, r8
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005188:	f84c 3b04 	str.w	r3, [ip], #4
 800518c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005190:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	fb0a b303 	mla	r3, sl, r3, fp
 800519a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800519e:	454f      	cmp	r7, r9
 80051a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80051a4:	d805      	bhi.n	80051b2 <__multiply+0x124>
 80051a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80051aa:	3504      	adds	r5, #4
 80051ac:	e79b      	b.n	80050e6 <__multiply+0x58>
 80051ae:	46d4      	mov	ip, sl
 80051b0:	e7b3      	b.n	800511a <__multiply+0x8c>
 80051b2:	46e0      	mov	r8, ip
 80051b4:	e7dd      	b.n	8005172 <__multiply+0xe4>
 80051b6:	3e01      	subs	r6, #1
 80051b8:	e799      	b.n	80050ee <__multiply+0x60>
	...

080051bc <__pow5mult>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4615      	mov	r5, r2
 80051c2:	f012 0203 	ands.w	r2, r2, #3
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	d007      	beq.n	80051dc <__pow5mult+0x20>
 80051cc:	3a01      	subs	r2, #1
 80051ce:	4c21      	ldr	r4, [pc, #132]	; (8005254 <__pow5mult+0x98>)
 80051d0:	2300      	movs	r3, #0
 80051d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051d6:	f7ff fec8 	bl	8004f6a <__multadd>
 80051da:	4607      	mov	r7, r0
 80051dc:	10ad      	asrs	r5, r5, #2
 80051de:	d035      	beq.n	800524c <__pow5mult+0x90>
 80051e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80051e2:	b93c      	cbnz	r4, 80051f4 <__pow5mult+0x38>
 80051e4:	2010      	movs	r0, #16
 80051e6:	f7ff fe6d 	bl	8004ec4 <malloc>
 80051ea:	6270      	str	r0, [r6, #36]	; 0x24
 80051ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051f0:	6004      	str	r4, [r0, #0]
 80051f2:	60c4      	str	r4, [r0, #12]
 80051f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051fc:	b94c      	cbnz	r4, 8005212 <__pow5mult+0x56>
 80051fe:	f240 2171 	movw	r1, #625	; 0x271
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ff3a 	bl	800507c <__i2b>
 8005208:	2300      	movs	r3, #0
 800520a:	f8c8 0008 	str.w	r0, [r8, #8]
 800520e:	4604      	mov	r4, r0
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	07eb      	lsls	r3, r5, #31
 8005218:	d50a      	bpl.n	8005230 <__pow5mult+0x74>
 800521a:	4639      	mov	r1, r7
 800521c:	4622      	mov	r2, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff35 	bl	800508e <__multiply>
 8005224:	4639      	mov	r1, r7
 8005226:	4681      	mov	r9, r0
 8005228:	4630      	mov	r0, r6
 800522a:	f7ff fe87 	bl	8004f3c <_Bfree>
 800522e:	464f      	mov	r7, r9
 8005230:	106d      	asrs	r5, r5, #1
 8005232:	d00b      	beq.n	800524c <__pow5mult+0x90>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	b938      	cbnz	r0, 8005248 <__pow5mult+0x8c>
 8005238:	4622      	mov	r2, r4
 800523a:	4621      	mov	r1, r4
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff ff26 	bl	800508e <__multiply>
 8005242:	6020      	str	r0, [r4, #0]
 8005244:	f8c0 8000 	str.w	r8, [r0]
 8005248:	4604      	mov	r4, r0
 800524a:	e7e4      	b.n	8005216 <__pow5mult+0x5a>
 800524c:	4638      	mov	r0, r7
 800524e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005252:	bf00      	nop
 8005254:	08005700 	.word	0x08005700

08005258 <__lshift>:
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	6849      	ldr	r1, [r1, #4]
 8005266:	eb0a 0903 	add.w	r9, sl, r3
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	4607      	mov	r7, r0
 800526e:	4616      	mov	r6, r2
 8005270:	f109 0501 	add.w	r5, r9, #1
 8005274:	42ab      	cmp	r3, r5
 8005276:	db32      	blt.n	80052de <__lshift+0x86>
 8005278:	4638      	mov	r0, r7
 800527a:	f7ff fe2b 	bl	8004ed4 <_Balloc>
 800527e:	2300      	movs	r3, #0
 8005280:	4680      	mov	r8, r0
 8005282:	f100 0114 	add.w	r1, r0, #20
 8005286:	461a      	mov	r2, r3
 8005288:	4553      	cmp	r3, sl
 800528a:	db2b      	blt.n	80052e4 <__lshift+0x8c>
 800528c:	6920      	ldr	r0, [r4, #16]
 800528e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005292:	f104 0314 	add.w	r3, r4, #20
 8005296:	f016 021f 	ands.w	r2, r6, #31
 800529a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800529e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a2:	d025      	beq.n	80052f0 <__lshift+0x98>
 80052a4:	f1c2 0e20 	rsb	lr, r2, #32
 80052a8:	2000      	movs	r0, #0
 80052aa:	681e      	ldr	r6, [r3, #0]
 80052ac:	468a      	mov	sl, r1
 80052ae:	4096      	lsls	r6, r2
 80052b0:	4330      	orrs	r0, r6
 80052b2:	f84a 0b04 	str.w	r0, [sl], #4
 80052b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80052ba:	459c      	cmp	ip, r3
 80052bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80052c0:	d814      	bhi.n	80052ec <__lshift+0x94>
 80052c2:	6048      	str	r0, [r1, #4]
 80052c4:	b108      	cbz	r0, 80052ca <__lshift+0x72>
 80052c6:	f109 0502 	add.w	r5, r9, #2
 80052ca:	3d01      	subs	r5, #1
 80052cc:	4638      	mov	r0, r7
 80052ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80052d2:	4621      	mov	r1, r4
 80052d4:	f7ff fe32 	bl	8004f3c <_Bfree>
 80052d8:	4640      	mov	r0, r8
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	3101      	adds	r1, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	e7c7      	b.n	8005274 <__lshift+0x1c>
 80052e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80052e8:	3301      	adds	r3, #1
 80052ea:	e7cd      	b.n	8005288 <__lshift+0x30>
 80052ec:	4651      	mov	r1, sl
 80052ee:	e7dc      	b.n	80052aa <__lshift+0x52>
 80052f0:	3904      	subs	r1, #4
 80052f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80052fa:	459c      	cmp	ip, r3
 80052fc:	d8f9      	bhi.n	80052f2 <__lshift+0x9a>
 80052fe:	e7e4      	b.n	80052ca <__lshift+0x72>

08005300 <__mcmp>:
 8005300:	6903      	ldr	r3, [r0, #16]
 8005302:	690a      	ldr	r2, [r1, #16]
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	b530      	push	{r4, r5, lr}
 8005308:	d10c      	bne.n	8005324 <__mcmp+0x24>
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	3014      	adds	r0, #20
 800530e:	3114      	adds	r1, #20
 8005310:	1884      	adds	r4, r0, r2
 8005312:	4411      	add	r1, r2
 8005314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800531c:	4295      	cmp	r5, r2
 800531e:	d003      	beq.n	8005328 <__mcmp+0x28>
 8005320:	d305      	bcc.n	800532e <__mcmp+0x2e>
 8005322:	2301      	movs	r3, #1
 8005324:	4618      	mov	r0, r3
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	42a0      	cmp	r0, r4
 800532a:	d3f3      	bcc.n	8005314 <__mcmp+0x14>
 800532c:	e7fa      	b.n	8005324 <__mcmp+0x24>
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	e7f7      	b.n	8005324 <__mcmp+0x24>

08005334 <__mdiff>:
 8005334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	460d      	mov	r5, r1
 800533a:	4607      	mov	r7, r0
 800533c:	4611      	mov	r1, r2
 800533e:	4628      	mov	r0, r5
 8005340:	4614      	mov	r4, r2
 8005342:	f7ff ffdd 	bl	8005300 <__mcmp>
 8005346:	1e06      	subs	r6, r0, #0
 8005348:	d108      	bne.n	800535c <__mdiff+0x28>
 800534a:	4631      	mov	r1, r6
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff fdc1 	bl	8004ed4 <_Balloc>
 8005352:	2301      	movs	r3, #1
 8005354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	bfa4      	itt	ge
 800535e:	4623      	movge	r3, r4
 8005360:	462c      	movge	r4, r5
 8005362:	4638      	mov	r0, r7
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	bfa6      	itte	ge
 8005368:	461d      	movge	r5, r3
 800536a:	2600      	movge	r6, #0
 800536c:	2601      	movlt	r6, #1
 800536e:	f7ff fdb1 	bl	8004ed4 <_Balloc>
 8005372:	692b      	ldr	r3, [r5, #16]
 8005374:	60c6      	str	r6, [r0, #12]
 8005376:	6926      	ldr	r6, [r4, #16]
 8005378:	f105 0914 	add.w	r9, r5, #20
 800537c:	f104 0214 	add.w	r2, r4, #20
 8005380:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005384:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005388:	f100 0514 	add.w	r5, r0, #20
 800538c:	f04f 0e00 	mov.w	lr, #0
 8005390:	f852 ab04 	ldr.w	sl, [r2], #4
 8005394:	f859 4b04 	ldr.w	r4, [r9], #4
 8005398:	fa1e f18a 	uxtah	r1, lr, sl
 800539c:	b2a3      	uxth	r3, r4
 800539e:	1ac9      	subs	r1, r1, r3
 80053a0:	0c23      	lsrs	r3, r4, #16
 80053a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80053a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80053aa:	b289      	uxth	r1, r1
 80053ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80053b0:	45c8      	cmp	r8, r9
 80053b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80053b6:	4694      	mov	ip, r2
 80053b8:	f845 3b04 	str.w	r3, [r5], #4
 80053bc:	d8e8      	bhi.n	8005390 <__mdiff+0x5c>
 80053be:	45bc      	cmp	ip, r7
 80053c0:	d304      	bcc.n	80053cc <__mdiff+0x98>
 80053c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80053c6:	b183      	cbz	r3, 80053ea <__mdiff+0xb6>
 80053c8:	6106      	str	r6, [r0, #16]
 80053ca:	e7c5      	b.n	8005358 <__mdiff+0x24>
 80053cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80053d0:	fa1e f381 	uxtah	r3, lr, r1
 80053d4:	141a      	asrs	r2, r3, #16
 80053d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053da:	b29b      	uxth	r3, r3
 80053dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80053e4:	f845 3b04 	str.w	r3, [r5], #4
 80053e8:	e7e9      	b.n	80053be <__mdiff+0x8a>
 80053ea:	3e01      	subs	r6, #1
 80053ec:	e7e9      	b.n	80053c2 <__mdiff+0x8e>

080053ee <__d2b>:
 80053ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053f2:	460e      	mov	r6, r1
 80053f4:	2101      	movs	r1, #1
 80053f6:	ec59 8b10 	vmov	r8, r9, d0
 80053fa:	4615      	mov	r5, r2
 80053fc:	f7ff fd6a 	bl	8004ed4 <_Balloc>
 8005400:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005404:	4607      	mov	r7, r0
 8005406:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800540a:	bb34      	cbnz	r4, 800545a <__d2b+0x6c>
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f1b8 0300 	subs.w	r3, r8, #0
 8005412:	d027      	beq.n	8005464 <__d2b+0x76>
 8005414:	a802      	add	r0, sp, #8
 8005416:	f840 3d08 	str.w	r3, [r0, #-8]!
 800541a:	f7ff fe00 	bl	800501e <__lo0bits>
 800541e:	9900      	ldr	r1, [sp, #0]
 8005420:	b1f0      	cbz	r0, 8005460 <__d2b+0x72>
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	f1c0 0320 	rsb	r3, r0, #32
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	430b      	orrs	r3, r1
 800542e:	40c2      	lsrs	r2, r0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	9201      	str	r2, [sp, #4]
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf14      	ite	ne
 800543c:	2102      	movne	r1, #2
 800543e:	2101      	moveq	r1, #1
 8005440:	6139      	str	r1, [r7, #16]
 8005442:	b1c4      	cbz	r4, 8005476 <__d2b+0x88>
 8005444:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005448:	4404      	add	r4, r0
 800544a:	6034      	str	r4, [r6, #0]
 800544c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005450:	6028      	str	r0, [r5, #0]
 8005452:	4638      	mov	r0, r7
 8005454:	b003      	add	sp, #12
 8005456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800545a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545e:	e7d5      	b.n	800540c <__d2b+0x1e>
 8005460:	6179      	str	r1, [r7, #20]
 8005462:	e7e7      	b.n	8005434 <__d2b+0x46>
 8005464:	a801      	add	r0, sp, #4
 8005466:	f7ff fdda 	bl	800501e <__lo0bits>
 800546a:	9b01      	ldr	r3, [sp, #4]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	2101      	movs	r1, #1
 8005470:	6139      	str	r1, [r7, #16]
 8005472:	3020      	adds	r0, #32
 8005474:	e7e5      	b.n	8005442 <__d2b+0x54>
 8005476:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800547a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800547e:	6030      	str	r0, [r6, #0]
 8005480:	6918      	ldr	r0, [r3, #16]
 8005482:	f7ff fdad 	bl	8004fe0 <__hi0bits>
 8005486:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800548a:	e7e1      	b.n	8005450 <__d2b+0x62>

0800548c <_calloc_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	fb02 f401 	mul.w	r4, r2, r1
 8005492:	4621      	mov	r1, r4
 8005494:	f000 f808 	bl	80054a8 <_malloc_r>
 8005498:	4605      	mov	r5, r0
 800549a:	b118      	cbz	r0, 80054a4 <_calloc_r+0x18>
 800549c:	4622      	mov	r2, r4
 800549e:	2100      	movs	r1, #0
 80054a0:	f7fe fb6b 	bl	8003b7a <memset>
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}

080054a8 <_malloc_r>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	1ccd      	adds	r5, r1, #3
 80054ac:	f025 0503 	bic.w	r5, r5, #3
 80054b0:	3508      	adds	r5, #8
 80054b2:	2d0c      	cmp	r5, #12
 80054b4:	bf38      	it	cc
 80054b6:	250c      	movcc	r5, #12
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	4606      	mov	r6, r0
 80054bc:	db01      	blt.n	80054c2 <_malloc_r+0x1a>
 80054be:	42a9      	cmp	r1, r5
 80054c0:	d903      	bls.n	80054ca <_malloc_r+0x22>
 80054c2:	230c      	movs	r3, #12
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	2000      	movs	r0, #0
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	f000 f869 	bl	80055a0 <__malloc_lock>
 80054ce:	4a21      	ldr	r2, [pc, #132]	; (8005554 <_malloc_r+0xac>)
 80054d0:	6814      	ldr	r4, [r2, #0]
 80054d2:	4621      	mov	r1, r4
 80054d4:	b991      	cbnz	r1, 80054fc <_malloc_r+0x54>
 80054d6:	4c20      	ldr	r4, [pc, #128]	; (8005558 <_malloc_r+0xb0>)
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	b91b      	cbnz	r3, 80054e4 <_malloc_r+0x3c>
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f83d 	bl	800555c <_sbrk_r>
 80054e2:	6020      	str	r0, [r4, #0]
 80054e4:	4629      	mov	r1, r5
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f838 	bl	800555c <_sbrk_r>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d124      	bne.n	800553a <_malloc_r+0x92>
 80054f0:	230c      	movs	r3, #12
 80054f2:	6033      	str	r3, [r6, #0]
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 f854 	bl	80055a2 <__malloc_unlock>
 80054fa:	e7e4      	b.n	80054c6 <_malloc_r+0x1e>
 80054fc:	680b      	ldr	r3, [r1, #0]
 80054fe:	1b5b      	subs	r3, r3, r5
 8005500:	d418      	bmi.n	8005534 <_malloc_r+0x8c>
 8005502:	2b0b      	cmp	r3, #11
 8005504:	d90f      	bls.n	8005526 <_malloc_r+0x7e>
 8005506:	600b      	str	r3, [r1, #0]
 8005508:	50cd      	str	r5, [r1, r3]
 800550a:	18cc      	adds	r4, r1, r3
 800550c:	4630      	mov	r0, r6
 800550e:	f000 f848 	bl	80055a2 <__malloc_unlock>
 8005512:	f104 000b 	add.w	r0, r4, #11
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	f020 0007 	bic.w	r0, r0, #7
 800551c:	1ac3      	subs	r3, r0, r3
 800551e:	d0d3      	beq.n	80054c8 <_malloc_r+0x20>
 8005520:	425a      	negs	r2, r3
 8005522:	50e2      	str	r2, [r4, r3]
 8005524:	e7d0      	b.n	80054c8 <_malloc_r+0x20>
 8005526:	428c      	cmp	r4, r1
 8005528:	684b      	ldr	r3, [r1, #4]
 800552a:	bf16      	itet	ne
 800552c:	6063      	strne	r3, [r4, #4]
 800552e:	6013      	streq	r3, [r2, #0]
 8005530:	460c      	movne	r4, r1
 8005532:	e7eb      	b.n	800550c <_malloc_r+0x64>
 8005534:	460c      	mov	r4, r1
 8005536:	6849      	ldr	r1, [r1, #4]
 8005538:	e7cc      	b.n	80054d4 <_malloc_r+0x2c>
 800553a:	1cc4      	adds	r4, r0, #3
 800553c:	f024 0403 	bic.w	r4, r4, #3
 8005540:	42a0      	cmp	r0, r4
 8005542:	d005      	beq.n	8005550 <_malloc_r+0xa8>
 8005544:	1a21      	subs	r1, r4, r0
 8005546:	4630      	mov	r0, r6
 8005548:	f000 f808 	bl	800555c <_sbrk_r>
 800554c:	3001      	adds	r0, #1
 800554e:	d0cf      	beq.n	80054f0 <_malloc_r+0x48>
 8005550:	6025      	str	r5, [r4, #0]
 8005552:	e7db      	b.n	800550c <_malloc_r+0x64>
 8005554:	200001fc 	.word	0x200001fc
 8005558:	20000200 	.word	0x20000200

0800555c <_sbrk_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4c06      	ldr	r4, [pc, #24]	; (8005578 <_sbrk_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4605      	mov	r5, r0
 8005564:	4608      	mov	r0, r1
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	f7fe f8d8 	bl	800371c <_sbrk>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_sbrk_r+0x1a>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	b103      	cbz	r3, 8005576 <_sbrk_r+0x1a>
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200003e0 	.word	0x200003e0

0800557c <__ascii_mbtowc>:
 800557c:	b082      	sub	sp, #8
 800557e:	b901      	cbnz	r1, 8005582 <__ascii_mbtowc+0x6>
 8005580:	a901      	add	r1, sp, #4
 8005582:	b142      	cbz	r2, 8005596 <__ascii_mbtowc+0x1a>
 8005584:	b14b      	cbz	r3, 800559a <__ascii_mbtowc+0x1e>
 8005586:	7813      	ldrb	r3, [r2, #0]
 8005588:	600b      	str	r3, [r1, #0]
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	1c10      	adds	r0, r2, #0
 800558e:	bf18      	it	ne
 8005590:	2001      	movne	r0, #1
 8005592:	b002      	add	sp, #8
 8005594:	4770      	bx	lr
 8005596:	4610      	mov	r0, r2
 8005598:	e7fb      	b.n	8005592 <__ascii_mbtowc+0x16>
 800559a:	f06f 0001 	mvn.w	r0, #1
 800559e:	e7f8      	b.n	8005592 <__ascii_mbtowc+0x16>

080055a0 <__malloc_lock>:
 80055a0:	4770      	bx	lr

080055a2 <__malloc_unlock>:
 80055a2:	4770      	bx	lr

080055a4 <__ascii_wctomb>:
 80055a4:	b149      	cbz	r1, 80055ba <__ascii_wctomb+0x16>
 80055a6:	2aff      	cmp	r2, #255	; 0xff
 80055a8:	bf85      	ittet	hi
 80055aa:	238a      	movhi	r3, #138	; 0x8a
 80055ac:	6003      	strhi	r3, [r0, #0]
 80055ae:	700a      	strbls	r2, [r1, #0]
 80055b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80055b4:	bf98      	it	ls
 80055b6:	2001      	movls	r0, #1
 80055b8:	4770      	bx	lr
 80055ba:	4608      	mov	r0, r1
 80055bc:	4770      	bx	lr
	...

080055c0 <_init>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr

080055cc <_fini>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr
