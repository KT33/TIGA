
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08005f88  08005f88  00015f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006290  08006290  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006298  08006298  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080062a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001dc  0800647c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800647c  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024eb  00000000  00000000  00030301  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  00033680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233ce  00000000  00000000  000343c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c244  00000000  00000000  00057796  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d22f3  00000000  00000000  000639da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135ccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  00135d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005f70 	.word	0x08005f70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08005f70 	.word	0x08005f70

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fba1 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f002 f9ae 	bl	800328c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fbab 	bl	80016b6 <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 fb81 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	20000614 	.word	0x20000614

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000614 	.word	0x20000614

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_Delay+0x40>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f001 fe88 	bl	8002d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f94a 	bl	800130c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e113      	b.n	80012ec <HAL_ADC_ConfigChannel+0x244>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d925      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	3b1e      	subs	r3, #30
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	e022      	b.n	8001166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	2207      	movs	r2, #7
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6919      	ldr	r1, [r3, #16]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	4603      	mov	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4403      	add	r3, r0
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b05      	subs	r3, #5
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b05      	subs	r3, #5
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
 80011b6:	e04c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d824      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b23      	subs	r3, #35	; 0x23
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b23      	subs	r3, #35	; 0x23
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
 8001208:	e023      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b41      	subs	r3, #65	; 0x41
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_ADC_ConfigChannel+0x250>)
 8001254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a28      	ldr	r2, [pc, #160]	; (80012fc <HAL_ADC_ConfigChannel+0x254>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10f      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d10b      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_ADC_ConfigChannel+0x254>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_ADC_ConfigChannel+0x258>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d003      	beq.n	800129c <HAL_ADC_ConfigChannel+0x1f4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b11      	cmp	r3, #17
 800129a:	d122      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_ADC_ConfigChannel+0x258>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_ConfigChannel+0x25c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_ADC_ConfigChannel+0x260>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9a      	lsrs	r2, r3, #18
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	10000012 	.word	0x10000012
 8001304:	20000008 	.word	0x20000008
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <ADC_Init+0x1f0>)
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	431a      	orrs	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <ADC_Init+0x1f4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00f      	b.n	800140a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0202 	bic.w	r2, r2, #2
 8001418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
 8001424:	005a      	lsls	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	3b01      	subs	r3, #1
 8001464:	035a      	lsls	r2, r3, #13
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e007      	b.n	8001480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	3b01      	subs	r3, #1
 800149c:	051a      	lsls	r2, r3, #20
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	029a      	lsls	r2, r3, #10
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	0f000001 	.word	0x0f000001

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff47 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff5c 	bl	800154c <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff8e 	bl	80015bc <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5d 	bl	8001568 <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb0 	bl	8001624 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e165      	b.n	80019b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8154 	bne.w	80019b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x4a>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0203 	and.w	r2, r3, #3
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d00b      	beq.n	80017b6 <HAL_GPIO_Init+0xe6>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80ae 	beq.w	80019b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a5b      	ldr	r2, [pc, #364]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a57      	ldr	r2, [pc, #348]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x304>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d025      	beq.n	80018ea <HAL_GPIO_Init+0x21a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x308>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01f      	beq.n	80018e6 <HAL_GPIO_Init+0x216>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x30c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x212>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x310>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x20e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x314>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x20a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_GPIO_Init+0x318>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x206>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x31c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x202>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4934      	ldr	r1, [pc, #208]	; (80019d0 <HAL_GPIO_Init+0x300>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_GPIO_Init+0x320>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192e:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <HAL_GPIO_Init+0x320>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_GPIO_Init+0x320>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x320>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_GPIO_Init+0x320>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_GPIO_Init+0x320>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_GPIO_Init+0x320>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_GPIO_Init+0x320>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae96 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	3724      	adds	r7, #36	; 0x24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0ca      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b62      	ldr	r3, [pc, #392]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b6      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494c      	ldr	r1, [pc, #304]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07d      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06d      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e065      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fa54 	bl	8000fc4 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fa50 	bl	8000fc4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04d      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e030      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490d      	ldr	r1, [pc, #52]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f81d 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff f9b6 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08005fc0 	.word	0x08005fc0
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c02:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d007      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x32>
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x38>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 808d 	bne.w	8001d32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c1a:	60bb      	str	r3, [r7, #8]
       break;
 8001c1c:	e08c      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c20:	60bb      	str	r3, [r7, #8]
      break;
 8001c22:	e089      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2e:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d023      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	f04f 0400 	mov.w	r4, #0
 8001c44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	ea03 0501 	and.w	r5, r3, r1
 8001c50:	ea04 0602 	and.w	r6, r4, r2
 8001c54:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c56:	fb02 f106 	mul.w	r1, r2, r6
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	fb02 f205 	mul.w	r2, r2, r5
 8001c60:	440a      	add	r2, r1
 8001c62:	493a      	ldr	r1, [pc, #232]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c64:	fba5 0101 	umull	r0, r1, r5, r1
 8001c68:	1853      	adds	r3, r2, r1
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f04f 0400 	mov.w	r4, #0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4623      	mov	r3, r4
 8001c76:	f7fe ffbf 	bl	8000bf8 <__aeabi_uldivmod>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e049      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	ea03 0501 	and.w	r5, r3, r1
 8001c98:	ea04 0602 	and.w	r6, r4, r2
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4632      	mov	r2, r6
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	0154      	lsls	r4, r2, #5
 8001caa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cae:	014b      	lsls	r3, r1, #5
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	1b49      	subs	r1, r1, r5
 8001cb6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	f04f 0400 	mov.w	r4, #0
 8001cc2:	0194      	lsls	r4, r2, #6
 8001cc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cc8:	018b      	lsls	r3, r1, #6
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	eb64 0402 	sbc.w	r4, r4, r2
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	00e2      	lsls	r2, r4, #3
 8001cda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cde:	00d9      	lsls	r1, r3, #3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	195b      	adds	r3, r3, r5
 8001ce6:	eb44 0406 	adc.w	r4, r4, r6
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	02a2      	lsls	r2, r4, #10
 8001cf4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cf8:	0299      	lsls	r1, r3, #10
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4621      	mov	r1, r4
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f7fe ff74 	bl	8000bf8 <__aeabi_uldivmod>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	3301      	adds	r3, #1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	60bb      	str	r3, [r7, #8]
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d34:	60bb      	str	r3, [r7, #8]
      break;
 8001d36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d38:	68bb      	ldr	r3, [r7, #8]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	00f42400 	.word	0x00f42400
 8001d4c:	017d7840 	.word	0x017d7840

08001d50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d075      	beq.n	8001e54 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d68:	4ba2      	ldr	r3, [pc, #648]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d74:	4b9f      	ldr	r3, [pc, #636]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d80:	4b9c      	ldr	r3, [pc, #624]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b99      	ldr	r3, [pc, #612]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d05b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x102>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d157      	bne.n	8001e52 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e20b      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x6e>
 8001db0:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a8f      	ldr	r2, [pc, #572]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e01d      	b.n	8001dfa <HAL_RCC_OscConfig+0xaa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x92>
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a89      	ldr	r2, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a86      	ldr	r2, [pc, #536]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0xaa>
 8001de2:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a83      	ldr	r2, [pc, #524]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a80      	ldr	r2, [pc, #512]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d013      	beq.n	8001e2a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff f8df 	bl	8000fc4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7ff f8db 	bl	8000fc4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	; 0x64
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1d0      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0xba>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f8cb 	bl	8000fc4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e32:	f7ff f8c7 	bl	8000fc4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1bc      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e44:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0xe2>
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d063      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6c:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d11c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d116      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e84:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x14c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e190      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4952      	ldr	r1, [pc, #328]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb0:	e03a      	b.n	8001f28 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <HAL_RCC_OscConfig+0x2a8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f880 	bl	8000fc4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f87c 	bl	8000fc4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e171      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	493f      	ldr	r1, [pc, #252]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCC_OscConfig+0x2a8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f85f 	bl	8000fc4 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f85b 	bl	8000fc4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e150      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d030      	beq.n	8001f96 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d016      	beq.n	8001f6a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f83f 	bl	8000fc4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f83b 	bl	8000fc4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e130      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1fa>
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f828 	bl	8000fc4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff f824 	bl	8000fc4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e119      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 809f 	beq.w	80020e2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_OscConfig+0x2a4>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d120      	bne.n	8002022 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fec:	f7fe ffea 	bl	8000fc4 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	e010      	b.n	8002016 <HAL_RCC_OscConfig+0x2c6>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	42470000 	.word	0x42470000
 8001ffc:	42470e80 	.word	0x42470e80
 8002000:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe ffde 	bl	8000fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0d3      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x2e8>
 800202a:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
 8002036:	e01c      	b.n	8002072 <HAL_RCC_OscConfig+0x322>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x30a>
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x322>
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
 8002066:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7fe ffa3 	bl	8000fc4 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe ff9f 	bl	8000fc4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e092      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCC_OscConfig+0x332>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff8d 	bl	8000fc4 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe ff89 	bl	8000fc4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e07c      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d068      	beq.n	80021bc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d060      	beq.n	80021b8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d145      	bne.n	800218a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <HAL_RCC_OscConfig+0x480>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe ff5e 	bl	8000fc4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe ff5a 	bl	8000fc4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	491d      	ldr	r1, [pc, #116]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_OscConfig+0x480>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe ff2f 	bl	8000fc4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe ff2b 	bl	8000fc4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e020      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x41a>
 8002188:	e018      	b.n	80021bc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_OscConfig+0x480>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe ff18 	bl	8000fc4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe ff14 	bl	8000fc4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e009      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCC_OscConfig+0x47c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x448>
 80021b6:	e001      	b.n	80021bc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470060 	.word	0x42470060

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e056      	b.n	8002294 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 ffb5 	bl	8003170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	ea42 0103 	orr.w	r1, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	f003 0104 	and.w	r1, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002282:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01d      	b.n	80022ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 f9b6 	bl	8003634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 f8d0 	bl	8002480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800230a:	2302      	movs	r3, #2
 800230c:	e0b4      	b.n	8002478 <HAL_TIM_PWM_ConfigChannel+0x184>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0c      	cmp	r3, #12
 8002322:	f200 809f 	bhi.w	8002464 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	08002361 	.word	0x08002361
 8002330:	08002465 	.word	0x08002465
 8002334:	08002465 	.word	0x08002465
 8002338:	08002465 	.word	0x08002465
 800233c:	080023a1 	.word	0x080023a1
 8002340:	08002465 	.word	0x08002465
 8002344:	08002465 	.word	0x08002465
 8002348:	08002465 	.word	0x08002465
 800234c:	080023e3 	.word	0x080023e3
 8002350:	08002465 	.word	0x08002465
 8002354:	08002465 	.word	0x08002465
 8002358:	08002465 	.word	0x08002465
 800235c:	08002423 	.word	0x08002423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f92a 	bl	80025c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0208 	orr.w	r2, r2, #8
 800237a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0204 	bic.w	r2, r2, #4
 800238a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	619a      	str	r2, [r3, #24]
      break;
 800239e:	e062      	b.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f97a 	bl	80026a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6999      	ldr	r1, [r3, #24]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	021a      	lsls	r2, r3, #8
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	619a      	str	r2, [r3, #24]
      break;
 80023e0:	e041      	b.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f9cf 	bl	800278c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0208 	orr.w	r2, r2, #8
 80023fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0204 	bic.w	r2, r2, #4
 800240c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
      break;
 8002420:	e021      	b.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fa23 	bl	8002874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800243c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69d9      	ldr	r1, [r3, #28]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	61da      	str	r2, [r3, #28]
      break;
 8002462:	e000      	b.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002464:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a40      	ldr	r2, [pc, #256]	; (8002594 <TIM_Base_SetConfig+0x114>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <TIM_Base_SetConfig+0x40>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249e:	d00f      	beq.n	80024c0 <TIM_Base_SetConfig+0x40>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3d      	ldr	r2, [pc, #244]	; (8002598 <TIM_Base_SetConfig+0x118>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <TIM_Base_SetConfig+0x40>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3c      	ldr	r2, [pc, #240]	; (800259c <TIM_Base_SetConfig+0x11c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x40>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <TIM_Base_SetConfig+0x120>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x40>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <TIM_Base_SetConfig+0x124>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <TIM_Base_SetConfig+0x114>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d027      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <TIM_Base_SetConfig+0x118>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d023      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2b      	ldr	r2, [pc, #172]	; (800259c <TIM_Base_SetConfig+0x11c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <TIM_Base_SetConfig+0x120>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01b      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <TIM_Base_SetConfig+0x124>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d017      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <TIM_Base_SetConfig+0x128>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <TIM_Base_SetConfig+0x12c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00f      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <TIM_Base_SetConfig+0x130>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <TIM_Base_SetConfig+0x134>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <TIM_Base_SetConfig+0x138>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <TIM_Base_SetConfig+0x13c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <TIM_Base_SetConfig+0xf8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <TIM_Base_SetConfig+0x124>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d103      	bne.n	8002580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	615a      	str	r2, [r3, #20]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800
 80025b4:	40001800 	.word	0x40001800
 80025b8:	40001c00 	.word	0x40001c00
 80025bc:	40002000 	.word	0x40002000

080025c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f023 0201 	bic.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 0302 	bic.w	r3, r3, #2
 8002608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a20      	ldr	r2, [pc, #128]	; (8002698 <TIM_OC1_SetConfig+0xd8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <TIM_OC1_SetConfig+0x64>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <TIM_OC1_SetConfig+0xdc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10c      	bne.n	800263e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0308 	bic.w	r3, r3, #8
 800262a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <TIM_OC1_SetConfig+0xd8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_OC1_SetConfig+0x8e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <TIM_OC1_SetConfig+0xdc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d111      	bne.n	8002672 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40010000 	.word	0x40010000
 800269c:	40010400 	.word	0x40010400

080026a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0320 	bic.w	r3, r3, #32
 80026ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a22      	ldr	r2, [pc, #136]	; (8002784 <TIM_OC2_SetConfig+0xe4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_OC2_SetConfig+0x68>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <TIM_OC2_SetConfig+0xe8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10d      	bne.n	8002724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <TIM_OC2_SetConfig+0xe4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_OC2_SetConfig+0x94>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <TIM_OC2_SetConfig+0xe8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d113      	bne.n	800275c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40010400 	.word	0x40010400

0800278c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <TIM_OC3_SetConfig+0xe0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_OC3_SetConfig+0x66>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <TIM_OC3_SetConfig+0xe4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10d      	bne.n	800280e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800280c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <TIM_OC3_SetConfig+0xe0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <TIM_OC3_SetConfig+0x92>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <TIM_OC3_SetConfig+0xe4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d113      	bne.n	8002846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800282c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	621a      	str	r2, [r3, #32]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40010000 	.word	0x40010000
 8002870:	40010400 	.word	0x40010400

08002874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	031b      	lsls	r3, r3, #12
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <TIM_OC4_SetConfig+0xa4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_OC4_SetConfig+0x68>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a11      	ldr	r2, [pc, #68]	; (800291c <TIM_OC4_SetConfig+0xa8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d109      	bne.n	80028f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e032      	b.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002970:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <_DoInit+0x8c>)
 80029b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <_DoInit+0x90>)
 80029c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <_DoInit+0x94>)
 80029cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <_DoInit+0x90>)
 80029ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_DoInit+0x98>)
 80029f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2210      	movs	r2, #16
 80029f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3307      	adds	r3, #7
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <_DoInit+0x9c>)
 8002a12:	6810      	ldr	r0, [r2, #0]
 8002a14:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <_DoInit+0xa0>)
 8002a1a:	6810      	ldr	r0, [r2, #0]
 8002a1c:	6018      	str	r0, [r3, #0]
 8002a1e:	8891      	ldrh	r1, [r2, #4]
 8002a20:	7992      	ldrb	r2, [r2, #6]
 8002a22:	8099      	strh	r1, [r3, #4]
 8002a24:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	719a      	strb	r2, [r3, #6]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	20000618 	.word	0x20000618
 8002a3c:	08005f88 	.word	0x08005f88
 8002a40:	200001f8 	.word	0x200001f8
 8002a44:	200005f8 	.word	0x200005f8
 8002a48:	08005f94 	.word	0x08005f94
 8002a4c:	08005f98 	.word	0x08005f98

08002a50 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d905      	bls.n	8002a80 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e007      	b.n	8002a90 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1acb      	subs	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	bf28      	it	cs
 8002a9e:	4613      	movcs	r3, r2
 8002aa0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	bf28      	it	cs
 8002aaa:	4613      	movcs	r3, r2
 8002aac:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fec2 	bl	8003844 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d101      	bne.n	8002aee <_WriteBlocking+0x9e>
      WrOff = 0u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1b5      	bne.n	8002a66 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8002afa:	69bb      	ldr	r3, [r7, #24]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d90e      	bls.n	8002b46 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fe85 	bl	8003844 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002b44:	e01a      	b.n	8002b7c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fe74 	bl	8003844 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6858      	ldr	r0, [r3, #4]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f000 fe67 	bl	8003844 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d808      	bhi.n	8002bb2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	3b01      	subs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e004      	b.n	8002bbc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002bbc:	697b      	ldr	r3, [r7, #20]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <SEGGER_RTT_WriteNoLock+0x98>)
 8002bea:	4413      	add	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d017      	beq.n	8002c26 <SEGGER_RTT_WriteNoLock+0x5a>
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d302      	bcc.n	8002c00 <SEGGER_RTT_WriteNoLock+0x34>
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d023      	beq.n	8002c46 <SEGGER_RTT_WriteNoLock+0x7a>
 8002bfe:	e029      	b.n	8002c54 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f7ff ffbf 	bl	8002b84 <_GetAvailWriteSpace>
 8002c06:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d202      	bcs.n	8002c16 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002c14:	e021      	b.n	8002c5a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff70 	bl	8002b04 <_WriteNoCheck>
    break;
 8002c24:	e019      	b.n	8002c5a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ffac 	bl	8002b84 <_GetAvailWriteSpace>
 8002c2c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4293      	cmp	r3, r2
 8002c34:	bf28      	it	cs
 8002c36:	4613      	movcs	r3, r2
 8002c38:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff60 	bl	8002b04 <_WriteNoCheck>
    break;
 8002c44:	e009      	b.n	8002c5a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	69b9      	ldr	r1, [r7, #24]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff00 	bl	8002a50 <_WriteBlocking>
 8002c50:	61f8      	str	r0, [r7, #28]
    break;
 8002c52:	e002      	b.n	8002c5a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
    break;
 8002c58:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000618 	.word	0x20000618

08002c68 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <SEGGER_RTT_Write+0x44>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <SEGGER_RTT_Write+0x18>
 8002c7c:	f7ff fe96 	bl	80029ac <_DoInit>
  SEGGER_RTT_LOCK();
 8002c80:	f3ef 8311 	mrs	r3, BASEPRI
 8002c84:	f04f 0120 	mov.w	r1, #32
 8002c88:	f381 8811 	msr	BASEPRI, r1
 8002c8c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ff9a 	bl	8002bcc <SEGGER_RTT_WriteNoLock>
 8002c98:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8002ca0:	693b      	ldr	r3, [r7, #16]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000618 	.word	0x20000618

08002cb0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <MX_ADC1_Init+0x9c>)
 8002cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <MX_ADC1_Init+0xa0>)
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d0e:	480e      	ldr	r0, [pc, #56]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002d10:	f7fe f986 	bl	8001020 <HAL_ADC_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d1a:	f000 f9b5 	bl	8003088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4806      	ldr	r0, [pc, #24]	; (8002d48 <MX_ADC1_Init+0x98>)
 8002d30:	f7fe f9ba 	bl	80010a8 <HAL_ADC_ConfigChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d3a:	f000 f9a5 	bl	8003088 <Error_Handler>
  }

}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200006c0 	.word	0x200006c0
 8002d4c:	40012000 	.word	0x40012000
 8002d50:	0f000001 	.word	0x0f000001

08002d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_ADC_MspInit+0xb0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d141      	bne.n	8002dfa <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_ADC_MspInit+0xb4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <HAL_ADC_MspInit+0xb8>)
 8002dde:	f7fe fc77 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8002de2:	2302      	movs	r3, #2
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de6:	2303      	movs	r3, #3
 8002de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	4806      	ldr	r0, [pc, #24]	; (8002e10 <HAL_ADC_MspInit+0xbc>)
 8002df6:	f7fe fc6b 	bl	80016d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40012000 	.word	0x40012000
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400

08002e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <MX_GPIO_Init+0x128>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, GPIO_PIN_RESET);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ea0:	4827      	ldr	r0, [pc, #156]	; (8002f40 <MX_GPIO_Init+0x12c>)
 8002ea2:	f7fe fda7 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f241 3170 	movw	r1, #4976	; 0x1370
 8002eac:	4825      	ldr	r0, [pc, #148]	; (8002f44 <MX_GPIO_Init+0x130>)
 8002eae:	f7fe fda1 	bl	80019f4 <HAL_GPIO_WritePin>
                          |FLAG_LED_Pin|SEN_LED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f240 31c1 	movw	r1, #961	; 0x3c1
 8002eb8:	4823      	ldr	r0, [pc, #140]	; (8002f48 <MX_GPIO_Init+0x134>)
 8002eba:	f7fe fd9b 	bl	80019f4 <HAL_GPIO_WritePin>
                          |MOTER_L_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENLED_R_Pin;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENLED_R_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	481a      	ldr	r0, [pc, #104]	; (8002f40 <MX_GPIO_Init+0x12c>)
 8002ed8:	f7fe fbfa 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 8002edc:	f241 3370 	movw	r3, #4976	; 0x1370
 8002ee0:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|SEN_LED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4813      	ldr	r0, [pc, #76]	; (8002f44 <MX_GPIO_Init+0x130>)
 8002ef6:	f7fe fbeb 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 8002efa:	f240 33c1 	movw	r3, #961	; 0x3c1
 8002efe:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	480d      	ldr	r0, [pc, #52]	; (8002f48 <MX_GPIO_Init+0x134>)
 8002f14:	f7fe fbdc 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8002f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <MX_GPIO_Init+0x134>)
 8002f2e:	f7fe fbcf 	bl	80016d0 <HAL_GPIO_Init>

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400

08002f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f52:	f7fd ffd1 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f56:	f000 f839 	bl	8002fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f5a:	f7ff ff5b 	bl	8002e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f5e:	f7ff fea7 	bl	8002cb0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002f62:	f000 f899 	bl	8003098 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002f66:	f000 f8cd 	bl	8003104 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002f6a:	f000 faa9 	bl	80034c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f6e:	f000 fb09 	bl	8003584 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i=33;
 8002f72:	2321      	movs	r3, #33	; 0x21
 8002f74:	607b      	str	r3, [r7, #4]
	float pi=3.14;
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <main+0x70>)
 8002f78:	603b      	str	r3, [r7, #0]
	while (1) {
//	  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);

//	  SEGGER_RTT_WriteString(0, "SEGGER Real-Time-Terminal Sample\r\n\r\n");
//	  SEGGER_RTT_WriteString(0, "###### Testing SEGGER_printf() ######\r\n");
		printf("Hello World!\n");
 8002f7a:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <main+0x74>)
 8002f7c:	f001 f946 	bl	800420c <puts>
		printf("i=%d,pi=%f\r\n",i,pi);
 8002f80:	6838      	ldr	r0, [r7, #0]
 8002f82:	f7fd fb09 	bl	8000598 <__aeabi_f2d>
 8002f86:	4603      	mov	r3, r0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <main+0x78>)
 8002f92:	f001 f8c7 	bl	8004124 <iprintf>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin,1);
 8002f96:	2201      	movs	r2, #1
 8002f98:	2110      	movs	r1, #16
 8002f9a:	480b      	ldr	r0, [pc, #44]	; (8002fc8 <main+0x7c>)
 8002f9c:	f7fe fd2a 	bl	80019f4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fa4:	f7fe f81a 	bl	8000fdc <HAL_Delay>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin,0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2110      	movs	r1, #16
 8002fac:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <main+0x7c>)
 8002fae:	f7fe fd21 	bl	80019f4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fb6:	f7fe f811 	bl	8000fdc <HAL_Delay>
	while (1) {
 8002fba:	e7de      	b.n	8002f7a <main+0x2e>
 8002fbc:	4048f5c3 	.word	0x4048f5c3
 8002fc0:	08005fa0 	.word	0x08005fa0
 8002fc4:	08005fb0 	.word	0x08005fb0
 8002fc8:	40020000 	.word	0x40020000

08002fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b094      	sub	sp, #80	; 0x50
 8002fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd2:	f107 031c 	add.w	r3, r7, #28
 8002fd6:	2234      	movs	r2, #52	; 0x34
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fc3d 	bl	800385a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <SystemClock_Config+0xb4>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <SystemClock_Config+0xb4>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <SystemClock_Config+0xb4>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <SystemClock_Config+0xb8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <SystemClock_Config+0xb8>)
 8003016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <SystemClock_Config+0xb8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003028:	2302      	movs	r3, #2
 800302a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800302c:	2301      	movs	r3, #1
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003030:	2310      	movs	r3, #16
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003034:	2300      	movs	r3, #0
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fe87 	bl	8001d50 <HAL_RCC_OscConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003048:	f000 f81e 	bl	8003088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800304c:	230f      	movs	r3, #15
 800304e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003060:	f107 0308 	add.w	r3, r7, #8
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fcde 	bl	8001a28 <HAL_RCC_ClockConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003072:	f000 f809 	bl	8003088 <Error_Handler>
  }
}
 8003076:	bf00      	nop
 8003078:	3750      	adds	r7, #80	; 0x50
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <MX_SPI2_Init+0x64>)
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <MX_SPI2_Init+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <MX_SPI2_Init+0x64>)
 80030a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <MX_SPI2_Init+0x64>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <MX_SPI2_Init+0x64>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_SPI2_Init+0x64>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <MX_SPI2_Init+0x64>)
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_SPI2_Init+0x64>)
 80030c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_SPI2_Init+0x64>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <MX_SPI2_Init+0x64>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_SPI2_Init+0x64>)
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <MX_SPI2_Init+0x64>)
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_SPI2_Init+0x64>)
 80030e4:	220a      	movs	r2, #10
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <MX_SPI2_Init+0x64>)
 80030ea:	f7ff f873 	bl	80021d4 <HAL_SPI_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80030f4:	f7ff ffc8 	bl	8003088 <Error_Handler>
  }

}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000708 	.word	0x20000708
 8003100:	40003800 	.word	0x40003800

08003104 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <MX_SPI3_Init+0x64>)
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <MX_SPI3_Init+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <MX_SPI3_Init+0x64>)
 8003110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003114:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_SPI3_Init+0x64>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <MX_SPI3_Init+0x64>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_SPI3_Init+0x64>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_SPI3_Init+0x64>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_SPI3_Init+0x64>)
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_SPI3_Init+0x64>)
 8003138:	2200      	movs	r2, #0
 800313a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MX_SPI3_Init+0x64>)
 800313e:	2200      	movs	r2, #0
 8003140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_SPI3_Init+0x64>)
 8003144:	2200      	movs	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_SPI3_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_SPI3_Init+0x64>)
 8003150:	220a      	movs	r2, #10
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <MX_SPI3_Init+0x64>)
 8003156:	f7ff f83d 	bl	80021d4 <HAL_SPI_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003160:	f7ff ff92 	bl	8003088 <Error_Handler>
  }

}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000760 	.word	0x20000760
 800316c:	40003c00 	.word	0x40003c00

08003170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a3b      	ldr	r2, [pc, #236]	; (800327c <HAL_SPI_MspInit+0x10c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12d      	bne.n	80031ee <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_SPI_MspInit+0x110>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a39      	ldr	r2, [pc, #228]	; (8003280 <HAL_SPI_MspInit+0x110>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <HAL_SPI_MspInit+0x110>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4b33      	ldr	r3, [pc, #204]	; (8003280 <HAL_SPI_MspInit+0x110>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <HAL_SPI_MspInit+0x110>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_SPI_MspInit+0x110>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 80031ca:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031dc:	2305      	movs	r3, #5
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	4827      	ldr	r0, [pc, #156]	; (8003284 <HAL_SPI_MspInit+0x114>)
 80031e8:	f7fe fa72 	bl	80016d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80031ec:	e041      	b.n	8003272 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_SPI_MspInit+0x118>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d13c      	bne.n	8003272 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_SPI_MspInit+0x110>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_SPI_MspInit+0x110>)
 8003202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_SPI_MspInit+0x110>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_SPI_MspInit+0x110>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_SPI_MspInit+0x110>)
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_SPI_MspInit+0x110>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 8003230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003242:	2307      	movs	r3, #7
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <HAL_SPI_MspInit+0x114>)
 800324e:	f7fe fa3f 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 8003252:	2330      	movs	r3, #48	; 0x30
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325e:	2303      	movs	r3, #3
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003262:	2306      	movs	r3, #6
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	4619      	mov	r1, r3
 800326c:	4805      	ldr	r0, [pc, #20]	; (8003284 <HAL_SPI_MspInit+0x114>)
 800326e:	f7fe fa2f 	bl	80016d0 <HAL_GPIO_Init>
}
 8003272:	bf00      	nop
 8003274:	3730      	adds	r7, #48	; 0x30
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40003800 	.word	0x40003800
 8003280:	40023800 	.word	0x40023800
 8003284:	40020400 	.word	0x40020400
 8003288:	40003c00 	.word	0x40003c00

0800328c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_MspInit+0x4c>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_MspInit+0x4c>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_MspInit+0x4c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_MspInit+0x4c>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <HAL_MspInit+0x4c>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_MspInit+0x4c>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <MemManage_Handler+0x4>

080032f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <BusFault_Handler+0x4>

080032fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <UsageFault_Handler+0x4>

08003302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f7fd fe34 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e00a      	b.n	8003360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800334a:	f3af 8000 	nop.w
 800334e:	4601      	mov	r1, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	60ba      	str	r2, [r7, #8]
 8003356:	b2ca      	uxtb	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbf0      	blt.n	800334a <_read+0x12>
	}

return len;
 8003368:	687b      	ldr	r3, [r7, #4]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

    (void) file; /* Not used, avoid warning */
    SEGGER_RTT_Write(0, ptr, len);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	2000      	movs	r0, #0
 8003386:	f7ff fc6f 	bl	8002c68 <SEGGER_RTT_Write>
    return len;
 800338a:	687b      	ldr	r3, [r7, #4]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_close>:

int _close(int file)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033bc:	605a      	str	r2, [r3, #4]
	return 0;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <_isatty>:

int _isatty(int file)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	return 1;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
	return 0;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <_sbrk+0x50>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <_sbrk+0x16>
		heap_end = &end;
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <_sbrk+0x50>)
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <_sbrk+0x54>)
 8003410:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <_sbrk+0x50>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <_sbrk+0x50>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	466a      	mov	r2, sp
 8003422:	4293      	cmp	r3, r2
 8003424:	d907      	bls.n	8003436 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003426:	f000 f9e3 	bl	80037f0 <__errno>
 800342a:	4602      	mov	r2, r0
 800342c:	230c      	movs	r3, #12
 800342e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	e006      	b.n	8003444 <_sbrk+0x48>
	}

	heap_end += incr;
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <_sbrk+0x50>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	4a03      	ldr	r2, [pc, #12]	; (800344c <_sbrk+0x50>)
 8003440:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000608 	.word	0x20000608
 8003450:	20000840 	.word	0x20000840

08003454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <SystemInit+0x60>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <SystemInit+0x60>)
 8003460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <SystemInit+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <SystemInit+0x64>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <SystemInit+0x64>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <SystemInit+0x64>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <SystemInit+0x64>)
 8003480:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <SystemInit+0x64>)
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <SystemInit+0x68>)
 800348e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <SystemInit+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <SystemInit+0x64>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <SystemInit+0x64>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SystemInit+0x60>)
 80034a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034a8:	609a      	str	r2, [r3, #8]
#endif
}
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	24003010 	.word	0x24003010

080034c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c6:	f107 0320 	add.w	r3, r7, #32
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	615a      	str	r2, [r3, #20]
 80034e0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <MX_TIM2_Init+0xc0>)
 80034e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <MX_TIM2_Init+0xc0>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <MX_TIM2_Init+0xc0>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <MX_TIM2_Init+0xc0>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <MX_TIM2_Init+0xc0>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <MX_TIM2_Init+0xc0>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003508:	481d      	ldr	r0, [pc, #116]	; (8003580 <MX_TIM2_Init+0xc0>)
 800350a:	f7fe fec7 	bl	800229c <HAL_TIM_PWM_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003514:	f7ff fdb8 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003520:	f107 0320 	add.w	r3, r7, #32
 8003524:	4619      	mov	r1, r3
 8003526:	4816      	ldr	r0, [pc, #88]	; (8003580 <MX_TIM2_Init+0xc0>)
 8003528:	f7ff f9fa 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8003532:	f7ff fda9 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003536:	2360      	movs	r3, #96	; 0x60
 8003538:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	2200      	movs	r2, #0
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <MX_TIM2_Init+0xc0>)
 800354e:	f7fe fed1 	bl	80022f4 <HAL_TIM_PWM_ConfigChannel>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003558:	f7ff fd96 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2204      	movs	r2, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4807      	ldr	r0, [pc, #28]	; (8003580 <MX_TIM2_Init+0xc0>)
 8003564:	f7fe fec6 	bl	80022f4 <HAL_TIM_PWM_ConfigChannel>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800356e:	f7ff fd8b 	bl	8003088 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <MX_TIM2_Init+0xc0>)
 8003574:	f000 f894 	bl	80036a0 <HAL_TIM_MspPostInit>

}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200007f8 	.word	0x200007f8

08003584 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358a:	f107 0320 	add.w	r3, r7, #32
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	615a      	str	r2, [r3, #20]
 80035a4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <MX_TIM3_Init+0xa8>)
 80035a8:	4a21      	ldr	r2, [pc, #132]	; (8003630 <MX_TIM3_Init+0xac>)
 80035aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <MX_TIM3_Init+0xa8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_TIM3_Init+0xa8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <MX_TIM3_Init+0xa8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035ca:	4818      	ldr	r0, [pc, #96]	; (800362c <MX_TIM3_Init+0xa8>)
 80035cc:	f7fe fe66 	bl	800229c <HAL_TIM_PWM_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80035d6:	f7ff fd57 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e2:	f107 0320 	add.w	r3, r7, #32
 80035e6:	4619      	mov	r1, r3
 80035e8:	4810      	ldr	r0, [pc, #64]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ea:	f7ff f999 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80035f4:	f7ff fd48 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f8:	2360      	movs	r3, #96	; 0x60
 80035fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2204      	movs	r2, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4807      	ldr	r0, [pc, #28]	; (800362c <MX_TIM3_Init+0xa8>)
 8003610:	f7fe fe70 	bl	80022f4 <HAL_TIM_PWM_ConfigChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800361a:	f7ff fd35 	bl	8003088 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800361e:	4803      	ldr	r0, [pc, #12]	; (800362c <MX_TIM3_Init+0xa8>)
 8003620:	f000 f83e 	bl	80036a0 <HAL_TIM_MspPostInit>

}
 8003624:	bf00      	nop
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200007b8 	.word	0x200007b8
 8003630:	40000400 	.word	0x40000400

08003634 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003662:	e012      	b.n	800368a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0c      	ldr	r2, [pc, #48]	; (800369c <HAL_TIM_PWM_MspInit+0x68>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10d      	bne.n	800368a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_TIM_PWM_MspInit+0x64>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40000400 	.word	0x40000400

080036a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d13d      	bne.n	800373e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b31      	ldr	r3, [pc, #196]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b2e      	ldr	r3, [pc, #184]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a29      	ldr	r2, [pc, #164]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	481e      	ldr	r0, [pc, #120]	; (8003790 <HAL_TIM_MspPostInit+0xf0>)
 8003718:	f7fd ffda 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 800371c:	2308      	movs	r3, #8
 800371e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	4817      	ldr	r0, [pc, #92]	; (8003794 <HAL_TIM_MspPostInit+0xf4>)
 8003738:	f7fd ffca 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800373c:	e022      	b.n	8003784 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_TIM_MspPostInit+0xf8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d11d      	bne.n	8003784 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6313      	str	r3, [r2, #48]	; 0x30
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_TIM_MspPostInit+0xec>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2302      	movs	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003774:	2302      	movs	r3, #2
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4619      	mov	r1, r3
 800377e:	4804      	ldr	r0, [pc, #16]	; (8003790 <HAL_TIM_MspPostInit+0xf0>)
 8003780:	f7fd ffa6 	bl	80016d0 <HAL_GPIO_Init>
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40000400 	.word	0x40000400

0800379c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800379c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80037a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037a2:	e003      	b.n	80037ac <LoopCopyDataInit>

080037a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037aa:	3104      	adds	r1, #4

080037ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037b4:	d3f6      	bcc.n	80037a4 <CopyDataInit>
  ldr  r2, =_sbss
 80037b6:	4a0b      	ldr	r2, [pc, #44]	; (80037e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037b8:	e002      	b.n	80037c0 <LoopFillZerobss>

080037ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80037ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037bc:	f842 3b04 	str.w	r3, [r2], #4

080037c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037c4:	d3f9      	bcc.n	80037ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037c6:	f7ff fe45 	bl	8003454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ca:	f000 f817 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ce:	f7ff fbbd 	bl	8002f4c <main>
  bx  lr    
 80037d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037d8:	080062a0 	.word	0x080062a0
  ldr  r0, =_sdata
 80037dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037e0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80037e4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80037e8:	2000083c 	.word	0x2000083c

080037ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037ec:	e7fe      	b.n	80037ec <ADC_IRQHandler>
	...

080037f0 <__errno>:
 80037f0:	4b01      	ldr	r3, [pc, #4]	; (80037f8 <__errno+0x8>)
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	2000000c 	.word	0x2000000c

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4e0d      	ldr	r6, [pc, #52]	; (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <__libc_init_array+0x3c>)
 8003802:	1ba4      	subs	r4, r4, r6
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2500      	movs	r5, #0
 8003808:	42a5      	cmp	r5, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4e0b      	ldr	r6, [pc, #44]	; (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	; (8003840 <__libc_init_array+0x44>)
 8003810:	f002 fbae 	bl	8005f70 <_init>
 8003814:	1ba4      	subs	r4, r4, r6
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2500      	movs	r5, #0
 800381a:	42a5      	cmp	r5, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003824:	4798      	blx	r3
 8003826:	3501      	adds	r5, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800382e:	4798      	blx	r3
 8003830:	3501      	adds	r5, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	08006298 	.word	0x08006298
 8003838:	08006298 	.word	0x08006298
 800383c:	08006298 	.word	0x08006298
 8003840:	0800629c 	.word	0x0800629c

08003844 <memcpy>:
 8003844:	b510      	push	{r4, lr}
 8003846:	1e43      	subs	r3, r0, #1
 8003848:	440a      	add	r2, r1
 800384a:	4291      	cmp	r1, r2
 800384c:	d100      	bne.n	8003850 <memcpy+0xc>
 800384e:	bd10      	pop	{r4, pc}
 8003850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003858:	e7f7      	b.n	800384a <memcpy+0x6>

0800385a <memset>:
 800385a:	4402      	add	r2, r0
 800385c:	4603      	mov	r3, r0
 800385e:	4293      	cmp	r3, r2
 8003860:	d100      	bne.n	8003864 <memset+0xa>
 8003862:	4770      	bx	lr
 8003864:	f803 1b01 	strb.w	r1, [r3], #1
 8003868:	e7f9      	b.n	800385e <memset+0x4>

0800386a <__cvt>:
 800386a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800386e:	ec55 4b10 	vmov	r4, r5, d0
 8003872:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003874:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003878:	2d00      	cmp	r5, #0
 800387a:	460e      	mov	r6, r1
 800387c:	4691      	mov	r9, r2
 800387e:	4619      	mov	r1, r3
 8003880:	bfb8      	it	lt
 8003882:	4622      	movlt	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	f027 0720 	bic.w	r7, r7, #32
 800388a:	bfbb      	ittet	lt
 800388c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003890:	461d      	movlt	r5, r3
 8003892:	2300      	movge	r3, #0
 8003894:	232d      	movlt	r3, #45	; 0x2d
 8003896:	bfb8      	it	lt
 8003898:	4614      	movlt	r4, r2
 800389a:	2f46      	cmp	r7, #70	; 0x46
 800389c:	700b      	strb	r3, [r1, #0]
 800389e:	d004      	beq.n	80038aa <__cvt+0x40>
 80038a0:	2f45      	cmp	r7, #69	; 0x45
 80038a2:	d100      	bne.n	80038a6 <__cvt+0x3c>
 80038a4:	3601      	adds	r6, #1
 80038a6:	2102      	movs	r1, #2
 80038a8:	e000      	b.n	80038ac <__cvt+0x42>
 80038aa:	2103      	movs	r1, #3
 80038ac:	ab03      	add	r3, sp, #12
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	ab02      	add	r3, sp, #8
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4632      	mov	r2, r6
 80038b6:	4653      	mov	r3, sl
 80038b8:	ec45 4b10 	vmov	d0, r4, r5
 80038bc:	f000 fdfc 	bl	80044b8 <_dtoa_r>
 80038c0:	2f47      	cmp	r7, #71	; 0x47
 80038c2:	4680      	mov	r8, r0
 80038c4:	d102      	bne.n	80038cc <__cvt+0x62>
 80038c6:	f019 0f01 	tst.w	r9, #1
 80038ca:	d026      	beq.n	800391a <__cvt+0xb0>
 80038cc:	2f46      	cmp	r7, #70	; 0x46
 80038ce:	eb08 0906 	add.w	r9, r8, r6
 80038d2:	d111      	bne.n	80038f8 <__cvt+0x8e>
 80038d4:	f898 3000 	ldrb.w	r3, [r8]
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d10a      	bne.n	80038f2 <__cvt+0x88>
 80038dc:	2200      	movs	r2, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	4620      	mov	r0, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	f7fd f918 	bl	8000b18 <__aeabi_dcmpeq>
 80038e8:	b918      	cbnz	r0, 80038f2 <__cvt+0x88>
 80038ea:	f1c6 0601 	rsb	r6, r6, #1
 80038ee:	f8ca 6000 	str.w	r6, [sl]
 80038f2:	f8da 3000 	ldr.w	r3, [sl]
 80038f6:	4499      	add	r9, r3
 80038f8:	2200      	movs	r2, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	f7fd f90a 	bl	8000b18 <__aeabi_dcmpeq>
 8003904:	b938      	cbnz	r0, 8003916 <__cvt+0xac>
 8003906:	2230      	movs	r2, #48	; 0x30
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	454b      	cmp	r3, r9
 800390c:	d205      	bcs.n	800391a <__cvt+0xb0>
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	9103      	str	r1, [sp, #12]
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e7f8      	b.n	8003908 <__cvt+0x9e>
 8003916:	f8cd 900c 	str.w	r9, [sp, #12]
 800391a:	9b03      	ldr	r3, [sp, #12]
 800391c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800391e:	eba3 0308 	sub.w	r3, r3, r8
 8003922:	4640      	mov	r0, r8
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	b004      	add	sp, #16
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800392c <__exponent>:
 800392c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800392e:	2900      	cmp	r1, #0
 8003930:	4604      	mov	r4, r0
 8003932:	bfba      	itte	lt
 8003934:	4249      	neglt	r1, r1
 8003936:	232d      	movlt	r3, #45	; 0x2d
 8003938:	232b      	movge	r3, #43	; 0x2b
 800393a:	2909      	cmp	r1, #9
 800393c:	f804 2b02 	strb.w	r2, [r4], #2
 8003940:	7043      	strb	r3, [r0, #1]
 8003942:	dd20      	ble.n	8003986 <__exponent+0x5a>
 8003944:	f10d 0307 	add.w	r3, sp, #7
 8003948:	461f      	mov	r7, r3
 800394a:	260a      	movs	r6, #10
 800394c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003950:	fb06 1115 	mls	r1, r6, r5, r1
 8003954:	3130      	adds	r1, #48	; 0x30
 8003956:	2d09      	cmp	r5, #9
 8003958:	f803 1c01 	strb.w	r1, [r3, #-1]
 800395c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003960:	4629      	mov	r1, r5
 8003962:	dc09      	bgt.n	8003978 <__exponent+0x4c>
 8003964:	3130      	adds	r1, #48	; 0x30
 8003966:	3b02      	subs	r3, #2
 8003968:	f802 1c01 	strb.w	r1, [r2, #-1]
 800396c:	42bb      	cmp	r3, r7
 800396e:	4622      	mov	r2, r4
 8003970:	d304      	bcc.n	800397c <__exponent+0x50>
 8003972:	1a10      	subs	r0, r2, r0
 8003974:	b003      	add	sp, #12
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	4613      	mov	r3, r2
 800397a:	e7e7      	b.n	800394c <__exponent+0x20>
 800397c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003980:	f804 2b01 	strb.w	r2, [r4], #1
 8003984:	e7f2      	b.n	800396c <__exponent+0x40>
 8003986:	2330      	movs	r3, #48	; 0x30
 8003988:	4419      	add	r1, r3
 800398a:	7083      	strb	r3, [r0, #2]
 800398c:	1d02      	adds	r2, r0, #4
 800398e:	70c1      	strb	r1, [r0, #3]
 8003990:	e7ef      	b.n	8003972 <__exponent+0x46>
	...

08003994 <_printf_float>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b08d      	sub	sp, #52	; 0x34
 800399a:	460c      	mov	r4, r1
 800399c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80039a0:	4616      	mov	r6, r2
 80039a2:	461f      	mov	r7, r3
 80039a4:	4605      	mov	r5, r0
 80039a6:	f001 fcb9 	bl	800531c <_localeconv_r>
 80039aa:	6803      	ldr	r3, [r0, #0]
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fc36 	bl	8000220 <strlen>
 80039b4:	2300      	movs	r3, #0
 80039b6:	930a      	str	r3, [sp, #40]	; 0x28
 80039b8:	f8d8 3000 	ldr.w	r3, [r8]
 80039bc:	9005      	str	r0, [sp, #20]
 80039be:	3307      	adds	r3, #7
 80039c0:	f023 0307 	bic.w	r3, r3, #7
 80039c4:	f103 0208 	add.w	r2, r3, #8
 80039c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039cc:	f8d4 b000 	ldr.w	fp, [r4]
 80039d0:	f8c8 2000 	str.w	r2, [r8]
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80039e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80039e4:	9307      	str	r3, [sp, #28]
 80039e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	4ba7      	ldr	r3, [pc, #668]	; (8003c8c <_printf_float+0x2f8>)
 80039f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039f4:	f7fd f8c2 	bl	8000b7c <__aeabi_dcmpun>
 80039f8:	bb70      	cbnz	r0, 8003a58 <_printf_float+0xc4>
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295
 80039fe:	4ba3      	ldr	r3, [pc, #652]	; (8003c8c <_printf_float+0x2f8>)
 8003a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a04:	f7fd f89c 	bl	8000b40 <__aeabi_dcmple>
 8003a08:	bb30      	cbnz	r0, 8003a58 <_printf_float+0xc4>
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4640      	mov	r0, r8
 8003a10:	4649      	mov	r1, r9
 8003a12:	f7fd f88b 	bl	8000b2c <__aeabi_dcmplt>
 8003a16:	b110      	cbz	r0, 8003a1e <_printf_float+0x8a>
 8003a18:	232d      	movs	r3, #45	; 0x2d
 8003a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1e:	4a9c      	ldr	r2, [pc, #624]	; (8003c90 <_printf_float+0x2fc>)
 8003a20:	4b9c      	ldr	r3, [pc, #624]	; (8003c94 <_printf_float+0x300>)
 8003a22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003a26:	bf8c      	ite	hi
 8003a28:	4690      	movhi	r8, r2
 8003a2a:	4698      	movls	r8, r3
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f02b 0204 	bic.w	r2, fp, #4
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	6022      	str	r2, [r4, #0]
 8003a36:	f04f 0900 	mov.w	r9, #0
 8003a3a:	9700      	str	r7, [sp, #0]
 8003a3c:	4633      	mov	r3, r6
 8003a3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a40:	4621      	mov	r1, r4
 8003a42:	4628      	mov	r0, r5
 8003a44:	f000 f9e6 	bl	8003e14 <_printf_common>
 8003a48:	3001      	adds	r0, #1
 8003a4a:	f040 808d 	bne.w	8003b68 <_printf_float+0x1d4>
 8003a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a52:	b00d      	add	sp, #52	; 0x34
 8003a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	4649      	mov	r1, r9
 8003a60:	f7fd f88c 	bl	8000b7c <__aeabi_dcmpun>
 8003a64:	b110      	cbz	r0, 8003a6c <_printf_float+0xd8>
 8003a66:	4a8c      	ldr	r2, [pc, #560]	; (8003c98 <_printf_float+0x304>)
 8003a68:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <_printf_float+0x308>)
 8003a6a:	e7da      	b.n	8003a22 <_printf_float+0x8e>
 8003a6c:	6861      	ldr	r1, [r4, #4]
 8003a6e:	1c4b      	adds	r3, r1, #1
 8003a70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003a74:	a80a      	add	r0, sp, #40	; 0x28
 8003a76:	d13e      	bne.n	8003af6 <_printf_float+0x162>
 8003a78:	2306      	movs	r3, #6
 8003a7a:	6063      	str	r3, [r4, #4]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a82:	ab09      	add	r3, sp, #36	; 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	ec49 8b10 	vmov	d0, r8, r9
 8003a8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a8e:	6022      	str	r2, [r4, #0]
 8003a90:	f8cd a004 	str.w	sl, [sp, #4]
 8003a94:	6861      	ldr	r1, [r4, #4]
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff fee7 	bl	800386a <__cvt>
 8003a9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003aa0:	2b47      	cmp	r3, #71	; 0x47
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	d109      	bne.n	8003aba <_printf_float+0x126>
 8003aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa8:	1cd8      	adds	r0, r3, #3
 8003aaa:	db02      	blt.n	8003ab2 <_printf_float+0x11e>
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	dd47      	ble.n	8003b42 <_printf_float+0x1ae>
 8003ab2:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ab6:	fa5f fa8a 	uxtb.w	sl, sl
 8003aba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ac0:	d824      	bhi.n	8003b0c <_printf_float+0x178>
 8003ac2:	3901      	subs	r1, #1
 8003ac4:	4652      	mov	r2, sl
 8003ac6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003aca:	9109      	str	r1, [sp, #36]	; 0x24
 8003acc:	f7ff ff2e 	bl	800392c <__exponent>
 8003ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ad2:	1813      	adds	r3, r2, r0
 8003ad4:	2a01      	cmp	r2, #1
 8003ad6:	4681      	mov	r9, r0
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	dc02      	bgt.n	8003ae2 <_printf_float+0x14e>
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	07d1      	lsls	r1, r2, #31
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_float+0x152>
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0a5      	beq.n	8003a3a <_printf_float+0xa6>
 8003aee:	232d      	movs	r3, #45	; 0x2d
 8003af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af4:	e7a1      	b.n	8003a3a <_printf_float+0xa6>
 8003af6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003afa:	f000 8177 	beq.w	8003dec <_printf_float+0x458>
 8003afe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b02:	d1bb      	bne.n	8003a7c <_printf_float+0xe8>
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d1b9      	bne.n	8003a7c <_printf_float+0xe8>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e7b6      	b.n	8003a7a <_printf_float+0xe6>
 8003b0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003b10:	d119      	bne.n	8003b46 <_printf_float+0x1b2>
 8003b12:	2900      	cmp	r1, #0
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	dd0c      	ble.n	8003b32 <_printf_float+0x19e>
 8003b18:	6121      	str	r1, [r4, #16]
 8003b1a:	b913      	cbnz	r3, 8003b22 <_printf_float+0x18e>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	07d2      	lsls	r2, r2, #31
 8003b20:	d502      	bpl.n	8003b28 <_printf_float+0x194>
 8003b22:	3301      	adds	r3, #1
 8003b24:	440b      	add	r3, r1
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b2c:	f04f 0900 	mov.w	r9, #0
 8003b30:	e7d9      	b.n	8003ae6 <_printf_float+0x152>
 8003b32:	b913      	cbnz	r3, 8003b3a <_printf_float+0x1a6>
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	07d0      	lsls	r0, r2, #31
 8003b38:	d501      	bpl.n	8003b3e <_printf_float+0x1aa>
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	e7f3      	b.n	8003b26 <_printf_float+0x192>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e7f1      	b.n	8003b26 <_printf_float+0x192>
 8003b42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003b46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	db05      	blt.n	8003b5a <_printf_float+0x1c6>
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	07d1      	lsls	r1, r2, #31
 8003b54:	d5e8      	bpl.n	8003b28 <_printf_float+0x194>
 8003b56:	3301      	adds	r3, #1
 8003b58:	e7e5      	b.n	8003b26 <_printf_float+0x192>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfd4      	ite	le
 8003b5e:	f1c3 0302 	rsble	r3, r3, #2
 8003b62:	2301      	movgt	r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	e7de      	b.n	8003b26 <_printf_float+0x192>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	055a      	lsls	r2, r3, #21
 8003b6c:	d407      	bmi.n	8003b7e <_printf_float+0x1ea>
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	4642      	mov	r2, r8
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d12b      	bne.n	8003bd4 <_printf_float+0x240>
 8003b7c:	e767      	b.n	8003a4e <_printf_float+0xba>
 8003b7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003b82:	f240 80dc 	bls.w	8003d3e <_printf_float+0x3aa>
 8003b86:	2200      	movs	r2, #0
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b8e:	f7fc ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d033      	beq.n	8003bfe <_printf_float+0x26a>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4a41      	ldr	r2, [pc, #260]	; (8003ca0 <_printf_float+0x30c>)
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	47b8      	blx	r7
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f43f af54 	beq.w	8003a4e <_printf_float+0xba>
 8003ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003baa:	429a      	cmp	r2, r3
 8003bac:	db02      	blt.n	8003bb4 <_printf_float+0x220>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	07d8      	lsls	r0, r3, #31
 8003bb2:	d50f      	bpl.n	8003bd4 <_printf_float+0x240>
 8003bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bb8:	4631      	mov	r1, r6
 8003bba:	4628      	mov	r0, r5
 8003bbc:	47b8      	blx	r7
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f43f af45 	beq.w	8003a4e <_printf_float+0xba>
 8003bc4:	f04f 0800 	mov.w	r8, #0
 8003bc8:	f104 091a 	add.w	r9, r4, #26
 8003bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	4543      	cmp	r3, r8
 8003bd2:	dc09      	bgt.n	8003be8 <_printf_float+0x254>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	079b      	lsls	r3, r3, #30
 8003bd8:	f100 8103 	bmi.w	8003de2 <_printf_float+0x44e>
 8003bdc:	68e0      	ldr	r0, [r4, #12]
 8003bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003be0:	4298      	cmp	r0, r3
 8003be2:	bfb8      	it	lt
 8003be4:	4618      	movlt	r0, r3
 8003be6:	e734      	b.n	8003a52 <_printf_float+0xbe>
 8003be8:	2301      	movs	r3, #1
 8003bea:	464a      	mov	r2, r9
 8003bec:	4631      	mov	r1, r6
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f43f af2b 	beq.w	8003a4e <_printf_float+0xba>
 8003bf8:	f108 0801 	add.w	r8, r8, #1
 8003bfc:	e7e6      	b.n	8003bcc <_printf_float+0x238>
 8003bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dc2b      	bgt.n	8003c5c <_printf_float+0x2c8>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <_printf_float+0x30c>)
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	47b8      	blx	r7
 8003c0e:	3001      	adds	r0, #1
 8003c10:	f43f af1d 	beq.w	8003a4e <_printf_float+0xba>
 8003c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c16:	b923      	cbnz	r3, 8003c22 <_printf_float+0x28e>
 8003c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c1a:	b913      	cbnz	r3, 8003c22 <_printf_float+0x28e>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	07d9      	lsls	r1, r3, #31
 8003c20:	d5d8      	bpl.n	8003bd4 <_printf_float+0x240>
 8003c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c26:	4631      	mov	r1, r6
 8003c28:	4628      	mov	r0, r5
 8003c2a:	47b8      	blx	r7
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	f43f af0e 	beq.w	8003a4e <_printf_float+0xba>
 8003c32:	f04f 0900 	mov.w	r9, #0
 8003c36:	f104 0a1a 	add.w	sl, r4, #26
 8003c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	454b      	cmp	r3, r9
 8003c40:	dc01      	bgt.n	8003c46 <_printf_float+0x2b2>
 8003c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c44:	e794      	b.n	8003b70 <_printf_float+0x1dc>
 8003c46:	2301      	movs	r3, #1
 8003c48:	4652      	mov	r2, sl
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b8      	blx	r7
 8003c50:	3001      	adds	r0, #1
 8003c52:	f43f aefc 	beq.w	8003a4e <_printf_float+0xba>
 8003c56:	f109 0901 	add.w	r9, r9, #1
 8003c5a:	e7ee      	b.n	8003c3a <_printf_float+0x2a6>
 8003c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c60:	429a      	cmp	r2, r3
 8003c62:	bfa8      	it	ge
 8003c64:	461a      	movge	r2, r3
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	4691      	mov	r9, r2
 8003c6a:	dd07      	ble.n	8003c7c <_printf_float+0x2e8>
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4642      	mov	r2, r8
 8003c72:	4628      	mov	r0, r5
 8003c74:	47b8      	blx	r7
 8003c76:	3001      	adds	r0, #1
 8003c78:	f43f aee9 	beq.w	8003a4e <_printf_float+0xba>
 8003c7c:	f104 031a 	add.w	r3, r4, #26
 8003c80:	f04f 0b00 	mov.w	fp, #0
 8003c84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c88:	9306      	str	r3, [sp, #24]
 8003c8a:	e015      	b.n	8003cb8 <_printf_float+0x324>
 8003c8c:	7fefffff 	.word	0x7fefffff
 8003c90:	08005fd8 	.word	0x08005fd8
 8003c94:	08005fd4 	.word	0x08005fd4
 8003c98:	08005fe0 	.word	0x08005fe0
 8003c9c:	08005fdc 	.word	0x08005fdc
 8003ca0:	08005fe4 	.word	0x08005fe4
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	9a06      	ldr	r2, [sp, #24]
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f aecd 	beq.w	8003a4e <_printf_float+0xba>
 8003cb4:	f10b 0b01 	add.w	fp, fp, #1
 8003cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003cbc:	ebaa 0309 	sub.w	r3, sl, r9
 8003cc0:	455b      	cmp	r3, fp
 8003cc2:	dcef      	bgt.n	8003ca4 <_printf_float+0x310>
 8003cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	44d0      	add	r8, sl
 8003ccc:	db15      	blt.n	8003cfa <_printf_float+0x366>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	07da      	lsls	r2, r3, #31
 8003cd2:	d412      	bmi.n	8003cfa <_printf_float+0x366>
 8003cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cd8:	eba3 020a 	sub.w	r2, r3, sl
 8003cdc:	eba3 0a01 	sub.w	sl, r3, r1
 8003ce0:	4592      	cmp	sl, r2
 8003ce2:	bfa8      	it	ge
 8003ce4:	4692      	movge	sl, r2
 8003ce6:	f1ba 0f00 	cmp.w	sl, #0
 8003cea:	dc0e      	bgt.n	8003d0a <_printf_float+0x376>
 8003cec:	f04f 0800 	mov.w	r8, #0
 8003cf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003cf4:	f104 091a 	add.w	r9, r4, #26
 8003cf8:	e019      	b.n	8003d2e <_printf_float+0x39a>
 8003cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	d1e5      	bne.n	8003cd4 <_printf_float+0x340>
 8003d08:	e6a1      	b.n	8003a4e <_printf_float+0xba>
 8003d0a:	4653      	mov	r3, sl
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4628      	mov	r0, r5
 8003d12:	47b8      	blx	r7
 8003d14:	3001      	adds	r0, #1
 8003d16:	d1e9      	bne.n	8003cec <_printf_float+0x358>
 8003d18:	e699      	b.n	8003a4e <_printf_float+0xba>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	464a      	mov	r2, r9
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4628      	mov	r0, r5
 8003d22:	47b8      	blx	r7
 8003d24:	3001      	adds	r0, #1
 8003d26:	f43f ae92 	beq.w	8003a4e <_printf_float+0xba>
 8003d2a:	f108 0801 	add.w	r8, r8, #1
 8003d2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	eba3 030a 	sub.w	r3, r3, sl
 8003d38:	4543      	cmp	r3, r8
 8003d3a:	dcee      	bgt.n	8003d1a <_printf_float+0x386>
 8003d3c:	e74a      	b.n	8003bd4 <_printf_float+0x240>
 8003d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d40:	2a01      	cmp	r2, #1
 8003d42:	dc01      	bgt.n	8003d48 <_printf_float+0x3b4>
 8003d44:	07db      	lsls	r3, r3, #31
 8003d46:	d53a      	bpl.n	8003dbe <_printf_float+0x42a>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	f43f ae7b 	beq.w	8003a4e <_printf_float+0xba>
 8003d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4628      	mov	r0, r5
 8003d60:	47b8      	blx	r7
 8003d62:	3001      	adds	r0, #1
 8003d64:	f108 0801 	add.w	r8, r8, #1
 8003d68:	f43f ae71 	beq.w	8003a4e <_printf_float+0xba>
 8003d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f103 3aff 	add.w	sl, r3, #4294967295
 8003d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f7fc fecd 	bl	8000b18 <__aeabi_dcmpeq>
 8003d7e:	b9c8      	cbnz	r0, 8003db4 <_printf_float+0x420>
 8003d80:	4653      	mov	r3, sl
 8003d82:	4642      	mov	r2, r8
 8003d84:	4631      	mov	r1, r6
 8003d86:	4628      	mov	r0, r5
 8003d88:	47b8      	blx	r7
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d10e      	bne.n	8003dac <_printf_float+0x418>
 8003d8e:	e65e      	b.n	8003a4e <_printf_float+0xba>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4652      	mov	r2, sl
 8003d94:	4631      	mov	r1, r6
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b8      	blx	r7
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f43f ae57 	beq.w	8003a4e <_printf_float+0xba>
 8003da0:	f108 0801 	add.w	r8, r8, #1
 8003da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	4543      	cmp	r3, r8
 8003daa:	dcf1      	bgt.n	8003d90 <_printf_float+0x3fc>
 8003dac:	464b      	mov	r3, r9
 8003dae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003db2:	e6de      	b.n	8003b72 <_printf_float+0x1de>
 8003db4:	f04f 0800 	mov.w	r8, #0
 8003db8:	f104 0a1a 	add.w	sl, r4, #26
 8003dbc:	e7f2      	b.n	8003da4 <_printf_float+0x410>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e7df      	b.n	8003d82 <_printf_float+0x3ee>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f ae3e 	beq.w	8003a4e <_printf_float+0xba>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	4543      	cmp	r3, r8
 8003dde:	dcf0      	bgt.n	8003dc2 <_printf_float+0x42e>
 8003de0:	e6fc      	b.n	8003bdc <_printf_float+0x248>
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	f104 0919 	add.w	r9, r4, #25
 8003dea:	e7f4      	b.n	8003dd6 <_printf_float+0x442>
 8003dec:	2900      	cmp	r1, #0
 8003dee:	f43f ae8b 	beq.w	8003b08 <_printf_float+0x174>
 8003df2:	2300      	movs	r3, #0
 8003df4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003df8:	ab09      	add	r3, sp, #36	; 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	ec49 8b10 	vmov	d0, r8, r9
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	f8cd a004 	str.w	sl, [sp, #4]
 8003e06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f7ff fd2d 	bl	800386a <__cvt>
 8003e10:	4680      	mov	r8, r0
 8003e12:	e648      	b.n	8003aa6 <_printf_float+0x112>

08003e14 <_printf_common>:
 8003e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	4691      	mov	r9, r2
 8003e1a:	461f      	mov	r7, r3
 8003e1c:	688a      	ldr	r2, [r1, #8]
 8003e1e:	690b      	ldr	r3, [r1, #16]
 8003e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e24:	4293      	cmp	r3, r2
 8003e26:	bfb8      	it	lt
 8003e28:	4613      	movlt	r3, r2
 8003e2a:	f8c9 3000 	str.w	r3, [r9]
 8003e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e32:	4606      	mov	r6, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	b112      	cbz	r2, 8003e3e <_printf_common+0x2a>
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f8c9 3000 	str.w	r3, [r9]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	0699      	lsls	r1, r3, #26
 8003e42:	bf42      	ittt	mi
 8003e44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e48:	3302      	addmi	r3, #2
 8003e4a:	f8c9 3000 	strmi.w	r3, [r9]
 8003e4e:	6825      	ldr	r5, [r4, #0]
 8003e50:	f015 0506 	ands.w	r5, r5, #6
 8003e54:	d107      	bne.n	8003e66 <_printf_common+0x52>
 8003e56:	f104 0a19 	add.w	sl, r4, #25
 8003e5a:	68e3      	ldr	r3, [r4, #12]
 8003e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	42ab      	cmp	r3, r5
 8003e64:	dc28      	bgt.n	8003eb8 <_printf_common+0xa4>
 8003e66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	3300      	adds	r3, #0
 8003e6e:	bf18      	it	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	0692      	lsls	r2, r2, #26
 8003e74:	d42d      	bmi.n	8003ed2 <_printf_common+0xbe>
 8003e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	47c0      	blx	r8
 8003e80:	3001      	adds	r0, #1
 8003e82:	d020      	beq.n	8003ec6 <_printf_common+0xb2>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	68e5      	ldr	r5, [r4, #12]
 8003e88:	f8d9 2000 	ldr.w	r2, [r9]
 8003e8c:	f003 0306 	and.w	r3, r3, #6
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	bf08      	it	eq
 8003e94:	1aad      	subeq	r5, r5, r2
 8003e96:	68a3      	ldr	r3, [r4, #8]
 8003e98:	6922      	ldr	r2, [r4, #16]
 8003e9a:	bf0c      	ite	eq
 8003e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea0:	2500      	movne	r5, #0
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	bfc4      	itt	gt
 8003ea6:	1a9b      	subgt	r3, r3, r2
 8003ea8:	18ed      	addgt	r5, r5, r3
 8003eaa:	f04f 0900 	mov.w	r9, #0
 8003eae:	341a      	adds	r4, #26
 8003eb0:	454d      	cmp	r5, r9
 8003eb2:	d11a      	bne.n	8003eea <_printf_common+0xd6>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e008      	b.n	8003eca <_printf_common+0xb6>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4652      	mov	r2, sl
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d103      	bne.n	8003ece <_printf_common+0xba>
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ece:	3501      	adds	r5, #1
 8003ed0:	e7c3      	b.n	8003e5a <_printf_common+0x46>
 8003ed2:	18e1      	adds	r1, r4, r3
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	2030      	movs	r0, #48	; 0x30
 8003ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003edc:	4422      	add	r2, r4
 8003ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ee2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	e7c5      	b.n	8003e76 <_printf_common+0x62>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4622      	mov	r2, r4
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	47c0      	blx	r8
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d0e6      	beq.n	8003ec6 <_printf_common+0xb2>
 8003ef8:	f109 0901 	add.w	r9, r9, #1
 8003efc:	e7d8      	b.n	8003eb0 <_printf_common+0x9c>
	...

08003f00 <_printf_i>:
 8003f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f08:	460c      	mov	r4, r1
 8003f0a:	7e09      	ldrb	r1, [r1, #24]
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	296e      	cmp	r1, #110	; 0x6e
 8003f10:	4617      	mov	r7, r2
 8003f12:	4606      	mov	r6, r0
 8003f14:	4698      	mov	r8, r3
 8003f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f18:	f000 80b3 	beq.w	8004082 <_printf_i+0x182>
 8003f1c:	d822      	bhi.n	8003f64 <_printf_i+0x64>
 8003f1e:	2963      	cmp	r1, #99	; 0x63
 8003f20:	d036      	beq.n	8003f90 <_printf_i+0x90>
 8003f22:	d80a      	bhi.n	8003f3a <_printf_i+0x3a>
 8003f24:	2900      	cmp	r1, #0
 8003f26:	f000 80b9 	beq.w	800409c <_printf_i+0x19c>
 8003f2a:	2958      	cmp	r1, #88	; 0x58
 8003f2c:	f000 8083 	beq.w	8004036 <_printf_i+0x136>
 8003f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f38:	e032      	b.n	8003fa0 <_printf_i+0xa0>
 8003f3a:	2964      	cmp	r1, #100	; 0x64
 8003f3c:	d001      	beq.n	8003f42 <_printf_i+0x42>
 8003f3e:	2969      	cmp	r1, #105	; 0x69
 8003f40:	d1f6      	bne.n	8003f30 <_printf_i+0x30>
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	0605      	lsls	r5, r0, #24
 8003f48:	f103 0104 	add.w	r1, r3, #4
 8003f4c:	d52a      	bpl.n	8003fa4 <_printf_i+0xa4>
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da03      	bge.n	8003f5e <_printf_i+0x5e>
 8003f56:	222d      	movs	r2, #45	; 0x2d
 8003f58:	425b      	negs	r3, r3
 8003f5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f5e:	486f      	ldr	r0, [pc, #444]	; (800411c <_printf_i+0x21c>)
 8003f60:	220a      	movs	r2, #10
 8003f62:	e039      	b.n	8003fd8 <_printf_i+0xd8>
 8003f64:	2973      	cmp	r1, #115	; 0x73
 8003f66:	f000 809d 	beq.w	80040a4 <_printf_i+0x1a4>
 8003f6a:	d808      	bhi.n	8003f7e <_printf_i+0x7e>
 8003f6c:	296f      	cmp	r1, #111	; 0x6f
 8003f6e:	d020      	beq.n	8003fb2 <_printf_i+0xb2>
 8003f70:	2970      	cmp	r1, #112	; 0x70
 8003f72:	d1dd      	bne.n	8003f30 <_printf_i+0x30>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	e003      	b.n	8003f86 <_printf_i+0x86>
 8003f7e:	2975      	cmp	r1, #117	; 0x75
 8003f80:	d017      	beq.n	8003fb2 <_printf_i+0xb2>
 8003f82:	2978      	cmp	r1, #120	; 0x78
 8003f84:	d1d4      	bne.n	8003f30 <_printf_i+0x30>
 8003f86:	2378      	movs	r3, #120	; 0x78
 8003f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f8c:	4864      	ldr	r0, [pc, #400]	; (8004120 <_printf_i+0x220>)
 8003f8e:	e055      	b.n	800403c <_printf_i+0x13c>
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	1d19      	adds	r1, r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6011      	str	r1, [r2, #0]
 8003f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e08c      	b.n	80040be <_printf_i+0x1be>
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6011      	str	r1, [r2, #0]
 8003fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fac:	bf18      	it	ne
 8003fae:	b21b      	sxthne	r3, r3
 8003fb0:	e7cf      	b.n	8003f52 <_printf_i+0x52>
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	6825      	ldr	r5, [r4, #0]
 8003fb6:	1d18      	adds	r0, r3, #4
 8003fb8:	6010      	str	r0, [r2, #0]
 8003fba:	0628      	lsls	r0, r5, #24
 8003fbc:	d501      	bpl.n	8003fc2 <_printf_i+0xc2>
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e002      	b.n	8003fc8 <_printf_i+0xc8>
 8003fc2:	0668      	lsls	r0, r5, #25
 8003fc4:	d5fb      	bpl.n	8003fbe <_printf_i+0xbe>
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	4854      	ldr	r0, [pc, #336]	; (800411c <_printf_i+0x21c>)
 8003fca:	296f      	cmp	r1, #111	; 0x6f
 8003fcc:	bf14      	ite	ne
 8003fce:	220a      	movne	r2, #10
 8003fd0:	2208      	moveq	r2, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fd8:	6865      	ldr	r5, [r4, #4]
 8003fda:	60a5      	str	r5, [r4, #8]
 8003fdc:	2d00      	cmp	r5, #0
 8003fde:	f2c0 8095 	blt.w	800410c <_printf_i+0x20c>
 8003fe2:	6821      	ldr	r1, [r4, #0]
 8003fe4:	f021 0104 	bic.w	r1, r1, #4
 8003fe8:	6021      	str	r1, [r4, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d13d      	bne.n	800406a <_printf_i+0x16a>
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	f040 808e 	bne.w	8004110 <_printf_i+0x210>
 8003ff4:	4665      	mov	r5, ip
 8003ff6:	2a08      	cmp	r2, #8
 8003ff8:	d10b      	bne.n	8004012 <_printf_i+0x112>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	07db      	lsls	r3, r3, #31
 8003ffe:	d508      	bpl.n	8004012 <_printf_i+0x112>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	bfde      	ittt	le
 8004008:	2330      	movle	r3, #48	; 0x30
 800400a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800400e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004012:	ebac 0305 	sub.w	r3, ip, r5
 8004016:	6123      	str	r3, [r4, #16]
 8004018:	f8cd 8000 	str.w	r8, [sp]
 800401c:	463b      	mov	r3, r7
 800401e:	aa03      	add	r2, sp, #12
 8004020:	4621      	mov	r1, r4
 8004022:	4630      	mov	r0, r6
 8004024:	f7ff fef6 	bl	8003e14 <_printf_common>
 8004028:	3001      	adds	r0, #1
 800402a:	d14d      	bne.n	80040c8 <_printf_i+0x1c8>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	b005      	add	sp, #20
 8004032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004036:	4839      	ldr	r0, [pc, #228]	; (800411c <_printf_i+0x21c>)
 8004038:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	6821      	ldr	r1, [r4, #0]
 8004040:	1d1d      	adds	r5, r3, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6015      	str	r5, [r2, #0]
 8004046:	060a      	lsls	r2, r1, #24
 8004048:	d50b      	bpl.n	8004062 <_printf_i+0x162>
 800404a:	07ca      	lsls	r2, r1, #31
 800404c:	bf44      	itt	mi
 800404e:	f041 0120 	orrmi.w	r1, r1, #32
 8004052:	6021      	strmi	r1, [r4, #0]
 8004054:	b91b      	cbnz	r3, 800405e <_printf_i+0x15e>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	f022 0220 	bic.w	r2, r2, #32
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	e7b7      	b.n	8003fd2 <_printf_i+0xd2>
 8004062:	064d      	lsls	r5, r1, #25
 8004064:	bf48      	it	mi
 8004066:	b29b      	uxthmi	r3, r3
 8004068:	e7ef      	b.n	800404a <_printf_i+0x14a>
 800406a:	4665      	mov	r5, ip
 800406c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004070:	fb02 3311 	mls	r3, r2, r1, r3
 8004074:	5cc3      	ldrb	r3, [r0, r3]
 8004076:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800407a:	460b      	mov	r3, r1
 800407c:	2900      	cmp	r1, #0
 800407e:	d1f5      	bne.n	800406c <_printf_i+0x16c>
 8004080:	e7b9      	b.n	8003ff6 <_printf_i+0xf6>
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	6961      	ldr	r1, [r4, #20]
 8004088:	1d18      	adds	r0, r3, #4
 800408a:	6010      	str	r0, [r2, #0]
 800408c:	0628      	lsls	r0, r5, #24
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	d501      	bpl.n	8004096 <_printf_i+0x196>
 8004092:	6019      	str	r1, [r3, #0]
 8004094:	e002      	b.n	800409c <_printf_i+0x19c>
 8004096:	066a      	lsls	r2, r5, #25
 8004098:	d5fb      	bpl.n	8004092 <_printf_i+0x192>
 800409a:	8019      	strh	r1, [r3, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	4665      	mov	r5, ip
 80040a2:	e7b9      	b.n	8004018 <_printf_i+0x118>
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	1d19      	adds	r1, r3, #4
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	681d      	ldr	r5, [r3, #0]
 80040ac:	6862      	ldr	r2, [r4, #4]
 80040ae:	2100      	movs	r1, #0
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7fc f8bd 	bl	8000230 <memchr>
 80040b6:	b108      	cbz	r0, 80040bc <_printf_i+0x1bc>
 80040b8:	1b40      	subs	r0, r0, r5
 80040ba:	6060      	str	r0, [r4, #4]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	6123      	str	r3, [r4, #16]
 80040c0:	2300      	movs	r3, #0
 80040c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040c6:	e7a7      	b.n	8004018 <_printf_i+0x118>
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	462a      	mov	r2, r5
 80040cc:	4639      	mov	r1, r7
 80040ce:	4630      	mov	r0, r6
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d0aa      	beq.n	800402c <_printf_i+0x12c>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	079b      	lsls	r3, r3, #30
 80040da:	d413      	bmi.n	8004104 <_printf_i+0x204>
 80040dc:	68e0      	ldr	r0, [r4, #12]
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	4298      	cmp	r0, r3
 80040e2:	bfb8      	it	lt
 80040e4:	4618      	movlt	r0, r3
 80040e6:	e7a3      	b.n	8004030 <_printf_i+0x130>
 80040e8:	2301      	movs	r3, #1
 80040ea:	464a      	mov	r2, r9
 80040ec:	4639      	mov	r1, r7
 80040ee:	4630      	mov	r0, r6
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d09a      	beq.n	800402c <_printf_i+0x12c>
 80040f6:	3501      	adds	r5, #1
 80040f8:	68e3      	ldr	r3, [r4, #12]
 80040fa:	9a03      	ldr	r2, [sp, #12]
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	42ab      	cmp	r3, r5
 8004100:	dcf2      	bgt.n	80040e8 <_printf_i+0x1e8>
 8004102:	e7eb      	b.n	80040dc <_printf_i+0x1dc>
 8004104:	2500      	movs	r5, #0
 8004106:	f104 0919 	add.w	r9, r4, #25
 800410a:	e7f5      	b.n	80040f8 <_printf_i+0x1f8>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ac      	bne.n	800406a <_printf_i+0x16a>
 8004110:	7803      	ldrb	r3, [r0, #0]
 8004112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004116:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800411a:	e76c      	b.n	8003ff6 <_printf_i+0xf6>
 800411c:	08005fe6 	.word	0x08005fe6
 8004120:	08005ff7 	.word	0x08005ff7

08004124 <iprintf>:
 8004124:	b40f      	push	{r0, r1, r2, r3}
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <iprintf+0x2c>)
 8004128:	b513      	push	{r0, r1, r4, lr}
 800412a:	681c      	ldr	r4, [r3, #0]
 800412c:	b124      	cbz	r4, 8004138 <iprintf+0x14>
 800412e:	69a3      	ldr	r3, [r4, #24]
 8004130:	b913      	cbnz	r3, 8004138 <iprintf+0x14>
 8004132:	4620      	mov	r0, r4
 8004134:	f001 f868 	bl	8005208 <__sinit>
 8004138:	ab05      	add	r3, sp, #20
 800413a:	9a04      	ldr	r2, [sp, #16]
 800413c:	68a1      	ldr	r1, [r4, #8]
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	4620      	mov	r0, r4
 8004142:	f001 fd21 	bl	8005b88 <_vfiprintf_r>
 8004146:	b002      	add	sp, #8
 8004148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414c:	b004      	add	sp, #16
 800414e:	4770      	bx	lr
 8004150:	2000000c 	.word	0x2000000c

08004154 <_puts_r>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	460e      	mov	r6, r1
 8004158:	4605      	mov	r5, r0
 800415a:	b118      	cbz	r0, 8004164 <_puts_r+0x10>
 800415c:	6983      	ldr	r3, [r0, #24]
 800415e:	b90b      	cbnz	r3, 8004164 <_puts_r+0x10>
 8004160:	f001 f852 	bl	8005208 <__sinit>
 8004164:	69ab      	ldr	r3, [r5, #24]
 8004166:	68ac      	ldr	r4, [r5, #8]
 8004168:	b913      	cbnz	r3, 8004170 <_puts_r+0x1c>
 800416a:	4628      	mov	r0, r5
 800416c:	f001 f84c 	bl	8005208 <__sinit>
 8004170:	4b23      	ldr	r3, [pc, #140]	; (8004200 <_puts_r+0xac>)
 8004172:	429c      	cmp	r4, r3
 8004174:	d117      	bne.n	80041a6 <_puts_r+0x52>
 8004176:	686c      	ldr	r4, [r5, #4]
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	071b      	lsls	r3, r3, #28
 800417c:	d51d      	bpl.n	80041ba <_puts_r+0x66>
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	b1db      	cbz	r3, 80041ba <_puts_r+0x66>
 8004182:	3e01      	subs	r6, #1
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800418a:	3b01      	subs	r3, #1
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	b9e9      	cbnz	r1, 80041cc <_puts_r+0x78>
 8004190:	2b00      	cmp	r3, #0
 8004192:	da2e      	bge.n	80041f2 <_puts_r+0x9e>
 8004194:	4622      	mov	r2, r4
 8004196:	210a      	movs	r1, #10
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f83f 	bl	800421c <__swbuf_r>
 800419e:	3001      	adds	r0, #1
 80041a0:	d011      	beq.n	80041c6 <_puts_r+0x72>
 80041a2:	200a      	movs	r0, #10
 80041a4:	e011      	b.n	80041ca <_puts_r+0x76>
 80041a6:	4b17      	ldr	r3, [pc, #92]	; (8004204 <_puts_r+0xb0>)
 80041a8:	429c      	cmp	r4, r3
 80041aa:	d101      	bne.n	80041b0 <_puts_r+0x5c>
 80041ac:	68ac      	ldr	r4, [r5, #8]
 80041ae:	e7e3      	b.n	8004178 <_puts_r+0x24>
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <_puts_r+0xb4>)
 80041b2:	429c      	cmp	r4, r3
 80041b4:	bf08      	it	eq
 80041b6:	68ec      	ldreq	r4, [r5, #12]
 80041b8:	e7de      	b.n	8004178 <_puts_r+0x24>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 f87f 	bl	80042c0 <__swsetup_r>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d0dd      	beq.n	8004182 <_puts_r+0x2e>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da04      	bge.n	80041da <_puts_r+0x86>
 80041d0:	69a2      	ldr	r2, [r4, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	dc06      	bgt.n	80041e4 <_puts_r+0x90>
 80041d6:	290a      	cmp	r1, #10
 80041d8:	d004      	beq.n	80041e4 <_puts_r+0x90>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	7019      	strb	r1, [r3, #0]
 80041e2:	e7cf      	b.n	8004184 <_puts_r+0x30>
 80041e4:	4622      	mov	r2, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 f818 	bl	800421c <__swbuf_r>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d1c9      	bne.n	8004184 <_puts_r+0x30>
 80041f0:	e7e9      	b.n	80041c6 <_puts_r+0x72>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	200a      	movs	r0, #10
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	6022      	str	r2, [r4, #0]
 80041fa:	7018      	strb	r0, [r3, #0]
 80041fc:	e7e5      	b.n	80041ca <_puts_r+0x76>
 80041fe:	bf00      	nop
 8004200:	08006038 	.word	0x08006038
 8004204:	08006058 	.word	0x08006058
 8004208:	08006018 	.word	0x08006018

0800420c <puts>:
 800420c:	4b02      	ldr	r3, [pc, #8]	; (8004218 <puts+0xc>)
 800420e:	4601      	mov	r1, r0
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	f7ff bf9f 	b.w	8004154 <_puts_r>
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c

0800421c <__swbuf_r>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	460e      	mov	r6, r1
 8004220:	4614      	mov	r4, r2
 8004222:	4605      	mov	r5, r0
 8004224:	b118      	cbz	r0, 800422e <__swbuf_r+0x12>
 8004226:	6983      	ldr	r3, [r0, #24]
 8004228:	b90b      	cbnz	r3, 800422e <__swbuf_r+0x12>
 800422a:	f000 ffed 	bl	8005208 <__sinit>
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <__swbuf_r+0x98>)
 8004230:	429c      	cmp	r4, r3
 8004232:	d12a      	bne.n	800428a <__swbuf_r+0x6e>
 8004234:	686c      	ldr	r4, [r5, #4]
 8004236:	69a3      	ldr	r3, [r4, #24]
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	071a      	lsls	r2, r3, #28
 800423e:	d52e      	bpl.n	800429e <__swbuf_r+0x82>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	b363      	cbz	r3, 800429e <__swbuf_r+0x82>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	1ac0      	subs	r0, r0, r3
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	b2f6      	uxtb	r6, r6
 800424e:	4283      	cmp	r3, r0
 8004250:	4637      	mov	r7, r6
 8004252:	dc04      	bgt.n	800425e <__swbuf_r+0x42>
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f000 ff6c 	bl	8005134 <_fflush_r>
 800425c:	bb28      	cbnz	r0, 80042aa <__swbuf_r+0x8e>
 800425e:	68a3      	ldr	r3, [r4, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	6022      	str	r2, [r4, #0]
 800426a:	701e      	strb	r6, [r3, #0]
 800426c:	6963      	ldr	r3, [r4, #20]
 800426e:	3001      	adds	r0, #1
 8004270:	4283      	cmp	r3, r0
 8004272:	d004      	beq.n	800427e <__swbuf_r+0x62>
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	07db      	lsls	r3, r3, #31
 8004278:	d519      	bpl.n	80042ae <__swbuf_r+0x92>
 800427a:	2e0a      	cmp	r6, #10
 800427c:	d117      	bne.n	80042ae <__swbuf_r+0x92>
 800427e:	4621      	mov	r1, r4
 8004280:	4628      	mov	r0, r5
 8004282:	f000 ff57 	bl	8005134 <_fflush_r>
 8004286:	b190      	cbz	r0, 80042ae <__swbuf_r+0x92>
 8004288:	e00f      	b.n	80042aa <__swbuf_r+0x8e>
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <__swbuf_r+0x9c>)
 800428c:	429c      	cmp	r4, r3
 800428e:	d101      	bne.n	8004294 <__swbuf_r+0x78>
 8004290:	68ac      	ldr	r4, [r5, #8]
 8004292:	e7d0      	b.n	8004236 <__swbuf_r+0x1a>
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <__swbuf_r+0xa0>)
 8004296:	429c      	cmp	r4, r3
 8004298:	bf08      	it	eq
 800429a:	68ec      	ldreq	r4, [r5, #12]
 800429c:	e7cb      	b.n	8004236 <__swbuf_r+0x1a>
 800429e:	4621      	mov	r1, r4
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f80d 	bl	80042c0 <__swsetup_r>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0cc      	beq.n	8004244 <__swbuf_r+0x28>
 80042aa:	f04f 37ff 	mov.w	r7, #4294967295
 80042ae:	4638      	mov	r0, r7
 80042b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	08006038 	.word	0x08006038
 80042b8:	08006058 	.word	0x08006058
 80042bc:	08006018 	.word	0x08006018

080042c0 <__swsetup_r>:
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <__swsetup_r+0xcc>)
 80042c2:	b570      	push	{r4, r5, r6, lr}
 80042c4:	681d      	ldr	r5, [r3, #0]
 80042c6:	4606      	mov	r6, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	b125      	cbz	r5, 80042d6 <__swsetup_r+0x16>
 80042cc:	69ab      	ldr	r3, [r5, #24]
 80042ce:	b913      	cbnz	r3, 80042d6 <__swsetup_r+0x16>
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 ff99 	bl	8005208 <__sinit>
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <__swsetup_r+0xd0>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d10f      	bne.n	80042fc <__swsetup_r+0x3c>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	0715      	lsls	r5, r2, #28
 80042e6:	d42c      	bmi.n	8004342 <__swsetup_r+0x82>
 80042e8:	06d0      	lsls	r0, r2, #27
 80042ea:	d411      	bmi.n	8004310 <__swsetup_r+0x50>
 80042ec:	2209      	movs	r2, #9
 80042ee:	6032      	str	r2, [r6, #0]
 80042f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	e03e      	b.n	800437a <__swsetup_r+0xba>
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <__swsetup_r+0xd4>)
 80042fe:	429c      	cmp	r4, r3
 8004300:	d101      	bne.n	8004306 <__swsetup_r+0x46>
 8004302:	68ac      	ldr	r4, [r5, #8]
 8004304:	e7eb      	b.n	80042de <__swsetup_r+0x1e>
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <__swsetup_r+0xd8>)
 8004308:	429c      	cmp	r4, r3
 800430a:	bf08      	it	eq
 800430c:	68ec      	ldreq	r4, [r5, #12]
 800430e:	e7e6      	b.n	80042de <__swsetup_r+0x1e>
 8004310:	0751      	lsls	r1, r2, #29
 8004312:	d512      	bpl.n	800433a <__swsetup_r+0x7a>
 8004314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004316:	b141      	cbz	r1, 800432a <__swsetup_r+0x6a>
 8004318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <__swsetup_r+0x66>
 8004320:	4630      	mov	r0, r6
 8004322:	f001 fb5f 	bl	80059e4 <_free_r>
 8004326:	2300      	movs	r3, #0
 8004328:	6363      	str	r3, [r4, #52]	; 0x34
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	2300      	movs	r3, #0
 8004334:	6063      	str	r3, [r4, #4]
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f043 0308 	orr.w	r3, r3, #8
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	b94b      	cbnz	r3, 800435a <__swsetup_r+0x9a>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d003      	beq.n	800435a <__swsetup_r+0x9a>
 8004352:	4621      	mov	r1, r4
 8004354:	4630      	mov	r0, r6
 8004356:	f001 f813 	bl	8005380 <__smakebuf_r>
 800435a:	89a2      	ldrh	r2, [r4, #12]
 800435c:	f012 0301 	ands.w	r3, r2, #1
 8004360:	d00c      	beq.n	800437c <__swsetup_r+0xbc>
 8004362:	2300      	movs	r3, #0
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	6963      	ldr	r3, [r4, #20]
 8004368:	425b      	negs	r3, r3
 800436a:	61a3      	str	r3, [r4, #24]
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b953      	cbnz	r3, 8004386 <__swsetup_r+0xc6>
 8004370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004374:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004378:	d1ba      	bne.n	80042f0 <__swsetup_r+0x30>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	0792      	lsls	r2, r2, #30
 800437e:	bf58      	it	pl
 8004380:	6963      	ldrpl	r3, [r4, #20]
 8004382:	60a3      	str	r3, [r4, #8]
 8004384:	e7f2      	b.n	800436c <__swsetup_r+0xac>
 8004386:	2000      	movs	r0, #0
 8004388:	e7f7      	b.n	800437a <__swsetup_r+0xba>
 800438a:	bf00      	nop
 800438c:	2000000c 	.word	0x2000000c
 8004390:	08006038 	.word	0x08006038
 8004394:	08006058 	.word	0x08006058
 8004398:	08006018 	.word	0x08006018

0800439c <quorem>:
 800439c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	6903      	ldr	r3, [r0, #16]
 80043a2:	690c      	ldr	r4, [r1, #16]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	4680      	mov	r8, r0
 80043a8:	f2c0 8082 	blt.w	80044b0 <quorem+0x114>
 80043ac:	3c01      	subs	r4, #1
 80043ae:	f101 0714 	add.w	r7, r1, #20
 80043b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80043b6:	f100 0614 	add.w	r6, r0, #20
 80043ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80043be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80043c2:	eb06 030c 	add.w	r3, r6, ip
 80043c6:	3501      	adds	r5, #1
 80043c8:	eb07 090c 	add.w	r9, r7, ip
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80043d2:	b395      	cbz	r5, 800443a <quorem+0x9e>
 80043d4:	f04f 0a00 	mov.w	sl, #0
 80043d8:	4638      	mov	r0, r7
 80043da:	46b6      	mov	lr, r6
 80043dc:	46d3      	mov	fp, sl
 80043de:	f850 2b04 	ldr.w	r2, [r0], #4
 80043e2:	b293      	uxth	r3, r2
 80043e4:	fb05 a303 	mla	r3, r5, r3, sl
 80043e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ebab 0303 	sub.w	r3, fp, r3
 80043f2:	0c12      	lsrs	r2, r2, #16
 80043f4:	f8de b000 	ldr.w	fp, [lr]
 80043f8:	fb05 a202 	mla	r2, r5, r2, sl
 80043fc:	fa13 f38b 	uxtah	r3, r3, fp
 8004400:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004404:	fa1f fb82 	uxth.w	fp, r2
 8004408:	f8de 2000 	ldr.w	r2, [lr]
 800440c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800441a:	4581      	cmp	r9, r0
 800441c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004420:	f84e 3b04 	str.w	r3, [lr], #4
 8004424:	d2db      	bcs.n	80043de <quorem+0x42>
 8004426:	f856 300c 	ldr.w	r3, [r6, ip]
 800442a:	b933      	cbnz	r3, 800443a <quorem+0x9e>
 800442c:	9b01      	ldr	r3, [sp, #4]
 800442e:	3b04      	subs	r3, #4
 8004430:	429e      	cmp	r6, r3
 8004432:	461a      	mov	r2, r3
 8004434:	d330      	bcc.n	8004498 <quorem+0xfc>
 8004436:	f8c8 4010 	str.w	r4, [r8, #16]
 800443a:	4640      	mov	r0, r8
 800443c:	f001 f9fe 	bl	800583c <__mcmp>
 8004440:	2800      	cmp	r0, #0
 8004442:	db25      	blt.n	8004490 <quorem+0xf4>
 8004444:	3501      	adds	r5, #1
 8004446:	4630      	mov	r0, r6
 8004448:	f04f 0c00 	mov.w	ip, #0
 800444c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004450:	f8d0 e000 	ldr.w	lr, [r0]
 8004454:	b293      	uxth	r3, r2
 8004456:	ebac 0303 	sub.w	r3, ip, r3
 800445a:	0c12      	lsrs	r2, r2, #16
 800445c:	fa13 f38e 	uxtah	r3, r3, lr
 8004460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004468:	b29b      	uxth	r3, r3
 800446a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446e:	45b9      	cmp	r9, r7
 8004470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004474:	f840 3b04 	str.w	r3, [r0], #4
 8004478:	d2e8      	bcs.n	800444c <quorem+0xb0>
 800447a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800447e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004482:	b92a      	cbnz	r2, 8004490 <quorem+0xf4>
 8004484:	3b04      	subs	r3, #4
 8004486:	429e      	cmp	r6, r3
 8004488:	461a      	mov	r2, r3
 800448a:	d30b      	bcc.n	80044a4 <quorem+0x108>
 800448c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004490:	4628      	mov	r0, r5
 8004492:	b003      	add	sp, #12
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	3b04      	subs	r3, #4
 800449c:	2a00      	cmp	r2, #0
 800449e:	d1ca      	bne.n	8004436 <quorem+0x9a>
 80044a0:	3c01      	subs	r4, #1
 80044a2:	e7c5      	b.n	8004430 <quorem+0x94>
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	3b04      	subs	r3, #4
 80044a8:	2a00      	cmp	r2, #0
 80044aa:	d1ef      	bne.n	800448c <quorem+0xf0>
 80044ac:	3c01      	subs	r4, #1
 80044ae:	e7ea      	b.n	8004486 <quorem+0xea>
 80044b0:	2000      	movs	r0, #0
 80044b2:	e7ee      	b.n	8004492 <quorem+0xf6>
 80044b4:	0000      	movs	r0, r0
	...

080044b8 <_dtoa_r>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	ec57 6b10 	vmov	r6, r7, d0
 80044c0:	b097      	sub	sp, #92	; 0x5c
 80044c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044c4:	9106      	str	r1, [sp, #24]
 80044c6:	4604      	mov	r4, r0
 80044c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80044ca:	9312      	str	r3, [sp, #72]	; 0x48
 80044cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80044d0:	e9cd 6700 	strd	r6, r7, [sp]
 80044d4:	b93d      	cbnz	r5, 80044e6 <_dtoa_r+0x2e>
 80044d6:	2010      	movs	r0, #16
 80044d8:	f000 ff92 	bl	8005400 <malloc>
 80044dc:	6260      	str	r0, [r4, #36]	; 0x24
 80044de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044e2:	6005      	str	r5, [r0, #0]
 80044e4:	60c5      	str	r5, [r0, #12]
 80044e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	b151      	cbz	r1, 8004502 <_dtoa_r+0x4a>
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	604a      	str	r2, [r1, #4]
 80044f0:	2301      	movs	r3, #1
 80044f2:	4093      	lsls	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f000 ffbe 	bl	8005478 <_Bfree>
 80044fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	1e3b      	subs	r3, r7, #0
 8004504:	bfbb      	ittet	lt
 8004506:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800450a:	9301      	strlt	r3, [sp, #4]
 800450c:	2300      	movge	r3, #0
 800450e:	2201      	movlt	r2, #1
 8004510:	bfac      	ite	ge
 8004512:	f8c8 3000 	strge.w	r3, [r8]
 8004516:	f8c8 2000 	strlt.w	r2, [r8]
 800451a:	4baf      	ldr	r3, [pc, #700]	; (80047d8 <_dtoa_r+0x320>)
 800451c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004520:	ea33 0308 	bics.w	r3, r3, r8
 8004524:	d114      	bne.n	8004550 <_dtoa_r+0x98>
 8004526:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004528:	f242 730f 	movw	r3, #9999	; 0x270f
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	9b00      	ldr	r3, [sp, #0]
 8004530:	b923      	cbnz	r3, 800453c <_dtoa_r+0x84>
 8004532:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004536:	2800      	cmp	r0, #0
 8004538:	f000 8542 	beq.w	8004fc0 <_dtoa_r+0xb08>
 800453c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800453e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80047ec <_dtoa_r+0x334>
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8544 	beq.w	8004fd0 <_dtoa_r+0xb18>
 8004548:	f10b 0303 	add.w	r3, fp, #3
 800454c:	f000 bd3e 	b.w	8004fcc <_dtoa_r+0xb14>
 8004550:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004554:	2200      	movs	r2, #0
 8004556:	2300      	movs	r3, #0
 8004558:	4630      	mov	r0, r6
 800455a:	4639      	mov	r1, r7
 800455c:	f7fc fadc 	bl	8000b18 <__aeabi_dcmpeq>
 8004560:	4681      	mov	r9, r0
 8004562:	b168      	cbz	r0, 8004580 <_dtoa_r+0xc8>
 8004564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004566:	2301      	movs	r3, #1
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8524 	beq.w	8004fba <_dtoa_r+0xb02>
 8004572:	4b9a      	ldr	r3, [pc, #616]	; (80047dc <_dtoa_r+0x324>)
 8004574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004576:	f103 3bff 	add.w	fp, r3, #4294967295
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	f000 bd28 	b.w	8004fd0 <_dtoa_r+0xb18>
 8004580:	aa14      	add	r2, sp, #80	; 0x50
 8004582:	a915      	add	r1, sp, #84	; 0x54
 8004584:	ec47 6b10 	vmov	d0, r6, r7
 8004588:	4620      	mov	r0, r4
 800458a:	f001 f9ce 	bl	800592a <__d2b>
 800458e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004592:	9004      	str	r0, [sp, #16]
 8004594:	2d00      	cmp	r5, #0
 8004596:	d07c      	beq.n	8004692 <_dtoa_r+0x1da>
 8004598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800459c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80045a0:	46b2      	mov	sl, r6
 80045a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80045a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80045aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80045ae:	2200      	movs	r2, #0
 80045b0:	4b8b      	ldr	r3, [pc, #556]	; (80047e0 <_dtoa_r+0x328>)
 80045b2:	4650      	mov	r0, sl
 80045b4:	4659      	mov	r1, fp
 80045b6:	f7fb fe8f 	bl	80002d8 <__aeabi_dsub>
 80045ba:	a381      	add	r3, pc, #516	; (adr r3, 80047c0 <_dtoa_r+0x308>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fc f842 	bl	8000648 <__aeabi_dmul>
 80045c4:	a380      	add	r3, pc, #512	; (adr r3, 80047c8 <_dtoa_r+0x310>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb fe87 	bl	80002dc <__adddf3>
 80045ce:	4606      	mov	r6, r0
 80045d0:	4628      	mov	r0, r5
 80045d2:	460f      	mov	r7, r1
 80045d4:	f7fb ffce 	bl	8000574 <__aeabi_i2d>
 80045d8:	a37d      	add	r3, pc, #500	; (adr r3, 80047d0 <_dtoa_r+0x318>)
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f7fc f833 	bl	8000648 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4630      	mov	r0, r6
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7fb fe77 	bl	80002dc <__adddf3>
 80045ee:	4606      	mov	r6, r0
 80045f0:	460f      	mov	r7, r1
 80045f2:	f7fc fad9 	bl	8000ba8 <__aeabi_d2iz>
 80045f6:	2200      	movs	r2, #0
 80045f8:	4682      	mov	sl, r0
 80045fa:	2300      	movs	r3, #0
 80045fc:	4630      	mov	r0, r6
 80045fe:	4639      	mov	r1, r7
 8004600:	f7fc fa94 	bl	8000b2c <__aeabi_dcmplt>
 8004604:	b148      	cbz	r0, 800461a <_dtoa_r+0x162>
 8004606:	4650      	mov	r0, sl
 8004608:	f7fb ffb4 	bl	8000574 <__aeabi_i2d>
 800460c:	4632      	mov	r2, r6
 800460e:	463b      	mov	r3, r7
 8004610:	f7fc fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8004614:	b908      	cbnz	r0, 800461a <_dtoa_r+0x162>
 8004616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800461a:	f1ba 0f16 	cmp.w	sl, #22
 800461e:	d859      	bhi.n	80046d4 <_dtoa_r+0x21c>
 8004620:	4970      	ldr	r1, [pc, #448]	; (80047e4 <_dtoa_r+0x32c>)
 8004622:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800462a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800462e:	f7fc fa9b 	bl	8000b68 <__aeabi_dcmpgt>
 8004632:	2800      	cmp	r0, #0
 8004634:	d050      	beq.n	80046d8 <_dtoa_r+0x220>
 8004636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800463a:	2300      	movs	r3, #0
 800463c:	930f      	str	r3, [sp, #60]	; 0x3c
 800463e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004640:	1b5d      	subs	r5, r3, r5
 8004642:	f1b5 0801 	subs.w	r8, r5, #1
 8004646:	bf49      	itett	mi
 8004648:	f1c5 0301 	rsbmi	r3, r5, #1
 800464c:	2300      	movpl	r3, #0
 800464e:	9305      	strmi	r3, [sp, #20]
 8004650:	f04f 0800 	movmi.w	r8, #0
 8004654:	bf58      	it	pl
 8004656:	9305      	strpl	r3, [sp, #20]
 8004658:	f1ba 0f00 	cmp.w	sl, #0
 800465c:	db3e      	blt.n	80046dc <_dtoa_r+0x224>
 800465e:	2300      	movs	r3, #0
 8004660:	44d0      	add	r8, sl
 8004662:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004666:	9307      	str	r3, [sp, #28]
 8004668:	9b06      	ldr	r3, [sp, #24]
 800466a:	2b09      	cmp	r3, #9
 800466c:	f200 8090 	bhi.w	8004790 <_dtoa_r+0x2d8>
 8004670:	2b05      	cmp	r3, #5
 8004672:	bfc4      	itt	gt
 8004674:	3b04      	subgt	r3, #4
 8004676:	9306      	strgt	r3, [sp, #24]
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	f1a3 0302 	sub.w	r3, r3, #2
 800467e:	bfcc      	ite	gt
 8004680:	2500      	movgt	r5, #0
 8004682:	2501      	movle	r5, #1
 8004684:	2b03      	cmp	r3, #3
 8004686:	f200 808f 	bhi.w	80047a8 <_dtoa_r+0x2f0>
 800468a:	e8df f003 	tbb	[pc, r3]
 800468e:	7f7d      	.short	0x7f7d
 8004690:	7131      	.short	0x7131
 8004692:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004696:	441d      	add	r5, r3
 8004698:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800469c:	2820      	cmp	r0, #32
 800469e:	dd13      	ble.n	80046c8 <_dtoa_r+0x210>
 80046a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80046a4:	9b00      	ldr	r3, [sp, #0]
 80046a6:	fa08 f800 	lsl.w	r8, r8, r0
 80046aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80046ae:	fa23 f000 	lsr.w	r0, r3, r0
 80046b2:	ea48 0000 	orr.w	r0, r8, r0
 80046b6:	f7fb ff4d 	bl	8000554 <__aeabi_ui2d>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4682      	mov	sl, r0
 80046be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80046c2:	3d01      	subs	r5, #1
 80046c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80046c6:	e772      	b.n	80045ae <_dtoa_r+0xf6>
 80046c8:	9b00      	ldr	r3, [sp, #0]
 80046ca:	f1c0 0020 	rsb	r0, r0, #32
 80046ce:	fa03 f000 	lsl.w	r0, r3, r0
 80046d2:	e7f0      	b.n	80046b6 <_dtoa_r+0x1fe>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e7b1      	b.n	800463c <_dtoa_r+0x184>
 80046d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80046da:	e7b0      	b.n	800463e <_dtoa_r+0x186>
 80046dc:	9b05      	ldr	r3, [sp, #20]
 80046de:	eba3 030a 	sub.w	r3, r3, sl
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	f1ca 0300 	rsb	r3, sl, #0
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	2300      	movs	r3, #0
 80046ec:	930e      	str	r3, [sp, #56]	; 0x38
 80046ee:	e7bb      	b.n	8004668 <_dtoa_r+0x1b0>
 80046f0:	2301      	movs	r3, #1
 80046f2:	930a      	str	r3, [sp, #40]	; 0x28
 80046f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dd59      	ble.n	80047ae <_dtoa_r+0x2f6>
 80046fa:	9302      	str	r3, [sp, #8]
 80046fc:	4699      	mov	r9, r3
 80046fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004700:	2200      	movs	r2, #0
 8004702:	6072      	str	r2, [r6, #4]
 8004704:	2204      	movs	r2, #4
 8004706:	f102 0014 	add.w	r0, r2, #20
 800470a:	4298      	cmp	r0, r3
 800470c:	6871      	ldr	r1, [r6, #4]
 800470e:	d953      	bls.n	80047b8 <_dtoa_r+0x300>
 8004710:	4620      	mov	r0, r4
 8004712:	f000 fe7d 	bl	8005410 <_Balloc>
 8004716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004718:	6030      	str	r0, [r6, #0]
 800471a:	f1b9 0f0e 	cmp.w	r9, #14
 800471e:	f8d3 b000 	ldr.w	fp, [r3]
 8004722:	f200 80e6 	bhi.w	80048f2 <_dtoa_r+0x43a>
 8004726:	2d00      	cmp	r5, #0
 8004728:	f000 80e3 	beq.w	80048f2 <_dtoa_r+0x43a>
 800472c:	ed9d 7b00 	vldr	d7, [sp]
 8004730:	f1ba 0f00 	cmp.w	sl, #0
 8004734:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004738:	dd74      	ble.n	8004824 <_dtoa_r+0x36c>
 800473a:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <_dtoa_r+0x32c>)
 800473c:	f00a 030f 	and.w	r3, sl, #15
 8004740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004744:	ed93 7b00 	vldr	d7, [r3]
 8004748:	ea4f 162a 	mov.w	r6, sl, asr #4
 800474c:	06f0      	lsls	r0, r6, #27
 800474e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004752:	d565      	bpl.n	8004820 <_dtoa_r+0x368>
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <_dtoa_r+0x330>)
 8004756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800475a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800475e:	f7fc f89d 	bl	800089c <__aeabi_ddiv>
 8004762:	e9cd 0100 	strd	r0, r1, [sp]
 8004766:	f006 060f 	and.w	r6, r6, #15
 800476a:	2503      	movs	r5, #3
 800476c:	4f1e      	ldr	r7, [pc, #120]	; (80047e8 <_dtoa_r+0x330>)
 800476e:	e04c      	b.n	800480a <_dtoa_r+0x352>
 8004770:	2301      	movs	r3, #1
 8004772:	930a      	str	r3, [sp, #40]	; 0x28
 8004774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004776:	4453      	add	r3, sl
 8004778:	f103 0901 	add.w	r9, r3, #1
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	464b      	mov	r3, r9
 8004780:	2b01      	cmp	r3, #1
 8004782:	bfb8      	it	lt
 8004784:	2301      	movlt	r3, #1
 8004786:	e7ba      	b.n	80046fe <_dtoa_r+0x246>
 8004788:	2300      	movs	r3, #0
 800478a:	e7b2      	b.n	80046f2 <_dtoa_r+0x23a>
 800478c:	2300      	movs	r3, #0
 800478e:	e7f0      	b.n	8004772 <_dtoa_r+0x2ba>
 8004790:	2501      	movs	r5, #1
 8004792:	2300      	movs	r3, #0
 8004794:	9306      	str	r3, [sp, #24]
 8004796:	950a      	str	r5, [sp, #40]	; 0x28
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	9302      	str	r3, [sp, #8]
 800479e:	4699      	mov	r9, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	2312      	movs	r3, #18
 80047a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80047a6:	e7aa      	b.n	80046fe <_dtoa_r+0x246>
 80047a8:	2301      	movs	r3, #1
 80047aa:	930a      	str	r3, [sp, #40]	; 0x28
 80047ac:	e7f4      	b.n	8004798 <_dtoa_r+0x2e0>
 80047ae:	2301      	movs	r3, #1
 80047b0:	9302      	str	r3, [sp, #8]
 80047b2:	4699      	mov	r9, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	e7f5      	b.n	80047a4 <_dtoa_r+0x2ec>
 80047b8:	3101      	adds	r1, #1
 80047ba:	6071      	str	r1, [r6, #4]
 80047bc:	0052      	lsls	r2, r2, #1
 80047be:	e7a2      	b.n	8004706 <_dtoa_r+0x24e>
 80047c0:	636f4361 	.word	0x636f4361
 80047c4:	3fd287a7 	.word	0x3fd287a7
 80047c8:	8b60c8b3 	.word	0x8b60c8b3
 80047cc:	3fc68a28 	.word	0x3fc68a28
 80047d0:	509f79fb 	.word	0x509f79fb
 80047d4:	3fd34413 	.word	0x3fd34413
 80047d8:	7ff00000 	.word	0x7ff00000
 80047dc:	08005fe5 	.word	0x08005fe5
 80047e0:	3ff80000 	.word	0x3ff80000
 80047e4:	080060a0 	.word	0x080060a0
 80047e8:	08006078 	.word	0x08006078
 80047ec:	08006011 	.word	0x08006011
 80047f0:	07f1      	lsls	r1, r6, #31
 80047f2:	d508      	bpl.n	8004806 <_dtoa_r+0x34e>
 80047f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80047f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fc:	f7fb ff24 	bl	8000648 <__aeabi_dmul>
 8004800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004804:	3501      	adds	r5, #1
 8004806:	1076      	asrs	r6, r6, #1
 8004808:	3708      	adds	r7, #8
 800480a:	2e00      	cmp	r6, #0
 800480c:	d1f0      	bne.n	80047f0 <_dtoa_r+0x338>
 800480e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004816:	f7fc f841 	bl	800089c <__aeabi_ddiv>
 800481a:	e9cd 0100 	strd	r0, r1, [sp]
 800481e:	e01a      	b.n	8004856 <_dtoa_r+0x39e>
 8004820:	2502      	movs	r5, #2
 8004822:	e7a3      	b.n	800476c <_dtoa_r+0x2b4>
 8004824:	f000 80a0 	beq.w	8004968 <_dtoa_r+0x4b0>
 8004828:	f1ca 0600 	rsb	r6, sl, #0
 800482c:	4b9f      	ldr	r3, [pc, #636]	; (8004aac <_dtoa_r+0x5f4>)
 800482e:	4fa0      	ldr	r7, [pc, #640]	; (8004ab0 <_dtoa_r+0x5f8>)
 8004830:	f006 020f 	and.w	r2, r6, #15
 8004834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004840:	f7fb ff02 	bl	8000648 <__aeabi_dmul>
 8004844:	e9cd 0100 	strd	r0, r1, [sp]
 8004848:	1136      	asrs	r6, r6, #4
 800484a:	2300      	movs	r3, #0
 800484c:	2502      	movs	r5, #2
 800484e:	2e00      	cmp	r6, #0
 8004850:	d17f      	bne.n	8004952 <_dtoa_r+0x49a>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e1      	bne.n	800481a <_dtoa_r+0x362>
 8004856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8087 	beq.w	800496c <_dtoa_r+0x4b4>
 800485e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004862:	2200      	movs	r2, #0
 8004864:	4b93      	ldr	r3, [pc, #588]	; (8004ab4 <_dtoa_r+0x5fc>)
 8004866:	4630      	mov	r0, r6
 8004868:	4639      	mov	r1, r7
 800486a:	f7fc f95f 	bl	8000b2c <__aeabi_dcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	d07c      	beq.n	800496c <_dtoa_r+0x4b4>
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	d079      	beq.n	800496c <_dtoa_r+0x4b4>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dd35      	ble.n	80048ea <_dtoa_r+0x432>
 800487e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004882:	9308      	str	r3, [sp, #32]
 8004884:	4639      	mov	r1, r7
 8004886:	2200      	movs	r2, #0
 8004888:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <_dtoa_r+0x600>)
 800488a:	4630      	mov	r0, r6
 800488c:	f7fb fedc 	bl	8000648 <__aeabi_dmul>
 8004890:	e9cd 0100 	strd	r0, r1, [sp]
 8004894:	9f02      	ldr	r7, [sp, #8]
 8004896:	3501      	adds	r5, #1
 8004898:	4628      	mov	r0, r5
 800489a:	f7fb fe6b 	bl	8000574 <__aeabi_i2d>
 800489e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048a2:	f7fb fed1 	bl	8000648 <__aeabi_dmul>
 80048a6:	2200      	movs	r2, #0
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <_dtoa_r+0x604>)
 80048aa:	f7fb fd17 	bl	80002dc <__adddf3>
 80048ae:	4605      	mov	r5, r0
 80048b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d15d      	bne.n	8004974 <_dtoa_r+0x4bc>
 80048b8:	2200      	movs	r2, #0
 80048ba:	4b81      	ldr	r3, [pc, #516]	; (8004ac0 <_dtoa_r+0x608>)
 80048bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048c0:	f7fb fd0a 	bl	80002d8 <__aeabi_dsub>
 80048c4:	462a      	mov	r2, r5
 80048c6:	4633      	mov	r3, r6
 80048c8:	e9cd 0100 	strd	r0, r1, [sp]
 80048cc:	f7fc f94c 	bl	8000b68 <__aeabi_dcmpgt>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f040 8288 	bne.w	8004de6 <_dtoa_r+0x92e>
 80048d6:	462a      	mov	r2, r5
 80048d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80048dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048e0:	f7fc f924 	bl	8000b2c <__aeabi_dcmplt>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f040 827c 	bne.w	8004de2 <_dtoa_r+0x92a>
 80048ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048ee:	e9cd 2300 	strd	r2, r3, [sp]
 80048f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f2c0 8150 	blt.w	8004b9a <_dtoa_r+0x6e2>
 80048fa:	f1ba 0f0e 	cmp.w	sl, #14
 80048fe:	f300 814c 	bgt.w	8004b9a <_dtoa_r+0x6e2>
 8004902:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <_dtoa_r+0x5f4>)
 8004904:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004908:	ed93 7b00 	vldr	d7, [r3]
 800490c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004914:	f280 80d8 	bge.w	8004ac8 <_dtoa_r+0x610>
 8004918:	f1b9 0f00 	cmp.w	r9, #0
 800491c:	f300 80d4 	bgt.w	8004ac8 <_dtoa_r+0x610>
 8004920:	f040 825e 	bne.w	8004de0 <_dtoa_r+0x928>
 8004924:	2200      	movs	r2, #0
 8004926:	4b66      	ldr	r3, [pc, #408]	; (8004ac0 <_dtoa_r+0x608>)
 8004928:	ec51 0b17 	vmov	r0, r1, d7
 800492c:	f7fb fe8c 	bl	8000648 <__aeabi_dmul>
 8004930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004934:	f7fc f90e 	bl	8000b54 <__aeabi_dcmpge>
 8004938:	464f      	mov	r7, r9
 800493a:	464e      	mov	r6, r9
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 8234 	bne.w	8004daa <_dtoa_r+0x8f2>
 8004942:	2331      	movs	r3, #49	; 0x31
 8004944:	f10b 0501 	add.w	r5, fp, #1
 8004948:	f88b 3000 	strb.w	r3, [fp]
 800494c:	f10a 0a01 	add.w	sl, sl, #1
 8004950:	e22f      	b.n	8004db2 <_dtoa_r+0x8fa>
 8004952:	07f2      	lsls	r2, r6, #31
 8004954:	d505      	bpl.n	8004962 <_dtoa_r+0x4aa>
 8004956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495a:	f7fb fe75 	bl	8000648 <__aeabi_dmul>
 800495e:	3501      	adds	r5, #1
 8004960:	2301      	movs	r3, #1
 8004962:	1076      	asrs	r6, r6, #1
 8004964:	3708      	adds	r7, #8
 8004966:	e772      	b.n	800484e <_dtoa_r+0x396>
 8004968:	2502      	movs	r5, #2
 800496a:	e774      	b.n	8004856 <_dtoa_r+0x39e>
 800496c:	f8cd a020 	str.w	sl, [sp, #32]
 8004970:	464f      	mov	r7, r9
 8004972:	e791      	b.n	8004898 <_dtoa_r+0x3e0>
 8004974:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <_dtoa_r+0x5f4>)
 8004976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800497a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800497e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d047      	beq.n	8004a14 <_dtoa_r+0x55c>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	2000      	movs	r0, #0
 800498a:	494e      	ldr	r1, [pc, #312]	; (8004ac4 <_dtoa_r+0x60c>)
 800498c:	f7fb ff86 	bl	800089c <__aeabi_ddiv>
 8004990:	462a      	mov	r2, r5
 8004992:	4633      	mov	r3, r6
 8004994:	f7fb fca0 	bl	80002d8 <__aeabi_dsub>
 8004998:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800499c:	465d      	mov	r5, fp
 800499e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049a2:	f7fc f901 	bl	8000ba8 <__aeabi_d2iz>
 80049a6:	4606      	mov	r6, r0
 80049a8:	f7fb fde4 	bl	8000574 <__aeabi_i2d>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049b4:	f7fb fc90 	bl	80002d8 <__aeabi_dsub>
 80049b8:	3630      	adds	r6, #48	; 0x30
 80049ba:	f805 6b01 	strb.w	r6, [r5], #1
 80049be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049c2:	e9cd 0100 	strd	r0, r1, [sp]
 80049c6:	f7fc f8b1 	bl	8000b2c <__aeabi_dcmplt>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d163      	bne.n	8004a96 <_dtoa_r+0x5de>
 80049ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049d2:	2000      	movs	r0, #0
 80049d4:	4937      	ldr	r1, [pc, #220]	; (8004ab4 <_dtoa_r+0x5fc>)
 80049d6:	f7fb fc7f 	bl	80002d8 <__aeabi_dsub>
 80049da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049de:	f7fc f8a5 	bl	8000b2c <__aeabi_dcmplt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f040 80b7 	bne.w	8004b56 <_dtoa_r+0x69e>
 80049e8:	eba5 030b 	sub.w	r3, r5, fp
 80049ec:	429f      	cmp	r7, r3
 80049ee:	f77f af7c 	ble.w	80048ea <_dtoa_r+0x432>
 80049f2:	2200      	movs	r2, #0
 80049f4:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <_dtoa_r+0x600>)
 80049f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049fa:	f7fb fe25 	bl	8000648 <__aeabi_dmul>
 80049fe:	2200      	movs	r2, #0
 8004a00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <_dtoa_r+0x600>)
 8004a06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a0a:	f7fb fe1d 	bl	8000648 <__aeabi_dmul>
 8004a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8004a12:	e7c4      	b.n	800499e <_dtoa_r+0x4e6>
 8004a14:	462a      	mov	r2, r5
 8004a16:	4633      	mov	r3, r6
 8004a18:	f7fb fe16 	bl	8000648 <__aeabi_dmul>
 8004a1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a20:	eb0b 0507 	add.w	r5, fp, r7
 8004a24:	465e      	mov	r6, fp
 8004a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a2a:	f7fc f8bd 	bl	8000ba8 <__aeabi_d2iz>
 8004a2e:	4607      	mov	r7, r0
 8004a30:	f7fb fda0 	bl	8000574 <__aeabi_i2d>
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a3e:	f7fb fc4b 	bl	80002d8 <__aeabi_dsub>
 8004a42:	f806 7b01 	strb.w	r7, [r6], #1
 8004a46:	42ae      	cmp	r6, r5
 8004a48:	e9cd 0100 	strd	r0, r1, [sp]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	d126      	bne.n	8004aa0 <_dtoa_r+0x5e8>
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <_dtoa_r+0x60c>)
 8004a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a58:	f7fb fc40 	bl	80002dc <__adddf3>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a64:	f7fc f880 	bl	8000b68 <__aeabi_dcmpgt>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d174      	bne.n	8004b56 <_dtoa_r+0x69e>
 8004a6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a70:	2000      	movs	r0, #0
 8004a72:	4914      	ldr	r1, [pc, #80]	; (8004ac4 <_dtoa_r+0x60c>)
 8004a74:	f7fb fc30 	bl	80002d8 <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a80:	f7fc f854 	bl	8000b2c <__aeabi_dcmplt>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f43f af30 	beq.w	80048ea <_dtoa_r+0x432>
 8004a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	f105 32ff 	add.w	r2, r5, #4294967295
 8004a94:	d002      	beq.n	8004a9c <_dtoa_r+0x5e4>
 8004a96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004a9a:	e04a      	b.n	8004b32 <_dtoa_r+0x67a>
 8004a9c:	4615      	mov	r5, r2
 8004a9e:	e7f4      	b.n	8004a8a <_dtoa_r+0x5d2>
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <_dtoa_r+0x600>)
 8004aa2:	f7fb fdd1 	bl	8000648 <__aeabi_dmul>
 8004aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8004aaa:	e7bc      	b.n	8004a26 <_dtoa_r+0x56e>
 8004aac:	080060a0 	.word	0x080060a0
 8004ab0:	08006078 	.word	0x08006078
 8004ab4:	3ff00000 	.word	0x3ff00000
 8004ab8:	40240000 	.word	0x40240000
 8004abc:	401c0000 	.word	0x401c0000
 8004ac0:	40140000 	.word	0x40140000
 8004ac4:	3fe00000 	.word	0x3fe00000
 8004ac8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004acc:	465d      	mov	r5, fp
 8004ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	f7fb fee1 	bl	800089c <__aeabi_ddiv>
 8004ada:	f7fc f865 	bl	8000ba8 <__aeabi_d2iz>
 8004ade:	4680      	mov	r8, r0
 8004ae0:	f7fb fd48 	bl	8000574 <__aeabi_i2d>
 8004ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ae8:	f7fb fdae 	bl	8000648 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4630      	mov	r0, r6
 8004af2:	4639      	mov	r1, r7
 8004af4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004af8:	f7fb fbee 	bl	80002d8 <__aeabi_dsub>
 8004afc:	f805 6b01 	strb.w	r6, [r5], #1
 8004b00:	eba5 060b 	sub.w	r6, r5, fp
 8004b04:	45b1      	cmp	r9, r6
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	d139      	bne.n	8004b80 <_dtoa_r+0x6c8>
 8004b0c:	f7fb fbe6 	bl	80002dc <__adddf3>
 8004b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b14:	4606      	mov	r6, r0
 8004b16:	460f      	mov	r7, r1
 8004b18:	f7fc f826 	bl	8000b68 <__aeabi_dcmpgt>
 8004b1c:	b9c8      	cbnz	r0, 8004b52 <_dtoa_r+0x69a>
 8004b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b22:	4630      	mov	r0, r6
 8004b24:	4639      	mov	r1, r7
 8004b26:	f7fb fff7 	bl	8000b18 <__aeabi_dcmpeq>
 8004b2a:	b110      	cbz	r0, 8004b32 <_dtoa_r+0x67a>
 8004b2c:	f018 0f01 	tst.w	r8, #1
 8004b30:	d10f      	bne.n	8004b52 <_dtoa_r+0x69a>
 8004b32:	9904      	ldr	r1, [sp, #16]
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fc9f 	bl	8005478 <_Bfree>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b3e:	702b      	strb	r3, [r5, #0]
 8004b40:	f10a 0301 	add.w	r3, sl, #1
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8241 	beq.w	8004fd0 <_dtoa_r+0xb18>
 8004b4e:	601d      	str	r5, [r3, #0]
 8004b50:	e23e      	b.n	8004fd0 <_dtoa_r+0xb18>
 8004b52:	f8cd a020 	str.w	sl, [sp, #32]
 8004b56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b5a:	2a39      	cmp	r2, #57	; 0x39
 8004b5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004b60:	d108      	bne.n	8004b74 <_dtoa_r+0x6bc>
 8004b62:	459b      	cmp	fp, r3
 8004b64:	d10a      	bne.n	8004b7c <_dtoa_r+0x6c4>
 8004b66:	9b08      	ldr	r3, [sp, #32]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	9308      	str	r3, [sp, #32]
 8004b6c:	2330      	movs	r3, #48	; 0x30
 8004b6e:	f88b 3000 	strb.w	r3, [fp]
 8004b72:	465b      	mov	r3, fp
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	3201      	adds	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e78c      	b.n	8004a96 <_dtoa_r+0x5de>
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	e7ea      	b.n	8004b56 <_dtoa_r+0x69e>
 8004b80:	2200      	movs	r2, #0
 8004b82:	4b9b      	ldr	r3, [pc, #620]	; (8004df0 <_dtoa_r+0x938>)
 8004b84:	f7fb fd60 	bl	8000648 <__aeabi_dmul>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	460f      	mov	r7, r1
 8004b90:	f7fb ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d09a      	beq.n	8004ace <_dtoa_r+0x616>
 8004b98:	e7cb      	b.n	8004b32 <_dtoa_r+0x67a>
 8004b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	f000 808b 	beq.w	8004cb8 <_dtoa_r+0x800>
 8004ba2:	9a06      	ldr	r2, [sp, #24]
 8004ba4:	2a01      	cmp	r2, #1
 8004ba6:	dc6e      	bgt.n	8004c86 <_dtoa_r+0x7ce>
 8004ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d067      	beq.n	8004c7e <_dtoa_r+0x7c6>
 8004bae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bb2:	9f07      	ldr	r7, [sp, #28]
 8004bb4:	9d05      	ldr	r5, [sp, #20]
 8004bb6:	9a05      	ldr	r2, [sp, #20]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	441a      	add	r2, r3
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	9205      	str	r2, [sp, #20]
 8004bc0:	4498      	add	r8, r3
 8004bc2:	f000 fcf9 	bl	80055b8 <__i2b>
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	dd0c      	ble.n	8004be6 <_dtoa_r+0x72e>
 8004bcc:	f1b8 0f00 	cmp.w	r8, #0
 8004bd0:	dd09      	ble.n	8004be6 <_dtoa_r+0x72e>
 8004bd2:	4545      	cmp	r5, r8
 8004bd4:	9a05      	ldr	r2, [sp, #20]
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	bfa8      	it	ge
 8004bda:	4643      	movge	r3, r8
 8004bdc:	1ad2      	subs	r2, r2, r3
 8004bde:	9205      	str	r2, [sp, #20]
 8004be0:	1aed      	subs	r5, r5, r3
 8004be2:	eba8 0803 	sub.w	r8, r8, r3
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	b1eb      	cbz	r3, 8004c26 <_dtoa_r+0x76e>
 8004bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d067      	beq.n	8004cc0 <_dtoa_r+0x808>
 8004bf0:	b18f      	cbz	r7, 8004c16 <_dtoa_r+0x75e>
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	463a      	mov	r2, r7
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 fd7e 	bl	80056f8 <__pow5mult>
 8004bfc:	9a04      	ldr	r2, [sp, #16]
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4606      	mov	r6, r0
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 fce1 	bl	80055ca <__multiply>
 8004c08:	9904      	ldr	r1, [sp, #16]
 8004c0a:	9008      	str	r0, [sp, #32]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 fc33 	bl	8005478 <_Bfree>
 8004c12:	9b08      	ldr	r3, [sp, #32]
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	9b07      	ldr	r3, [sp, #28]
 8004c18:	1bda      	subs	r2, r3, r7
 8004c1a:	d004      	beq.n	8004c26 <_dtoa_r+0x76e>
 8004c1c:	9904      	ldr	r1, [sp, #16]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 fd6a 	bl	80056f8 <__pow5mult>
 8004c24:	9004      	str	r0, [sp, #16]
 8004c26:	2101      	movs	r1, #1
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 fcc5 	bl	80055b8 <__i2b>
 8004c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c30:	4607      	mov	r7, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 81d0 	beq.w	8004fd8 <_dtoa_r+0xb20>
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 fd5b 	bl	80056f8 <__pow5mult>
 8004c42:	9b06      	ldr	r3, [sp, #24]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	4607      	mov	r7, r0
 8004c48:	dc40      	bgt.n	8004ccc <_dtoa_r+0x814>
 8004c4a:	9b00      	ldr	r3, [sp, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d139      	bne.n	8004cc4 <_dtoa_r+0x80c>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d136      	bne.n	8004cc8 <_dtoa_r+0x810>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c60:	0d1b      	lsrs	r3, r3, #20
 8004c62:	051b      	lsls	r3, r3, #20
 8004c64:	b12b      	cbz	r3, 8004c72 <_dtoa_r+0x7ba>
 8004c66:	9b05      	ldr	r3, [sp, #20]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	f108 0801 	add.w	r8, r8, #1
 8004c70:	2301      	movs	r3, #1
 8004c72:	9307      	str	r3, [sp, #28]
 8004c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12a      	bne.n	8004cd0 <_dtoa_r+0x818>
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	e030      	b.n	8004ce0 <_dtoa_r+0x828>
 8004c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c84:	e795      	b.n	8004bb2 <_dtoa_r+0x6fa>
 8004c86:	9b07      	ldr	r3, [sp, #28]
 8004c88:	f109 37ff 	add.w	r7, r9, #4294967295
 8004c8c:	42bb      	cmp	r3, r7
 8004c8e:	bfbf      	itttt	lt
 8004c90:	9b07      	ldrlt	r3, [sp, #28]
 8004c92:	9707      	strlt	r7, [sp, #28]
 8004c94:	1afa      	sublt	r2, r7, r3
 8004c96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004c98:	bfbb      	ittet	lt
 8004c9a:	189b      	addlt	r3, r3, r2
 8004c9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004c9e:	1bdf      	subge	r7, r3, r7
 8004ca0:	2700      	movlt	r7, #0
 8004ca2:	f1b9 0f00 	cmp.w	r9, #0
 8004ca6:	bfb5      	itete	lt
 8004ca8:	9b05      	ldrlt	r3, [sp, #20]
 8004caa:	9d05      	ldrge	r5, [sp, #20]
 8004cac:	eba3 0509 	sublt.w	r5, r3, r9
 8004cb0:	464b      	movge	r3, r9
 8004cb2:	bfb8      	it	lt
 8004cb4:	2300      	movlt	r3, #0
 8004cb6:	e77e      	b.n	8004bb6 <_dtoa_r+0x6fe>
 8004cb8:	9f07      	ldr	r7, [sp, #28]
 8004cba:	9d05      	ldr	r5, [sp, #20]
 8004cbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004cbe:	e783      	b.n	8004bc8 <_dtoa_r+0x710>
 8004cc0:	9a07      	ldr	r2, [sp, #28]
 8004cc2:	e7ab      	b.n	8004c1c <_dtoa_r+0x764>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e7d4      	b.n	8004c72 <_dtoa_r+0x7ba>
 8004cc8:	9b00      	ldr	r3, [sp, #0]
 8004cca:	e7d2      	b.n	8004c72 <_dtoa_r+0x7ba>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9307      	str	r3, [sp, #28]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004cd6:	6918      	ldr	r0, [r3, #16]
 8004cd8:	f000 fc20 	bl	800551c <__hi0bits>
 8004cdc:	f1c0 0020 	rsb	r0, r0, #32
 8004ce0:	4440      	add	r0, r8
 8004ce2:	f010 001f 	ands.w	r0, r0, #31
 8004ce6:	d047      	beq.n	8004d78 <_dtoa_r+0x8c0>
 8004ce8:	f1c0 0320 	rsb	r3, r0, #32
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	dd3b      	ble.n	8004d68 <_dtoa_r+0x8b0>
 8004cf0:	9b05      	ldr	r3, [sp, #20]
 8004cf2:	f1c0 001c 	rsb	r0, r0, #28
 8004cf6:	4403      	add	r3, r0
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	4405      	add	r5, r0
 8004cfc:	4480      	add	r8, r0
 8004cfe:	9b05      	ldr	r3, [sp, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd05      	ble.n	8004d10 <_dtoa_r+0x858>
 8004d04:	461a      	mov	r2, r3
 8004d06:	9904      	ldr	r1, [sp, #16]
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fd43 	bl	8005794 <__lshift>
 8004d0e:	9004      	str	r0, [sp, #16]
 8004d10:	f1b8 0f00 	cmp.w	r8, #0
 8004d14:	dd05      	ble.n	8004d22 <_dtoa_r+0x86a>
 8004d16:	4639      	mov	r1, r7
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 fd3a 	bl	8005794 <__lshift>
 8004d20:	4607      	mov	r7, r0
 8004d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d24:	b353      	cbz	r3, 8004d7c <_dtoa_r+0x8c4>
 8004d26:	4639      	mov	r1, r7
 8004d28:	9804      	ldr	r0, [sp, #16]
 8004d2a:	f000 fd87 	bl	800583c <__mcmp>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	da24      	bge.n	8004d7c <_dtoa_r+0x8c4>
 8004d32:	2300      	movs	r3, #0
 8004d34:	220a      	movs	r2, #10
 8004d36:	9904      	ldr	r1, [sp, #16]
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fbb4 	bl	80054a6 <__multadd>
 8004d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d40:	9004      	str	r0, [sp, #16]
 8004d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 814d 	beq.w	8004fe6 <_dtoa_r+0xb2e>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4631      	mov	r1, r6
 8004d50:	220a      	movs	r2, #10
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 fba7 	bl	80054a6 <__multadd>
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	dc4f      	bgt.n	8004e00 <_dtoa_r+0x948>
 8004d60:	9b06      	ldr	r3, [sp, #24]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	dd4c      	ble.n	8004e00 <_dtoa_r+0x948>
 8004d66:	e011      	b.n	8004d8c <_dtoa_r+0x8d4>
 8004d68:	d0c9      	beq.n	8004cfe <_dtoa_r+0x846>
 8004d6a:	9a05      	ldr	r2, [sp, #20]
 8004d6c:	331c      	adds	r3, #28
 8004d6e:	441a      	add	r2, r3
 8004d70:	9205      	str	r2, [sp, #20]
 8004d72:	441d      	add	r5, r3
 8004d74:	4498      	add	r8, r3
 8004d76:	e7c2      	b.n	8004cfe <_dtoa_r+0x846>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	e7f6      	b.n	8004d6a <_dtoa_r+0x8b2>
 8004d7c:	f1b9 0f00 	cmp.w	r9, #0
 8004d80:	dc38      	bgt.n	8004df4 <_dtoa_r+0x93c>
 8004d82:	9b06      	ldr	r3, [sp, #24]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	dd35      	ble.n	8004df4 <_dtoa_r+0x93c>
 8004d88:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d8c:	9b02      	ldr	r3, [sp, #8]
 8004d8e:	b963      	cbnz	r3, 8004daa <_dtoa_r+0x8f2>
 8004d90:	4639      	mov	r1, r7
 8004d92:	2205      	movs	r2, #5
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fb86 	bl	80054a6 <__multadd>
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	9804      	ldr	r0, [sp, #16]
 8004da0:	f000 fd4c 	bl	800583c <__mcmp>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	f73f adcc 	bgt.w	8004942 <_dtoa_r+0x48a>
 8004daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dac:	465d      	mov	r5, fp
 8004dae:	ea6f 0a03 	mvn.w	sl, r3
 8004db2:	f04f 0900 	mov.w	r9, #0
 8004db6:	4639      	mov	r1, r7
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 fb5d 	bl	8005478 <_Bfree>
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	f43f aeb7 	beq.w	8004b32 <_dtoa_r+0x67a>
 8004dc4:	f1b9 0f00 	cmp.w	r9, #0
 8004dc8:	d005      	beq.n	8004dd6 <_dtoa_r+0x91e>
 8004dca:	45b1      	cmp	r9, r6
 8004dcc:	d003      	beq.n	8004dd6 <_dtoa_r+0x91e>
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 fb51 	bl	8005478 <_Bfree>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fb4d 	bl	8005478 <_Bfree>
 8004dde:	e6a8      	b.n	8004b32 <_dtoa_r+0x67a>
 8004de0:	2700      	movs	r7, #0
 8004de2:	463e      	mov	r6, r7
 8004de4:	e7e1      	b.n	8004daa <_dtoa_r+0x8f2>
 8004de6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004dea:	463e      	mov	r6, r7
 8004dec:	e5a9      	b.n	8004942 <_dtoa_r+0x48a>
 8004dee:	bf00      	nop
 8004df0:	40240000 	.word	0x40240000
 8004df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df6:	f8cd 9008 	str.w	r9, [sp, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80fa 	beq.w	8004ff4 <_dtoa_r+0xb3c>
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	dd05      	ble.n	8004e10 <_dtoa_r+0x958>
 8004e04:	4631      	mov	r1, r6
 8004e06:	462a      	mov	r2, r5
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f000 fcc3 	bl	8005794 <__lshift>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	9b07      	ldr	r3, [sp, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d04c      	beq.n	8004eb0 <_dtoa_r+0x9f8>
 8004e16:	6871      	ldr	r1, [r6, #4]
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 faf9 	bl	8005410 <_Balloc>
 8004e1e:	6932      	ldr	r2, [r6, #16]
 8004e20:	3202      	adds	r2, #2
 8004e22:	4605      	mov	r5, r0
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	f106 010c 	add.w	r1, r6, #12
 8004e2a:	300c      	adds	r0, #12
 8004e2c:	f7fe fd0a 	bl	8003844 <memcpy>
 8004e30:	2201      	movs	r2, #1
 8004e32:	4629      	mov	r1, r5
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 fcad 	bl	8005794 <__lshift>
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	f8cd b014 	str.w	fp, [sp, #20]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	46b1      	mov	r9, r6
 8004e46:	9307      	str	r3, [sp, #28]
 8004e48:	4606      	mov	r6, r0
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	9804      	ldr	r0, [sp, #16]
 8004e4e:	f7ff faa5 	bl	800439c <quorem>
 8004e52:	4649      	mov	r1, r9
 8004e54:	4605      	mov	r5, r0
 8004e56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e5a:	9804      	ldr	r0, [sp, #16]
 8004e5c:	f000 fcee 	bl	800583c <__mcmp>
 8004e60:	4632      	mov	r2, r6
 8004e62:	9000      	str	r0, [sp, #0]
 8004e64:	4639      	mov	r1, r7
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 fd02 	bl	8005870 <__mdiff>
 8004e6c:	68c3      	ldr	r3, [r0, #12]
 8004e6e:	4602      	mov	r2, r0
 8004e70:	bb03      	cbnz	r3, 8004eb4 <_dtoa_r+0x9fc>
 8004e72:	4601      	mov	r1, r0
 8004e74:	9008      	str	r0, [sp, #32]
 8004e76:	9804      	ldr	r0, [sp, #16]
 8004e78:	f000 fce0 	bl	800583c <__mcmp>
 8004e7c:	9a08      	ldr	r2, [sp, #32]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4611      	mov	r1, r2
 8004e82:	4620      	mov	r0, r4
 8004e84:	9308      	str	r3, [sp, #32]
 8004e86:	f000 faf7 	bl	8005478 <_Bfree>
 8004e8a:	9b08      	ldr	r3, [sp, #32]
 8004e8c:	b9a3      	cbnz	r3, 8004eb8 <_dtoa_r+0xa00>
 8004e8e:	9a06      	ldr	r2, [sp, #24]
 8004e90:	b992      	cbnz	r2, 8004eb8 <_dtoa_r+0xa00>
 8004e92:	9a07      	ldr	r2, [sp, #28]
 8004e94:	b982      	cbnz	r2, 8004eb8 <_dtoa_r+0xa00>
 8004e96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e9a:	d029      	beq.n	8004ef0 <_dtoa_r+0xa38>
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd01      	ble.n	8004ea6 <_dtoa_r+0x9ee>
 8004ea2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	1c5d      	adds	r5, r3, #1
 8004eaa:	f883 8000 	strb.w	r8, [r3]
 8004eae:	e782      	b.n	8004db6 <_dtoa_r+0x8fe>
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	e7c2      	b.n	8004e3a <_dtoa_r+0x982>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e7e3      	b.n	8004e80 <_dtoa_r+0x9c8>
 8004eb8:	9a00      	ldr	r2, [sp, #0]
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	db04      	blt.n	8004ec8 <_dtoa_r+0xa10>
 8004ebe:	d125      	bne.n	8004f0c <_dtoa_r+0xa54>
 8004ec0:	9a06      	ldr	r2, [sp, #24]
 8004ec2:	bb1a      	cbnz	r2, 8004f0c <_dtoa_r+0xa54>
 8004ec4:	9a07      	ldr	r2, [sp, #28]
 8004ec6:	bb0a      	cbnz	r2, 8004f0c <_dtoa_r+0xa54>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	ddec      	ble.n	8004ea6 <_dtoa_r+0x9ee>
 8004ecc:	2201      	movs	r2, #1
 8004ece:	9904      	ldr	r1, [sp, #16]
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fc5f 	bl	8005794 <__lshift>
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	9004      	str	r0, [sp, #16]
 8004eda:	f000 fcaf 	bl	800583c <__mcmp>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	dc03      	bgt.n	8004eea <_dtoa_r+0xa32>
 8004ee2:	d1e0      	bne.n	8004ea6 <_dtoa_r+0x9ee>
 8004ee4:	f018 0f01 	tst.w	r8, #1
 8004ee8:	d0dd      	beq.n	8004ea6 <_dtoa_r+0x9ee>
 8004eea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004eee:	d1d8      	bne.n	8004ea2 <_dtoa_r+0x9ea>
 8004ef0:	9b05      	ldr	r3, [sp, #20]
 8004ef2:	9a05      	ldr	r2, [sp, #20]
 8004ef4:	1c5d      	adds	r5, r3, #1
 8004ef6:	2339      	movs	r3, #57	; 0x39
 8004ef8:	7013      	strb	r3, [r2, #0]
 8004efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004efe:	2b39      	cmp	r3, #57	; 0x39
 8004f00:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f04:	d04f      	beq.n	8004fa6 <_dtoa_r+0xaee>
 8004f06:	3301      	adds	r3, #1
 8004f08:	7013      	strb	r3, [r2, #0]
 8004f0a:	e754      	b.n	8004db6 <_dtoa_r+0x8fe>
 8004f0c:	9a05      	ldr	r2, [sp, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f102 0501 	add.w	r5, r2, #1
 8004f14:	dd06      	ble.n	8004f24 <_dtoa_r+0xa6c>
 8004f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f1a:	d0e9      	beq.n	8004ef0 <_dtoa_r+0xa38>
 8004f1c:	f108 0801 	add.w	r8, r8, #1
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	e7c2      	b.n	8004eaa <_dtoa_r+0x9f2>
 8004f24:	9a02      	ldr	r2, [sp, #8]
 8004f26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004f2a:	eba5 030b 	sub.w	r3, r5, fp
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d021      	beq.n	8004f76 <_dtoa_r+0xabe>
 8004f32:	2300      	movs	r3, #0
 8004f34:	220a      	movs	r2, #10
 8004f36:	9904      	ldr	r1, [sp, #16]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fab4 	bl	80054a6 <__multadd>
 8004f3e:	45b1      	cmp	r9, r6
 8004f40:	9004      	str	r0, [sp, #16]
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 020a 	mov.w	r2, #10
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	d105      	bne.n	8004f5c <_dtoa_r+0xaa4>
 8004f50:	f000 faa9 	bl	80054a6 <__multadd>
 8004f54:	4681      	mov	r9, r0
 8004f56:	4606      	mov	r6, r0
 8004f58:	9505      	str	r5, [sp, #20]
 8004f5a:	e776      	b.n	8004e4a <_dtoa_r+0x992>
 8004f5c:	f000 faa3 	bl	80054a6 <__multadd>
 8004f60:	4631      	mov	r1, r6
 8004f62:	4681      	mov	r9, r0
 8004f64:	2300      	movs	r3, #0
 8004f66:	220a      	movs	r2, #10
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 fa9c 	bl	80054a6 <__multadd>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	e7f2      	b.n	8004f58 <_dtoa_r+0xaa0>
 8004f72:	f04f 0900 	mov.w	r9, #0
 8004f76:	2201      	movs	r2, #1
 8004f78:	9904      	ldr	r1, [sp, #16]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fc0a 	bl	8005794 <__lshift>
 8004f80:	4639      	mov	r1, r7
 8004f82:	9004      	str	r0, [sp, #16]
 8004f84:	f000 fc5a 	bl	800583c <__mcmp>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	dcb6      	bgt.n	8004efa <_dtoa_r+0xa42>
 8004f8c:	d102      	bne.n	8004f94 <_dtoa_r+0xadc>
 8004f8e:	f018 0f01 	tst.w	r8, #1
 8004f92:	d1b2      	bne.n	8004efa <_dtoa_r+0xa42>
 8004f94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f9e:	f47f af0a 	bne.w	8004db6 <_dtoa_r+0x8fe>
 8004fa2:	4615      	mov	r5, r2
 8004fa4:	e7f6      	b.n	8004f94 <_dtoa_r+0xadc>
 8004fa6:	4593      	cmp	fp, r2
 8004fa8:	d105      	bne.n	8004fb6 <_dtoa_r+0xafe>
 8004faa:	2331      	movs	r3, #49	; 0x31
 8004fac:	f10a 0a01 	add.w	sl, sl, #1
 8004fb0:	f88b 3000 	strb.w	r3, [fp]
 8004fb4:	e6ff      	b.n	8004db6 <_dtoa_r+0x8fe>
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	e79f      	b.n	8004efa <_dtoa_r+0xa42>
 8004fba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005020 <_dtoa_r+0xb68>
 8004fbe:	e007      	b.n	8004fd0 <_dtoa_r+0xb18>
 8004fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005024 <_dtoa_r+0xb6c>
 8004fc6:	b11b      	cbz	r3, 8004fd0 <_dtoa_r+0xb18>
 8004fc8:	f10b 0308 	add.w	r3, fp, #8
 8004fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	b017      	add	sp, #92	; 0x5c
 8004fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	9b06      	ldr	r3, [sp, #24]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	f77f ae35 	ble.w	8004c4a <_dtoa_r+0x792>
 8004fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	e649      	b.n	8004c7a <_dtoa_r+0x7c2>
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dc03      	bgt.n	8004ff4 <_dtoa_r+0xb3c>
 8004fec:	9b06      	ldr	r3, [sp, #24]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	f73f aecc 	bgt.w	8004d8c <_dtoa_r+0x8d4>
 8004ff4:	465d      	mov	r5, fp
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	9804      	ldr	r0, [sp, #16]
 8004ffa:	f7ff f9cf 	bl	800439c <quorem>
 8004ffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005002:	f805 8b01 	strb.w	r8, [r5], #1
 8005006:	9a02      	ldr	r2, [sp, #8]
 8005008:	eba5 030b 	sub.w	r3, r5, fp
 800500c:	429a      	cmp	r2, r3
 800500e:	ddb0      	ble.n	8004f72 <_dtoa_r+0xaba>
 8005010:	2300      	movs	r3, #0
 8005012:	220a      	movs	r2, #10
 8005014:	9904      	ldr	r1, [sp, #16]
 8005016:	4620      	mov	r0, r4
 8005018:	f000 fa45 	bl	80054a6 <__multadd>
 800501c:	9004      	str	r0, [sp, #16]
 800501e:	e7ea      	b.n	8004ff6 <_dtoa_r+0xb3e>
 8005020:	08005fe4 	.word	0x08005fe4
 8005024:	08006008 	.word	0x08006008

08005028 <__sflush_r>:
 8005028:	898a      	ldrh	r2, [r1, #12]
 800502a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	0710      	lsls	r0, r2, #28
 8005032:	460c      	mov	r4, r1
 8005034:	d458      	bmi.n	80050e8 <__sflush_r+0xc0>
 8005036:	684b      	ldr	r3, [r1, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc05      	bgt.n	8005048 <__sflush_r+0x20>
 800503c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	dc02      	bgt.n	8005048 <__sflush_r+0x20>
 8005042:	2000      	movs	r0, #0
 8005044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800504a:	2e00      	cmp	r6, #0
 800504c:	d0f9      	beq.n	8005042 <__sflush_r+0x1a>
 800504e:	2300      	movs	r3, #0
 8005050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005054:	682f      	ldr	r7, [r5, #0]
 8005056:	6a21      	ldr	r1, [r4, #32]
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	d032      	beq.n	80050c2 <__sflush_r+0x9a>
 800505c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	075a      	lsls	r2, r3, #29
 8005062:	d505      	bpl.n	8005070 <__sflush_r+0x48>
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	1ac0      	subs	r0, r0, r3
 8005068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800506a:	b10b      	cbz	r3, 8005070 <__sflush_r+0x48>
 800506c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800506e:	1ac0      	subs	r0, r0, r3
 8005070:	2300      	movs	r3, #0
 8005072:	4602      	mov	r2, r0
 8005074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005076:	6a21      	ldr	r1, [r4, #32]
 8005078:	4628      	mov	r0, r5
 800507a:	47b0      	blx	r6
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	d106      	bne.n	8005090 <__sflush_r+0x68>
 8005082:	6829      	ldr	r1, [r5, #0]
 8005084:	291d      	cmp	r1, #29
 8005086:	d848      	bhi.n	800511a <__sflush_r+0xf2>
 8005088:	4a29      	ldr	r2, [pc, #164]	; (8005130 <__sflush_r+0x108>)
 800508a:	40ca      	lsrs	r2, r1
 800508c:	07d6      	lsls	r6, r2, #31
 800508e:	d544      	bpl.n	800511a <__sflush_r+0xf2>
 8005090:	2200      	movs	r2, #0
 8005092:	6062      	str	r2, [r4, #4]
 8005094:	04d9      	lsls	r1, r3, #19
 8005096:	6922      	ldr	r2, [r4, #16]
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	d504      	bpl.n	80050a6 <__sflush_r+0x7e>
 800509c:	1c42      	adds	r2, r0, #1
 800509e:	d101      	bne.n	80050a4 <__sflush_r+0x7c>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b903      	cbnz	r3, 80050a6 <__sflush_r+0x7e>
 80050a4:	6560      	str	r0, [r4, #84]	; 0x54
 80050a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a8:	602f      	str	r7, [r5, #0]
 80050aa:	2900      	cmp	r1, #0
 80050ac:	d0c9      	beq.n	8005042 <__sflush_r+0x1a>
 80050ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b2:	4299      	cmp	r1, r3
 80050b4:	d002      	beq.n	80050bc <__sflush_r+0x94>
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fc94 	bl	80059e4 <_free_r>
 80050bc:	2000      	movs	r0, #0
 80050be:	6360      	str	r0, [r4, #52]	; 0x34
 80050c0:	e7c0      	b.n	8005044 <__sflush_r+0x1c>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b0      	blx	r6
 80050c8:	1c41      	adds	r1, r0, #1
 80050ca:	d1c8      	bne.n	800505e <__sflush_r+0x36>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0c5      	beq.n	800505e <__sflush_r+0x36>
 80050d2:	2b1d      	cmp	r3, #29
 80050d4:	d001      	beq.n	80050da <__sflush_r+0xb2>
 80050d6:	2b16      	cmp	r3, #22
 80050d8:	d101      	bne.n	80050de <__sflush_r+0xb6>
 80050da:	602f      	str	r7, [r5, #0]
 80050dc:	e7b1      	b.n	8005042 <__sflush_r+0x1a>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	e7ad      	b.n	8005044 <__sflush_r+0x1c>
 80050e8:	690f      	ldr	r7, [r1, #16]
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	d0a9      	beq.n	8005042 <__sflush_r+0x1a>
 80050ee:	0793      	lsls	r3, r2, #30
 80050f0:	680e      	ldr	r6, [r1, #0]
 80050f2:	bf08      	it	eq
 80050f4:	694b      	ldreq	r3, [r1, #20]
 80050f6:	600f      	str	r7, [r1, #0]
 80050f8:	bf18      	it	ne
 80050fa:	2300      	movne	r3, #0
 80050fc:	eba6 0807 	sub.w	r8, r6, r7
 8005100:	608b      	str	r3, [r1, #8]
 8005102:	f1b8 0f00 	cmp.w	r8, #0
 8005106:	dd9c      	ble.n	8005042 <__sflush_r+0x1a>
 8005108:	4643      	mov	r3, r8
 800510a:	463a      	mov	r2, r7
 800510c:	6a21      	ldr	r1, [r4, #32]
 800510e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005110:	4628      	mov	r0, r5
 8005112:	47b0      	blx	r6
 8005114:	2800      	cmp	r0, #0
 8005116:	dc06      	bgt.n	8005126 <__sflush_r+0xfe>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e78e      	b.n	8005044 <__sflush_r+0x1c>
 8005126:	4407      	add	r7, r0
 8005128:	eba8 0800 	sub.w	r8, r8, r0
 800512c:	e7e9      	b.n	8005102 <__sflush_r+0xda>
 800512e:	bf00      	nop
 8005130:	20400001 	.word	0x20400001

08005134 <_fflush_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	4605      	mov	r5, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b1db      	cbz	r3, 8005176 <_fflush_r+0x42>
 800513e:	b118      	cbz	r0, 8005148 <_fflush_r+0x14>
 8005140:	6983      	ldr	r3, [r0, #24]
 8005142:	b90b      	cbnz	r3, 8005148 <_fflush_r+0x14>
 8005144:	f000 f860 	bl	8005208 <__sinit>
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <_fflush_r+0x48>)
 800514a:	429c      	cmp	r4, r3
 800514c:	d109      	bne.n	8005162 <_fflush_r+0x2e>
 800514e:	686c      	ldr	r4, [r5, #4]
 8005150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005154:	b17b      	cbz	r3, 8005176 <_fflush_r+0x42>
 8005156:	4621      	mov	r1, r4
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800515e:	f7ff bf63 	b.w	8005028 <__sflush_r>
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <_fflush_r+0x4c>)
 8005164:	429c      	cmp	r4, r3
 8005166:	d101      	bne.n	800516c <_fflush_r+0x38>
 8005168:	68ac      	ldr	r4, [r5, #8]
 800516a:	e7f1      	b.n	8005150 <_fflush_r+0x1c>
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <_fflush_r+0x50>)
 800516e:	429c      	cmp	r4, r3
 8005170:	bf08      	it	eq
 8005172:	68ec      	ldreq	r4, [r5, #12]
 8005174:	e7ec      	b.n	8005150 <_fflush_r+0x1c>
 8005176:	2000      	movs	r0, #0
 8005178:	bd38      	pop	{r3, r4, r5, pc}
 800517a:	bf00      	nop
 800517c:	08006038 	.word	0x08006038
 8005180:	08006058 	.word	0x08006058
 8005184:	08006018 	.word	0x08006018

08005188 <std>:
 8005188:	2300      	movs	r3, #0
 800518a:	b510      	push	{r4, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	e9c0 3300 	strd	r3, r3, [r0]
 8005192:	6083      	str	r3, [r0, #8]
 8005194:	8181      	strh	r1, [r0, #12]
 8005196:	6643      	str	r3, [r0, #100]	; 0x64
 8005198:	81c2      	strh	r2, [r0, #14]
 800519a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800519e:	6183      	str	r3, [r0, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	2208      	movs	r2, #8
 80051a4:	305c      	adds	r0, #92	; 0x5c
 80051a6:	f7fe fb58 	bl	800385a <memset>
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <std+0x38>)
 80051ac:	6263      	str	r3, [r4, #36]	; 0x24
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <std+0x3c>)
 80051b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std+0x40>)
 80051b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x44>)
 80051b8:	6224      	str	r4, [r4, #32]
 80051ba:	6323      	str	r3, [r4, #48]	; 0x30
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	08005dd5 	.word	0x08005dd5
 80051c4:	08005df7 	.word	0x08005df7
 80051c8:	08005e2f 	.word	0x08005e2f
 80051cc:	08005e53 	.word	0x08005e53

080051d0 <_cleanup_r>:
 80051d0:	4901      	ldr	r1, [pc, #4]	; (80051d8 <_cleanup_r+0x8>)
 80051d2:	f000 b885 	b.w	80052e0 <_fwalk_reent>
 80051d6:	bf00      	nop
 80051d8:	08005135 	.word	0x08005135

080051dc <__sfmoreglue>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	1e4a      	subs	r2, r1, #1
 80051e0:	2568      	movs	r5, #104	; 0x68
 80051e2:	4355      	muls	r5, r2
 80051e4:	460e      	mov	r6, r1
 80051e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051ea:	f000 fc49 	bl	8005a80 <_malloc_r>
 80051ee:	4604      	mov	r4, r0
 80051f0:	b140      	cbz	r0, 8005204 <__sfmoreglue+0x28>
 80051f2:	2100      	movs	r1, #0
 80051f4:	e9c0 1600 	strd	r1, r6, [r0]
 80051f8:	300c      	adds	r0, #12
 80051fa:	60a0      	str	r0, [r4, #8]
 80051fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005200:	f7fe fb2b 	bl	800385a <memset>
 8005204:	4620      	mov	r0, r4
 8005206:	bd70      	pop	{r4, r5, r6, pc}

08005208 <__sinit>:
 8005208:	6983      	ldr	r3, [r0, #24]
 800520a:	b510      	push	{r4, lr}
 800520c:	4604      	mov	r4, r0
 800520e:	bb33      	cbnz	r3, 800525e <__sinit+0x56>
 8005210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005214:	6503      	str	r3, [r0, #80]	; 0x50
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <__sinit+0x58>)
 8005218:	4a12      	ldr	r2, [pc, #72]	; (8005264 <__sinit+0x5c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6282      	str	r2, [r0, #40]	; 0x28
 800521e:	4298      	cmp	r0, r3
 8005220:	bf04      	itt	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	6183      	streq	r3, [r0, #24]
 8005226:	f000 f81f 	bl	8005268 <__sfp>
 800522a:	6060      	str	r0, [r4, #4]
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f81b 	bl	8005268 <__sfp>
 8005232:	60a0      	str	r0, [r4, #8]
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f817 	bl	8005268 <__sfp>
 800523a:	2200      	movs	r2, #0
 800523c:	60e0      	str	r0, [r4, #12]
 800523e:	2104      	movs	r1, #4
 8005240:	6860      	ldr	r0, [r4, #4]
 8005242:	f7ff ffa1 	bl	8005188 <std>
 8005246:	2201      	movs	r2, #1
 8005248:	2109      	movs	r1, #9
 800524a:	68a0      	ldr	r0, [r4, #8]
 800524c:	f7ff ff9c 	bl	8005188 <std>
 8005250:	2202      	movs	r2, #2
 8005252:	2112      	movs	r1, #18
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	f7ff ff97 	bl	8005188 <std>
 800525a:	2301      	movs	r3, #1
 800525c:	61a3      	str	r3, [r4, #24]
 800525e:	bd10      	pop	{r4, pc}
 8005260:	08005fd0 	.word	0x08005fd0
 8005264:	080051d1 	.word	0x080051d1

08005268 <__sfp>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <__sfp+0x70>)
 800526c:	681e      	ldr	r6, [r3, #0]
 800526e:	69b3      	ldr	r3, [r6, #24]
 8005270:	4607      	mov	r7, r0
 8005272:	b913      	cbnz	r3, 800527a <__sfp+0x12>
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ffc7 	bl	8005208 <__sinit>
 800527a:	3648      	adds	r6, #72	; 0x48
 800527c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005280:	3b01      	subs	r3, #1
 8005282:	d503      	bpl.n	800528c <__sfp+0x24>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	b133      	cbz	r3, 8005296 <__sfp+0x2e>
 8005288:	6836      	ldr	r6, [r6, #0]
 800528a:	e7f7      	b.n	800527c <__sfp+0x14>
 800528c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005290:	b16d      	cbz	r5, 80052ae <__sfp+0x46>
 8005292:	3468      	adds	r4, #104	; 0x68
 8005294:	e7f4      	b.n	8005280 <__sfp+0x18>
 8005296:	2104      	movs	r1, #4
 8005298:	4638      	mov	r0, r7
 800529a:	f7ff ff9f 	bl	80051dc <__sfmoreglue>
 800529e:	6030      	str	r0, [r6, #0]
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d1f1      	bne.n	8005288 <__sfp+0x20>
 80052a4:	230c      	movs	r3, #12
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4604      	mov	r4, r0
 80052aa:	4620      	mov	r0, r4
 80052ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <__sfp+0x74>)
 80052b0:	6665      	str	r5, [r4, #100]	; 0x64
 80052b2:	e9c4 5500 	strd	r5, r5, [r4]
 80052b6:	60a5      	str	r5, [r4, #8]
 80052b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80052bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80052c0:	2208      	movs	r2, #8
 80052c2:	4629      	mov	r1, r5
 80052c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052c8:	f7fe fac7 	bl	800385a <memset>
 80052cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052d4:	e7e9      	b.n	80052aa <__sfp+0x42>
 80052d6:	bf00      	nop
 80052d8:	08005fd0 	.word	0x08005fd0
 80052dc:	ffff0001 	.word	0xffff0001

080052e0 <_fwalk_reent>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	4680      	mov	r8, r0
 80052e6:	4689      	mov	r9, r1
 80052e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052ec:	2600      	movs	r6, #0
 80052ee:	b914      	cbnz	r4, 80052f6 <_fwalk_reent+0x16>
 80052f0:	4630      	mov	r0, r6
 80052f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80052fa:	3f01      	subs	r7, #1
 80052fc:	d501      	bpl.n	8005302 <_fwalk_reent+0x22>
 80052fe:	6824      	ldr	r4, [r4, #0]
 8005300:	e7f5      	b.n	80052ee <_fwalk_reent+0xe>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d907      	bls.n	8005318 <_fwalk_reent+0x38>
 8005308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800530c:	3301      	adds	r3, #1
 800530e:	d003      	beq.n	8005318 <_fwalk_reent+0x38>
 8005310:	4629      	mov	r1, r5
 8005312:	4640      	mov	r0, r8
 8005314:	47c8      	blx	r9
 8005316:	4306      	orrs	r6, r0
 8005318:	3568      	adds	r5, #104	; 0x68
 800531a:	e7ee      	b.n	80052fa <_fwalk_reent+0x1a>

0800531c <_localeconv_r>:
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <_localeconv_r+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a18      	ldr	r0, [r3, #32]
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <_localeconv_r+0x18>)
 8005324:	2800      	cmp	r0, #0
 8005326:	bf08      	it	eq
 8005328:	4618      	moveq	r0, r3
 800532a:	30f0      	adds	r0, #240	; 0xf0
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	2000000c 	.word	0x2000000c
 8005334:	20000070 	.word	0x20000070

08005338 <__swhatbuf_r>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	460e      	mov	r6, r1
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	2900      	cmp	r1, #0
 8005342:	b096      	sub	sp, #88	; 0x58
 8005344:	4614      	mov	r4, r2
 8005346:	461d      	mov	r5, r3
 8005348:	da07      	bge.n	800535a <__swhatbuf_r+0x22>
 800534a:	2300      	movs	r3, #0
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	89b3      	ldrh	r3, [r6, #12]
 8005350:	061a      	lsls	r2, r3, #24
 8005352:	d410      	bmi.n	8005376 <__swhatbuf_r+0x3e>
 8005354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005358:	e00e      	b.n	8005378 <__swhatbuf_r+0x40>
 800535a:	466a      	mov	r2, sp
 800535c:	f000 fda0 	bl	8005ea0 <_fstat_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	dbf2      	blt.n	800534a <__swhatbuf_r+0x12>
 8005364:	9a01      	ldr	r2, [sp, #4]
 8005366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800536a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800536e:	425a      	negs	r2, r3
 8005370:	415a      	adcs	r2, r3
 8005372:	602a      	str	r2, [r5, #0]
 8005374:	e7ee      	b.n	8005354 <__swhatbuf_r+0x1c>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	2000      	movs	r0, #0
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	b016      	add	sp, #88	; 0x58
 800537e:	bd70      	pop	{r4, r5, r6, pc}

08005380 <__smakebuf_r>:
 8005380:	898b      	ldrh	r3, [r1, #12]
 8005382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005384:	079d      	lsls	r5, r3, #30
 8005386:	4606      	mov	r6, r0
 8005388:	460c      	mov	r4, r1
 800538a:	d507      	bpl.n	800539c <__smakebuf_r+0x1c>
 800538c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	6123      	str	r3, [r4, #16]
 8005394:	2301      	movs	r3, #1
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	b002      	add	sp, #8
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	ab01      	add	r3, sp, #4
 800539e:	466a      	mov	r2, sp
 80053a0:	f7ff ffca 	bl	8005338 <__swhatbuf_r>
 80053a4:	9900      	ldr	r1, [sp, #0]
 80053a6:	4605      	mov	r5, r0
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 fb69 	bl	8005a80 <_malloc_r>
 80053ae:	b948      	cbnz	r0, 80053c4 <__smakebuf_r+0x44>
 80053b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b4:	059a      	lsls	r2, r3, #22
 80053b6:	d4ef      	bmi.n	8005398 <__smakebuf_r+0x18>
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7e3      	b.n	800538c <__smakebuf_r+0xc>
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <__smakebuf_r+0x7c>)
 80053c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	6020      	str	r0, [r4, #0]
 80053cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	6163      	str	r3, [r4, #20]
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	6120      	str	r0, [r4, #16]
 80053da:	b15b      	cbz	r3, 80053f4 <__smakebuf_r+0x74>
 80053dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 fd6f 	bl	8005ec4 <_isatty_r>
 80053e6:	b128      	cbz	r0, 80053f4 <__smakebuf_r+0x74>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	431d      	orrs	r5, r3
 80053f8:	81a5      	strh	r5, [r4, #12]
 80053fa:	e7cd      	b.n	8005398 <__smakebuf_r+0x18>
 80053fc:	080051d1 	.word	0x080051d1

08005400 <malloc>:
 8005400:	4b02      	ldr	r3, [pc, #8]	; (800540c <malloc+0xc>)
 8005402:	4601      	mov	r1, r0
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f000 bb3b 	b.w	8005a80 <_malloc_r>
 800540a:	bf00      	nop
 800540c:	2000000c 	.word	0x2000000c

08005410 <_Balloc>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005414:	4604      	mov	r4, r0
 8005416:	460e      	mov	r6, r1
 8005418:	b93d      	cbnz	r5, 800542a <_Balloc+0x1a>
 800541a:	2010      	movs	r0, #16
 800541c:	f7ff fff0 	bl	8005400 <malloc>
 8005420:	6260      	str	r0, [r4, #36]	; 0x24
 8005422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005426:	6005      	str	r5, [r0, #0]
 8005428:	60c5      	str	r5, [r0, #12]
 800542a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800542c:	68eb      	ldr	r3, [r5, #12]
 800542e:	b183      	cbz	r3, 8005452 <_Balloc+0x42>
 8005430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005438:	b9b8      	cbnz	r0, 800546a <_Balloc+0x5a>
 800543a:	2101      	movs	r1, #1
 800543c:	fa01 f506 	lsl.w	r5, r1, r6
 8005440:	1d6a      	adds	r2, r5, #5
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fabf 	bl	80059c8 <_calloc_r>
 800544a:	b160      	cbz	r0, 8005466 <_Balloc+0x56>
 800544c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005450:	e00e      	b.n	8005470 <_Balloc+0x60>
 8005452:	2221      	movs	r2, #33	; 0x21
 8005454:	2104      	movs	r1, #4
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fab6 	bl	80059c8 <_calloc_r>
 800545c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800545e:	60e8      	str	r0, [r5, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e4      	bne.n	8005430 <_Balloc+0x20>
 8005466:	2000      	movs	r0, #0
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	6802      	ldr	r2, [r0, #0]
 800546c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005470:	2300      	movs	r3, #0
 8005472:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005476:	e7f7      	b.n	8005468 <_Balloc+0x58>

08005478 <_Bfree>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800547c:	4606      	mov	r6, r0
 800547e:	460d      	mov	r5, r1
 8005480:	b93c      	cbnz	r4, 8005492 <_Bfree+0x1a>
 8005482:	2010      	movs	r0, #16
 8005484:	f7ff ffbc 	bl	8005400 <malloc>
 8005488:	6270      	str	r0, [r6, #36]	; 0x24
 800548a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800548e:	6004      	str	r4, [r0, #0]
 8005490:	60c4      	str	r4, [r0, #12]
 8005492:	b13d      	cbz	r5, 80054a4 <_Bfree+0x2c>
 8005494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005496:	686a      	ldr	r2, [r5, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800549e:	6029      	str	r1, [r5, #0]
 80054a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80054a4:	bd70      	pop	{r4, r5, r6, pc}

080054a6 <__multadd>:
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	690d      	ldr	r5, [r1, #16]
 80054ac:	461f      	mov	r7, r3
 80054ae:	4606      	mov	r6, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	f101 0c14 	add.w	ip, r1, #20
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8dc 0000 	ldr.w	r0, [ip]
 80054bc:	b281      	uxth	r1, r0
 80054be:	fb02 7101 	mla	r1, r2, r1, r7
 80054c2:	0c0f      	lsrs	r7, r1, #16
 80054c4:	0c00      	lsrs	r0, r0, #16
 80054c6:	fb02 7000 	mla	r0, r2, r0, r7
 80054ca:	b289      	uxth	r1, r1
 80054cc:	3301      	adds	r3, #1
 80054ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80054d2:	429d      	cmp	r5, r3
 80054d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80054d8:	f84c 1b04 	str.w	r1, [ip], #4
 80054dc:	dcec      	bgt.n	80054b8 <__multadd+0x12>
 80054de:	b1d7      	cbz	r7, 8005516 <__multadd+0x70>
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	42ab      	cmp	r3, r5
 80054e4:	dc12      	bgt.n	800550c <__multadd+0x66>
 80054e6:	6861      	ldr	r1, [r4, #4]
 80054e8:	4630      	mov	r0, r6
 80054ea:	3101      	adds	r1, #1
 80054ec:	f7ff ff90 	bl	8005410 <_Balloc>
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	3202      	adds	r2, #2
 80054f4:	f104 010c 	add.w	r1, r4, #12
 80054f8:	4680      	mov	r8, r0
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	300c      	adds	r0, #12
 80054fe:	f7fe f9a1 	bl	8003844 <memcpy>
 8005502:	4621      	mov	r1, r4
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff ffb7 	bl	8005478 <_Bfree>
 800550a:	4644      	mov	r4, r8
 800550c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005510:	3501      	adds	r5, #1
 8005512:	615f      	str	r7, [r3, #20]
 8005514:	6125      	str	r5, [r4, #16]
 8005516:	4620      	mov	r0, r4
 8005518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800551c <__hi0bits>:
 800551c:	0c02      	lsrs	r2, r0, #16
 800551e:	0412      	lsls	r2, r2, #16
 8005520:	4603      	mov	r3, r0
 8005522:	b9b2      	cbnz	r2, 8005552 <__hi0bits+0x36>
 8005524:	0403      	lsls	r3, r0, #16
 8005526:	2010      	movs	r0, #16
 8005528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800552c:	bf04      	itt	eq
 800552e:	021b      	lsleq	r3, r3, #8
 8005530:	3008      	addeq	r0, #8
 8005532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005536:	bf04      	itt	eq
 8005538:	011b      	lsleq	r3, r3, #4
 800553a:	3004      	addeq	r0, #4
 800553c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005540:	bf04      	itt	eq
 8005542:	009b      	lsleq	r3, r3, #2
 8005544:	3002      	addeq	r0, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	db06      	blt.n	8005558 <__hi0bits+0x3c>
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	d503      	bpl.n	8005556 <__hi0bits+0x3a>
 800554e:	3001      	adds	r0, #1
 8005550:	4770      	bx	lr
 8005552:	2000      	movs	r0, #0
 8005554:	e7e8      	b.n	8005528 <__hi0bits+0xc>
 8005556:	2020      	movs	r0, #32
 8005558:	4770      	bx	lr

0800555a <__lo0bits>:
 800555a:	6803      	ldr	r3, [r0, #0]
 800555c:	f013 0207 	ands.w	r2, r3, #7
 8005560:	4601      	mov	r1, r0
 8005562:	d00b      	beq.n	800557c <__lo0bits+0x22>
 8005564:	07da      	lsls	r2, r3, #31
 8005566:	d423      	bmi.n	80055b0 <__lo0bits+0x56>
 8005568:	0798      	lsls	r0, r3, #30
 800556a:	bf49      	itett	mi
 800556c:	085b      	lsrmi	r3, r3, #1
 800556e:	089b      	lsrpl	r3, r3, #2
 8005570:	2001      	movmi	r0, #1
 8005572:	600b      	strmi	r3, [r1, #0]
 8005574:	bf5c      	itt	pl
 8005576:	600b      	strpl	r3, [r1, #0]
 8005578:	2002      	movpl	r0, #2
 800557a:	4770      	bx	lr
 800557c:	b298      	uxth	r0, r3
 800557e:	b9a8      	cbnz	r0, 80055ac <__lo0bits+0x52>
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	2010      	movs	r0, #16
 8005584:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005588:	bf04      	itt	eq
 800558a:	0a1b      	lsreq	r3, r3, #8
 800558c:	3008      	addeq	r0, #8
 800558e:	071a      	lsls	r2, r3, #28
 8005590:	bf04      	itt	eq
 8005592:	091b      	lsreq	r3, r3, #4
 8005594:	3004      	addeq	r0, #4
 8005596:	079a      	lsls	r2, r3, #30
 8005598:	bf04      	itt	eq
 800559a:	089b      	lsreq	r3, r3, #2
 800559c:	3002      	addeq	r0, #2
 800559e:	07da      	lsls	r2, r3, #31
 80055a0:	d402      	bmi.n	80055a8 <__lo0bits+0x4e>
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	d006      	beq.n	80055b4 <__lo0bits+0x5a>
 80055a6:	3001      	adds	r0, #1
 80055a8:	600b      	str	r3, [r1, #0]
 80055aa:	4770      	bx	lr
 80055ac:	4610      	mov	r0, r2
 80055ae:	e7e9      	b.n	8005584 <__lo0bits+0x2a>
 80055b0:	2000      	movs	r0, #0
 80055b2:	4770      	bx	lr
 80055b4:	2020      	movs	r0, #32
 80055b6:	4770      	bx	lr

080055b8 <__i2b>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	460c      	mov	r4, r1
 80055bc:	2101      	movs	r1, #1
 80055be:	f7ff ff27 	bl	8005410 <_Balloc>
 80055c2:	2201      	movs	r2, #1
 80055c4:	6144      	str	r4, [r0, #20]
 80055c6:	6102      	str	r2, [r0, #16]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__multiply>:
 80055ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ce:	4614      	mov	r4, r2
 80055d0:	690a      	ldr	r2, [r1, #16]
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bfb8      	it	lt
 80055d8:	460b      	movlt	r3, r1
 80055da:	4688      	mov	r8, r1
 80055dc:	bfbc      	itt	lt
 80055de:	46a0      	movlt	r8, r4
 80055e0:	461c      	movlt	r4, r3
 80055e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80055ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055f2:	eb07 0609 	add.w	r6, r7, r9
 80055f6:	42b3      	cmp	r3, r6
 80055f8:	bfb8      	it	lt
 80055fa:	3101      	addlt	r1, #1
 80055fc:	f7ff ff08 	bl	8005410 <_Balloc>
 8005600:	f100 0514 	add.w	r5, r0, #20
 8005604:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005608:	462b      	mov	r3, r5
 800560a:	2200      	movs	r2, #0
 800560c:	4573      	cmp	r3, lr
 800560e:	d316      	bcc.n	800563e <__multiply+0x74>
 8005610:	f104 0214 	add.w	r2, r4, #20
 8005614:	f108 0114 	add.w	r1, r8, #20
 8005618:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800561c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	9b00      	ldr	r3, [sp, #0]
 8005624:	9201      	str	r2, [sp, #4]
 8005626:	4293      	cmp	r3, r2
 8005628:	d80c      	bhi.n	8005644 <__multiply+0x7a>
 800562a:	2e00      	cmp	r6, #0
 800562c:	dd03      	ble.n	8005636 <__multiply+0x6c>
 800562e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005632:	2b00      	cmp	r3, #0
 8005634:	d05d      	beq.n	80056f2 <__multiply+0x128>
 8005636:	6106      	str	r6, [r0, #16]
 8005638:	b003      	add	sp, #12
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	f843 2b04 	str.w	r2, [r3], #4
 8005642:	e7e3      	b.n	800560c <__multiply+0x42>
 8005644:	f8b2 b000 	ldrh.w	fp, [r2]
 8005648:	f1bb 0f00 	cmp.w	fp, #0
 800564c:	d023      	beq.n	8005696 <__multiply+0xcc>
 800564e:	4689      	mov	r9, r1
 8005650:	46ac      	mov	ip, r5
 8005652:	f04f 0800 	mov.w	r8, #0
 8005656:	f859 4b04 	ldr.w	r4, [r9], #4
 800565a:	f8dc a000 	ldr.w	sl, [ip]
 800565e:	b2a3      	uxth	r3, r4
 8005660:	fa1f fa8a 	uxth.w	sl, sl
 8005664:	fb0b a303 	mla	r3, fp, r3, sl
 8005668:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800566c:	f8dc 4000 	ldr.w	r4, [ip]
 8005670:	4443      	add	r3, r8
 8005672:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005676:	fb0b 840a 	mla	r4, fp, sl, r8
 800567a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800567e:	46e2      	mov	sl, ip
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005686:	454f      	cmp	r7, r9
 8005688:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800568c:	f84a 3b04 	str.w	r3, [sl], #4
 8005690:	d82b      	bhi.n	80056ea <__multiply+0x120>
 8005692:	f8cc 8004 	str.w	r8, [ip, #4]
 8005696:	9b01      	ldr	r3, [sp, #4]
 8005698:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800569c:	3204      	adds	r2, #4
 800569e:	f1ba 0f00 	cmp.w	sl, #0
 80056a2:	d020      	beq.n	80056e6 <__multiply+0x11c>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	4689      	mov	r9, r1
 80056a8:	46a8      	mov	r8, r5
 80056aa:	f04f 0b00 	mov.w	fp, #0
 80056ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80056b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80056b6:	fb0a 440c 	mla	r4, sl, ip, r4
 80056ba:	445c      	add	r4, fp
 80056bc:	46c4      	mov	ip, r8
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80056c4:	f84c 3b04 	str.w	r3, [ip], #4
 80056c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80056cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	fb0a b303 	mla	r3, sl, r3, fp
 80056d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80056da:	454f      	cmp	r7, r9
 80056dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80056e0:	d805      	bhi.n	80056ee <__multiply+0x124>
 80056e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80056e6:	3504      	adds	r5, #4
 80056e8:	e79b      	b.n	8005622 <__multiply+0x58>
 80056ea:	46d4      	mov	ip, sl
 80056ec:	e7b3      	b.n	8005656 <__multiply+0x8c>
 80056ee:	46e0      	mov	r8, ip
 80056f0:	e7dd      	b.n	80056ae <__multiply+0xe4>
 80056f2:	3e01      	subs	r6, #1
 80056f4:	e799      	b.n	800562a <__multiply+0x60>
	...

080056f8 <__pow5mult>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	4615      	mov	r5, r2
 80056fe:	f012 0203 	ands.w	r2, r2, #3
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	d007      	beq.n	8005718 <__pow5mult+0x20>
 8005708:	3a01      	subs	r2, #1
 800570a:	4c21      	ldr	r4, [pc, #132]	; (8005790 <__pow5mult+0x98>)
 800570c:	2300      	movs	r3, #0
 800570e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005712:	f7ff fec8 	bl	80054a6 <__multadd>
 8005716:	4607      	mov	r7, r0
 8005718:	10ad      	asrs	r5, r5, #2
 800571a:	d035      	beq.n	8005788 <__pow5mult+0x90>
 800571c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800571e:	b93c      	cbnz	r4, 8005730 <__pow5mult+0x38>
 8005720:	2010      	movs	r0, #16
 8005722:	f7ff fe6d 	bl	8005400 <malloc>
 8005726:	6270      	str	r0, [r6, #36]	; 0x24
 8005728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800572c:	6004      	str	r4, [r0, #0]
 800572e:	60c4      	str	r4, [r0, #12]
 8005730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005738:	b94c      	cbnz	r4, 800574e <__pow5mult+0x56>
 800573a:	f240 2171 	movw	r1, #625	; 0x271
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ff3a 	bl	80055b8 <__i2b>
 8005744:	2300      	movs	r3, #0
 8005746:	f8c8 0008 	str.w	r0, [r8, #8]
 800574a:	4604      	mov	r4, r0
 800574c:	6003      	str	r3, [r0, #0]
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	07eb      	lsls	r3, r5, #31
 8005754:	d50a      	bpl.n	800576c <__pow5mult+0x74>
 8005756:	4639      	mov	r1, r7
 8005758:	4622      	mov	r2, r4
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ff35 	bl	80055ca <__multiply>
 8005760:	4639      	mov	r1, r7
 8005762:	4681      	mov	r9, r0
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff fe87 	bl	8005478 <_Bfree>
 800576a:	464f      	mov	r7, r9
 800576c:	106d      	asrs	r5, r5, #1
 800576e:	d00b      	beq.n	8005788 <__pow5mult+0x90>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	b938      	cbnz	r0, 8005784 <__pow5mult+0x8c>
 8005774:	4622      	mov	r2, r4
 8005776:	4621      	mov	r1, r4
 8005778:	4630      	mov	r0, r6
 800577a:	f7ff ff26 	bl	80055ca <__multiply>
 800577e:	6020      	str	r0, [r4, #0]
 8005780:	f8c0 8000 	str.w	r8, [r0]
 8005784:	4604      	mov	r4, r0
 8005786:	e7e4      	b.n	8005752 <__pow5mult+0x5a>
 8005788:	4638      	mov	r0, r7
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	bf00      	nop
 8005790:	08006168 	.word	0x08006168

08005794 <__lshift>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	460c      	mov	r4, r1
 800579a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6849      	ldr	r1, [r1, #4]
 80057a2:	eb0a 0903 	add.w	r9, sl, r3
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	4607      	mov	r7, r0
 80057aa:	4616      	mov	r6, r2
 80057ac:	f109 0501 	add.w	r5, r9, #1
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	db32      	blt.n	800581a <__lshift+0x86>
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff fe2b 	bl	8005410 <_Balloc>
 80057ba:	2300      	movs	r3, #0
 80057bc:	4680      	mov	r8, r0
 80057be:	f100 0114 	add.w	r1, r0, #20
 80057c2:	461a      	mov	r2, r3
 80057c4:	4553      	cmp	r3, sl
 80057c6:	db2b      	blt.n	8005820 <__lshift+0x8c>
 80057c8:	6920      	ldr	r0, [r4, #16]
 80057ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057ce:	f104 0314 	add.w	r3, r4, #20
 80057d2:	f016 021f 	ands.w	r2, r6, #31
 80057d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057de:	d025      	beq.n	800582c <__lshift+0x98>
 80057e0:	f1c2 0e20 	rsb	lr, r2, #32
 80057e4:	2000      	movs	r0, #0
 80057e6:	681e      	ldr	r6, [r3, #0]
 80057e8:	468a      	mov	sl, r1
 80057ea:	4096      	lsls	r6, r2
 80057ec:	4330      	orrs	r0, r6
 80057ee:	f84a 0b04 	str.w	r0, [sl], #4
 80057f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80057f6:	459c      	cmp	ip, r3
 80057f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80057fc:	d814      	bhi.n	8005828 <__lshift+0x94>
 80057fe:	6048      	str	r0, [r1, #4]
 8005800:	b108      	cbz	r0, 8005806 <__lshift+0x72>
 8005802:	f109 0502 	add.w	r5, r9, #2
 8005806:	3d01      	subs	r5, #1
 8005808:	4638      	mov	r0, r7
 800580a:	f8c8 5010 	str.w	r5, [r8, #16]
 800580e:	4621      	mov	r1, r4
 8005810:	f7ff fe32 	bl	8005478 <_Bfree>
 8005814:	4640      	mov	r0, r8
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	3101      	adds	r1, #1
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	e7c7      	b.n	80057b0 <__lshift+0x1c>
 8005820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005824:	3301      	adds	r3, #1
 8005826:	e7cd      	b.n	80057c4 <__lshift+0x30>
 8005828:	4651      	mov	r1, sl
 800582a:	e7dc      	b.n	80057e6 <__lshift+0x52>
 800582c:	3904      	subs	r1, #4
 800582e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005832:	f841 2f04 	str.w	r2, [r1, #4]!
 8005836:	459c      	cmp	ip, r3
 8005838:	d8f9      	bhi.n	800582e <__lshift+0x9a>
 800583a:	e7e4      	b.n	8005806 <__lshift+0x72>

0800583c <__mcmp>:
 800583c:	6903      	ldr	r3, [r0, #16]
 800583e:	690a      	ldr	r2, [r1, #16]
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	b530      	push	{r4, r5, lr}
 8005844:	d10c      	bne.n	8005860 <__mcmp+0x24>
 8005846:	0092      	lsls	r2, r2, #2
 8005848:	3014      	adds	r0, #20
 800584a:	3114      	adds	r1, #20
 800584c:	1884      	adds	r4, r0, r2
 800584e:	4411      	add	r1, r2
 8005850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005858:	4295      	cmp	r5, r2
 800585a:	d003      	beq.n	8005864 <__mcmp+0x28>
 800585c:	d305      	bcc.n	800586a <__mcmp+0x2e>
 800585e:	2301      	movs	r3, #1
 8005860:	4618      	mov	r0, r3
 8005862:	bd30      	pop	{r4, r5, pc}
 8005864:	42a0      	cmp	r0, r4
 8005866:	d3f3      	bcc.n	8005850 <__mcmp+0x14>
 8005868:	e7fa      	b.n	8005860 <__mcmp+0x24>
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	e7f7      	b.n	8005860 <__mcmp+0x24>

08005870 <__mdiff>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	460d      	mov	r5, r1
 8005876:	4607      	mov	r7, r0
 8005878:	4611      	mov	r1, r2
 800587a:	4628      	mov	r0, r5
 800587c:	4614      	mov	r4, r2
 800587e:	f7ff ffdd 	bl	800583c <__mcmp>
 8005882:	1e06      	subs	r6, r0, #0
 8005884:	d108      	bne.n	8005898 <__mdiff+0x28>
 8005886:	4631      	mov	r1, r6
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff fdc1 	bl	8005410 <_Balloc>
 800588e:	2301      	movs	r3, #1
 8005890:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	bfa4      	itt	ge
 800589a:	4623      	movge	r3, r4
 800589c:	462c      	movge	r4, r5
 800589e:	4638      	mov	r0, r7
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	bfa6      	itte	ge
 80058a4:	461d      	movge	r5, r3
 80058a6:	2600      	movge	r6, #0
 80058a8:	2601      	movlt	r6, #1
 80058aa:	f7ff fdb1 	bl	8005410 <_Balloc>
 80058ae:	692b      	ldr	r3, [r5, #16]
 80058b0:	60c6      	str	r6, [r0, #12]
 80058b2:	6926      	ldr	r6, [r4, #16]
 80058b4:	f105 0914 	add.w	r9, r5, #20
 80058b8:	f104 0214 	add.w	r2, r4, #20
 80058bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80058c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80058c4:	f100 0514 	add.w	r5, r0, #20
 80058c8:	f04f 0e00 	mov.w	lr, #0
 80058cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80058d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80058d4:	fa1e f18a 	uxtah	r1, lr, sl
 80058d8:	b2a3      	uxth	r3, r4
 80058da:	1ac9      	subs	r1, r1, r3
 80058dc:	0c23      	lsrs	r3, r4, #16
 80058de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80058e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80058e6:	b289      	uxth	r1, r1
 80058e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80058ec:	45c8      	cmp	r8, r9
 80058ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80058f2:	4694      	mov	ip, r2
 80058f4:	f845 3b04 	str.w	r3, [r5], #4
 80058f8:	d8e8      	bhi.n	80058cc <__mdiff+0x5c>
 80058fa:	45bc      	cmp	ip, r7
 80058fc:	d304      	bcc.n	8005908 <__mdiff+0x98>
 80058fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005902:	b183      	cbz	r3, 8005926 <__mdiff+0xb6>
 8005904:	6106      	str	r6, [r0, #16]
 8005906:	e7c5      	b.n	8005894 <__mdiff+0x24>
 8005908:	f85c 1b04 	ldr.w	r1, [ip], #4
 800590c:	fa1e f381 	uxtah	r3, lr, r1
 8005910:	141a      	asrs	r2, r3, #16
 8005912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005920:	f845 3b04 	str.w	r3, [r5], #4
 8005924:	e7e9      	b.n	80058fa <__mdiff+0x8a>
 8005926:	3e01      	subs	r6, #1
 8005928:	e7e9      	b.n	80058fe <__mdiff+0x8e>

0800592a <__d2b>:
 800592a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800592e:	460e      	mov	r6, r1
 8005930:	2101      	movs	r1, #1
 8005932:	ec59 8b10 	vmov	r8, r9, d0
 8005936:	4615      	mov	r5, r2
 8005938:	f7ff fd6a 	bl	8005410 <_Balloc>
 800593c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005940:	4607      	mov	r7, r0
 8005942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005946:	bb34      	cbnz	r4, 8005996 <__d2b+0x6c>
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	f1b8 0300 	subs.w	r3, r8, #0
 800594e:	d027      	beq.n	80059a0 <__d2b+0x76>
 8005950:	a802      	add	r0, sp, #8
 8005952:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005956:	f7ff fe00 	bl	800555a <__lo0bits>
 800595a:	9900      	ldr	r1, [sp, #0]
 800595c:	b1f0      	cbz	r0, 800599c <__d2b+0x72>
 800595e:	9a01      	ldr	r2, [sp, #4]
 8005960:	f1c0 0320 	rsb	r3, r0, #32
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	430b      	orrs	r3, r1
 800596a:	40c2      	lsrs	r2, r0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	9201      	str	r2, [sp, #4]
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf14      	ite	ne
 8005978:	2102      	movne	r1, #2
 800597a:	2101      	moveq	r1, #1
 800597c:	6139      	str	r1, [r7, #16]
 800597e:	b1c4      	cbz	r4, 80059b2 <__d2b+0x88>
 8005980:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005984:	4404      	add	r4, r0
 8005986:	6034      	str	r4, [r6, #0]
 8005988:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800598c:	6028      	str	r0, [r5, #0]
 800598e:	4638      	mov	r0, r7
 8005990:	b003      	add	sp, #12
 8005992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599a:	e7d5      	b.n	8005948 <__d2b+0x1e>
 800599c:	6179      	str	r1, [r7, #20]
 800599e:	e7e7      	b.n	8005970 <__d2b+0x46>
 80059a0:	a801      	add	r0, sp, #4
 80059a2:	f7ff fdda 	bl	800555a <__lo0bits>
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	2101      	movs	r1, #1
 80059ac:	6139      	str	r1, [r7, #16]
 80059ae:	3020      	adds	r0, #32
 80059b0:	e7e5      	b.n	800597e <__d2b+0x54>
 80059b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80059b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059ba:	6030      	str	r0, [r6, #0]
 80059bc:	6918      	ldr	r0, [r3, #16]
 80059be:	f7ff fdad 	bl	800551c <__hi0bits>
 80059c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80059c6:	e7e1      	b.n	800598c <__d2b+0x62>

080059c8 <_calloc_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	fb02 f401 	mul.w	r4, r2, r1
 80059ce:	4621      	mov	r1, r4
 80059d0:	f000 f856 	bl	8005a80 <_malloc_r>
 80059d4:	4605      	mov	r5, r0
 80059d6:	b118      	cbz	r0, 80059e0 <_calloc_r+0x18>
 80059d8:	4622      	mov	r2, r4
 80059da:	2100      	movs	r1, #0
 80059dc:	f7fd ff3d 	bl	800385a <memset>
 80059e0:	4628      	mov	r0, r5
 80059e2:	bd38      	pop	{r3, r4, r5, pc}

080059e4 <_free_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4605      	mov	r5, r0
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d045      	beq.n	8005a78 <_free_r+0x94>
 80059ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f0:	1f0c      	subs	r4, r1, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfb8      	it	lt
 80059f6:	18e4      	addlt	r4, r4, r3
 80059f8:	f000 fa98 	bl	8005f2c <__malloc_lock>
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <_free_r+0x98>)
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	4610      	mov	r0, r2
 8005a02:	b933      	cbnz	r3, 8005a12 <_free_r+0x2e>
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	6014      	str	r4, [r2, #0]
 8005a08:	4628      	mov	r0, r5
 8005a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a0e:	f000 ba8e 	b.w	8005f2e <__malloc_unlock>
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	d90c      	bls.n	8005a30 <_free_r+0x4c>
 8005a16:	6821      	ldr	r1, [r4, #0]
 8005a18:	1862      	adds	r2, r4, r1
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bf04      	itt	eq
 8005a1e:	681a      	ldreq	r2, [r3, #0]
 8005a20:	685b      	ldreq	r3, [r3, #4]
 8005a22:	6063      	str	r3, [r4, #4]
 8005a24:	bf04      	itt	eq
 8005a26:	1852      	addeq	r2, r2, r1
 8005a28:	6022      	streq	r2, [r4, #0]
 8005a2a:	6004      	str	r4, [r0, #0]
 8005a2c:	e7ec      	b.n	8005a08 <_free_r+0x24>
 8005a2e:	4613      	mov	r3, r2
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	b10a      	cbz	r2, 8005a38 <_free_r+0x54>
 8005a34:	42a2      	cmp	r2, r4
 8005a36:	d9fa      	bls.n	8005a2e <_free_r+0x4a>
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	1858      	adds	r0, r3, r1
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d10b      	bne.n	8005a58 <_free_r+0x74>
 8005a40:	6820      	ldr	r0, [r4, #0]
 8005a42:	4401      	add	r1, r0
 8005a44:	1858      	adds	r0, r3, r1
 8005a46:	4282      	cmp	r2, r0
 8005a48:	6019      	str	r1, [r3, #0]
 8005a4a:	d1dd      	bne.n	8005a08 <_free_r+0x24>
 8005a4c:	6810      	ldr	r0, [r2, #0]
 8005a4e:	6852      	ldr	r2, [r2, #4]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	4401      	add	r1, r0
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e7d7      	b.n	8005a08 <_free_r+0x24>
 8005a58:	d902      	bls.n	8005a60 <_free_r+0x7c>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	e7d3      	b.n	8005a08 <_free_r+0x24>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	1821      	adds	r1, r4, r0
 8005a64:	428a      	cmp	r2, r1
 8005a66:	bf04      	itt	eq
 8005a68:	6811      	ldreq	r1, [r2, #0]
 8005a6a:	6852      	ldreq	r2, [r2, #4]
 8005a6c:	6062      	str	r2, [r4, #4]
 8005a6e:	bf04      	itt	eq
 8005a70:	1809      	addeq	r1, r1, r0
 8005a72:	6021      	streq	r1, [r4, #0]
 8005a74:	605c      	str	r4, [r3, #4]
 8005a76:	e7c7      	b.n	8005a08 <_free_r+0x24>
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	2000060c 	.word	0x2000060c

08005a80 <_malloc_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	1ccd      	adds	r5, r1, #3
 8005a84:	f025 0503 	bic.w	r5, r5, #3
 8005a88:	3508      	adds	r5, #8
 8005a8a:	2d0c      	cmp	r5, #12
 8005a8c:	bf38      	it	cc
 8005a8e:	250c      	movcc	r5, #12
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	4606      	mov	r6, r0
 8005a94:	db01      	blt.n	8005a9a <_malloc_r+0x1a>
 8005a96:	42a9      	cmp	r1, r5
 8005a98:	d903      	bls.n	8005aa2 <_malloc_r+0x22>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	f000 fa43 	bl	8005f2c <__malloc_lock>
 8005aa6:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <_malloc_r+0xac>)
 8005aa8:	6814      	ldr	r4, [r2, #0]
 8005aaa:	4621      	mov	r1, r4
 8005aac:	b991      	cbnz	r1, 8005ad4 <_malloc_r+0x54>
 8005aae:	4c20      	ldr	r4, [pc, #128]	; (8005b30 <_malloc_r+0xb0>)
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	b91b      	cbnz	r3, 8005abc <_malloc_r+0x3c>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 f97d 	bl	8005db4 <_sbrk_r>
 8005aba:	6020      	str	r0, [r4, #0]
 8005abc:	4629      	mov	r1, r5
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f000 f978 	bl	8005db4 <_sbrk_r>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d124      	bne.n	8005b12 <_malloc_r+0x92>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 fa2e 	bl	8005f2e <__malloc_unlock>
 8005ad2:	e7e4      	b.n	8005a9e <_malloc_r+0x1e>
 8005ad4:	680b      	ldr	r3, [r1, #0]
 8005ad6:	1b5b      	subs	r3, r3, r5
 8005ad8:	d418      	bmi.n	8005b0c <_malloc_r+0x8c>
 8005ada:	2b0b      	cmp	r3, #11
 8005adc:	d90f      	bls.n	8005afe <_malloc_r+0x7e>
 8005ade:	600b      	str	r3, [r1, #0]
 8005ae0:	50cd      	str	r5, [r1, r3]
 8005ae2:	18cc      	adds	r4, r1, r3
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f000 fa22 	bl	8005f2e <__malloc_unlock>
 8005aea:	f104 000b 	add.w	r0, r4, #11
 8005aee:	1d23      	adds	r3, r4, #4
 8005af0:	f020 0007 	bic.w	r0, r0, #7
 8005af4:	1ac3      	subs	r3, r0, r3
 8005af6:	d0d3      	beq.n	8005aa0 <_malloc_r+0x20>
 8005af8:	425a      	negs	r2, r3
 8005afa:	50e2      	str	r2, [r4, r3]
 8005afc:	e7d0      	b.n	8005aa0 <_malloc_r+0x20>
 8005afe:	428c      	cmp	r4, r1
 8005b00:	684b      	ldr	r3, [r1, #4]
 8005b02:	bf16      	itet	ne
 8005b04:	6063      	strne	r3, [r4, #4]
 8005b06:	6013      	streq	r3, [r2, #0]
 8005b08:	460c      	movne	r4, r1
 8005b0a:	e7eb      	b.n	8005ae4 <_malloc_r+0x64>
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	6849      	ldr	r1, [r1, #4]
 8005b10:	e7cc      	b.n	8005aac <_malloc_r+0x2c>
 8005b12:	1cc4      	adds	r4, r0, #3
 8005b14:	f024 0403 	bic.w	r4, r4, #3
 8005b18:	42a0      	cmp	r0, r4
 8005b1a:	d005      	beq.n	8005b28 <_malloc_r+0xa8>
 8005b1c:	1a21      	subs	r1, r4, r0
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f000 f948 	bl	8005db4 <_sbrk_r>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d0cf      	beq.n	8005ac8 <_malloc_r+0x48>
 8005b28:	6025      	str	r5, [r4, #0]
 8005b2a:	e7db      	b.n	8005ae4 <_malloc_r+0x64>
 8005b2c:	2000060c 	.word	0x2000060c
 8005b30:	20000610 	.word	0x20000610

08005b34 <__sfputc_r>:
 8005b34:	6893      	ldr	r3, [r2, #8]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	b410      	push	{r4}
 8005b3c:	6093      	str	r3, [r2, #8]
 8005b3e:	da08      	bge.n	8005b52 <__sfputc_r+0x1e>
 8005b40:	6994      	ldr	r4, [r2, #24]
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	db01      	blt.n	8005b4a <__sfputc_r+0x16>
 8005b46:	290a      	cmp	r1, #10
 8005b48:	d103      	bne.n	8005b52 <__sfputc_r+0x1e>
 8005b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b4e:	f7fe bb65 	b.w	800421c <__swbuf_r>
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	1c58      	adds	r0, r3, #1
 8005b56:	6010      	str	r0, [r2, #0]
 8005b58:	7019      	strb	r1, [r3, #0]
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <__sfputs_r>:
 8005b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b64:	4606      	mov	r6, r0
 8005b66:	460f      	mov	r7, r1
 8005b68:	4614      	mov	r4, r2
 8005b6a:	18d5      	adds	r5, r2, r3
 8005b6c:	42ac      	cmp	r4, r5
 8005b6e:	d101      	bne.n	8005b74 <__sfputs_r+0x12>
 8005b70:	2000      	movs	r0, #0
 8005b72:	e007      	b.n	8005b84 <__sfputs_r+0x22>
 8005b74:	463a      	mov	r2, r7
 8005b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ffda 	bl	8005b34 <__sfputc_r>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d1f3      	bne.n	8005b6c <__sfputs_r+0xa>
 8005b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b88 <_vfiprintf_r>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	b09d      	sub	sp, #116	; 0x74
 8005b90:	4617      	mov	r7, r2
 8005b92:	461d      	mov	r5, r3
 8005b94:	4606      	mov	r6, r0
 8005b96:	b118      	cbz	r0, 8005ba0 <_vfiprintf_r+0x18>
 8005b98:	6983      	ldr	r3, [r0, #24]
 8005b9a:	b90b      	cbnz	r3, 8005ba0 <_vfiprintf_r+0x18>
 8005b9c:	f7ff fb34 	bl	8005208 <__sinit>
 8005ba0:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <_vfiprintf_r+0x20c>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d158      	bne.n	8005c58 <_vfiprintf_r+0xd0>
 8005ba6:	6874      	ldr	r4, [r6, #4]
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	0718      	lsls	r0, r3, #28
 8005bac:	d55e      	bpl.n	8005c6c <_vfiprintf_r+0xe4>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d05b      	beq.n	8005c6c <_vfiprintf_r+0xe4>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bbe:	2330      	movs	r3, #48	; 0x30
 8005bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bc4:	9503      	str	r5, [sp, #12]
 8005bc6:	f04f 0b01 	mov.w	fp, #1
 8005bca:	46b8      	mov	r8, r7
 8005bcc:	4645      	mov	r5, r8
 8005bce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bd2:	b10b      	cbz	r3, 8005bd8 <_vfiprintf_r+0x50>
 8005bd4:	2b25      	cmp	r3, #37	; 0x25
 8005bd6:	d154      	bne.n	8005c82 <_vfiprintf_r+0xfa>
 8005bd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005bdc:	d00b      	beq.n	8005bf6 <_vfiprintf_r+0x6e>
 8005bde:	4653      	mov	r3, sl
 8005be0:	463a      	mov	r2, r7
 8005be2:	4621      	mov	r1, r4
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff ffbc 	bl	8005b62 <__sfputs_r>
 8005bea:	3001      	adds	r0, #1
 8005bec:	f000 80c2 	beq.w	8005d74 <_vfiprintf_r+0x1ec>
 8005bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf2:	4453      	add	r3, sl
 8005bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf6:	f898 3000 	ldrb.w	r3, [r8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80ba 	beq.w	8005d74 <_vfiprintf_r+0x1ec>
 8005c00:	2300      	movs	r3, #0
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295
 8005c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0a:	9304      	str	r3, [sp, #16]
 8005c0c:	9307      	str	r3, [sp, #28]
 8005c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c12:	931a      	str	r3, [sp, #104]	; 0x68
 8005c14:	46a8      	mov	r8, r5
 8005c16:	2205      	movs	r2, #5
 8005c18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005c1c:	485e      	ldr	r0, [pc, #376]	; (8005d98 <_vfiprintf_r+0x210>)
 8005c1e:	f7fa fb07 	bl	8000230 <memchr>
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	bb78      	cbnz	r0, 8005c86 <_vfiprintf_r+0xfe>
 8005c26:	06d9      	lsls	r1, r3, #27
 8005c28:	bf44      	itt	mi
 8005c2a:	2220      	movmi	r2, #32
 8005c2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c30:	071a      	lsls	r2, r3, #28
 8005c32:	bf44      	itt	mi
 8005c34:	222b      	movmi	r2, #43	; 0x2b
 8005c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c3a:	782a      	ldrb	r2, [r5, #0]
 8005c3c:	2a2a      	cmp	r2, #42	; 0x2a
 8005c3e:	d02a      	beq.n	8005c96 <_vfiprintf_r+0x10e>
 8005c40:	9a07      	ldr	r2, [sp, #28]
 8005c42:	46a8      	mov	r8, r5
 8005c44:	2000      	movs	r0, #0
 8005c46:	250a      	movs	r5, #10
 8005c48:	4641      	mov	r1, r8
 8005c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4e:	3b30      	subs	r3, #48	; 0x30
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d969      	bls.n	8005d28 <_vfiprintf_r+0x1a0>
 8005c54:	b360      	cbz	r0, 8005cb0 <_vfiprintf_r+0x128>
 8005c56:	e024      	b.n	8005ca2 <_vfiprintf_r+0x11a>
 8005c58:	4b50      	ldr	r3, [pc, #320]	; (8005d9c <_vfiprintf_r+0x214>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d101      	bne.n	8005c62 <_vfiprintf_r+0xda>
 8005c5e:	68b4      	ldr	r4, [r6, #8]
 8005c60:	e7a2      	b.n	8005ba8 <_vfiprintf_r+0x20>
 8005c62:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <_vfiprintf_r+0x218>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	bf08      	it	eq
 8005c68:	68f4      	ldreq	r4, [r6, #12]
 8005c6a:	e79d      	b.n	8005ba8 <_vfiprintf_r+0x20>
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7fe fb26 	bl	80042c0 <__swsetup_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d09d      	beq.n	8005bb4 <_vfiprintf_r+0x2c>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b01d      	add	sp, #116	; 0x74
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	46a8      	mov	r8, r5
 8005c84:	e7a2      	b.n	8005bcc <_vfiprintf_r+0x44>
 8005c86:	4a44      	ldr	r2, [pc, #272]	; (8005d98 <_vfiprintf_r+0x210>)
 8005c88:	1a80      	subs	r0, r0, r2
 8005c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8005c8e:	4318      	orrs	r0, r3
 8005c90:	9004      	str	r0, [sp, #16]
 8005c92:	4645      	mov	r5, r8
 8005c94:	e7be      	b.n	8005c14 <_vfiprintf_r+0x8c>
 8005c96:	9a03      	ldr	r2, [sp, #12]
 8005c98:	1d11      	adds	r1, r2, #4
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	9103      	str	r1, [sp, #12]
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	db01      	blt.n	8005ca6 <_vfiprintf_r+0x11e>
 8005ca2:	9207      	str	r2, [sp, #28]
 8005ca4:	e004      	b.n	8005cb0 <_vfiprintf_r+0x128>
 8005ca6:	4252      	negs	r2, r2
 8005ca8:	f043 0302 	orr.w	r3, r3, #2
 8005cac:	9207      	str	r2, [sp, #28]
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	f898 3000 	ldrb.w	r3, [r8]
 8005cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb6:	d10e      	bne.n	8005cd6 <_vfiprintf_r+0x14e>
 8005cb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cbe:	d138      	bne.n	8005d32 <_vfiprintf_r+0x1aa>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	9203      	str	r2, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfb8      	it	lt
 8005ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cd0:	f108 0802 	add.w	r8, r8, #2
 8005cd4:	9305      	str	r3, [sp, #20]
 8005cd6:	4d33      	ldr	r5, [pc, #204]	; (8005da4 <_vfiprintf_r+0x21c>)
 8005cd8:	f898 1000 	ldrb.w	r1, [r8]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7fa faa6 	bl	8000230 <memchr>
 8005ce4:	b140      	cbz	r0, 8005cf8 <_vfiprintf_r+0x170>
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	1b40      	subs	r0, r0, r5
 8005cea:	fa03 f000 	lsl.w	r0, r3, r0
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	4303      	orrs	r3, r0
 8005cf2:	f108 0801 	add.w	r8, r8, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	f898 1000 	ldrb.w	r1, [r8]
 8005cfc:	482a      	ldr	r0, [pc, #168]	; (8005da8 <_vfiprintf_r+0x220>)
 8005cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d02:	2206      	movs	r2, #6
 8005d04:	f108 0701 	add.w	r7, r8, #1
 8005d08:	f7fa fa92 	bl	8000230 <memchr>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d037      	beq.n	8005d80 <_vfiprintf_r+0x1f8>
 8005d10:	4b26      	ldr	r3, [pc, #152]	; (8005dac <_vfiprintf_r+0x224>)
 8005d12:	bb1b      	cbnz	r3, 8005d5c <_vfiprintf_r+0x1d4>
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	3307      	adds	r3, #7
 8005d18:	f023 0307 	bic.w	r3, r3, #7
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	9303      	str	r3, [sp, #12]
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	444b      	add	r3, r9
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	e750      	b.n	8005bca <_vfiprintf_r+0x42>
 8005d28:	fb05 3202 	mla	r2, r5, r2, r3
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	4688      	mov	r8, r1
 8005d30:	e78a      	b.n	8005c48 <_vfiprintf_r+0xc0>
 8005d32:	2300      	movs	r3, #0
 8005d34:	f108 0801 	add.w	r8, r8, #1
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	250a      	movs	r5, #10
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d44:	3a30      	subs	r2, #48	; 0x30
 8005d46:	2a09      	cmp	r2, #9
 8005d48:	d903      	bls.n	8005d52 <_vfiprintf_r+0x1ca>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0c3      	beq.n	8005cd6 <_vfiprintf_r+0x14e>
 8005d4e:	9105      	str	r1, [sp, #20]
 8005d50:	e7c1      	b.n	8005cd6 <_vfiprintf_r+0x14e>
 8005d52:	fb05 2101 	mla	r1, r5, r1, r2
 8005d56:	2301      	movs	r3, #1
 8005d58:	4680      	mov	r8, r0
 8005d5a:	e7f0      	b.n	8005d3e <_vfiprintf_r+0x1b6>
 8005d5c:	ab03      	add	r3, sp, #12
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4622      	mov	r2, r4
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <_vfiprintf_r+0x228>)
 8005d64:	a904      	add	r1, sp, #16
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7fd fe14 	bl	8003994 <_printf_float>
 8005d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d70:	4681      	mov	r9, r0
 8005d72:	d1d5      	bne.n	8005d20 <_vfiprintf_r+0x198>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	065b      	lsls	r3, r3, #25
 8005d78:	f53f af7e 	bmi.w	8005c78 <_vfiprintf_r+0xf0>
 8005d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d7e:	e77d      	b.n	8005c7c <_vfiprintf_r+0xf4>
 8005d80:	ab03      	add	r3, sp, #12
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4622      	mov	r2, r4
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <_vfiprintf_r+0x228>)
 8005d88:	a904      	add	r1, sp, #16
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7fe f8b8 	bl	8003f00 <_printf_i>
 8005d90:	e7ec      	b.n	8005d6c <_vfiprintf_r+0x1e4>
 8005d92:	bf00      	nop
 8005d94:	08006038 	.word	0x08006038
 8005d98:	08006174 	.word	0x08006174
 8005d9c:	08006058 	.word	0x08006058
 8005da0:	08006018 	.word	0x08006018
 8005da4:	0800617a 	.word	0x0800617a
 8005da8:	0800617e 	.word	0x0800617e
 8005dac:	08003995 	.word	0x08003995
 8005db0:	08005b63 	.word	0x08005b63

08005db4 <_sbrk_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4c06      	ldr	r4, [pc, #24]	; (8005dd0 <_sbrk_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	f7fd fb1c 	bl	80033fc <_sbrk>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_sbrk_r+0x1a>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_sbrk_r+0x1a>
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000838 	.word	0x20000838

08005dd4 <__sread>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	f000 f8a8 	bl	8005f30 <_read_r>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	bfab      	itete	ge
 8005de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005de6:	89a3      	ldrhlt	r3, [r4, #12]
 8005de8:	181b      	addge	r3, r3, r0
 8005dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dee:	bfac      	ite	ge
 8005df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005df2:	81a3      	strhlt	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__swrite>:
 8005df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	898b      	ldrh	r3, [r1, #12]
 8005dfe:	05db      	lsls	r3, r3, #23
 8005e00:	4605      	mov	r5, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4616      	mov	r6, r2
 8005e06:	d505      	bpl.n	8005e14 <__swrite+0x1e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	f000 f868 	bl	8005ee4 <_lseek_r>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	4632      	mov	r2, r6
 8005e22:	463b      	mov	r3, r7
 8005e24:	4628      	mov	r0, r5
 8005e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	f000 b817 	b.w	8005e5c <_write_r>

08005e2e <__sseek>:
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	460c      	mov	r4, r1
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 f855 	bl	8005ee4 <_lseek_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	bf15      	itete	ne
 8005e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e4a:	81a3      	strheq	r3, [r4, #12]
 8005e4c:	bf18      	it	ne
 8005e4e:	81a3      	strhne	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__sclose>:
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 b813 	b.w	8005e80 <_close_r>
	...

08005e5c <_write_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4c07      	ldr	r4, [pc, #28]	; (8005e7c <_write_r+0x20>)
 8005e60:	4605      	mov	r5, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	6022      	str	r2, [r4, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fd fa81 	bl	8003372 <_write>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_write_r+0x1e>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_write_r+0x1e>
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20000838 	.word	0x20000838

08005e80 <_close_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4c06      	ldr	r4, [pc, #24]	; (8005e9c <_close_r+0x1c>)
 8005e84:	2300      	movs	r3, #0
 8005e86:	4605      	mov	r5, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	f7fd fa82 	bl	8003394 <_close>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_close_r+0x1a>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_close_r+0x1a>
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20000838 	.word	0x20000838

08005ea0 <_fstat_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4c07      	ldr	r4, [pc, #28]	; (8005ec0 <_fstat_r+0x20>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	f7fd fa7d 	bl	80033ac <_fstat>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d102      	bne.n	8005ebc <_fstat_r+0x1c>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	b103      	cbz	r3, 8005ebc <_fstat_r+0x1c>
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000838 	.word	0x20000838

08005ec4 <_isatty_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4c06      	ldr	r4, [pc, #24]	; (8005ee0 <_isatty_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4605      	mov	r5, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	f7fd fa7c 	bl	80033cc <_isatty>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_isatty_r+0x1a>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_isatty_r+0x1a>
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	20000838 	.word	0x20000838

08005ee4 <_lseek_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4c07      	ldr	r4, [pc, #28]	; (8005f04 <_lseek_r+0x20>)
 8005ee8:	4605      	mov	r5, r0
 8005eea:	4608      	mov	r0, r1
 8005eec:	4611      	mov	r1, r2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fd fa75 	bl	80033e2 <_lseek>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_lseek_r+0x1e>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_lseek_r+0x1e>
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	20000838 	.word	0x20000838

08005f08 <__ascii_mbtowc>:
 8005f08:	b082      	sub	sp, #8
 8005f0a:	b901      	cbnz	r1, 8005f0e <__ascii_mbtowc+0x6>
 8005f0c:	a901      	add	r1, sp, #4
 8005f0e:	b142      	cbz	r2, 8005f22 <__ascii_mbtowc+0x1a>
 8005f10:	b14b      	cbz	r3, 8005f26 <__ascii_mbtowc+0x1e>
 8005f12:	7813      	ldrb	r3, [r2, #0]
 8005f14:	600b      	str	r3, [r1, #0]
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	1c10      	adds	r0, r2, #0
 8005f1a:	bf18      	it	ne
 8005f1c:	2001      	movne	r0, #1
 8005f1e:	b002      	add	sp, #8
 8005f20:	4770      	bx	lr
 8005f22:	4610      	mov	r0, r2
 8005f24:	e7fb      	b.n	8005f1e <__ascii_mbtowc+0x16>
 8005f26:	f06f 0001 	mvn.w	r0, #1
 8005f2a:	e7f8      	b.n	8005f1e <__ascii_mbtowc+0x16>

08005f2c <__malloc_lock>:
 8005f2c:	4770      	bx	lr

08005f2e <__malloc_unlock>:
 8005f2e:	4770      	bx	lr

08005f30 <_read_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4c07      	ldr	r4, [pc, #28]	; (8005f50 <_read_r+0x20>)
 8005f34:	4605      	mov	r5, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	6022      	str	r2, [r4, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fd f9fa 	bl	8003338 <_read>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_read_r+0x1e>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_read_r+0x1e>
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000838 	.word	0x20000838

08005f54 <__ascii_wctomb>:
 8005f54:	b149      	cbz	r1, 8005f6a <__ascii_wctomb+0x16>
 8005f56:	2aff      	cmp	r2, #255	; 0xff
 8005f58:	bf85      	ittet	hi
 8005f5a:	238a      	movhi	r3, #138	; 0x8a
 8005f5c:	6003      	strhi	r3, [r0, #0]
 8005f5e:	700a      	strbls	r2, [r1, #0]
 8005f60:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f64:	bf98      	it	ls
 8005f66:	2001      	movls	r0, #1
 8005f68:	4770      	bx	lr
 8005f6a:	4608      	mov	r0, r1
 8005f6c:	4770      	bx	lr
	...

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
