
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800ed10  0800ed10  0001ed10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f090  0800f090  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800f090  0800f090  0001f090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f098  0800f098  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f098  0800f098  0001f098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f09c  0800f09c  0001f09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800f0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00031a28  20000238  0800f2d8  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20031c60  0800f2d8  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a76  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000443e  00000000  00000000  00042cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001588  00000000  00000000  00047120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  000486a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026585  00000000  00000000  00049a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015267  00000000  00000000  0006ff95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ee1  00000000  00000000  000851fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001590dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  00159158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ecf4 	.word	0x0800ecf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	0800ecf4 	.word	0x0800ecf4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 fd29 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f00a fc20 	bl	800b810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd41 	bl	8001a82 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 fd09 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	200006ac 	.word	0x200006ac

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200006ac 	.word	0x200006ac

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e033      	b.n	800113e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f006 fbac 	bl	800783c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001106:	f023 0302 	bic.w	r3, r3, #2
 800110a:	f043 0202 	orr.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fa32 	bl	800157c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
 800112e:	e001      	b.n	8001134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start_DMA+0x1e>
 8001162:	2302      	movs	r3, #2
 8001164:	e0b1      	b.n	80012ca <HAL_ADC_Start_DMA+0x182>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d018      	beq.n	80011ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_ADC_Start_DMA+0x18c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_ADC_Start_DMA+0x190>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9a      	lsrs	r2, r3, #18
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8085 	bne.w	80012c8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f023 0206 	bic.w	r2, r3, #6
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
 800120a:	e002      	b.n	8001212 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_ADC_Start_DMA+0x194>)
 800121c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <HAL_ADC_Start_DMA+0x198>)
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_ADC_Start_DMA+0x19c>)
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_ADC_Start_DMA+0x1a0>)
 8001234:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800124e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	334c      	adds	r3, #76	; 0x4c
 800126a:	4619      	mov	r1, r3
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f000 fcc2 	bl	8001bf8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11c      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e013      	b.n	80012c8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_ADC_Start_DMA+0x1a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10e      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	40012300 	.word	0x40012300
 80012e0:	08001775 	.word	0x08001775
 80012e4:	0800182f 	.word	0x0800182f
 80012e8:	0800184b 	.word	0x0800184b
 80012ec:	40012000 	.word	0x40012000

080012f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e113      	b.n	800155c <HAL_ADC_ConfigChannel+0x244>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d925      	bls.n	8001390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	3b1e      	subs	r3, #30
 800135a:	2207      	movs	r2, #7
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68d9      	ldr	r1, [r3, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4403      	add	r3, r0
 8001382:	3b1e      	subs	r3, #30
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2207      	movs	r2, #7
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	409a      	lsls	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d824      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
 8001426:	e04c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b23      	subs	r3, #35	; 0x23
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	; 0x23
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
 8001478:	e023      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	; 0x41
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	; 0x41
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ADC_ConfigChannel+0x250>)
 80014c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10f      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_ADC_ConfigChannel+0x1f4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b11      	cmp	r3, #17
 800150a:	d122      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d111      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_ADC_ConfigChannel+0x25c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_ADC_ConfigChannel+0x260>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	10000012 	.word	0x10000012
 8001574:	20000008 	.word	0x20000008
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <ADC_Init+0x1f0>)
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	4a58      	ldr	r2, [pc, #352]	; (8001770 <ADC_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00f      	b.n	800167a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0202 	bic.w	r2, r2, #2
 8001688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	005a      	lsls	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	035a      	lsls	r2, r3, #13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e007      	b.n	80016f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	051a      	lsls	r2, r3, #20
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	029a      	lsls	r2, r3, #10
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13c      	bne.n	8001808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12b      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d127      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d119      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0220 	bic.w	r2, r2, #32
 80017da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f006 f8ad 	bl	8007960 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001806:	e00e      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fd75 	bl	8001304 <HAL_ADC_ErrorCallback>
}
 800181a:	e004      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fd57 	bl	80012f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f043 0204 	orr.w	r2, r3, #4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fd4a 	bl	8001304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fadc 	bl	8001064 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e099      	b.n	8001bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fac3 	bl	8001064 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d908      	bls.n	8001afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e078      	b.n	8001bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e8      	bne.n	8001ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_DMA_Init+0x158>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d117      	bne.n	8001bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fa77 	bl	8002094 <DMA_CheckFifoParam>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa2e 	bl	8002028 <DMA_CalcBaseAndBitshift>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	e010803f 	.word	0xe010803f

08001bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Start_IT+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e048      	b.n	8001cb0 <HAL_DMA_Start_IT+0xb8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d137      	bne.n	8001ca2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f9c0 	bl	8001fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0216 	orr.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0208 	orr.w	r2, r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e005      	b.n	8001cae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_DMA_IRQHandler+0x258>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <HAL_DMA_IRQHandler+0x25c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2208      	movs	r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2201      	movs	r2, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2210      	movs	r2, #16
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2210      	movs	r2, #16
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e01f      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0208 	bic.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 808e 	beq.w	8001f56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8086 	beq.w	8001f56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2220      	movs	r2, #32
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d136      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07d      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
        }
        return;
 8001ece:	e078      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01c      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d030      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e02b      	b.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d027      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
 8001f0e:	e022      	b.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
 8001f10:	20000008 	.word	0x20000008
 8001f14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0210 	bic.w	r2, r2, #16
 8001f34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d032      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d022      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d307      	bcc.n	8001f9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f2      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x2ca>
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fc2:	bf00      	nop
    }
  }
}
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d108      	bne.n	800200c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800200a:	e007      	b.n	800201c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3b10      	subs	r3, #16
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <DMA_CalcBaseAndBitshift+0x64>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <DMA_CalcBaseAndBitshift+0x68>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d909      	bls.n	800206a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
 8002068:	e007      	b.n	800207a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	aaaaaaab 	.word	0xaaaaaaab
 8002090:	0800edb4 	.word	0x0800edb4

08002094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11f      	bne.n	80020ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d855      	bhi.n	8002160 <DMA_CheckFifoParam+0xcc>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x28>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020df 	.word	0x080020df
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d045      	beq.n	8002164 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020dc:	e042      	b.n	8002164 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e6:	d13f      	bne.n	8002168 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e03c      	b.n	8002168 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d121      	bne.n	800213c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d836      	bhi.n	800216c <DMA_CheckFifoParam+0xd8>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x70>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002115 	.word	0x08002115
 8002108:	0800211b 	.word	0x0800211b
 800210c:	08002115 	.word	0x08002115
 8002110:	0800212d 	.word	0x0800212d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      break;
 8002118:	e02f      	b.n	800217a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212a:	e021      	b.n	8002170 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002134:	d11e      	bne.n	8002174 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213a:	e01b      	b.n	8002174 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <DMA_CheckFifoParam+0xb4>
 8002142:	2b03      	cmp	r3, #3
 8002144:	d003      	beq.n	800214e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002146:	e018      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e015      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00e      	beq.n	8002178 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e00b      	b.n	8002178 <DMA_CheckFifoParam+0xe4>
      break;
 8002160:	bf00      	nop
 8002162:	e00a      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002164:	bf00      	nop
 8002166:	e008      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002168:	bf00      	nop
 800216a:	e006      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 800216c:	bf00      	nop
 800216e:	e004      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002170:	bf00      	nop
 8002172:	e002      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;   
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002178:	bf00      	nop
    }
  } 
  
  return status; 
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_FLASH_Program+0xa0>)
 800219c:	7e1b      	ldrb	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_FLASH_Program+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e03b      	b.n	800221e <HAL_FLASH_Program+0x96>
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_FLASH_Program+0xa0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b0:	f000 f870 	bl	8002294 <FLASH_WaitForLastOperation>
 80021b4:	4603      	mov	r3, r0
 80021b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d12b      	bne.n	8002216 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021c4:	783b      	ldrb	r3, [r7, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f000 f917 	bl	80023fc <FLASH_Program_Byte>
 80021ce:	e016      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	f000 f8ea 	bl	80023b4 <FLASH_Program_HalfWord>
 80021e0:	e00d      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d105      	bne.n	80021f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	68b8      	ldr	r0, [r7, #8]
 80021ee:	f000 f8bf 	bl	8002370 <FLASH_Program_Word>
 80021f2:	e004      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f8:	68b8      	ldr	r0, [r7, #8]
 80021fa:	f000 f88b 	bl	8002314 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002202:	f000 f847 	bl	8002294 <FLASH_WaitForLastOperation>
 8002206:	4603      	mov	r3, r0
 8002208:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_FLASH_Program+0xa4>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_FLASH_Program+0xa4>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_FLASH_Program+0xa0>)
 8002218:	2200      	movs	r2, #0
 800221a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200006b0 	.word	0x200006b0
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0b      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_FLASH_Unlock+0x3c>)
 8002246:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_FLASH_Unlock+0x40>)
 800224c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da01      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800225a:	79fb      	ldrb	r3, [r7, #7]
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023c00 	.word	0x40023c00
 800226c:	45670123 	.word	0x45670123
 8002270:	cdef89ab 	.word	0xcdef89ab

08002274 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002282:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40023c00 	.word	0x40023c00

08002294 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <FLASH_WaitForLastOperation+0x78>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022a6:	f7fe fedd 	bl	8001064 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022ac:	e010      	b.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d00c      	beq.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <FLASH_WaitForLastOperation+0x38>
 80022bc:	f7fe fed2 	bl	8001064 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d201      	bcs.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e019      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022fa:	f000 f8a1 	bl	8002440 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
  
}  
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200006b0 	.word	0x200006b0
 8002310:	40023c00 	.word	0x40023c00

08002314 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002332:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002336:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800234a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	0013      	movs	r3, r2
 8002358:	2400      	movs	r4, #0
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	3204      	adds	r2, #4
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bc90      	pop	{r4, r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <FLASH_Program_Word+0x40>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <FLASH_Program_Word+0x40>)
 800238c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002390:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	801a      	strh	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <FLASH_Program_Byte+0x40>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <FLASH_Program_Byte+0x40>)
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <FLASH_Program_Byte+0x40>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <FLASH_Program_Byte+0x40>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 800245a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800245e:	2210      	movs	r2, #16
 8002460:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	4a24      	ldr	r2, [pc, #144]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002478:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800247c:	2220      	movs	r2, #32
 800247e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002496:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024da:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	60da      	str	r2, [r3, #12]
  }
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40023c00 	.word	0x40023c00
 8002508:	200006b0 	.word	0x200006b0

0800250c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 8002520:	7e1b      	ldrb	r3, [r3, #24]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_FLASHEx_Erase+0x1e>
 8002526:	2302      	movs	r3, #2
 8002528:	e058      	b.n	80025dc <HAL_FLASHEx_Erase+0xd0>
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 800252c:	2201      	movs	r2, #1
 800252e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002534:	f7ff feae 	bl	8002294 <FLASH_WaitForLastOperation>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d148      	bne.n	80025d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d115      	bne.n	800257e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f844 	bl	80025ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002568:	f7ff fe94 	bl	8002294 <FLASH_WaitForLastOperation>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6113      	str	r3, [r2, #16]
 800257c:	e028      	b.n	80025d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e01c      	b.n	80025c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	68b8      	ldr	r0, [r7, #8]
 8002590:	f000 f850 	bl	8002634 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002598:	f7ff fe7c 	bl	8002294 <FLASH_WaitForLastOperation>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 80025a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80025aa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	601a      	str	r2, [r3, #0]
          break;
 80025b8:	e00a      	b.n	80025d0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3301      	adds	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4413      	add	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3da      	bcc.n	8002586 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80025d0:	f000 f878 	bl	80026c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	761a      	strb	r2, [r3, #24]

  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200006b0 	.word	0x200006b0
 80025e8:	40023c00 	.word	0x40023c00

080025ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <FLASH_MassErase+0x44>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <FLASH_MassErase+0x44>)
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <FLASH_MassErase+0x44>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <FLASH_MassErase+0x44>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <FLASH_MassErase+0x44>)
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	4313      	orrs	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <FLASH_MassErase+0x44>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6113      	str	r3, [r2, #16]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e010      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d103      	bne.n	800265e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e009      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d103      	bne.n	800266c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e002      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800266c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	490f      	ldr	r1, [pc, #60]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002690:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002694:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4313      	orrs	r3, r2
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6113      	str	r3, [r2, #16]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <FLASH_FlushCaches+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <FLASH_FlushCaches+0x88>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <FLASH_FlushCaches+0x88>)
 80026da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <FLASH_FlushCaches+0x88>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <FLASH_FlushCaches+0x88>)
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <FLASH_FlushCaches+0x88>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <FLASH_FlushCaches+0x88>)
 80026f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <FLASH_FlushCaches+0x88>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <FLASH_FlushCaches+0x88>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <FLASH_FlushCaches+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <FLASH_FlushCaches+0x88>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <FLASH_FlushCaches+0x88>)
 8002716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800271a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <FLASH_FlushCaches+0x88>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <FLASH_FlushCaches+0x88>)
 8002722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <FLASH_FlushCaches+0x88>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <FLASH_FlushCaches+0x88>)
 800272e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002732:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <FLASH_FlushCaches+0x88>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <FLASH_FlushCaches+0x88>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	6013      	str	r3, [r2, #0]
  }
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e165      	b.n	8002a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8154 	bne.w	8002a32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x4a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b12      	cmp	r3, #18
 8002798:	d123      	bne.n	80027e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d00b      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282a:	2b11      	cmp	r3, #17
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b12      	cmp	r3, #18
 8002834:	d130      	bne.n	8002898 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0201 	and.w	r2, r3, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80ae 	beq.w	8002a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b59      	ldr	r3, [pc, #356]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x300>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x304>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x308>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_GPIO_Init+0x310>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x20a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x206>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x202>
 800294e:	2306      	movs	r3, #6
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002952:	2307      	movs	r3, #7
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_GPIO_Init+0x300>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_GPIO_Init+0x320>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ae:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae96 	bls.w	800276c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3724      	adds	r7, #36	; 0x24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	401a      	ands	r2, r3
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d104      	bne.n	8002afa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ca      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b6      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494c      	ldr	r1, [pc, #304]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e065      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4933      	ldr	r1, [pc, #204]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fa32 	bl	8001064 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fa2e 	bl	8001064 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e030      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4915      	ldr	r1, [pc, #84]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f81d 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe f994 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800edbc 	.word	0x0800edbc
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x32>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80b4 	bne.w	8002e64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b3      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b0      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04a      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	ea03 0501 	and.w	r5, r3, r1
 8002d34:	ea04 0602 	and.w	r6, r4, r2
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	0154      	lsls	r4, r2, #5
 8002d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4622      	mov	r2, r4
 8002d50:	1b49      	subs	r1, r1, r5
 8002d52:	eb62 0206 	sbc.w	r2, r2, r6
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0194      	lsls	r4, r2, #6
 8002d60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d64:	018b      	lsls	r3, r1, #6
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	eb64 0402 	sbc.w	r4, r4, r2
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	00e2      	lsls	r2, r4, #3
 8002d76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4614      	mov	r4, r2
 8002d80:	195b      	adds	r3, r3, r5
 8002d82:	eb44 0406 	adc.w	r4, r4, r6
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	02a2      	lsls	r2, r4, #10
 8002d90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d94:	0299      	lsls	r1, r3, #10
 8002d96:	460b      	mov	r3, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd ff76 	bl	8000c98 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e049      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea03 0501 	and.w	r5, r3, r1
 8002dca:	ea04 0602 	and.w	r6, r4, r2
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	0154      	lsls	r4, r2, #5
 8002ddc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de0:	014b      	lsls	r3, r1, #5
 8002de2:	4619      	mov	r1, r3
 8002de4:	4622      	mov	r2, r4
 8002de6:	1b49      	subs	r1, r1, r5
 8002de8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	0194      	lsls	r4, r2, #6
 8002df6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	eb64 0402 	sbc.w	r4, r4, r2
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e10:	00d9      	lsls	r1, r3, #3
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	195b      	adds	r3, r3, r5
 8002e18:	eb44 0406 	adc.w	r4, r4, r6
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	02a2      	lsls	r2, r4, #10
 8002e26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e2a:	0299      	lsls	r1, r3, #10
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd ff2b 	bl	8000c98 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e66:	60bb      	str	r3, [r7, #8]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400

08002e7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d075      	beq.n	8002f80 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e94:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea0:	4b9f      	ldr	r3, [pc, #636]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d112      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x102>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d157      	bne.n	8002f7e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e20b      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x6e>
 8002edc:	4b90      	ldr	r3, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8f      	ldr	r2, [pc, #572]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e01d      	b.n	8002f26 <HAL_RCC_OscConfig+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x92>
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a89      	ldr	r2, [pc, #548]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a86      	ldr	r2, [pc, #536]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0xaa>
 8002f0e:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a83      	ldr	r2, [pc, #524]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f899 	bl	8001064 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f36:	f7fe f895 	bl	8001064 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1d0      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0xba>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe f885 	bl	8001064 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f881 	bl	8001064 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1bc      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f70:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0xe2>
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d063      	beq.n	8003054 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d11c      	bne.n	8002fde <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x14c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e190      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4952      	ldr	r1, [pc, #328]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fdc:	e03a      	b.n	8003054 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_OscConfig+0x2a8>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f83a 	bl	8001064 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe f836 	bl	8001064 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e171      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	493f      	ldr	r1, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
 8003026:	e015      	b.n	8003054 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x2a8>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe f819 	bl	8001064 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe f815 	bl	8001064 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e150      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d030      	beq.n	80030c2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d016      	beq.n	8003096 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_OscConfig+0x2ac>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fff9 	bl	8001064 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fd fff5 	bl	8001064 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e130      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1fa>
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fd ffe2 	bl	8001064 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fd ffde 	bl	8001064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e119      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 809f 	beq.w	800320e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d120      	bne.n	800314e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a06      	ldr	r2, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7fd ffa4 	bl	8001064 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e010      	b.n	8003142 <HAL_RCC_OscConfig+0x2c6>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
 8003128:	42470e80 	.word	0x42470e80
 800312c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fd ff98 	bl	8001064 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0d3      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x2e8>
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a67      	ldr	r2, [pc, #412]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e01c      	b.n	800319e <HAL_RCC_OscConfig+0x322>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x30a>
 800316c:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e00b      	b.n	800319e <HAL_RCC_OscConfig+0x322>
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d015      	beq.n	80031d2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fd ff5d 	bl	8001064 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fd ff59 	bl	8001064 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e092      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ee      	beq.n	80031ae <HAL_RCC_OscConfig+0x332>
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fd ff47 	bl	8001064 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fd ff43 	bl	8001064 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e07c      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d068      	beq.n	80032e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d145      	bne.n	80032b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd ff18 	bl	8001064 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd ff14 	bl	8001064 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04f      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	491d      	ldr	r1, [pc, #116]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fd fee9 	bl	8001064 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fee5 	bl	8001064 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e020      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x41a>
 80032b4:	e018      	b.n	80032e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fed2 	bl	8001064 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fece 	bl	8001064 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e009      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x448>
 80032e2:	e001      	b.n	80032e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40007000 	.word	0x40007000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470060 	.word	0x42470060

08003300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e056      	b.n	80033c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f008 f9e1 	bl	800b6f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0104 	and.w	r1, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033d6:	2301      	movs	r3, #1
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x26>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e18a      	b.n	8003704 <HAL_SPI_TransmitReceive+0x33c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f6:	f7fd fe35 	bl	8001064 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003414:	2b01      	cmp	r3, #1
 8003416:	d00f      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x70>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341e:	d107      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x68>
 8003428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800342c:	2b04      	cmp	r3, #4
 800342e:	d003      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003430:	2302      	movs	r3, #2
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003436:	e15b      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_SPI_TransmitReceive+0x82>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_TransmitReceive+0x82>
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003450:	e14e      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2205      	movs	r2, #5
 8003462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	887a      	ldrh	r2, [r7, #2]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d007      	beq.n	80034ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c2:	d178      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x10a>
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d166      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f6:	e053      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d11b      	bne.n	800353e <HAL_SPI_TransmitReceive+0x176>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <HAL_SPI_TransmitReceive+0x176>
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d113      	bne.n	800353e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d119      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x1b8>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	b292      	uxth	r2, r2
 8003562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800357c:	2301      	movs	r3, #1
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003580:	f7fd fd70 	bl	8001064 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358c:	429a      	cmp	r2, r3
 800358e:	d807      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d003      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800359e:	e0a7      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1a6      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x130>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1a1      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x130>
 80035b4:	e07c      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x1fc>
 80035be:	8b7b      	ldrh	r3, [r7, #26]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d16b      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ea:	e057      	b.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d11c      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d114      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x2ae>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003676:	f7fd fcf5 	bl	8001064 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_TransmitReceive+0x2c6>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d102      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x2cc>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800369a:	e029      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1a2      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x224>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d19d      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f893 	bl	80037e0 <SPI_EndRxTxTransaction>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036cc:	e010      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e000      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80036ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003704:	4618      	mov	r0, r3
 8003706:	3730      	adds	r7, #48	; 0x30
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371c:	e04c      	b.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d048      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003726:	f7fd fc9d 	bl	8001064 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d902      	bls.n	800373c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d13d      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800374a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003754:	d111      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375e:	d004      	beq.n	800376a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d107      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d10f      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00f      	b.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1a3      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <SPI_EndRxTxTransaction+0x7c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <SPI_EndRxTxTransaction+0x80>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0d5b      	lsrs	r3, r3, #21
 80037f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380a:	d112      	bne.n	8003832 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff78 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3b01      	subs	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d0f2      	beq.n	8003832 <SPI_EndRxTxTransaction+0x52>
 800384c:	e000      	b.n	8003850 <SPI_EndRxTxTransaction+0x70>
        break;
 800384e:	bf00      	nop
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000008 	.word	0x20000008
 8003860:	165e9f81 	.word	0x165e9f81

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e01d      	b.n	80038b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f008 fa1a 	bl	800bcc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 faee 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e01d      	b.n	8003950 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f008 f995 	bl	800bc58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f000 fa9f 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fcda 	bl	8004324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_TIM_PWM_Start+0x74>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_PWM_Start+0x2c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIM_PWM_Start+0x78>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_TIM_PWM_Start+0x30>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_TIM_PWM_Start+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d007      	beq.n	80039c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40010400 	.word	0x40010400

080039d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fc9c 	bl	8004324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_TIM_PWM_Stop+0xa8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_PWM_Stop+0x2c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_TIM_PWM_Stop+0xac>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_TIM_PWM_Stop+0x30>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_PWM_Stop+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	f240 4344 	movw	r3, #1092	; 0x444
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_TIM_PWM_Stop+0x96>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	f240 4344 	movw	r3, #1092	; 0x444
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_PWM_Stop+0x96>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9be 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9b0 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9c1 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f994 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f986 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f997 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f96a 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f95c 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f96d 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0210 	mvn.w	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f940 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f932 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f943 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f90c 	bl	8003e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fbec 	bl	800440c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f908 	bl	8003e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fbb6 	bl	80043f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0b4      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f95c 	bl	8003fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e062      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f9ac 	bl	80040a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fa01 	bl	8004190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e021      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa55 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e000      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d027      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d023      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a24      	ldr	r2, [pc, #144]	; (8003fbc <TIM_Base_SetConfig+0x138>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40010400 	.word	0x40010400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40001800 	.word	0x40001800
 8003fbc:	40001c00 	.word	0x40001c00
 8003fc0:	40002000 	.word	0x40002000

08003fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a20      	ldr	r2, [pc, #128]	; (800409c <TIM_OC1_SetConfig+0xd8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_OC1_SetConfig+0x64>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <TIM_OC1_SetConfig+0xdc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10c      	bne.n	8004042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0308 	bic.w	r3, r3, #8
 800402e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC1_SetConfig+0xd8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC1_SetConfig+0x8e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <TIM_OC1_SetConfig+0xdc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0210 	bic.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0320 	bic.w	r3, r3, #32
 80040ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a22      	ldr	r2, [pc, #136]	; (8004188 <TIM_OC2_SetConfig+0xe4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC2_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a21      	ldr	r2, [pc, #132]	; (800418c <TIM_OC2_SetConfig+0xe8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d10d      	bne.n	8004128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <TIM_OC2_SetConfig+0xe4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC2_SetConfig+0x94>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	; (800418c <TIM_OC2_SetConfig+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d113      	bne.n	8004160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <TIM_OC3_SetConfig+0xe0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC3_SetConfig+0x66>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a20      	ldr	r2, [pc, #128]	; (8004274 <TIM_OC3_SetConfig+0xe4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10d      	bne.n	8004212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC3_SetConfig+0xe0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC3_SetConfig+0x92>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_OC3_SetConfig+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d113      	bne.n	800424a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40010000 	.word	0x40010000
 8004274:	40010400 	.word	0x40010400

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <TIM_OC4_SetConfig+0xa4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC4_SetConfig+0x68>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <TIM_OC4_SetConfig+0xa8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2201      	movs	r2, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004382:	2302      	movs	r3, #2
 8004384:	e032      	b.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <_DoInit+0x8c>)
 8004428:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <_DoInit+0x90>)
 800443a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <_DoInit+0x94>)
 8004440:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004448:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <_DoInit+0x90>)
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <_DoInit+0x98>)
 8004466:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2210      	movs	r2, #16
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3307      	adds	r3, #7
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <_DoInit+0x9c>)
 8004486:	6810      	ldr	r0, [r2, #0]
 8004488:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <_DoInit+0xa0>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	6018      	str	r0, [r3, #0]
 8004492:	8891      	ldrh	r1, [r2, #4]
 8004494:	7992      	ldrb	r2, [r2, #6]
 8004496:	8099      	strh	r1, [r3, #4]
 8004498:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	719a      	strb	r2, [r3, #6]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200006d0 	.word	0x200006d0
 80044b0:	0800ed10 	.word	0x0800ed10
 80044b4:	20000254 	.word	0x20000254
 80044b8:	20000654 	.word	0x20000654
 80044bc:	0800ed1c 	.word	0x0800ed1c
 80044c0:	0800ed20 	.word	0x0800ed20

080044c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d905      	bls.n	80044f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e007      	b.n	8004504 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	6939      	ldr	r1, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1acb      	subs	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3b01      	subs	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4293      	cmp	r3, r2
 8004510:	bf28      	it	cs
 8004512:	4613      	movcs	r3, r2
 8004514:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4293      	cmp	r3, r2
 800451c:	bf28      	it	cs
 800451e:	4613      	movcs	r3, r2
 8004520:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f008 f802 	bl	800c538 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	d101      	bne.n	8004562 <_WriteBlocking+0x9e>
      WrOff = 0u;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1b5      	bne.n	80044da <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800456e:	69bb      	ldr	r3, [r7, #24]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d90e      	bls.n	80045ba <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f007 ffc5 	bl	800c538 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80045b8:	e01a      	b.n	80045f0 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f007 ffb4 	bl	800c538 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6858      	ldr	r0, [r3, #4]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4413      	add	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4619      	mov	r1, r3
 80045e6:	f007 ffa7 	bl	800c538 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	60da      	str	r2, [r3, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d808      	bhi.n	8004626 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	3b01      	subs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <SEGGER_RTT_WriteNoLock+0x98>)
 800465e:	4413      	add	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d017      	beq.n	800469a <SEGGER_RTT_WriteNoLock+0x5a>
 800466a:	2b01      	cmp	r3, #1
 800466c:	d302      	bcc.n	8004674 <SEGGER_RTT_WriteNoLock+0x34>
 800466e:	2b02      	cmp	r3, #2
 8004670:	d023      	beq.n	80046ba <SEGGER_RTT_WriteNoLock+0x7a>
 8004672:	e029      	b.n	80046c8 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff ffbf 	bl	80045f8 <_GetAvailWriteSpace>
 800467a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004688:	e021      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff ff70 	bl	8004578 <_WriteNoCheck>
    break;
 8004698:	e019      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ffac 	bl	80045f8 <_GetAvailWriteSpace>
 80046a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf28      	it	cs
 80046aa:	4613      	movcs	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff ff60 	bl	8004578 <_WriteNoCheck>
    break;
 80046b8:	e009      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff ff00 	bl	80044c4 <_WriteBlocking>
 80046c4:	61f8      	str	r0, [r7, #28]
    break;
 80046c6:	e002      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
    break;
 80046cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046ce:	69fb      	ldr	r3, [r7, #28]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200006d0 	.word	0x200006d0

080046dc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <SEGGER_RTT_Write+0x44>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <SEGGER_RTT_Write+0x18>
 80046f0:	f7ff fe96 	bl	8004420 <_DoInit>
  SEGGER_RTT_LOCK();
 80046f4:	f3ef 8311 	mrs	r3, BASEPRI
 80046f8:	f04f 0120 	mov.w	r1, #32
 80046fc:	f381 8811 	msr	BASEPRI, r1
 8004700:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff9a 	bl	8004640 <SEGGER_RTT_WriteNoLock>
 800470c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8004714:	693b      	ldr	r3, [r7, #16]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200006d0 	.word	0x200006d0

08004724 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004732:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800473a:	f7ff fe71 	bl	8004420 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800473e:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4293      	cmp	r3, r2
 8004748:	d24c      	bcs.n	80047e4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800474a:	f3ef 8311 	mrs	r3, BASEPRI
 800474e:	f04f 0120 	mov.w	r1, #32
 8004752:	f381 8811 	msr	BASEPRI, r1
 8004756:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d032      	beq.n	80047c4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800475e:	4925      	ldr	r1, [pc, #148]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004772:	4920      	ldr	r1, [pc, #128]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3304      	adds	r3, #4
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004788:	491a      	ldr	r1, [pc, #104]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	3320      	adds	r3, #32
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800479c:	4915      	ldr	r1, [pc, #84]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	3328      	adds	r3, #40	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80047b0:	4910      	ldr	r1, [pc, #64]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
 80047be:	3324      	adds	r3, #36	; 0x24
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	332c      	adds	r3, #44	; 0x2c
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e002      	b.n	80047ea <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200006d0 	.word	0x200006d0

080047f8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  _DoInit();
 80047fc:	f7ff fe10 	bl	8004420 <_DoInit>
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}

08004804 <queue_pop>:
	uint16_t queue[QUEUE_SIZE];
	uint16_t head; //先頭位置
	uint16_t tail; //末尾位置
} queue_t;

void queue_pop(queue_t *q, uint8_t *x, uint8_t *y) {
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	uint16_t box;
	box = q->queue[q->head];
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800481e:	82fb      	strh	r3, [r7, #22]
	q->head++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004826:	3301      	adds	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	if (q->head == QUEUE_SIZE) {
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004836:	2bff      	cmp	r3, #255	; 0xff
 8004838:	d103      	bne.n	8004842 <queue_pop+0x3e>
		q->head = 0;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	}
	*y = (uint8_t) box / 16;
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	b2da      	uxtb	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	701a      	strb	r2, [r3, #0]
	*x = (uint8_t) box % 16;
 800484e:	8afb      	ldrh	r3, [r7, #22]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	701a      	strb	r2, [r3, #0]
//	//myprintf("pop,x:%d,y:%d\n",*x,*y);
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <queue_push>:

void queue_push(queue_t *q, uint8_t x, uint8_t y) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
 8004874:	4613      	mov	r3, r2
 8004876:	70bb      	strb	r3, [r7, #2]
	uint16_t box;
	box = (uint16_t) (y * 16 + x);
 8004878:	78bb      	ldrb	r3, [r7, #2]
 800487a:	b29b      	uxth	r3, r3
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	b29a      	uxth	r2, r3
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	b29b      	uxth	r3, r3
 8004884:	4413      	add	r3, r2
 8004886:	81fb      	strh	r3, [r7, #14]
	q->queue[q->tail] = box;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800488e:	4619      	mov	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	89fa      	ldrh	r2, [r7, #14]
 8004894:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	q->tail++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800489e:	3301      	adds	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	if (q->tail == QUEUE_SIZE) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80048ae:	2bff      	cmp	r3, #255	; 0xff
 80048b0:	d103      	bne.n	80048ba <queue_push+0x52>
		q->tail = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
//	//myprintf("pop,x:%d,y:%d\n",x,y);
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <adachi_map>:

void adachi_map(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata) {
 80048c8:	b082      	sub	sp, #8
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	4622      	mov	r2, r4
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	1dbb      	adds	r3, r7, #6
 80048e4:	4602      	mov	r2, r0
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	1d7b      	adds	r3, r7, #5
 80048ea:	460a      	mov	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
	uint16_t step;
	queue_t q;
//	uint8_t test = 0;

//	moter_flag = 1;
	q.head = 0;
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8004902:	2300      	movs	r3, #0
 8004904:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8004908:	e01f      	b.n	800494a <adachi_map+0x82>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 800490a:	2300      	movs	r3, #0
 800490c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 8004910:	e011      	b.n	8004936 <adachi_map+0x6e>
			step_map[x_adachi][y_adachi] = 0xffff;
 8004912:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004916:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800491a:	4611      	mov	r1, r2
 800491c:	4ad0      	ldr	r2, [pc, #832]	; (8004c60 <adachi_map+0x398>)
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	440b      	add	r3, r1
 8004922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 800492a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800492e:	3301      	adds	r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 8004936:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d9e9      	bls.n	8004912 <adachi_map+0x4a>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 800493e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800494a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d9db      	bls.n	800490a <adachi_map+0x42>
		}
	}

	if (goal_scale == 1) {
 8004952:	1d7b      	adds	r3, r7, #5
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d11e      	bne.n	8004998 <adachi_map+0xd0>
		step_map[goal_x][goal_y] = 0;
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	49bf      	ldr	r1, [pc, #764]	; (8004c60 <adachi_map+0x398>)
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	4413      	add	r3, r2
 8004968:	2200      	movs	r2, #0
 800496a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 800496e:	1dfb      	adds	r3, r7, #7
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004984:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004988:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff69 	bl	8004868 <queue_push>
 8004996:	e1ac      	b.n	8004cf2 <adachi_map+0x42a>
	} else if (goal_scale == 4) {
 8004998:	1d7b      	adds	r3, r7, #5
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	f040 8085 	bne.w	8004aac <adachi_map+0x1e4>
		step_map[goal_x][goal_y] = 0;
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	1dbb      	adds	r3, r7, #6
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	49ad      	ldr	r1, [pc, #692]	; (8004c60 <adachi_map+0x398>)
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 80049be:	1dbb      	adds	r3, r7, #6
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 80049cc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80049d0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff45 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	499d      	ldr	r1, [pc, #628]	; (8004c60 <adachi_map+0x398>)
 80049ea:	0112      	lsls	r2, r2, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 80049f4:	1dfb      	adds	r3, r7, #7
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004a00:	1dbb      	adds	r3, r7, #6
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a0e:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a12:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff ff24 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 8004a20:	1dfb      	adds	r3, r7, #7
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	498d      	ldr	r1, [pc, #564]	; (8004c60 <adachi_map+0x398>)
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	2200      	movs	r2, #0
 8004a32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8004a3e:	1dbb      	adds	r3, r7, #6
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a50:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a54:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff03 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	497c      	ldr	r1, [pc, #496]	; (8004c60 <adachi_map+0x398>)
 8004a70:	0112      	lsls	r2, r2, #4
 8004a72:	4413      	add	r3, r2
 8004a74:	2200      	movs	r2, #0
 8004a76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8004a86:	1dbb      	adds	r3, r7, #6
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a98:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a9c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fedf 	bl	8004868 <queue_push>
 8004aaa:	e122      	b.n	8004cf2 <adachi_map+0x42a>
	} else if (goal_scale == 100) {
 8004aac:	1d7b      	adds	r3, r7, #5
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b64      	cmp	r3, #100	; 0x64
 8004ab2:	d144      	bne.n	8004b3e <adachi_map+0x276>
		step_map[goal_x][goal_y] = 0;
 8004ab4:	1dfb      	adds	r3, r7, #7
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	1dbb      	adds	r3, r7, #6
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4968      	ldr	r1, [pc, #416]	; (8004c60 <adachi_map+0x398>)
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	4413      	add	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004ad0:	1dbb      	adds	r3, r7, #6
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004ade:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004ae2:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff febc 	bl	8004868 <queue_push>
		if (goal_y < 15) {
 8004af0:	1dbb      	adds	r3, r7, #6
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b0e      	cmp	r3, #14
 8004af6:	f200 80fc 	bhi.w	8004cf2 <adachi_map+0x42a>
			step_map[goal_x][goal_y + 1] = 0;
 8004afa:	1dfb      	adds	r3, r7, #7
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	1dbb      	adds	r3, r7, #6
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4956      	ldr	r1, [pc, #344]	; (8004c60 <adachi_map+0x398>)
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y + 1;
 8004b18:	1dbb      	adds	r3, r7, #6
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004b2a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004b2e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fe96 	bl	8004868 <queue_push>
 8004b3c:	e0d9      	b.n	8004cf2 <adachi_map+0x42a>
		}
	} else if (goal_scale == 101) {
 8004b3e:	1d7b      	adds	r3, r7, #5
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b65      	cmp	r3, #101	; 0x65
 8004b44:	d144      	bne.n	8004bd0 <adachi_map+0x308>
		step_map[goal_x][goal_y] = 0;
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	4944      	ldr	r1, [pc, #272]	; (8004c60 <adachi_map+0x398>)
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	4413      	add	r3, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004b62:	1dbb      	adds	r3, r7, #6
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004b70:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004b74:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fe73 	bl	8004868 <queue_push>
		if (goal_x > 0) {
 8004b82:	1dfb      	adds	r3, r7, #7
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80b3 	beq.w	8004cf2 <adachi_map+0x42a>
			step_map[goal_x - 1][goal_y] = 0;
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	4932      	ldr	r1, [pc, #200]	; (8004c60 <adachi_map+0x398>)
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	4413      	add	r3, r2
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x - 1;
 8004ba2:	1dfb      	adds	r3, r7, #7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y;
 8004bae:	1dbb      	adds	r3, r7, #6
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004bbc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004bc0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004bc4:	f107 0308 	add.w	r3, r7, #8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fe4d 	bl	8004868 <queue_push>
 8004bce:	e090      	b.n	8004cf2 <adachi_map+0x42a>
		}
	} else if (goal_scale == 102) {
 8004bd0:	1d7b      	adds	r3, r7, #5
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b66      	cmp	r3, #102	; 0x66
 8004bd6:	d145      	bne.n	8004c64 <adachi_map+0x39c>
		step_map[goal_x][goal_y] = 0;
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	1dbb      	adds	r3, r7, #6
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	491f      	ldr	r1, [pc, #124]	; (8004c60 <adachi_map+0x398>)
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004bf4:	1dbb      	adds	r3, r7, #6
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004c02:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c06:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe2a 	bl	8004868 <queue_push>
		if (goal_y > 0) {
 8004c14:	1dbb      	adds	r3, r7, #6
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06a      	beq.n	8004cf2 <adachi_map+0x42a>
			step_map[goal_x][goal_y - 1] = 0;
 8004c1c:	1dfb      	adds	r3, r7, #7
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	1dbb      	adds	r3, r7, #6
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <adachi_map+0x398>)
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8004c32:	1dfb      	adds	r3, r7, #7
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y - 1;
 8004c3a:	1dbb      	adds	r3, r7, #6
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004c4c:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c50:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fe05 	bl	8004868 <queue_push>
 8004c5e:	e048      	b.n	8004cf2 <adachi_map+0x42a>
 8004c60:	20000a94 	.word	0x20000a94
		}
	} else if (goal_scale == 103) {
 8004c64:	1d7b      	adds	r3, r7, #5
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b67      	cmp	r3, #103	; 0x67
 8004c6a:	d142      	bne.n	8004cf2 <adachi_map+0x42a>
		step_map[goal_x][goal_y] = 0;
 8004c6c:	1dfb      	adds	r3, r7, #7
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	1dbb      	adds	r3, r7, #6
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	49a3      	ldr	r1, [pc, #652]	; (8004f04 <adachi_map+0x63c>)
 8004c76:	0112      	lsls	r2, r2, #4
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004c88:	1dbb      	adds	r3, r7, #6
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004c96:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c9a:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fde0 	bl	8004868 <queue_push>
		if (goal_x < 15) {
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b0e      	cmp	r3, #14
 8004cae:	d820      	bhi.n	8004cf2 <adachi_map+0x42a>
			step_map[goal_x + 1][goal_y] = 0;
 8004cb0:	1dfb      	adds	r3, r7, #7
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	4992      	ldr	r1, [pc, #584]	; (8004f04 <adachi_map+0x63c>)
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	4413      	add	r3, r2
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x + 1;
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y;
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004ce0:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004ce4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fdbb 	bl	8004868 <queue_push>
		}
	}

	do {
		flag = 0;
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <adachi_map+0x640>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
		queue_pop(&q, &x_adachi, &y_adachi);
 8004cf8:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8004cfc:	f207 210d 	addw	r1, r7, #525	; 0x20d
 8004d00:	f107 0308 	add.w	r3, r7, #8
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fd7d 	bl	8004804 <queue_pop>

		step = step_map[x_adachi][y_adachi];
 8004d0a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d0e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004d12:	4611      	mov	r1, r2
 8004d14:	4a7b      	ldr	r2, [pc, #492]	; (8004f04 <adachi_map+0x63c>)
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	440b      	add	r3, r1
 8004d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

		if ((getWall(x_adachi, y_adachi, North, &walldata) == 0)
 8004d22:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d26:	4618      	mov	r0, r3
 8004d28:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004d32:	2200      	movs	r2, #0
 8004d34:	f007 fb36 	bl	800c3a4 <getWall>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d179      	bne.n	8004e32 <adachi_map+0x56a>
				&& (step_map[x_adachi][y_adachi + 1] > step + 1)
 8004d3e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d42:	461a      	mov	r2, r3
 8004d44:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d48:	3301      	adds	r3, #1
 8004d4a:	496e      	ldr	r1, [pc, #440]	; (8004f04 <adachi_map+0x63c>)
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	dd68      	ble.n	8004e32 <adachi_map+0x56a>
				&& ((y_adachi + 1) < 16)) {
 8004d60:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d64:	3301      	adds	r3, #1
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	dc63      	bgt.n	8004e32 <adachi_map+0x56a>
			if (((step_map[x_adachi][y_adachi - 1] == step - 1)
 8004d6a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d74:	3b01      	subs	r3, #1
 8004d76:	4963      	ldr	r1, [pc, #396]	; (8004f04 <adachi_map+0x63c>)
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d80:	461a      	mov	r2, r3
 8004d82:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004d86:	3b01      	subs	r3, #1
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d010      	beq.n	8004dae <adachi_map+0x4e6>
					|| (step_map[x_adachi][y_adachi - 1] == step - 2))
 8004d8c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d90:	461a      	mov	r2, r3
 8004d92:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	495a      	ldr	r1, [pc, #360]	; (8004f04 <adachi_map+0x63c>)
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004da8:	3b02      	subs	r3, #2
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d123      	bne.n	8004df6 <adachi_map+0x52e>
					&& (y_adachi - 1) >= 0
 8004dae:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004db2:	3b01      	subs	r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db1e      	blt.n	8004df6 <adachi_map+0x52e>
					&& getWall(x_adachi, y_adachi, South, &walldata) == 0) {
 8004db8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f007 faeb 	bl	800c3a4 <getWall>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d110      	bne.n	8004df6 <adachi_map+0x52e>
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8004dd4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dd8:	461c      	mov	r4, r3
 8004dda:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004dde:	3301      	adds	r3, #1
 8004de0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004de4:	3201      	adds	r2, #1
 8004de6:	b290      	uxth	r0, r2
 8004de8:	4946      	ldr	r1, [pc, #280]	; (8004f04 <adachi_map+0x63c>)
 8004dea:	0122      	lsls	r2, r4, #4
 8004dec:	4413      	add	r3, r2
 8004dee:	4602      	mov	r2, r0
 8004df0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8004df4:	e00f      	b.n	8004e16 <adachi_map+0x54e>
			} else {
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8004df6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e00:	3301      	adds	r3, #1
 8004e02:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004e06:	3201      	adds	r2, #1
 8004e08:	b290      	uxth	r0, r2
 8004e0a:	493e      	ldr	r1, [pc, #248]	; (8004f04 <adachi_map+0x63c>)
 8004e0c:	0122      	lsls	r2, r4, #4
 8004e0e:	4413      	add	r3, r2
 8004e10:	4602      	mov	r2, r0
 8004e12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi + 1);
 8004e16:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004e1a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fd1e 	bl	8004868 <queue_push>
			flag = 10;
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <adachi_map+0x640>)
 8004e2e:	220a      	movs	r2, #10
 8004e30:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata) == 0)
 8004e32:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e36:	4618      	mov	r0, r3
 8004e38:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004e42:	2201      	movs	r2, #1
 8004e44:	f007 faae 	bl	800c3a4 <getWall>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d17b      	bne.n	8004f46 <adachi_map+0x67e>
				&& (step_map[x_adachi - 1][y_adachi] > step + 1)
 8004e4e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <adachi_map+0x63c>)
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	440b      	add	r3, r1
 8004e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dd6a      	ble.n	8004f46 <adachi_map+0x67e>
				&& ((x_adachi - 1) >= 0)) {
 8004e70:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e74:	3b01      	subs	r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db65      	blt.n	8004f46 <adachi_map+0x67e>
			if (((step_map[x_adachi + 1][y_adachi] == step - 1)
 8004e7a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004e84:	4611      	mov	r1, r2
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <adachi_map+0x63c>)
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004e96:	3b01      	subs	r3, #1
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d010      	beq.n	8004ebe <adachi_map+0x5f6>
					|| (step_map[x_adachi + 1][y_adachi] == step - 2))
 8004e9c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <adachi_map+0x63c>)
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	440b      	add	r3, r1
 8004eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004eb8:	3b02      	subs	r3, #2
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d126      	bne.n	8004f0c <adachi_map+0x644>
					&& (x_adachi + 1) < 16
 8004ebe:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	dc21      	bgt.n	8004f0c <adachi_map+0x644>
					&& getWall(x_adachi, y_adachi, East, &walldata) == 0) {
 8004ec8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f007 fa63 	bl	800c3a4 <getWall>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d113      	bne.n	8004f0c <adachi_map+0x644>
				step_map[x_adachi - 1][y_adachi] = step + 1;
 8004ee4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	b291      	uxth	r1, r2
 8004ef8:	4a02      	ldr	r2, [pc, #8]	; (8004f04 <adachi_map+0x63c>)
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	4403      	add	r3, r0
 8004efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004f02:	e012      	b.n	8004f2a <adachi_map+0x662>
 8004f04:	20000a94 	.word	0x20000a94
 8004f08:	20019350 	.word	0x20019350
			} else {
				step_map[x_adachi - 1][y_adachi] = step + 1;
 8004f0c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004f16:	4610      	mov	r0, r2
 8004f18:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004f1c:	3201      	adds	r2, #1
 8004f1e:	b291      	uxth	r1, r2
 8004f20:	4a99      	ldr	r2, [pc, #612]	; (8005188 <adachi_map+0x8c0>)
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4403      	add	r3, r0
 8004f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			queue_push(&q, x_adachi - 1, y_adachi);
 8004f2a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b2d9      	uxtb	r1, r3
 8004f32:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fc94 	bl	8004868 <queue_push>
			flag = 10;
 8004f40:	4b92      	ldr	r3, [pc, #584]	; (800518c <adachi_map+0x8c4>)
 8004f42:	220a      	movs	r2, #10
 8004f44:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata) == 0)
 8004f46:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f50:	4619      	mov	r1, r3
 8004f52:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004f56:	2202      	movs	r2, #2
 8004f58:	f007 fa24 	bl	800c3a4 <getWall>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d179      	bne.n	8005056 <adachi_map+0x78e>
				&& (step_map[x_adachi][y_adachi - 1] > step + 1)
 8004f62:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f66:	461a      	mov	r2, r3
 8004f68:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4986      	ldr	r1, [pc, #536]	; (8005188 <adachi_map+0x8c0>)
 8004f70:	0112      	lsls	r2, r2, #4
 8004f72:	4413      	add	r3, r2
 8004f74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004f7e:	3301      	adds	r3, #1
 8004f80:	429a      	cmp	r2, r3
 8004f82:	dd68      	ble.n	8005056 <adachi_map+0x78e>
				&& ((y_adachi - 1) >= 0)) {
 8004f84:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db63      	blt.n	8005056 <adachi_map+0x78e>
			if (((step_map[x_adachi][y_adachi + 1] == step - 1)
 8004f8e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f92:	461a      	mov	r2, r3
 8004f94:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f98:	3301      	adds	r3, #1
 8004f9a:	497b      	ldr	r1, [pc, #492]	; (8005188 <adachi_map+0x8c0>)
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004faa:	3b01      	subs	r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d010      	beq.n	8004fd2 <adachi_map+0x70a>
					|| (step_map[x_adachi][y_adachi + 1] == step - 2))
 8004fb0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4972      	ldr	r1, [pc, #456]	; (8005188 <adachi_map+0x8c0>)
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d123      	bne.n	800501a <adachi_map+0x752>
					&& (y_adachi + 1) < 16
 8004fd2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	dc1e      	bgt.n	800501a <adachi_map+0x752>
					&& getWall(x_adachi, y_adachi, North, &walldata) == 0) {
 8004fdc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004fec:	2200      	movs	r2, #0
 8004fee:	f007 f9d9 	bl	800c3a4 <getWall>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <adachi_map+0x752>
				step_map[x_adachi][y_adachi - 1] = step + 1;
 8004ff8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005002:	3b01      	subs	r3, #1
 8005004:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005008:	3201      	adds	r2, #1
 800500a:	b290      	uxth	r0, r2
 800500c:	495e      	ldr	r1, [pc, #376]	; (8005188 <adachi_map+0x8c0>)
 800500e:	0122      	lsls	r2, r4, #4
 8005010:	4413      	add	r3, r2
 8005012:	4602      	mov	r2, r0
 8005014:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005018:	e00f      	b.n	800503a <adachi_map+0x772>
			} else {
				step_map[x_adachi][y_adachi - 1] = step + 1;
 800501a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800501e:	461c      	mov	r4, r3
 8005020:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005024:	3b01      	subs	r3, #1
 8005026:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800502a:	3201      	adds	r2, #1
 800502c:	b290      	uxth	r0, r2
 800502e:	4956      	ldr	r1, [pc, #344]	; (8005188 <adachi_map+0x8c0>)
 8005030:	0122      	lsls	r2, r4, #4
 8005032:	4413      	add	r3, r2
 8005034:	4602      	mov	r2, r0
 8005036:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi - 1);
 800503a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800503e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005042:	3b01      	subs	r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fc0c 	bl	8004868 <queue_push>
			flag = 10;
 8005050:	4b4e      	ldr	r3, [pc, #312]	; (800518c <adachi_map+0x8c4>)
 8005052:	220a      	movs	r2, #10
 8005054:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata) == 0)
 8005056:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800505a:	4618      	mov	r0, r3
 800505c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005060:	4619      	mov	r1, r3
 8005062:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005066:	2203      	movs	r2, #3
 8005068:	f007 f99c 	bl	800c3a4 <getWall>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d177      	bne.n	8005162 <adachi_map+0x89a>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 8005072:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005076:	3301      	adds	r3, #1
 8005078:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800507c:	4611      	mov	r1, r2
 800507e:	4a42      	ldr	r2, [pc, #264]	; (8005188 <adachi_map+0x8c0>)
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	440b      	add	r3, r1
 8005084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005088:	461a      	mov	r2, r3
 800508a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800508e:	3301      	adds	r3, #1
 8005090:	429a      	cmp	r2, r3
 8005092:	dd66      	ble.n	8005162 <adachi_map+0x89a>
				&& ((x_adachi + 1) < 16)) {
 8005094:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005098:	3301      	adds	r3, #1
 800509a:	2b0f      	cmp	r3, #15
 800509c:	dc61      	bgt.n	8005162 <adachi_map+0x89a>
			if (((step_map[x_adachi - 1][y_adachi] == step - 1)
 800509e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80050a8:	4611      	mov	r1, r2
 80050aa:	4a37      	ldr	r2, [pc, #220]	; (8005188 <adachi_map+0x8c0>)
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	440b      	add	r3, r1
 80050b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80050ba:	3b01      	subs	r3, #1
 80050bc:	429a      	cmp	r2, r3
 80050be:	d010      	beq.n	80050e2 <adachi_map+0x81a>
					|| (step_map[x_adachi - 1][y_adachi] == step - 2))
 80050c0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80050ca:	4611      	mov	r1, r2
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <adachi_map+0x8c0>)
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	440b      	add	r3, r1
 80050d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80050dc:	3b02      	subs	r3, #2
 80050de:	429a      	cmp	r2, r3
 80050e0:	d122      	bne.n	8005128 <adachi_map+0x860>
					&& (x_adachi - 1) >= 0
 80050e2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050e6:	3b01      	subs	r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db1d      	blt.n	8005128 <adachi_map+0x860>
					&& getWall(x_adachi, y_adachi, West, &walldata) == 0) {
 80050ec:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050f0:	4618      	mov	r0, r3
 80050f2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80050f6:	4619      	mov	r1, r3
 80050f8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80050fc:	2201      	movs	r2, #1
 80050fe:	f007 f951 	bl	800c3a4 <getWall>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <adachi_map+0x860>
				step_map[x_adachi + 1][y_adachi] = step + 1;
 8005108:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800510c:	3301      	adds	r3, #1
 800510e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005112:	4610      	mov	r0, r2
 8005114:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005118:	3201      	adds	r2, #1
 800511a:	b291      	uxth	r1, r2
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <adachi_map+0x8c0>)
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4403      	add	r3, r0
 8005122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005126:	e00e      	b.n	8005146 <adachi_map+0x87e>
			} else {
				step_map[x_adachi + 1][y_adachi] = step + 1;
 8005128:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800512c:	3301      	adds	r3, #1
 800512e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005132:	4610      	mov	r0, r2
 8005134:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005138:	3201      	adds	r2, #1
 800513a:	b291      	uxth	r1, r2
 800513c:	4a12      	ldr	r2, [pc, #72]	; (8005188 <adachi_map+0x8c0>)
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4403      	add	r3, r0
 8005142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			queue_push(&q, x_adachi + 1, y_adachi);
 8005146:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800514a:	3301      	adds	r3, #1
 800514c:	b2d9      	uxtb	r1, r3
 800514e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fb86 	bl	8004868 <queue_push>
			flag = 10;
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <adachi_map+0x8c4>)
 800515e:	220a      	movs	r2, #10
 8005160:	701a      	strb	r2, [r3, #0]
		}
//		//myprintf("fast	%d,%d,%d,%d\n", x_adachi, y_adachi, q.head, q.tail);
	} while (q.tail != q.head);
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8005172:	429a      	cmp	r2, r3
 8005174:	f47f adbd 	bne.w	8004cf2 <adachi_map+0x42a>
}
 8005178:	bf00      	nop
 800517a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005184:	b002      	add	sp, #8
 8005186:	4770      	bx	lr
 8005188:	20000a94 	.word	0x20000a94
 800518c:	20019350 	.word	0x20019350

08005190 <adachi_map_straight>:

void adachi_map_straight(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata) {
 8005190:	b082      	sub	sp, #8
 8005192:	b590      	push	{r4, r7, lr}
 8005194:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8005198:	af00      	add	r7, sp, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	4622      	mov	r2, r4
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	1dbb      	adds	r3, r7, #6
 80051ac:	4602      	mov	r2, r0
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	1d7b      	adds	r3, r7, #5
 80051b2:	460a      	mov	r2, r1
 80051b4:	701a      	strb	r2, [r3, #0]
	uint16_t step;
	queue_t q;
//	uint8_t test = 0;

//	moter_flag = 1;
	q.head = 0;
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80051d0:	e01f      	b.n	8005212 <adachi_map_straight+0x82>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 80051d8:	e011      	b.n	80051fe <adachi_map_straight+0x6e>
			step_map[x_adachi][y_adachi] = 999;
 80051da:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80051de:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80051e2:	4611      	mov	r1, r2
 80051e4:	4aa4      	ldr	r2, [pc, #656]	; (8005478 <adachi_map_straight+0x2e8>)
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	440b      	add	r3, r1
 80051ea:	f240 31e7 	movw	r1, #999	; 0x3e7
 80051ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 80051f2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 80051fe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005202:	2b0f      	cmp	r3, #15
 8005204:	d9e9      	bls.n	80051da <adachi_map_straight+0x4a>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8005206:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800520a:	3301      	adds	r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8005212:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d9db      	bls.n	80051d2 <adachi_map_straight+0x42>
		}
	}

	if (goal_scale == 1) {
 800521a:	1d7b      	adds	r3, r7, #5
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11e      	bne.n	8005260 <adachi_map_straight+0xd0>
		step_map[goal_x][goal_y] = 0;
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4993      	ldr	r1, [pc, #588]	; (8005478 <adachi_map_straight+0x2e8>)
 800522c:	0112      	lsls	r2, r2, #4
 800522e:	4413      	add	r3, r2
 8005230:	2200      	movs	r2, #0
 8005232:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 800524c:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005250:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fb05 	bl	8004868 <queue_push>
 800525e:	e088      	b.n	8005372 <adachi_map_straight+0x1e2>
	} else if (goal_scale == 4) {
 8005260:	1d7b      	adds	r3, r7, #5
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	f040 8084 	bne.w	8005372 <adachi_map_straight+0x1e2>
		step_map[goal_x][goal_y] = 0;
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	1dbb      	adds	r3, r7, #6
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	4981      	ldr	r1, [pc, #516]	; (8005478 <adachi_map_straight+0x2e8>)
 8005274:	0112      	lsls	r2, r2, #4
 8005276:	4413      	add	r3, r2
 8005278:	2200      	movs	r2, #0
 800527a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005294:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005298:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fae1 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 80052a6:	1dfb      	adds	r3, r7, #7
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	1dbb      	adds	r3, r7, #6
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4971      	ldr	r1, [pc, #452]	; (8005478 <adachi_map_straight+0x2e8>)
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 80052bc:	1dfb      	adds	r3, r7, #7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 80052d6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80052da:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fac0 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	1dbb      	adds	r3, r7, #6
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	4961      	ldr	r1, [pc, #388]	; (8005478 <adachi_map_straight+0x2e8>)
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 80052fe:	1dfb      	adds	r3, r7, #7
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8005306:	1dbb      	adds	r3, r7, #6
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005318:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800531c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fa9f 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 800532a:	1dfb      	adds	r3, r7, #7
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4950      	ldr	r1, [pc, #320]	; (8005478 <adachi_map_straight+0x2e8>)
 8005338:	0112      	lsls	r2, r2, #4
 800533a:	4413      	add	r3, r2
 800533c:	2200      	movs	r2, #0
 800533e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 800534e:	1dbb      	adds	r3, r7, #6
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005360:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005364:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa7b 	bl	8004868 <queue_push>
	}
	do {
		flag = 0;
 8005372:	4b42      	ldr	r3, [pc, #264]	; (800547c <adachi_map_straight+0x2ec>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
		queue_pop(&q, &x_adachi, &y_adachi);
 8005378:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800537c:	f207 210d 	addw	r1, r7, #525	; 0x20d
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fa3d 	bl	8004804 <queue_pop>
//		while (step + 3 < step_map[x_adachi][y_adachi]) {
//			queue_push(&q, x_adachi, y_adachi);
//			queue_pop(&q, &x_adachi, &y_adachi);
//		}

		step = step_map[x_adachi][y_adachi];
 800538a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800538e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005392:	4611      	mov	r1, r2
 8005394:	4a38      	ldr	r2, [pc, #224]	; (8005478 <adachi_map_straight+0x2e8>)
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	440b      	add	r3, r1
 800539a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

//////

		if ((getWall(x_adachi, y_adachi, North, &walldata) == 0)
 80053a2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053a6:	4618      	mov	r0, r3
 80053a8:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053ac:	4619      	mov	r1, r3
 80053ae:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80053b2:	2200      	movs	r2, #0
 80053b4:	f006 fff6 	bl	800c3a4 <getWall>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d17e      	bne.n	80054bc <adachi_map_straight+0x32c>
				&& (step_map[x_adachi][y_adachi + 1] > step + 1)
 80053be:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053c2:	461a      	mov	r2, r3
 80053c4:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053c8:	3301      	adds	r3, #1
 80053ca:	492b      	ldr	r1, [pc, #172]	; (8005478 <adachi_map_straight+0x2e8>)
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	4413      	add	r3, r2
 80053d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80053da:	3301      	adds	r3, #1
 80053dc:	429a      	cmp	r2, r3
 80053de:	dd6d      	ble.n	80054bc <adachi_map_straight+0x32c>
				&& ((y_adachi + 1) < 16)) {
 80053e0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053e4:	3301      	adds	r3, #1
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	dc68      	bgt.n	80054bc <adachi_map_straight+0x32c>
			if (((step_map[x_adachi][y_adachi - 1] == step - 1)
 80053ea:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053ee:	461a      	mov	r2, r3
 80053f0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053f4:	3b01      	subs	r3, #1
 80053f6:	4920      	ldr	r1, [pc, #128]	; (8005478 <adachi_map_straight+0x2e8>)
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005400:	461a      	mov	r2, r3
 8005402:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005406:	3b01      	subs	r3, #1
 8005408:	429a      	cmp	r2, r3
 800540a:	d010      	beq.n	800542e <adachi_map_straight+0x29e>
					|| (step_map[x_adachi][y_adachi - 1] == step - 2))
 800540c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005410:	461a      	mov	r2, r3
 8005412:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005416:	3b01      	subs	r3, #1
 8005418:	4917      	ldr	r1, [pc, #92]	; (8005478 <adachi_map_straight+0x2e8>)
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	4413      	add	r3, r2
 800541e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005422:	461a      	mov	r2, r3
 8005424:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005428:	3b02      	subs	r3, #2
 800542a:	429a      	cmp	r2, r3
 800542c:	d128      	bne.n	8005480 <adachi_map_straight+0x2f0>
					&& (y_adachi - 1) >= 0
 800542e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005432:	3b01      	subs	r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	db23      	blt.n	8005480 <adachi_map_straight+0x2f0>
					&& getWall(x_adachi, y_adachi, South, &walldata) == 0) {
 8005438:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800543c:	4618      	mov	r0, r3
 800543e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005442:	4619      	mov	r1, r3
 8005444:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005448:	2202      	movs	r2, #2
 800544a:	f006 ffab 	bl	800c3a4 <getWall>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d115      	bne.n	8005480 <adachi_map_straight+0x2f0>
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8005454:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005458:	461c      	mov	r4, r3
 800545a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800545e:	3301      	adds	r3, #1
 8005460:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005464:	3201      	adds	r2, #1
 8005466:	b290      	uxth	r0, r2
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <adachi_map_straight+0x2e8>)
 800546a:	0122      	lsls	r2, r4, #4
 800546c:	4413      	add	r3, r2
 800546e:	4602      	mov	r2, r0
 8005470:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005474:	e014      	b.n	80054a0 <adachi_map_straight+0x310>
 8005476:	bf00      	nop
 8005478:	20000a94 	.word	0x20000a94
 800547c:	20019350 	.word	0x20019350
			} else {
				step_map[x_adachi][y_adachi + 1] = step + 2;
 8005480:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005484:	461c      	mov	r4, r3
 8005486:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800548a:	3301      	adds	r3, #1
 800548c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005490:	3202      	adds	r2, #2
 8005492:	b290      	uxth	r0, r2
 8005494:	49dd      	ldr	r1, [pc, #884]	; (800580c <adachi_map_straight+0x67c>)
 8005496:	0122      	lsls	r2, r4, #4
 8005498:	4413      	add	r3, r2
 800549a:	4602      	mov	r2, r0
 800549c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi + 1);
 80054a0:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80054a4:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80054a8:	3301      	adds	r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f9d9 	bl	8004868 <queue_push>
			flag = 10;
 80054b6:	4bd6      	ldr	r3, [pc, #856]	; (8005810 <adachi_map_straight+0x680>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata) == 0)
 80054bc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054c0:	4618      	mov	r0, r3
 80054c2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80054c6:	4619      	mov	r1, r3
 80054c8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80054cc:	2201      	movs	r2, #1
 80054ce:	f006 ff69 	bl	800c3a4 <getWall>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d177      	bne.n	80055c8 <adachi_map_straight+0x438>
				&& (step_map[x_adachi - 1][y_adachi] > step + 1)
 80054d8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054dc:	3b01      	subs	r3, #1
 80054de:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80054e2:	4611      	mov	r1, r2
 80054e4:	4ac9      	ldr	r2, [pc, #804]	; (800580c <adachi_map_straight+0x67c>)
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	440b      	add	r3, r1
 80054ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80054f4:	3301      	adds	r3, #1
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dd66      	ble.n	80055c8 <adachi_map_straight+0x438>
				&& ((x_adachi - 1) >= 0)) {
 80054fa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054fe:	3b01      	subs	r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	db61      	blt.n	80055c8 <adachi_map_straight+0x438>
			if (((step_map[x_adachi + 1][y_adachi] == step - 1)
 8005504:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005508:	3301      	adds	r3, #1
 800550a:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800550e:	4611      	mov	r1, r2
 8005510:	4abe      	ldr	r2, [pc, #760]	; (800580c <adachi_map_straight+0x67c>)
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	440b      	add	r3, r1
 8005516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551a:	461a      	mov	r2, r3
 800551c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005520:	3b01      	subs	r3, #1
 8005522:	429a      	cmp	r2, r3
 8005524:	d010      	beq.n	8005548 <adachi_map_straight+0x3b8>
					|| (step_map[x_adachi + 1][y_adachi] == step - 2))
 8005526:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800552a:	3301      	adds	r3, #1
 800552c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005530:	4611      	mov	r1, r2
 8005532:	4ab6      	ldr	r2, [pc, #728]	; (800580c <adachi_map_straight+0x67c>)
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	440b      	add	r3, r1
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005542:	3b02      	subs	r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d122      	bne.n	800558e <adachi_map_straight+0x3fe>
					&& (x_adachi + 1) < 16
 8005548:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800554c:	3301      	adds	r3, #1
 800554e:	2b0f      	cmp	r3, #15
 8005550:	dc1d      	bgt.n	800558e <adachi_map_straight+0x3fe>
					&& getWall(x_adachi, y_adachi, East, &walldata) == 0) {
 8005552:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005556:	4618      	mov	r0, r3
 8005558:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800555c:	4619      	mov	r1, r3
 800555e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005562:	2203      	movs	r2, #3
 8005564:	f006 ff1e 	bl	800c3a4 <getWall>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <adachi_map_straight+0x3fe>
				step_map[x_adachi - 1][y_adachi] = step + 1;
 800556e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005572:	3b01      	subs	r3, #1
 8005574:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005578:	4610      	mov	r0, r2
 800557a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800557e:	3201      	adds	r2, #1
 8005580:	b291      	uxth	r1, r2
 8005582:	4aa2      	ldr	r2, [pc, #648]	; (800580c <adachi_map_straight+0x67c>)
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4403      	add	r3, r0
 8005588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800558c:	e00e      	b.n	80055ac <adachi_map_straight+0x41c>
			} else {
				step_map[x_adachi - 1][y_adachi] = step + 2;
 800558e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005592:	3b01      	subs	r3, #1
 8005594:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005598:	4610      	mov	r0, r2
 800559a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800559e:	3202      	adds	r2, #2
 80055a0:	b291      	uxth	r1, r2
 80055a2:	4a9a      	ldr	r2, [pc, #616]	; (800580c <adachi_map_straight+0x67c>)
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	4403      	add	r3, r0
 80055a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			queue_push(&q, x_adachi - 1, y_adachi);
 80055ac:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2d9      	uxtb	r1, r3
 80055b4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff f953 	bl	8004868 <queue_push>
			flag = 10;
 80055c2:	4b93      	ldr	r3, [pc, #588]	; (8005810 <adachi_map_straight+0x680>)
 80055c4:	220a      	movs	r2, #10
 80055c6:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata) == 0)
 80055c8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055cc:	4618      	mov	r0, r3
 80055ce:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80055d2:	4619      	mov	r1, r3
 80055d4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80055d8:	2202      	movs	r2, #2
 80055da:	f006 fee3 	bl	800c3a4 <getWall>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d179      	bne.n	80056d8 <adachi_map_straight+0x548>
				&& (step_map[x_adachi][y_adachi - 1] > step + 1)
 80055e4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055e8:	461a      	mov	r2, r3
 80055ea:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80055ee:	3b01      	subs	r3, #1
 80055f0:	4986      	ldr	r1, [pc, #536]	; (800580c <adachi_map_straight+0x67c>)
 80055f2:	0112      	lsls	r2, r2, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005600:	3301      	adds	r3, #1
 8005602:	429a      	cmp	r2, r3
 8005604:	dd68      	ble.n	80056d8 <adachi_map_straight+0x548>
				&& ((y_adachi - 1) >= 0)) {
 8005606:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800560a:	3b01      	subs	r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	db63      	blt.n	80056d8 <adachi_map_straight+0x548>
			if (((step_map[x_adachi][y_adachi + 1] == step - 1)
 8005610:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005614:	461a      	mov	r2, r3
 8005616:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800561a:	3301      	adds	r3, #1
 800561c:	497b      	ldr	r1, [pc, #492]	; (800580c <adachi_map_straight+0x67c>)
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	4413      	add	r3, r2
 8005622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005626:	461a      	mov	r2, r3
 8005628:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800562c:	3b01      	subs	r3, #1
 800562e:	429a      	cmp	r2, r3
 8005630:	d010      	beq.n	8005654 <adachi_map_straight+0x4c4>
					|| (step_map[x_adachi][y_adachi + 1] == step - 2))
 8005632:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005636:	461a      	mov	r2, r3
 8005638:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800563c:	3301      	adds	r3, #1
 800563e:	4973      	ldr	r1, [pc, #460]	; (800580c <adachi_map_straight+0x67c>)
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	4413      	add	r3, r2
 8005644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005648:	461a      	mov	r2, r3
 800564a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800564e:	3b02      	subs	r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d123      	bne.n	800569c <adachi_map_straight+0x50c>
					&& (y_adachi + 1) < 16
 8005654:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005658:	3301      	adds	r3, #1
 800565a:	2b0f      	cmp	r3, #15
 800565c:	dc1e      	bgt.n	800569c <adachi_map_straight+0x50c>
					&& getWall(x_adachi, y_adachi, North, &walldata) == 0) {
 800565e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005662:	4618      	mov	r0, r3
 8005664:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005668:	4619      	mov	r1, r3
 800566a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800566e:	2200      	movs	r2, #0
 8005670:	f006 fe98 	bl	800c3a4 <getWall>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d110      	bne.n	800569c <adachi_map_straight+0x50c>
				step_map[x_adachi][y_adachi - 1] = step + 1;
 800567a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800567e:	461c      	mov	r4, r3
 8005680:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005684:	3b01      	subs	r3, #1
 8005686:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800568a:	3201      	adds	r2, #1
 800568c:	b290      	uxth	r0, r2
 800568e:	495f      	ldr	r1, [pc, #380]	; (800580c <adachi_map_straight+0x67c>)
 8005690:	0122      	lsls	r2, r4, #4
 8005692:	4413      	add	r3, r2
 8005694:	4602      	mov	r2, r0
 8005696:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800569a:	e00f      	b.n	80056bc <adachi_map_straight+0x52c>
			} else {
				step_map[x_adachi][y_adachi - 1] = step + 2;
 800569c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056a0:	461c      	mov	r4, r3
 80056a2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80056ac:	3202      	adds	r2, #2
 80056ae:	b290      	uxth	r0, r2
 80056b0:	4956      	ldr	r1, [pc, #344]	; (800580c <adachi_map_straight+0x67c>)
 80056b2:	0122      	lsls	r2, r4, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	4602      	mov	r2, r0
 80056b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi - 1);
 80056bc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80056c0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff f8cb 	bl	8004868 <queue_push>
			flag = 10;
 80056d2:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <adachi_map_straight+0x680>)
 80056d4:	220a      	movs	r2, #10
 80056d6:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata) == 0)
 80056d8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056dc:	4618      	mov	r0, r3
 80056de:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056e2:	4619      	mov	r1, r3
 80056e4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80056e8:	2203      	movs	r2, #3
 80056ea:	f006 fe5b 	bl	800c3a4 <getWall>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d177      	bne.n	80057e4 <adachi_map_straight+0x654>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 80056f4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056f8:	3301      	adds	r3, #1
 80056fa:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80056fe:	4611      	mov	r1, r2
 8005700:	4a42      	ldr	r2, [pc, #264]	; (800580c <adachi_map_straight+0x67c>)
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	440b      	add	r3, r1
 8005706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570a:	461a      	mov	r2, r3
 800570c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005710:	3301      	adds	r3, #1
 8005712:	429a      	cmp	r2, r3
 8005714:	dd66      	ble.n	80057e4 <adachi_map_straight+0x654>
				&& ((x_adachi + 1) < 16)) {
 8005716:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800571a:	3301      	adds	r3, #1
 800571c:	2b0f      	cmp	r3, #15
 800571e:	dc61      	bgt.n	80057e4 <adachi_map_straight+0x654>
			if (((step_map[x_adachi - 1][y_adachi] == step - 1)
 8005720:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005724:	3b01      	subs	r3, #1
 8005726:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800572a:	4611      	mov	r1, r2
 800572c:	4a37      	ldr	r2, [pc, #220]	; (800580c <adachi_map_straight+0x67c>)
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	440b      	add	r3, r1
 8005732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005736:	461a      	mov	r2, r3
 8005738:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800573c:	3b01      	subs	r3, #1
 800573e:	429a      	cmp	r2, r3
 8005740:	d010      	beq.n	8005764 <adachi_map_straight+0x5d4>
					|| (step_map[x_adachi - 1][y_adachi] == step - 2))
 8005742:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005746:	3b01      	subs	r3, #1
 8005748:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800574c:	4611      	mov	r1, r2
 800574e:	4a2f      	ldr	r2, [pc, #188]	; (800580c <adachi_map_straight+0x67c>)
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	440b      	add	r3, r1
 8005754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005758:	461a      	mov	r2, r3
 800575a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800575e:	3b02      	subs	r3, #2
 8005760:	429a      	cmp	r2, r3
 8005762:	d122      	bne.n	80057aa <adachi_map_straight+0x61a>
					&& (x_adachi - 1) >= 0
 8005764:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005768:	3b01      	subs	r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	db1d      	blt.n	80057aa <adachi_map_straight+0x61a>
					&& getWall(x_adachi, y_adachi, West, &walldata) == 0) {
 800576e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005772:	4618      	mov	r0, r3
 8005774:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005778:	4619      	mov	r1, r3
 800577a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800577e:	2201      	movs	r2, #1
 8005780:	f006 fe10 	bl	800c3a4 <getWall>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <adachi_map_straight+0x61a>
				step_map[x_adachi + 1][y_adachi] = step + 1;
 800578a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800578e:	3301      	adds	r3, #1
 8005790:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005794:	4610      	mov	r0, r2
 8005796:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800579a:	3201      	adds	r2, #1
 800579c:	b291      	uxth	r1, r2
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <adachi_map_straight+0x67c>)
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	4403      	add	r3, r0
 80057a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80057a8:	e00e      	b.n	80057c8 <adachi_map_straight+0x638>
			} else {
				step_map[x_adachi + 1][y_adachi] = step + 2;
 80057aa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80057ae:	3301      	adds	r3, #1
 80057b0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80057b4:	4610      	mov	r0, r2
 80057b6:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80057ba:	3202      	adds	r2, #2
 80057bc:	b291      	uxth	r1, r2
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <adachi_map_straight+0x67c>)
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	4403      	add	r3, r0
 80057c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			queue_push(&q, x_adachi + 1, y_adachi);
 80057c8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2d9      	uxtb	r1, r3
 80057d0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff f845 	bl	8004868 <queue_push>
			flag = 10;
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <adachi_map_straight+0x680>)
 80057e0:	220a      	movs	r2, #10
 80057e2:	701a      	strb	r2, [r3, #0]
		}
//		//myprintf("fast	%d,%d,%d,%d\n", x_adachi, y_adachi, q.head, q.tail);
	} while (q.tail != q.head);
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 80057ec:	f107 0308 	add.w	r3, r7, #8
 80057f0:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f47f adbc 	bne.w	8005372 <adachi_map_straight+0x1e2>
}
 80057fa:	bf00      	nop
 80057fc:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005806:	b002      	add	sp, #8
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000a94 	.word	0x20000a94
 8005810:	20019350 	.word	0x20019350

08005814 <how_to_move>:
		coordinate();
		addWall();
	}
}

uint8_t how_to_move(uint8_t direction, int8_t x, int8_t y, singlewalldata_t walldata) {
 8005814:	b082      	sub	sp, #8
 8005816:	b590      	push	{r4, r7, lr}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
 8005822:	460b      	mov	r3, r1
 8005824:	71bb      	strb	r3, [r7, #6]
 8005826:	4613      	mov	r3, r2
 8005828:	717b      	strb	r3, [r7, #5]
	uint8_t flag, i;
	int8_t a, b;
	uint16_t step;
	if (direction == North) {
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <how_to_move+0x2a>
		i = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	73bb      	strb	r3, [r7, #14]
		a = 1;
 8005834:	2301      	movs	r3, #1
 8005836:	737b      	strb	r3, [r7, #13]
		b = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	733b      	strb	r3, [r7, #12]
 800583c:	e01c      	b.n	8005878 <how_to_move+0x64>
	} else if (direction == West) {
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <how_to_move+0x3e>
		i = 1;
 8005844:	2301      	movs	r3, #1
 8005846:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	737b      	strb	r3, [r7, #13]
		b = 1;
 800584c:	2301      	movs	r3, #1
 800584e:	733b      	strb	r3, [r7, #12]
 8005850:	e012      	b.n	8005878 <how_to_move+0x64>
	} else if (direction == South) {
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d106      	bne.n	8005866 <how_to_move+0x52>
		i = 2;
 8005858:	2302      	movs	r3, #2
 800585a:	73bb      	strb	r3, [r7, #14]
		a = -1;
 800585c:	23ff      	movs	r3, #255	; 0xff
 800585e:	737b      	strb	r3, [r7, #13]
		b = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	733b      	strb	r3, [r7, #12]
 8005864:	e008      	b.n	8005878 <how_to_move+0x64>
	} else if (direction == East) {
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d105      	bne.n	8005878 <how_to_move+0x64>
		i = 3;
 800586c:	2303      	movs	r3, #3
 800586e:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	737b      	strb	r3, [r7, #13]
		b = -1;
 8005874:	23ff      	movs	r3, #255	; 0xff
 8005876:	733b      	strb	r3, [r7, #12]
	}
	if ((y - a >= 0) && (x + b < 16)) {
 8005878:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800587c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	db53      	blt.n	800592e <how_to_move+0x11a>
 8005886:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800588a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	2b0f      	cmp	r3, #15
 8005892:	dc4c      	bgt.n	800592e <how_to_move+0x11a>
		if ((getWall(x, y, (North + i) % 4, &walldata) == 1)
 8005894:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005898:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	f003 0203 	and.w	r2, r3, #3
 80058a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a6:	f006 fd7d 	bl	800c3a4 <getWall>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d12c      	bne.n	800590a <how_to_move+0xf6>
				&& (getWall(x, y, (East + i) % 4, &walldata) == 1)
 80058b0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80058b4:	f997 4005 	ldrsb.w	r4, [r7, #5]
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	3303      	adds	r3, #3
 80058bc:	4259      	negs	r1, r3
 80058be:	f003 0203 	and.w	r2, r3, #3
 80058c2:	f001 0303 	and.w	r3, r1, #3
 80058c6:	bf58      	it	pl
 80058c8:	425a      	negpl	r2, r3
 80058ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ce:	4621      	mov	r1, r4
 80058d0:	f006 fd68 	bl	800c3a4 <getWall>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d117      	bne.n	800590a <how_to_move+0xf6>
				&& (getWall(x, y, (West + i) % 4, &walldata) == 1)) {
 80058da:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80058de:	f997 4005 	ldrsb.w	r4, [r7, #5]
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4259      	negs	r1, r3
 80058e8:	f003 0203 	and.w	r2, r3, #3
 80058ec:	f001 0303 	and.w	r3, r1, #3
 80058f0:	bf58      	it	pl
 80058f2:	425a      	negpl	r2, r3
 80058f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f8:	4621      	mov	r1, r4
 80058fa:	f006 fd53 	bl	800c3a4 <getWall>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d102      	bne.n	800590a <how_to_move+0xf6>
			flag = 2;
 8005904:	2302      	movs	r3, #2
 8005906:	73fb      	strb	r3, [r7, #15]
 8005908:	e001      	b.n	800590e <how_to_move+0xfa>
		} else {
			flag = 4;
 800590a:	2304      	movs	r3, #4
 800590c:	73fb      	strb	r3, [r7, #15]
		}
		step = step_map[x + b][y - a];
 800590e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005912:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005916:	441a      	add	r2, r3
 8005918:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800591c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005920:	1acb      	subs	r3, r1, r3
 8005922:	496e      	ldr	r1, [pc, #440]	; (8005adc <how_to_move+0x2c8>)
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	4413      	add	r3, r2
 8005928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800592c:	817b      	strh	r3, [r7, #10]
	}
	if ((x - a >= 0) && (y - b >= 0)
 800592e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005932:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	db3f      	blt.n	80059bc <how_to_move+0x1a8>
 800593c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005940:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	db38      	blt.n	80059bc <how_to_move+0x1a8>
			&& (getWall(x, y, (West + i) % 4, &walldata) == 0)) {
 800594a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800594e:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	3301      	adds	r3, #1
 8005956:	4259      	negs	r1, r3
 8005958:	f003 0203 	and.w	r2, r3, #3
 800595c:	f001 0303 	and.w	r3, r1, #3
 8005960:	bf58      	it	pl
 8005962:	425a      	negpl	r2, r3
 8005964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005968:	4621      	mov	r1, r4
 800596a:	f006 fd1b 	bl	800c3a4 <getWall>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d123      	bne.n	80059bc <how_to_move+0x1a8>
		if (step_map[x - a][y - b] <= step) {
 8005974:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005978:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800597c:	1ad2      	subs	r2, r2, r3
 800597e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005982:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005986:	1acb      	subs	r3, r1, r3
 8005988:	4954      	ldr	r1, [pc, #336]	; (8005adc <how_to_move+0x2c8>)
 800598a:	0112      	lsls	r2, r2, #4
 800598c:	4413      	add	r3, r2
 800598e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005992:	897a      	ldrh	r2, [r7, #10]
 8005994:	429a      	cmp	r2, r3
 8005996:	d311      	bcc.n	80059bc <how_to_move+0x1a8>
			flag = 1;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - a][y - b];
 800599c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80059a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80059aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	494a      	ldr	r1, [pc, #296]	; (8005adc <how_to_move+0x2c8>)
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	4413      	add	r3, r2
 80059b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80059ba:	817b      	strh	r3, [r7, #10]
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 80059bc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80059c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80059c4:	4413      	add	r3, r2
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	dc3f      	bgt.n	8005a4a <how_to_move+0x236>
 80059ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80059ce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	2b0f      	cmp	r3, #15
 80059d6:	dc38      	bgt.n	8005a4a <how_to_move+0x236>
			&& (getWall(x, y, (East + i) % 4, &walldata) == 0)) {
 80059d8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80059dc:	f997 4005 	ldrsb.w	r4, [r7, #5]
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	3303      	adds	r3, #3
 80059e4:	4259      	negs	r1, r3
 80059e6:	f003 0203 	and.w	r2, r3, #3
 80059ea:	f001 0303 	and.w	r3, r1, #3
 80059ee:	bf58      	it	pl
 80059f0:	425a      	negpl	r2, r3
 80059f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f6:	4621      	mov	r1, r4
 80059f8:	f006 fcd4 	bl	800c3a4 <getWall>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d123      	bne.n	8005a4a <how_to_move+0x236>
		if (step_map[x + a][y + b] <= step) {
 8005a02:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005a0a:	441a      	add	r2, r3
 8005a0c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005a10:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005a14:	440b      	add	r3, r1
 8005a16:	4931      	ldr	r1, [pc, #196]	; (8005adc <how_to_move+0x2c8>)
 8005a18:	0112      	lsls	r2, r2, #4
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005a20:	897a      	ldrh	r2, [r7, #10]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d311      	bcc.n	8005a4a <how_to_move+0x236>
			flag = 3;
 8005a26:	2303      	movs	r3, #3
 8005a28:	73fb      	strb	r3, [r7, #15]
			step = step_map[x + a][y + b];
 8005a2a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005a2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005a32:	441a      	add	r2, r3
 8005a34:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005a38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005a3c:	440b      	add	r3, r1
 8005a3e:	4927      	ldr	r1, [pc, #156]	; (8005adc <how_to_move+0x2c8>)
 8005a40:	0112      	lsls	r2, r2, #4
 8005a42:	4413      	add	r3, r2
 8005a44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005a48:	817b      	strh	r3, [r7, #10]
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 8005a4a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005a4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005a52:	4413      	add	r3, r2
 8005a54:	2b0f      	cmp	r3, #15
 8005a56:	dc38      	bgt.n	8005aca <how_to_move+0x2b6>
 8005a58:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005a5c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	db31      	blt.n	8005aca <how_to_move+0x2b6>
			&& (getWall(x, y, (North + i) % 4, &walldata) == 0)) {
 8005a66:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005a6a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	f003 0203 	and.w	r2, r3, #3
 8005a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a78:	f006 fc94 	bl	800c3a4 <getWall>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d123      	bne.n	8005aca <how_to_move+0x2b6>
		if (step_map[x - b][y + a] <= step) {
 8005a82:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005a86:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005a90:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005a94:	440b      	add	r3, r1
 8005a96:	4911      	ldr	r1, [pc, #68]	; (8005adc <how_to_move+0x2c8>)
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005aa0:	897a      	ldrh	r2, [r7, #10]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d311      	bcc.n	8005aca <how_to_move+0x2b6>
			flag = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - b][y + a];
 8005aaa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005aae:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005ab8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005abc:	440b      	add	r3, r1
 8005abe:	4907      	ldr	r1, [pc, #28]	; (8005adc <how_to_move+0x2c8>)
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005ac8:	817b      	strh	r3, [r7, #10]
		}
	}
	return flag;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ad6:	b002      	add	sp, #8
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000a94 	.word	0x20000a94

08005ae0 <how_to_move_search_known>:
		coordinate();
		addWall();
	}
}

uint8_t how_to_move_search_known(uint8_t direction, int8_t x, int8_t y) {
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	b094      	sub	sp, #80	; 0x50
 8005ae6:	af10      	add	r7, sp, #64	; 0x40
 8005ae8:	4603      	mov	r3, r0
 8005aea:	71fb      	strb	r3, [r7, #7]
 8005aec:	460b      	mov	r3, r1
 8005aee:	71bb      	strb	r3, [r7, #6]
 8005af0:	4613      	mov	r3, r2
 8005af2:	717b      	strb	r3, [r7, #5]
	uint8_t flag, i, known_straight = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	737b      	strb	r3, [r7, #13]
	int8_t a, b;
	uint16_t step;
	if (direction == North) {
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <how_to_move_search_known+0x2c>
		i = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73bb      	strb	r3, [r7, #14]
		a = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	733b      	strb	r3, [r7, #12]
		b = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	72fb      	strb	r3, [r7, #11]
 8005b0a:	e01c      	b.n	8005b46 <how_to_move_search_known+0x66>
	} else if (direction == West) {
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d106      	bne.n	8005b20 <how_to_move_search_known+0x40>
		i = 1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	733b      	strb	r3, [r7, #12]
		b = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
 8005b1e:	e012      	b.n	8005b46 <how_to_move_search_known+0x66>
	} else if (direction == South) {
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d106      	bne.n	8005b34 <how_to_move_search_known+0x54>
		i = 2;
 8005b26:	2302      	movs	r3, #2
 8005b28:	73bb      	strb	r3, [r7, #14]
		a = -1;
 8005b2a:	23ff      	movs	r3, #255	; 0xff
 8005b2c:	733b      	strb	r3, [r7, #12]
		b = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	72fb      	strb	r3, [r7, #11]
 8005b32:	e008      	b.n	8005b46 <how_to_move_search_known+0x66>
	} else if (direction == East) {
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d105      	bne.n	8005b46 <how_to_move_search_known+0x66>
		i = 3;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	733b      	strb	r3, [r7, #12]
		b = -1;
 8005b42:	23ff      	movs	r3, #255	; 0xff
 8005b44:	72fb      	strb	r3, [r7, #11]
	}
	if ((y - a >= 0) && (x + b < 16)) {
 8005b46:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005b4a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db50      	blt.n	8005bf6 <how_to_move_search_known+0x116>
 8005b54:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005b58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	dc49      	bgt.n	8005bf6 <how_to_move_search_known+0x116>
		if ((getWall(x, y, (North + i) % 4, &walldata.real) == 1)
 8005b62:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005b66:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	f003 0203 	and.w	r2, r3, #3
 8005b70:	4bc8      	ldr	r3, [pc, #800]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005b72:	f006 fc17 	bl	800c3a4 <getWall>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d12a      	bne.n	8005bd2 <how_to_move_search_known+0xf2>
				&& (getWall(x, y, (East + i) % 4, &walldata.real) == 1)
 8005b7c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005b80:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	3303      	adds	r3, #3
 8005b88:	4259      	negs	r1, r3
 8005b8a:	f003 0203 	and.w	r2, r3, #3
 8005b8e:	f001 0303 	and.w	r3, r1, #3
 8005b92:	bf58      	it	pl
 8005b94:	425a      	negpl	r2, r3
 8005b96:	4bbf      	ldr	r3, [pc, #764]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f006 fc03 	bl	800c3a4 <getWall>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d116      	bne.n	8005bd2 <how_to_move_search_known+0xf2>
				&& (getWall(x, y, (West + i) % 4, &walldata.real) == 1)) {
 8005ba4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005ba8:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	4259      	negs	r1, r3
 8005bb2:	f003 0203 	and.w	r2, r3, #3
 8005bb6:	f001 0303 	and.w	r3, r1, #3
 8005bba:	bf58      	it	pl
 8005bbc:	425a      	negpl	r2, r3
 8005bbe:	4bb5      	ldr	r3, [pc, #724]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f006 fbef 	bl	800c3a4 <getWall>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <how_to_move_search_known+0xf2>
			flag = 2;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e001      	b.n	8005bd6 <how_to_move_search_known+0xf6>
		} else {
			flag = 4;
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	73fb      	strb	r3, [r7, #15]
		}
		step = step_map[x + b][y - a];
 8005bd6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005bda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bde:	441a      	add	r2, r3
 8005be0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005be4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005be8:	1acb      	subs	r3, r1, r3
 8005bea:	49ab      	ldr	r1, [pc, #684]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005bec:	0112      	lsls	r2, r2, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005bf4:	813b      	strh	r3, [r7, #8]
	}
	if ((x - a >= 0) && (y - b >= 0)
 8005bf6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005bfa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db3e      	blt.n	8005c82 <how_to_move_search_known+0x1a2>
 8005c04:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005c08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db37      	blt.n	8005c82 <how_to_move_search_known+0x1a2>
			&& (getWall(x, y, (West + i) % 4, &walldata.real) == 0)) {
 8005c12:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005c16:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4259      	negs	r1, r3
 8005c20:	f003 0203 	and.w	r2, r3, #3
 8005c24:	f001 0303 	and.w	r3, r1, #3
 8005c28:	bf58      	it	pl
 8005c2a:	425a      	negpl	r2, r3
 8005c2c:	4b99      	ldr	r3, [pc, #612]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005c2e:	4621      	mov	r1, r4
 8005c30:	f006 fbb8 	bl	800c3a4 <getWall>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d123      	bne.n	8005c82 <how_to_move_search_known+0x1a2>
		if (step_map[x - a][y - b] <= step) {
 8005c3a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005c3e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c42:	1ad2      	subs	r2, r2, r3
 8005c44:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005c48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c4c:	1acb      	subs	r3, r1, r3
 8005c4e:	4992      	ldr	r1, [pc, #584]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005c50:	0112      	lsls	r2, r2, #4
 8005c52:	4413      	add	r3, r2
 8005c54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005c58:	893a      	ldrh	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d311      	bcc.n	8005c82 <how_to_move_search_known+0x1a2>
			flag = 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - a][y - b];
 8005c62:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005c66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005c70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c74:	1acb      	subs	r3, r1, r3
 8005c76:	4988      	ldr	r1, [pc, #544]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005c78:	0112      	lsls	r2, r2, #4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005c80:	813b      	strh	r3, [r7, #8]
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 8005c82:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005c86:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	dc3e      	bgt.n	8005d0e <how_to_move_search_known+0x22e>
 8005c90:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005c94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c98:	4413      	add	r3, r2
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	dc37      	bgt.n	8005d0e <how_to_move_search_known+0x22e>
			&& (getWall(x, y, (East + i) % 4, &walldata.real) == 0)) {
 8005c9e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005ca2:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	3303      	adds	r3, #3
 8005caa:	4259      	negs	r1, r3
 8005cac:	f003 0203 	and.w	r2, r3, #3
 8005cb0:	f001 0303 	and.w	r3, r1, #3
 8005cb4:	bf58      	it	pl
 8005cb6:	425a      	negpl	r2, r3
 8005cb8:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005cba:	4621      	mov	r1, r4
 8005cbc:	f006 fb72 	bl	800c3a4 <getWall>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d123      	bne.n	8005d0e <how_to_move_search_known+0x22e>
		if (step_map[x + a][y + b] <= step) {
 8005cc6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005cca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005cce:	441a      	add	r2, r3
 8005cd0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005cd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005cd8:	440b      	add	r3, r1
 8005cda:	496f      	ldr	r1, [pc, #444]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005cdc:	0112      	lsls	r2, r2, #4
 8005cde:	4413      	add	r3, r2
 8005ce0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005ce4:	893a      	ldrh	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d311      	bcc.n	8005d0e <how_to_move_search_known+0x22e>
			flag = 3;
 8005cea:	2303      	movs	r3, #3
 8005cec:	73fb      	strb	r3, [r7, #15]
			step = step_map[x + a][y + b];
 8005cee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005cf2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005cfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d00:	440b      	add	r3, r1
 8005d02:	4965      	ldr	r1, [pc, #404]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005d04:	0112      	lsls	r2, r2, #4
 8005d06:	4413      	add	r3, r2
 8005d08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d0c:	813b      	strh	r3, [r7, #8]
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 8005d0e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005d12:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	dc37      	bgt.n	8005d8c <how_to_move_search_known+0x2ac>
 8005d1c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	db30      	blt.n	8005d8c <how_to_move_search_known+0x2ac>
			&& (getWall(x, y, (North + i) % 4, &walldata.real) == 0)) {
 8005d2a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005d2e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	f003 0203 	and.w	r2, r3, #3
 8005d38:	4b56      	ldr	r3, [pc, #344]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005d3a:	f006 fb33 	bl	800c3a4 <getWall>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d123      	bne.n	8005d8c <how_to_move_search_known+0x2ac>
		if (step_map[x - b][y + a] <= step) {
 8005d44:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d52:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d56:	440b      	add	r3, r1
 8005d58:	494f      	ldr	r1, [pc, #316]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005d5a:	0112      	lsls	r2, r2, #4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d62:	893a      	ldrh	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d311      	bcc.n	8005d8c <how_to_move_search_known+0x2ac>
			flag = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - b][y + a];
 8005d6c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d7e:	440b      	add	r3, r1
 8005d80:	4945      	ldr	r1, [pc, #276]	; (8005e98 <how_to_move_search_known+0x3b8>)
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d8a:	813b      	strh	r3, [r7, #8]
		}
	}
	if (flag == 0
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d179      	bne.n	8005e86 <how_to_move_search_known+0x3a6>
			&& (getWall(x, y, ((North + i) % 4), &walldata.adachi) == 0)) {
 8005d92:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005d96:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	f003 0203 	and.w	r2, r3, #3
 8005da0:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <how_to_move_search_known+0x3bc>)
 8005da2:	f006 faff 	bl	800c3a4 <getWall>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d16c      	bne.n	8005e86 <how_to_move_search_known+0x3a6>
		do {
			known_straight++;
 8005dac:	7b7b      	ldrb	r3, [r7, #13]
 8005dae:	3301      	adds	r3, #1
 8005db0:	737b      	strb	r3, [r7, #13]
			if (direction == North && y < 15) {
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <how_to_move_search_known+0x2ee>
 8005db8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005dbc:	2b0e      	cmp	r3, #14
 8005dbe:	dc06      	bgt.n	8005dce <how_to_move_search_known+0x2ee>
				y++;
 8005dc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	717b      	strb	r3, [r7, #5]
 8005dcc:	e028      	b.n	8005e20 <how_to_move_search_known+0x340>
			} else if (direction == West && x > 0) {
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10a      	bne.n	8005dea <how_to_move_search_known+0x30a>
 8005dd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dd06      	ble.n	8005dea <how_to_move_search_known+0x30a>
				x--;
 8005ddc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	71bb      	strb	r3, [r7, #6]
 8005de8:	e01a      	b.n	8005e20 <how_to_move_search_known+0x340>
			} else if (direction == South && y > 0) {
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d10a      	bne.n	8005e06 <how_to_move_search_known+0x326>
 8005df0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dd06      	ble.n	8005e06 <how_to_move_search_known+0x326>
				y--;
 8005df8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	717b      	strb	r3, [r7, #5]
 8005e04:	e00c      	b.n	8005e20 <how_to_move_search_known+0x340>
			} else if (direction == East && x < 15) {
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d139      	bne.n	8005e80 <how_to_move_search_known+0x3a0>
 8005e0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005e10:	2b0e      	cmp	r3, #14
 8005e12:	dc35      	bgt.n	8005e80 <how_to_move_search_known+0x3a0>
				x++;
 8005e14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	71bb      	strb	r3, [r7, #6]
			} else {
				break;
			}
		} while (((getWall(x, y, ((North + i) % 4), &walldata.adachi) == 0)
 8005e20:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005e24:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	f003 0203 	and.w	r2, r3, #3
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <how_to_move_search_known+0x3bc>)
 8005e30:	f006 fab8 	bl	800c3a4 <getWall>
 8005e34:	4603      	mov	r3, r0
				&& (how_to_move(direction, x, y, walldata.real) == 0)));
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d122      	bne.n	8005e80 <how_to_move_search_known+0x3a0>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <how_to_move_search_known+0x3b4>)
 8005e3c:	f997 9005 	ldrsb.w	r9, [r7, #5]
 8005e40:	f997 8006 	ldrsb.w	r8, [r7, #6]
 8005e44:	f897 e007 	ldrb.w	lr, [r7, #7]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f04f 0a00 	mov.w	sl, #0
 8005e4e:	4692      	mov	sl, r2
 8005e50:	1d1c      	adds	r4, r3, #4
 8005e52:	466e      	mov	r6, sp
 8005e54:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8005e58:	4635      	mov	r5, r6
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e66:	3410      	adds	r4, #16
 8005e68:	3610      	adds	r6, #16
 8005e6a:	4564      	cmp	r4, ip
 8005e6c:	d1f4      	bne.n	8005e58 <how_to_move_search_known+0x378>
 8005e6e:	4653      	mov	r3, sl
 8005e70:	464a      	mov	r2, r9
 8005e72:	4641      	mov	r1, r8
 8005e74:	4670      	mov	r0, lr
 8005e76:	f7ff fccd 	bl	8005814 <how_to_move>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d095      	beq.n	8005dac <how_to_move_search_known+0x2cc>
		flag = known_straight + 10;
 8005e80:	7b7b      	ldrb	r3, [r7, #13]
 8005e82:	330a      	adds	r3, #10
 8005e84:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e92:	bf00      	nop
 8005e94:	20000990 	.word	0x20000990
 8005e98:	20000a94 	.word	0x20000a94
 8005e9c:	20000a18 	.word	0x20000a18

08005ea0 <search_run_special>:

void search_run_special(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale) {
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	71bb      	strb	r3, [r7, #6]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	717b      	strb	r3, [r7, #5]
	uint16_t Next_XY_16bit;
	uint8_t x_local, y_local, wall_direction, Next_XY_8bit;

	if (goal_scale == 4) {
 8005eb2:	797b      	ldrb	r3, [r7, #5]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d127      	bne.n	8005f08 <search_run_special+0x68>
		x.now = goal_x;
 8005eb8:	4a70      	ldr	r2, [pc, #448]	; (800607c <search_run_special+0x1dc>)
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	7013      	strb	r3, [r2, #0]
		y.now = goal_y;
 8005ebe:	4a70      	ldr	r2, [pc, #448]	; (8006080 <search_run_special+0x1e0>)
 8005ec0:	79bb      	ldrb	r3, [r7, #6]
 8005ec2:	7013      	strb	r3, [r2, #0]
		add_East_wall(&walldata.checked);
 8005ec4:	486f      	ldr	r0, [pc, #444]	; (8006084 <search_run_special+0x1e4>)
 8005ec6:	f005 fff1 	bl	800beac <add_East_wall>
		add_North_wall(&walldata.checked);
 8005eca:	486e      	ldr	r0, [pc, #440]	; (8006084 <search_run_special+0x1e4>)
 8005ecc:	f006 f818 	bl	800bf00 <add_North_wall>
		pull_East_wall(&walldata.adachi);
 8005ed0:	486d      	ldr	r0, [pc, #436]	; (8006088 <search_run_special+0x1e8>)
 8005ed2:	f006 f88f 	bl	800bff4 <pull_East_wall>
		pull_North_wall(&walldata.adachi);
 8005ed6:	486c      	ldr	r0, [pc, #432]	; (8006088 <search_run_special+0x1e8>)
 8005ed8:	f006 f8ba 	bl	800c050 <pull_North_wall>
		x.now = goal_x + 1;
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4b66      	ldr	r3, [pc, #408]	; (800607c <search_run_special+0x1dc>)
 8005ee4:	701a      	strb	r2, [r3, #0]
		y.now = goal_y + 1;
 8005ee6:	79bb      	ldrb	r3, [r7, #6]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	4b64      	ldr	r3, [pc, #400]	; (8006080 <search_run_special+0x1e0>)
 8005eee:	701a      	strb	r2, [r3, #0]
		add_West_wall(&walldata.checked);
 8005ef0:	4864      	ldr	r0, [pc, #400]	; (8006084 <search_run_special+0x1e4>)
 8005ef2:	f005 ff8d 	bl	800be10 <add_West_wall>
		add_South_wall(&walldata.checked);
 8005ef6:	4863      	ldr	r0, [pc, #396]	; (8006084 <search_run_special+0x1e4>)
 8005ef8:	f005 ffb4 	bl	800be64 <add_South_wall>
		pull_West_wall(&walldata.adachi);
 8005efc:	4862      	ldr	r0, [pc, #392]	; (8006088 <search_run_special+0x1e8>)
 8005efe:	f006 f823 	bl	800bf48 <pull_West_wall>
		pull_South_wall(&walldata.adachi);
 8005f02:	4861      	ldr	r0, [pc, #388]	; (8006088 <search_run_special+0x1e8>)
 8005f04:	f006 f84c 	bl	800bfa0 <pull_South_wall>
	}

	x.now = 0;
 8005f08:	4b5c      	ldr	r3, [pc, #368]	; (800607c <search_run_special+0x1dc>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8005f0e:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <search_run_special+0x1e0>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
	direction = 0;
 8005f14:	4b5d      	ldr	r3, [pc, #372]	; (800608c <search_run_special+0x1ec>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
	special_goal_flag = 0;
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	; (8006090 <search_run_special+0x1f0>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
	add_wall_flag = 1;
 8005f20:	4b5c      	ldr	r3, [pc, #368]	; (8006094 <search_run_special+0x1f4>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
	u_turn_counter = 0;
 8005f26:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <search_run_special+0x1f8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8005f2c:	4b5b      	ldr	r3, [pc, #364]	; (800609c <search_run_special+0x1fc>)
 8005f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f32:	4b5a      	ldr	r3, [pc, #360]	; (800609c <search_run_special+0x1fc>)
 8005f34:	ed93 7a00 	vldr	s14, [r3]
 8005f38:	eef0 0a47 	vmov.f32	s1, s14
 8005f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f40:	f003 f824 	bl	8008f8c <go_entrance>
	coordinate();
 8005f44:	f005 fb30 	bl	800b5a8 <coordinate>
	addWall();
 8005f48:	f006 f8fe 	bl	800c148 <addWall>
	while (failsafe_flag == 0) {
 8005f4c:	e03b      	b.n	8005fc6 <search_run_special+0x126>
//		speaker_on( C_4, 6.0, 1300);
//		adachi_map(goal_x, goal_y, goal_scale, walldata.real); //歩数マップ展開
		Next_XY_16bit = make_temporary_goal_XY(goal_x, goal_y, goal_scale); //見たい壁の位置からゴールを算出
 8005f4e:	797a      	ldrb	r2, [r7, #5]
 8005f50:	79b9      	ldrb	r1, [r7, #6]
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 f8a5 	bl	80060a4 <make_temporary_goal_XY>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	81fb      	strh	r3, [r7, #14]
		if (Next_XY_16bit == 0xffff) {
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d033      	beq.n	8005fd0 <search_run_special+0x130>
//			speaker_on( C_4, 6.0, 500);
			break;
		}
		wall_direction = check_flag(Next_XY_16bit);
 8005f68:	89fb      	ldrh	r3, [r7, #14]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fd18 	bl	80069a0 <check_flag>
 8005f70:	4603      	mov	r3, r0
 8005f72:	737b      	strb	r3, [r7, #13]
		Next_XY_8bit = (uint8_t) (Next_XY_16bit & 0x00ff);
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	733b      	strb	r3, [r7, #12]
		y_local = Next_XY_8bit / 16;
 8005f78:	7b3b      	ldrb	r3, [r7, #12]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	72fb      	strb	r3, [r7, #11]
		x_local = Next_XY_8bit % 16;
 8005f7e:	7b3b      	ldrb	r3, [r7, #12]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	72bb      	strb	r3, [r7, #10]

		if (wall_direction == 10) {
 8005f86:	7b7b      	ldrb	r3, [r7, #13]
 8005f88:	2b0a      	cmp	r3, #10
 8005f8a:	d102      	bne.n	8005f92 <search_run_special+0xf2>
//			speaker_on( C_4, 6.0, 500);
			failsafe_flag = 1;
 8005f8c:	4b44      	ldr	r3, [pc, #272]	; (80060a0 <search_run_special+0x200>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
		}

		adachi_special_move(x_local, y_local, wall_direction, nomal_run.accel,
 8005f92:	4b42      	ldr	r3, [pc, #264]	; (800609c <search_run_special+0x1fc>)
 8005f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f98:	4b40      	ldr	r3, [pc, #256]	; (800609c <search_run_special+0x1fc>)
 8005f9a:	ed93 7a00 	vldr	s14, [r3]
 8005f9e:	79bb      	ldrb	r3, [r7, #6]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	b2dc      	uxtb	r4, r3
 8005faa:	7b7a      	ldrb	r2, [r7, #13]
 8005fac:	7af9      	ldrb	r1, [r7, #11]
 8005fae:	7ab8      	ldrb	r0, [r7, #10]
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	797b      	ldrb	r3, [r7, #5]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	4623      	mov	r3, r4
 8005fba:	eef0 0a47 	vmov.f32	s1, s14
 8005fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc2:	f000 faa9 	bl	8006518 <adachi_special_move>
	while (failsafe_flag == 0) {
 8005fc6:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <search_run_special+0x200>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0bf      	beq.n	8005f4e <search_run_special+0xae>
 8005fce:	e000      	b.n	8005fd2 <search_run_special+0x132>
			break;
 8005fd0:	bf00      	nop
	}
	/////////////////////////
//	failsafe_flag = 1;
//	speaker_on( F_4, 6.0, 700);
	/////////////////////////////////////
	u_turn_counter = 100;
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <search_run_special+0x1f8>)
 8005fd4:	2264      	movs	r2, #100	; 0x64
 8005fd6:	701a      	strb	r2, [r3, #0]
//	speaker_on( D_4, 6.0, 1200);
//	add_wall_flag = 0;
	if (special_goal_flag == 0) {
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	; (8006090 <search_run_special+0x1f0>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11a      	bne.n	8006016 <search_run_special+0x176>
//		speaker_on( C_5, 6.0, 700);
		adachi_special_move(goal_x, goal_y, goal_scale, nomal_run.accel,
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	; (800609c <search_run_special+0x1fc>)
 8005fe2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	; (800609c <search_run_special+0x1fc>)
 8005fe8:	ed93 7a00 	vldr	s14, [r3]
 8005fec:	79bb      	ldrb	r3, [r7, #6]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	b2dc      	uxtb	r4, r3
 8005ff8:	797a      	ldrb	r2, [r7, #5]
 8005ffa:	79b9      	ldrb	r1, [r7, #6]
 8005ffc:	79f8      	ldrb	r0, [r7, #7]
 8005ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	797b      	ldrb	r3, [r7, #5]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4623      	mov	r3, r4
 800600a:	eef0 0a47 	vmov.f32	s1, s14
 800600e:	eeb0 0a67 	vmov.f32	s0, s15
 8006012:	f000 fa81 	bl	8006518 <adachi_special_move>
				nomal_run.vel_search, (goal_y * 16 + goal_x), goal_scale,
				0xffff);
	}
	if (goal_scale == 1) {
 8006016:	797b      	ldrb	r3, [r7, #5]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10f      	bne.n	800603c <search_run_special+0x19c>
		go_entrance(nomal_run.accel, nomal_run.vel_search);
 800601c:	4b1f      	ldr	r3, [pc, #124]	; (800609c <search_run_special+0x1fc>)
 800601e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006022:	4b1e      	ldr	r3, [pc, #120]	; (800609c <search_run_special+0x1fc>)
 8006024:	ed93 7a00 	vldr	s14, [r3]
 8006028:	eef0 0a47 	vmov.f32	s1, s14
 800602c:	eeb0 0a67 	vmov.f32	s0, s15
 8006030:	f002 ffac 	bl	8008f8c <go_entrance>
		coordinate();
 8006034:	f005 fab8 	bl	800b5a8 <coordinate>
		addWall();
 8006038:	f006 f886 	bl	800c148 <addWall>
	}
//	speaker_on( C_7, 6.0, 1000);
//	u_turn_counter = 5;
	adachi_special_move(0, 0, 255, nomal_run.accel, nomal_run.vel_search,
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <search_run_special+0x1fc>)
 800603e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <search_run_special+0x1fc>)
 8006044:	ed93 7a00 	vldr	s14, [r3]
 8006048:	79bb      	ldrb	r3, [r7, #6]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	b2da      	uxtb	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	4413      	add	r3, r2
 8006052:	b2da      	uxtb	r2, r3
 8006054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	797b      	ldrb	r3, [r7, #5]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	eef0 0a47 	vmov.f32	s1, s14
 8006064:	eeb0 0a67 	vmov.f32	s0, s15
 8006068:	22ff      	movs	r2, #255	; 0xff
 800606a:	2100      	movs	r1, #0
 800606c:	2000      	movs	r0, #0
 800606e:	f000 fa53 	bl	8006518 <adachi_special_move>
			(goal_y * 16 + goal_x), goal_scale, 0xffff);

}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	bf00      	nop
 800607c:	20000a90 	.word	0x20000a90
 8006080:	200194e4 	.word	0x200194e4
 8006084:	200009d4 	.word	0x200009d4
 8006088:	20000a18 	.word	0x20000a18
 800608c:	20000668 	.word	0x20000668
 8006090:	2000069e 	.word	0x2000069e
 8006094:	2000000c 	.word	0x2000000c
 8006098:	2000069f 	.word	0x2000069f
 800609c:	20000040 	.word	0x20000040
 80060a0:	20000674 	.word	0x20000674

080060a4 <make_temporary_goal_XY>:

uint16_t make_temporary_goal_XY(uint8_t ture_goal_x, uint8_t ture_goal_y,
		uint8_t goal_scale) {
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	b094      	sub	sp, #80	; 0x50
 80060aa:	af10      	add	r7, sp, #64	; 0x40
 80060ac:	4603      	mov	r3, r0
 80060ae:	71fb      	strb	r3, [r7, #7]
 80060b0:	460b      	mov	r3, r1
 80060b2:	71bb      	strb	r3, [r7, #6]
 80060b4:	4613      	mov	r3, r2
 80060b6:	717b      	strb	r3, [r7, #5]
	uint8_t flag = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]
	uint8_t x_local = 0, y_local = 0, local_direction = 0; //常にスタート座標からゴールへの道を探す
 80060bc:	2300      	movs	r3, #0
 80060be:	73bb      	strb	r3, [r7, #14]
 80060c0:	2300      	movs	r3, #0
 80060c2:	737b      	strb	r3, [r7, #13]
 80060c4:	2300      	movs	r3, #0
 80060c6:	733b      	strb	r3, [r7, #12]
	uint16_t Next_XY = 0, shift = 1;
 80060c8:	2300      	movs	r3, #0
 80060ca:	817b      	strh	r3, [r7, #10]
 80060cc:	2301      	movs	r3, #1
 80060ce:	813b      	strh	r3, [r7, #8]

	adachi_map(ture_goal_x, ture_goal_y, goal_scale, walldata.real); //歩数マップ展開
 80060d0:	4b6d      	ldr	r3, [pc, #436]	; (8006288 <make_temporary_goal_XY+0x1e4>)
 80060d2:	f897 9005 	ldrb.w	r9, [r7, #5]
 80060d6:	f897 8006 	ldrb.w	r8, [r7, #6]
 80060da:	f897 e007 	ldrb.w	lr, [r7, #7]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	f04f 0a00 	mov.w	sl, #0
 80060e4:	4692      	mov	sl, r2
 80060e6:	1d1c      	adds	r4, r3, #4
 80060e8:	466e      	mov	r6, sp
 80060ea:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80060ee:	4635      	mov	r5, r6
 80060f0:	4623      	mov	r3, r4
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060fc:	3410      	adds	r4, #16
 80060fe:	3610      	adds	r6, #16
 8006100:	4564      	cmp	r4, ip
 8006102:	d1f4      	bne.n	80060ee <make_temporary_goal_XY+0x4a>
 8006104:	4653      	mov	r3, sl
 8006106:	464a      	mov	r2, r9
 8006108:	4641      	mov	r1, r8
 800610a:	4670      	mov	r0, lr
 800610c:	f7fe fbdc 	bl	80048c8 <adachi_map>

	while (failsafe_flag == 0) {
 8006110:	e092      	b.n	8006238 <make_temporary_goal_XY+0x194>
		flag = how_to_move_special(x_local, y_local, local_direction);
 8006112:	7b3a      	ldrb	r2, [r7, #12]
 8006114:	7b79      	ldrb	r1, [r7, #13]
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f8b9 	bl	8006290 <how_to_move_special>
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
//		//myprintf("flag:%d.x:%d,y:%d,dire:%d\n",flag,x_local,y_local,local_direction);

		if (flag > 9) { //相対方角から絶対方角に変換
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b09      	cmp	r3, #9
 8006126:	d90e      	bls.n	8006146 <make_temporary_goal_XY+0xa2>
			flag -= 10;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	3b0a      	subs	r3, #10
 800612c:	73fb      	strb	r3, [r7, #15]
			flag += local_direction;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	7b3b      	ldrb	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	73fb      	strb	r3, [r7, #15]
			flag %= 4;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
			flag += 10;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	330a      	adds	r3, #10
 8006142:	73fb      	strb	r3, [r7, #15]
//			speaker_on( C_4, 6.0, 500);
			break;
 8006144:	e07d      	b.n	8006242 <make_temporary_goal_XY+0x19e>
		}
		if (flag == 1) {
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d103      	bne.n	8006154 <make_temporary_goal_XY+0xb0>
			local_direction++;
 800614c:	7b3b      	ldrb	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	733b      	strb	r3, [r7, #12]
 8006152:	e00c      	b.n	800616e <make_temporary_goal_XY+0xca>
		} else if (flag == 2) {
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <make_temporary_goal_XY+0xbe>
			local_direction += 2;
 800615a:	7b3b      	ldrb	r3, [r7, #12]
 800615c:	3302      	adds	r3, #2
 800615e:	733b      	strb	r3, [r7, #12]
 8006160:	e005      	b.n	800616e <make_temporary_goal_XY+0xca>
		} else if (flag == 3) {
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d102      	bne.n	800616e <make_temporary_goal_XY+0xca>
			local_direction += 3;
 8006168:	7b3b      	ldrb	r3, [r7, #12]
 800616a:	3303      	adds	r3, #3
 800616c:	733b      	strb	r3, [r7, #12]
		}
		if (local_direction > 3) {
 800616e:	7b3b      	ldrb	r3, [r7, #12]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d902      	bls.n	800617a <make_temporary_goal_XY+0xd6>
			local_direction -= 4;
 8006174:	7b3b      	ldrb	r3, [r7, #12]
 8006176:	3b04      	subs	r3, #4
 8006178:	733b      	strb	r3, [r7, #12]
		}

		if (local_direction == North && y_local < 15) {
 800617a:	7b3b      	ldrb	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <make_temporary_goal_XY+0xea>
 8006180:	7b7b      	ldrb	r3, [r7, #13]
 8006182:	2b0e      	cmp	r3, #14
 8006184:	d803      	bhi.n	800618e <make_temporary_goal_XY+0xea>
			y_local++;
 8006186:	7b7b      	ldrb	r3, [r7, #13]
 8006188:	3301      	adds	r3, #1
 800618a:	737b      	strb	r3, [r7, #13]
 800618c:	e01c      	b.n	80061c8 <make_temporary_goal_XY+0x124>
		} else if (local_direction == West && x_local > 0) {
 800618e:	7b3b      	ldrb	r3, [r7, #12]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d106      	bne.n	80061a2 <make_temporary_goal_XY+0xfe>
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <make_temporary_goal_XY+0xfe>
			x_local--;
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	3b01      	subs	r3, #1
 800619e:	73bb      	strb	r3, [r7, #14]
 80061a0:	e012      	b.n	80061c8 <make_temporary_goal_XY+0x124>
		} else if (local_direction == South && y_local > 0) {
 80061a2:	7b3b      	ldrb	r3, [r7, #12]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d106      	bne.n	80061b6 <make_temporary_goal_XY+0x112>
 80061a8:	7b7b      	ldrb	r3, [r7, #13]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <make_temporary_goal_XY+0x112>
			y_local--;
 80061ae:	7b7b      	ldrb	r3, [r7, #13]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	737b      	strb	r3, [r7, #13]
 80061b4:	e008      	b.n	80061c8 <make_temporary_goal_XY+0x124>
		} else if (local_direction == East && x_local < 15) {
 80061b6:	7b3b      	ldrb	r3, [r7, #12]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d105      	bne.n	80061c8 <make_temporary_goal_XY+0x124>
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	2b0e      	cmp	r3, #14
 80061c0:	d802      	bhi.n	80061c8 <make_temporary_goal_XY+0x124>
			x_local++;
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	3301      	adds	r3, #1
 80061c6:	73bb      	strb	r3, [r7, #14]
		}

		if ((goal_scale == 1)
 80061c8:	797b      	ldrb	r3, [r7, #5]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d10a      	bne.n	80061e4 <make_temporary_goal_XY+0x140>
				&& ((x_local == ture_goal_x && y_local == ture_goal_y))) { //経路内に未知壁なし
 80061ce:	7bba      	ldrb	r2, [r7, #14]
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d106      	bne.n	80061e4 <make_temporary_goal_XY+0x140>
 80061d6:	7b7a      	ldrb	r2, [r7, #13]
 80061d8:	79bb      	ldrb	r3, [r7, #6]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d102      	bne.n	80061e4 <make_temporary_goal_XY+0x140>
			shift = 255;
 80061de:	23ff      	movs	r3, #255	; 0xff
 80061e0:	813b      	strh	r3, [r7, #8]
			break;
 80061e2:	e02e      	b.n	8006242 <make_temporary_goal_XY+0x19e>
		}
		if ((goal_scale == 4)
 80061e4:	797b      	ldrb	r3, [r7, #5]
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d126      	bne.n	8006238 <make_temporary_goal_XY+0x194>
				&& ((x_local == ture_goal_x && y_local == ture_goal_y)
 80061ea:	7bba      	ldrb	r2, [r7, #14]
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d103      	bne.n	80061fa <make_temporary_goal_XY+0x156>
 80061f2:	7b7a      	ldrb	r2, [r7, #13]
 80061f4:	79bb      	ldrb	r3, [r7, #6]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d01b      	beq.n	8006232 <make_temporary_goal_XY+0x18e>
						|| (x_local == ture_goal_x + 1 && y_local == ture_goal_y)
 80061fa:	7bba      	ldrb	r2, [r7, #14]
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	3301      	adds	r3, #1
 8006200:	429a      	cmp	r2, r3
 8006202:	d103      	bne.n	800620c <make_temporary_goal_XY+0x168>
 8006204:	7b7a      	ldrb	r2, [r7, #13]
 8006206:	79bb      	ldrb	r3, [r7, #6]
 8006208:	429a      	cmp	r2, r3
 800620a:	d012      	beq.n	8006232 <make_temporary_goal_XY+0x18e>
						|| (x_local == ture_goal_x && y_local == ture_goal_y + 1)
 800620c:	7bba      	ldrb	r2, [r7, #14]
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d104      	bne.n	800621e <make_temporary_goal_XY+0x17a>
 8006214:	7b7a      	ldrb	r2, [r7, #13]
 8006216:	79bb      	ldrb	r3, [r7, #6]
 8006218:	3301      	adds	r3, #1
 800621a:	429a      	cmp	r2, r3
 800621c:	d009      	beq.n	8006232 <make_temporary_goal_XY+0x18e>
						|| (x_local == ture_goal_x + 1
 800621e:	7bba      	ldrb	r2, [r7, #14]
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	3301      	adds	r3, #1
 8006224:	429a      	cmp	r2, r3
 8006226:	d107      	bne.n	8006238 <make_temporary_goal_XY+0x194>
								&& y_local == ture_goal_y + 1))) { //経路内に未知壁なし
 8006228:	7b7a      	ldrb	r2, [r7, #13]
 800622a:	79bb      	ldrb	r3, [r7, #6]
 800622c:	3301      	adds	r3, #1
 800622e:	429a      	cmp	r2, r3
 8006230:	d102      	bne.n	8006238 <make_temporary_goal_XY+0x194>
			shift = 255;
 8006232:	23ff      	movs	r3, #255	; 0xff
 8006234:	813b      	strh	r3, [r7, #8]
			break;
 8006236:	e004      	b.n	8006242 <make_temporary_goal_XY+0x19e>
	while (failsafe_flag == 0) {
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <make_temporary_goal_XY+0x1e8>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f43f af68 	beq.w	8006112 <make_temporary_goal_XY+0x6e>
		}
	}

	if (shift == 1) { //まだ探索が必要
 8006242:	893b      	ldrh	r3, [r7, #8]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d112      	bne.n	800626e <make_temporary_goal_XY+0x1ca>
		Next_XY = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	817b      	strh	r3, [r7, #10]
		Next_XY = (uint16_t) (16 * y_local + x_local);
 800624c:	7b7b      	ldrb	r3, [r7, #13]
 800624e:	b29b      	uxth	r3, r3
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	b29a      	uxth	r2, r3
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	b29b      	uxth	r3, r3
 8006258:	4413      	add	r3, r2
 800625a:	817b      	strh	r3, [r7, #10]
		shift = shift << flag;
 800625c:	893a      	ldrh	r2, [r7, #8]
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	813b      	strh	r3, [r7, #8]
		Next_XY = Next_XY | shift;
 8006266:	897a      	ldrh	r2, [r7, #10]
 8006268:	893b      	ldrh	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
 800626c:	817b      	strh	r3, [r7, #10]
	}

	if (shift == 255) { //経路内に未知壁なし
 800626e:	893b      	ldrh	r3, [r7, #8]
 8006270:	2bff      	cmp	r3, #255	; 0xff
 8006272:	d102      	bne.n	800627a <make_temporary_goal_XY+0x1d6>
		Next_XY = 0xffff;
 8006274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006278:	817b      	strh	r3, [r7, #10]
	}
//	//myprintf("%d\n",Next_XY);
	return Next_XY; //一時的なゴール座標を返す
 800627a:	897b      	ldrh	r3, [r7, #10]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006286:	bf00      	nop
 8006288:	20000990 	.word	0x20000990
 800628c:	20000674 	.word	0x20000674

08006290 <how_to_move_special>:

uint8_t how_to_move_special(uint8_t x, uint8_t y, uint8_t direction) {
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
 800629a:	460b      	mov	r3, r1
 800629c:	71bb      	strb	r3, [r7, #6]
 800629e:	4613      	mov	r3, r2
 80062a0:	717b      	strb	r3, [r7, #5]
	uint16_t step;
	int8_t a, b;
	uint8_t flag = 111, i;
 80062a2:	236f      	movs	r3, #111	; 0x6f
 80062a4:	72fb      	strb	r3, [r7, #11]
	if (direction == North) {
 80062a6:	797b      	ldrb	r3, [r7, #5]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <how_to_move_special+0x2a>
		i = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	72bb      	strb	r3, [r7, #10]
		a = 1;
 80062b0:	2301      	movs	r3, #1
 80062b2:	737b      	strb	r3, [r7, #13]
		b = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	733b      	strb	r3, [r7, #12]
 80062b8:	e01c      	b.n	80062f4 <how_to_move_special+0x64>
	} else if (direction == West) {
 80062ba:	797b      	ldrb	r3, [r7, #5]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d106      	bne.n	80062ce <how_to_move_special+0x3e>
		i = 1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	72bb      	strb	r3, [r7, #10]
		a = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	737b      	strb	r3, [r7, #13]
		b = 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	733b      	strb	r3, [r7, #12]
 80062cc:	e012      	b.n	80062f4 <how_to_move_special+0x64>
	} else if (direction == South) {
 80062ce:	797b      	ldrb	r3, [r7, #5]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d106      	bne.n	80062e2 <how_to_move_special+0x52>
		i = 2;
 80062d4:	2302      	movs	r3, #2
 80062d6:	72bb      	strb	r3, [r7, #10]
		a = -1;
 80062d8:	23ff      	movs	r3, #255	; 0xff
 80062da:	737b      	strb	r3, [r7, #13]
		b = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	733b      	strb	r3, [r7, #12]
 80062e0:	e008      	b.n	80062f4 <how_to_move_special+0x64>
	} else if (direction == East) {
 80062e2:	797b      	ldrb	r3, [r7, #5]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d105      	bne.n	80062f4 <how_to_move_special+0x64>
		i = 3;
 80062e8:	2303      	movs	r3, #3
 80062ea:	72bb      	strb	r3, [r7, #10]
		a = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	737b      	strb	r3, [r7, #13]
		b = -1;
 80062f0:	23ff      	movs	r3, #255	; 0xff
 80062f2:	733b      	strb	r3, [r7, #12]
	}

	step = step_map[x][y];
 80062f4:	79fa      	ldrb	r2, [r7, #7]
 80062f6:	79bb      	ldrb	r3, [r7, #6]
 80062f8:	4981      	ldr	r1, [pc, #516]	; (8006500 <how_to_move_special+0x270>)
 80062fa:	0112      	lsls	r2, r2, #4
 80062fc:	4413      	add	r3, r2
 80062fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006302:	81fb      	strh	r3, [r7, #14]
	if (step == 0xffff) {
 8006304:	89fb      	ldrh	r3, [r7, #14]
 8006306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <how_to_move_special+0x90>
		stop90(7000.0, 600.0);
 800630e:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8006504 <how_to_move_special+0x274>
 8006312:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006508 <how_to_move_special+0x278>
 8006316:	f003 f9f3 	bl	8009700 <stop90>
		failsafe_flag = 1;
 800631a:	4b7c      	ldr	r3, [pc, #496]	; (800650c <how_to_move_special+0x27c>)
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
	}

	if ((x - a >= 0) && (y - b >= 0)
 8006320:	79fa      	ldrb	r2, [r7, #7]
 8006322:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	db4c      	blt.n	80063c6 <how_to_move_special+0x136>
 800632c:	79ba      	ldrb	r2, [r7, #6]
 800632e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	db46      	blt.n	80063c6 <how_to_move_special+0x136>
			&& (getWall(x, y, (West + i) % 4, &walldata.real) == 0)) {
 8006338:	79f8      	ldrb	r0, [r7, #7]
 800633a:	79bc      	ldrb	r4, [r7, #6]
 800633c:	7abb      	ldrb	r3, [r7, #10]
 800633e:	3301      	adds	r3, #1
 8006340:	4259      	negs	r1, r3
 8006342:	f003 0203 	and.w	r2, r3, #3
 8006346:	f001 0303 	and.w	r3, r1, #3
 800634a:	bf58      	it	pl
 800634c:	425a      	negpl	r2, r3
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <how_to_move_special+0x280>)
 8006350:	4621      	mov	r1, r4
 8006352:	f006 f827 	bl	800c3a4 <getWall>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d134      	bne.n	80063c6 <how_to_move_special+0x136>
		if (step_map[x - a][y - b] <= step) {
 800635c:	79fa      	ldrb	r2, [r7, #7]
 800635e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	79b9      	ldrb	r1, [r7, #6]
 8006366:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800636a:	1acb      	subs	r3, r1, r3
 800636c:	4964      	ldr	r1, [pc, #400]	; (8006500 <how_to_move_special+0x270>)
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	4413      	add	r3, r2
 8006372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006376:	89fa      	ldrh	r2, [r7, #14]
 8006378:	429a      	cmp	r2, r3
 800637a:	d324      	bcc.n	80063c6 <how_to_move_special+0x136>
			step = step_map[x - a][y - b];
 800637c:	79fa      	ldrb	r2, [r7, #7]
 800637e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	79b9      	ldrb	r1, [r7, #6]
 8006386:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800638a:	1acb      	subs	r3, r1, r3
 800638c:	495c      	ldr	r1, [pc, #368]	; (8006500 <how_to_move_special+0x270>)
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	4413      	add	r3, r2
 8006392:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006396:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (West + i) % 4, &walldata.checked) == 1)) {
 8006398:	79f8      	ldrb	r0, [r7, #7]
 800639a:	79bc      	ldrb	r4, [r7, #6]
 800639c:	7abb      	ldrb	r3, [r7, #10]
 800639e:	3301      	adds	r3, #1
 80063a0:	4259      	negs	r1, r3
 80063a2:	f003 0203 	and.w	r2, r3, #3
 80063a6:	f001 0303 	and.w	r3, r1, #3
 80063aa:	bf58      	it	pl
 80063ac:	425a      	negpl	r2, r3
 80063ae:	4b59      	ldr	r3, [pc, #356]	; (8006514 <how_to_move_special+0x284>)
 80063b0:	4621      	mov	r1, r4
 80063b2:	f005 fff7 	bl	800c3a4 <getWall>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d102      	bne.n	80063c2 <how_to_move_special+0x132>
				flag = 1; //checkしてるからすすめる
 80063bc:	2301      	movs	r3, #1
 80063be:	72fb      	strb	r3, [r7, #11]
 80063c0:	e001      	b.n	80063c6 <how_to_move_special+0x136>
			} else {
				flag = 11; //checkしてないからここを確認しにく
 80063c2:	230b      	movs	r3, #11
 80063c4:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 80063c6:	79fa      	ldrb	r2, [r7, #7]
 80063c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80063cc:	4413      	add	r3, r2
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	dc4c      	bgt.n	800646c <how_to_move_special+0x1dc>
 80063d2:	79ba      	ldrb	r2, [r7, #6]
 80063d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	dc46      	bgt.n	800646c <how_to_move_special+0x1dc>
			&& (getWall(x, y, (East + i) % 4, &walldata.real) == 0)) {
 80063de:	79f8      	ldrb	r0, [r7, #7]
 80063e0:	79bc      	ldrb	r4, [r7, #6]
 80063e2:	7abb      	ldrb	r3, [r7, #10]
 80063e4:	3303      	adds	r3, #3
 80063e6:	4259      	negs	r1, r3
 80063e8:	f003 0203 	and.w	r2, r3, #3
 80063ec:	f001 0303 	and.w	r3, r1, #3
 80063f0:	bf58      	it	pl
 80063f2:	425a      	negpl	r2, r3
 80063f4:	4b46      	ldr	r3, [pc, #280]	; (8006510 <how_to_move_special+0x280>)
 80063f6:	4621      	mov	r1, r4
 80063f8:	f005 ffd4 	bl	800c3a4 <getWall>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d134      	bne.n	800646c <how_to_move_special+0x1dc>
		if (step_map[x + a][y + b] <= step) {
 8006402:	79fa      	ldrb	r2, [r7, #7]
 8006404:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006408:	441a      	add	r2, r3
 800640a:	79b9      	ldrb	r1, [r7, #6]
 800640c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006410:	440b      	add	r3, r1
 8006412:	493b      	ldr	r1, [pc, #236]	; (8006500 <how_to_move_special+0x270>)
 8006414:	0112      	lsls	r2, r2, #4
 8006416:	4413      	add	r3, r2
 8006418:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800641c:	89fa      	ldrh	r2, [r7, #14]
 800641e:	429a      	cmp	r2, r3
 8006420:	d324      	bcc.n	800646c <how_to_move_special+0x1dc>
			step = step_map[x + a][y + b];
 8006422:	79fa      	ldrb	r2, [r7, #7]
 8006424:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006428:	441a      	add	r2, r3
 800642a:	79b9      	ldrb	r1, [r7, #6]
 800642c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006430:	440b      	add	r3, r1
 8006432:	4933      	ldr	r1, [pc, #204]	; (8006500 <how_to_move_special+0x270>)
 8006434:	0112      	lsls	r2, r2, #4
 8006436:	4413      	add	r3, r2
 8006438:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800643c:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (East + i) % 4, &walldata.checked) == 1)) {
 800643e:	79f8      	ldrb	r0, [r7, #7]
 8006440:	79bc      	ldrb	r4, [r7, #6]
 8006442:	7abb      	ldrb	r3, [r7, #10]
 8006444:	3303      	adds	r3, #3
 8006446:	4259      	negs	r1, r3
 8006448:	f003 0203 	and.w	r2, r3, #3
 800644c:	f001 0303 	and.w	r3, r1, #3
 8006450:	bf58      	it	pl
 8006452:	425a      	negpl	r2, r3
 8006454:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <how_to_move_special+0x284>)
 8006456:	4621      	mov	r1, r4
 8006458:	f005 ffa4 	bl	800c3a4 <getWall>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d102      	bne.n	8006468 <how_to_move_special+0x1d8>
				flag = 3;
 8006462:	2303      	movs	r3, #3
 8006464:	72fb      	strb	r3, [r7, #11]
 8006466:	e001      	b.n	800646c <how_to_move_special+0x1dc>
			} else {
				flag = 13;
 8006468:	230d      	movs	r3, #13
 800646a:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 800646c:	79ba      	ldrb	r2, [r7, #6]
 800646e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006472:	4413      	add	r3, r2
 8006474:	2b0f      	cmp	r3, #15
 8006476:	dc3e      	bgt.n	80064f6 <how_to_move_special+0x266>
 8006478:	79fa      	ldrb	r2, [r7, #7]
 800647a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	db38      	blt.n	80064f6 <how_to_move_special+0x266>
			&& (getWall(x, y, (North + i) % 4, &walldata.real) == 0)) {
 8006484:	79f8      	ldrb	r0, [r7, #7]
 8006486:	79b9      	ldrb	r1, [r7, #6]
 8006488:	7abb      	ldrb	r3, [r7, #10]
 800648a:	f003 0203 	and.w	r2, r3, #3
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <how_to_move_special+0x280>)
 8006490:	f005 ff88 	bl	800c3a4 <getWall>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d12d      	bne.n	80064f6 <how_to_move_special+0x266>
		if (step_map[x - b][y + a] <= step) {
 800649a:	79fa      	ldrb	r2, [r7, #7]
 800649c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	79b9      	ldrb	r1, [r7, #6]
 80064a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064a8:	440b      	add	r3, r1
 80064aa:	4915      	ldr	r1, [pc, #84]	; (8006500 <how_to_move_special+0x270>)
 80064ac:	0112      	lsls	r2, r2, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80064b4:	89fa      	ldrh	r2, [r7, #14]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d31d      	bcc.n	80064f6 <how_to_move_special+0x266>
			step = step_map[x - b][y + a];
 80064ba:	79fa      	ldrb	r2, [r7, #7]
 80064bc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	79b9      	ldrb	r1, [r7, #6]
 80064c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064c8:	440b      	add	r3, r1
 80064ca:	490d      	ldr	r1, [pc, #52]	; (8006500 <how_to_move_special+0x270>)
 80064cc:	0112      	lsls	r2, r2, #4
 80064ce:	4413      	add	r3, r2
 80064d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80064d4:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (North + i) % 4, &walldata.checked) == 1)) {
 80064d6:	79f8      	ldrb	r0, [r7, #7]
 80064d8:	79b9      	ldrb	r1, [r7, #6]
 80064da:	7abb      	ldrb	r3, [r7, #10]
 80064dc:	f003 0203 	and.w	r2, r3, #3
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <how_to_move_special+0x284>)
 80064e2:	f005 ff5f 	bl	800c3a4 <getWall>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d102      	bne.n	80064f2 <how_to_move_special+0x262>
				flag = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	72fb      	strb	r3, [r7, #11]
 80064f0:	e001      	b.n	80064f6 <how_to_move_special+0x266>
			} else {
				flag = 10;
 80064f2:	230a      	movs	r3, #10
 80064f4:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	return flag; //進行方向と未知壁かの情報を返す
 80064f6:	7afb      	ldrb	r3, [r7, #11]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}
 8006500:	20000a94 	.word	0x20000a94
 8006504:	44160000 	.word	0x44160000
 8006508:	45dac000 	.word	0x45dac000
 800650c:	20000674 	.word	0x20000674
 8006510:	20000990 	.word	0x20000990
 8006514:	200009d4 	.word	0x200009d4

08006518 <adachi_special_move>:

void adachi_special_move(uint8_t goal_x, uint8_t goal_y, uint8_t wall_direction,
		float accel, float vel, uint8_t ture_goal, uint8_t ture_goal_scale,
		uint16_t input) {
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	b096      	sub	sp, #88	; 0x58
 800651e:	af10      	add	r7, sp, #64	; 0x40
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	ed87 0a02 	vstr	s0, [r7, #8]
 800652a:	edc7 0a01 	vstr	s1, [r7, #4]
 800652e:	461a      	mov	r2, r3
 8006530:	4623      	mov	r3, r4
 8006532:	73fb      	strb	r3, [r7, #15]
 8006534:	4603      	mov	r3, r0
 8006536:	73bb      	strb	r3, [r7, #14]
 8006538:	460b      	mov	r3, r1
 800653a:	737b      	strb	r3, [r7, #13]
 800653c:	4613      	mov	r3, r2
 800653e:	733b      	strb	r3, [r7, #12]
	uint8_t flag, i; //flag 0:前,1:左折2:Uターン(けつあて)3:右折4:Uターン
	uint8_t goal_scale = 1;
 8006540:	2301      	movs	r3, #1
 8006542:	75bb      	strb	r3, [r7, #22]
	uint8_t straight_flag = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	757b      	strb	r3, [r7, #21]
	uint8_t slalom_flag = 1;
 8006548:	2301      	movs	r3, #1
 800654a:	753b      	strb	r3, [r7, #20]
	uint16_t NEW_XY_16;

	if (wall_direction == 0) { //座標と壁の方角の関係から2つのゴール座標を設定
 800654c:	7b7b      	ldrb	r3, [r7, #13]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <adachi_special_move+0x40>
		goal_scale = 100;
 8006552:	2364      	movs	r3, #100	; 0x64
 8006554:	75bb      	strb	r3, [r7, #22]
 8006556:	e20d      	b.n	8006974 <adachi_special_move+0x45c>
	} else if (wall_direction == 1) {
 8006558:	7b7b      	ldrb	r3, [r7, #13]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d102      	bne.n	8006564 <adachi_special_move+0x4c>
		goal_scale = 101;
 800655e:	2365      	movs	r3, #101	; 0x65
 8006560:	75bb      	strb	r3, [r7, #22]
 8006562:	e207      	b.n	8006974 <adachi_special_move+0x45c>
	} else if (wall_direction == 2) {
 8006564:	7b7b      	ldrb	r3, [r7, #13]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d102      	bne.n	8006570 <adachi_special_move+0x58>
		goal_scale = 102;
 800656a:	2366      	movs	r3, #102	; 0x66
 800656c:	75bb      	strb	r3, [r7, #22]
 800656e:	e201      	b.n	8006974 <adachi_special_move+0x45c>
	} else if (wall_direction == 3) {
 8006570:	7b7b      	ldrb	r3, [r7, #13]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d102      	bne.n	800657c <adachi_special_move+0x64>
		goal_scale = 103;
 8006576:	2367      	movs	r3, #103	; 0x67
 8006578:	75bb      	strb	r3, [r7, #22]
 800657a:	e1fb      	b.n	8006974 <adachi_special_move+0x45c>
	} else if (wall_direction == 255) { //スタートに帰宅
 800657c:	7b7b      	ldrb	r3, [r7, #13]
 800657e:	2bff      	cmp	r3, #255	; 0xff
 8006580:	d102      	bne.n	8006588 <adachi_special_move+0x70>
		goal_scale = 1;
 8006582:	2301      	movs	r3, #1
 8006584:	75bb      	strb	r3, [r7, #22]
 8006586:	e1f5      	b.n	8006974 <adachi_special_move+0x45c>
	} else if (wall_direction == 4) { //ゴールに入っておくとき
 8006588:	7b7b      	ldrb	r3, [r7, #13]
 800658a:	2b04      	cmp	r3, #4
 800658c:	f040 81f2 	bne.w	8006974 <adachi_special_move+0x45c>
		goal_scale = 4;
 8006590:	2304      	movs	r3, #4
 8006592:	75bb      	strb	r3, [r7, #22]
	}

	while (failsafe_flag == 0) {
 8006594:	e1ee      	b.n	8006974 <adachi_special_move+0x45c>
		NEW_XY_16 = make_temporary_goal_XY((ture_goal % 16), (ture_goal / 16),
 8006596:	7b3b      	ldrb	r3, [r7, #12]
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	b2d8      	uxtb	r0, r3
 800659e:	7b3b      	ldrb	r3, [r7, #12]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065a8:	4619      	mov	r1, r3
 80065aa:	f7ff fd7b 	bl	80060a4 <make_temporary_goal_XY>
 80065ae:	4603      	mov	r3, r0
 80065b0:	827b      	strh	r3, [r7, #18]
				ture_goal_scale);

		if ((NEW_XY_16 != input) && (input != 0xffff)) {
 80065b2:	8a7a      	ldrh	r2, [r7, #18]
 80065b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d005      	beq.n	80065c6 <adachi_special_move+0xae>
 80065ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065c0:	4293      	cmp	r3, r2
 80065c2:	f040 81dd 	bne.w	8006980 <adachi_special_move+0x468>
			break;
		}
		if ((NEW_XY_16 != input) && (input == 0xffff)) {
 80065c6:	8a7a      	ldrh	r2, [r7, #18]
 80065c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d008      	beq.n	80065e0 <adachi_special_move+0xc8>
 80065ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d103      	bne.n	80065e0 <adachi_special_move+0xc8>
			failsafe_flag = 1;
 80065d8:	4bb9      	ldr	r3, [pc, #740]	; (80068c0 <adachi_special_move+0x3a8>)
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
			break;
 80065de:	e1d2      	b.n	8006986 <adachi_special_move+0x46e>
		}

		if (ture_goal_scale == 4) {
 80065e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d144      	bne.n	8006672 <adachi_special_move+0x15a>
			if ((x.now == (ture_goal % 16) && y.now == (ture_goal / 16))
 80065e8:	4bb6      	ldr	r3, [pc, #728]	; (80068c4 <adachi_special_move+0x3ac>)
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	7b3b      	ldrb	r3, [r7, #12]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d106      	bne.n	8006606 <adachi_special_move+0xee>
 80065f8:	4bb3      	ldr	r3, [pc, #716]	; (80068c8 <adachi_special_move+0x3b0>)
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	7b3b      	ldrb	r3, [r7, #12]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	b2db      	uxtb	r3, r3
 8006602:	429a      	cmp	r2, r3
 8006604:	d032      	beq.n	800666c <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16) + 1
 8006606:	4baf      	ldr	r3, [pc, #700]	; (80068c4 <adachi_special_move+0x3ac>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	7b3b      	ldrb	r3, [r7, #12]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	3301      	adds	r3, #1
 8006614:	429a      	cmp	r2, r3
 8006616:	d106      	bne.n	8006626 <adachi_special_move+0x10e>
							&& y.now == (ture_goal / 16))
 8006618:	4bab      	ldr	r3, [pc, #684]	; (80068c8 <adachi_special_move+0x3b0>)
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	7b3b      	ldrb	r3, [r7, #12]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	b2db      	uxtb	r3, r3
 8006622:	429a      	cmp	r2, r3
 8006624:	d022      	beq.n	800666c <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16)
 8006626:	4ba7      	ldr	r3, [pc, #668]	; (80068c4 <adachi_special_move+0x3ac>)
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	7b3b      	ldrb	r3, [r7, #12]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	b2db      	uxtb	r3, r3
 8006632:	429a      	cmp	r2, r3
 8006634:	d108      	bne.n	8006648 <adachi_special_move+0x130>
							&& y.now == (ture_goal / 16) + 1)
 8006636:	4ba4      	ldr	r3, [pc, #656]	; (80068c8 <adachi_special_move+0x3b0>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	7b3b      	ldrb	r3, [r7, #12]
 800663e:	091b      	lsrs	r3, r3, #4
 8006640:	b2db      	uxtb	r3, r3
 8006642:	3301      	adds	r3, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	d011      	beq.n	800666c <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16) + 1
 8006648:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <adachi_special_move+0x3ac>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	7b3b      	ldrb	r3, [r7, #12]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	3301      	adds	r3, #1
 8006656:	429a      	cmp	r2, r3
 8006658:	d10b      	bne.n	8006672 <adachi_special_move+0x15a>
							&& y.now == (ture_goal / 16) + 1)) {
 800665a:	4b9b      	ldr	r3, [pc, #620]	; (80068c8 <adachi_special_move+0x3b0>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	7b3b      	ldrb	r3, [r7, #12]
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	b2db      	uxtb	r3, r3
 8006666:	3301      	adds	r3, #1
 8006668:	429a      	cmp	r2, r3
 800666a:	d102      	bne.n	8006672 <adachi_special_move+0x15a>
				special_goal_flag = 1;
 800666c:	4b97      	ldr	r3, [pc, #604]	; (80068cc <adachi_special_move+0x3b4>)
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
//				failsafe_flag=1;
//				write_all_walldatas();
			}
		}

		if (straight_flag == 1) {
 8006672:	7d7b      	ldrb	r3, [r7, #21]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d120      	bne.n	80066ba <adachi_special_move+0x1a2>
			adachi_map_straight(goal_x, goal_y, goal_scale, walldata.real);
 8006678:	4b95      	ldr	r3, [pc, #596]	; (80068d0 <adachi_special_move+0x3b8>)
 800667a:	f897 9016 	ldrb.w	r9, [r7, #22]
 800667e:	f897 800e 	ldrb.w	r8, [r7, #14]
 8006682:	f897 e00f 	ldrb.w	lr, [r7, #15]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f04f 0a00 	mov.w	sl, #0
 800668c:	4692      	mov	sl, r2
 800668e:	1d1c      	adds	r4, r3, #4
 8006690:	466e      	mov	r6, sp
 8006692:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006696:	4635      	mov	r5, r6
 8006698:	4623      	mov	r3, r4
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066a4:	3410      	adds	r4, #16
 80066a6:	3610      	adds	r6, #16
 80066a8:	4564      	cmp	r4, ip
 80066aa:	d1f4      	bne.n	8006696 <adachi_special_move+0x17e>
 80066ac:	4653      	mov	r3, sl
 80066ae:	464a      	mov	r2, r9
 80066b0:	4641      	mov	r1, r8
 80066b2:	4670      	mov	r0, lr
 80066b4:	f7fe fd6c 	bl	8005190 <adachi_map_straight>
 80066b8:	e043      	b.n	8006742 <adachi_special_move+0x22a>
		} else {
			if (wall_direction == 255) {
 80066ba:	7b7b      	ldrb	r3, [r7, #13]
 80066bc:	2bff      	cmp	r3, #255	; 0xff
 80066be:	d120      	bne.n	8006702 <adachi_special_move+0x1ea>
				adachi_map_special(goal_x, goal_y, goal_scale, walldata.real);
 80066c0:	4b83      	ldr	r3, [pc, #524]	; (80068d0 <adachi_special_move+0x3b8>)
 80066c2:	f897 9016 	ldrb.w	r9, [r7, #22]
 80066c6:	f897 800e 	ldrb.w	r8, [r7, #14]
 80066ca:	f897 e00f 	ldrb.w	lr, [r7, #15]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	f04f 0a00 	mov.w	sl, #0
 80066d4:	4692      	mov	sl, r2
 80066d6:	1d1c      	adds	r4, r3, #4
 80066d8:	466e      	mov	r6, sp
 80066da:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80066de:	4635      	mov	r5, r6
 80066e0:	4623      	mov	r3, r4
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066ec:	3410      	adds	r4, #16
 80066ee:	3610      	adds	r6, #16
 80066f0:	4564      	cmp	r4, ip
 80066f2:	d1f4      	bne.n	80066de <adachi_special_move+0x1c6>
 80066f4:	4653      	mov	r3, sl
 80066f6:	464a      	mov	r2, r9
 80066f8:	4641      	mov	r1, r8
 80066fa:	4670      	mov	r0, lr
 80066fc:	f000 f97a 	bl	80069f4 <adachi_map_special>
 8006700:	e01f      	b.n	8006742 <adachi_special_move+0x22a>
			} else {
				adachi_map_special(goal_x, goal_y, goal_scale, walldata.real);
 8006702:	4b73      	ldr	r3, [pc, #460]	; (80068d0 <adachi_special_move+0x3b8>)
 8006704:	f897 9016 	ldrb.w	r9, [r7, #22]
 8006708:	f897 800e 	ldrb.w	r8, [r7, #14]
 800670c:	f897 e00f 	ldrb.w	lr, [r7, #15]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	f04f 0a00 	mov.w	sl, #0
 8006716:	4692      	mov	sl, r2
 8006718:	1d1c      	adds	r4, r3, #4
 800671a:	466e      	mov	r6, sp
 800671c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006720:	4635      	mov	r5, r6
 8006722:	4623      	mov	r3, r4
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	6859      	ldr	r1, [r3, #4]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800672e:	3410      	adds	r4, #16
 8006730:	3610      	adds	r6, #16
 8006732:	4564      	cmp	r4, ip
 8006734:	d1f4      	bne.n	8006720 <adachi_special_move+0x208>
 8006736:	4653      	mov	r3, sl
 8006738:	464a      	mov	r2, r9
 800673a:	4641      	mov	r1, r8
 800673c:	4670      	mov	r0, lr
 800673e:	f000 f959 	bl	80069f4 <adachi_map_special>
			}
		}
		if (step_map[x.now][y.now] == 0xffff) {
 8006742:	4b60      	ldr	r3, [pc, #384]	; (80068c4 <adachi_special_move+0x3ac>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	4b5f      	ldr	r3, [pc, #380]	; (80068c8 <adachi_special_move+0x3b0>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	4a61      	ldr	r2, [pc, #388]	; (80068d4 <adachi_special_move+0x3bc>)
 8006750:	0103      	lsls	r3, r0, #4
 8006752:	440b      	add	r3, r1
 8006754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <adachi_special_move+0x25c>
			stop90(accel, vel);
 8006760:	edd7 0a01 	vldr	s1, [r7, #4]
 8006764:	ed97 0a02 	vldr	s0, [r7, #8]
 8006768:	f002 ffca 	bl	8009700 <stop90>
			failsafe_flag = 1;
 800676c:	4b54      	ldr	r3, [pc, #336]	; (80068c0 <adachi_special_move+0x3a8>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
			break;
 8006772:	e108      	b.n	8006986 <adachi_special_move+0x46e>
		}

		if ((goal_scale == 1) && ((x.now == goal_x && y.now == goal_y))) { //帰宅時
 8006774:	7dbb      	ldrb	r3, [r7, #22]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d14b      	bne.n	8006812 <adachi_special_move+0x2fa>
 800677a:	4b52      	ldr	r3, [pc, #328]	; (80068c4 <adachi_special_move+0x3ac>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	429a      	cmp	r2, r3
 8006782:	d146      	bne.n	8006812 <adachi_special_move+0x2fa>
 8006784:	4b50      	ldr	r3, [pc, #320]	; (80068c8 <adachi_special_move+0x3b0>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	7bba      	ldrb	r2, [r7, #14]
 800678a:	429a      	cmp	r2, r3
 800678c:	d141      	bne.n	8006812 <adachi_special_move+0x2fa>
			if (getWall(goal_x, goal_y, direction, &walldata.real)) {
 800678e:	7bf8      	ldrb	r0, [r7, #15]
 8006790:	7bb9      	ldrb	r1, [r7, #14]
 8006792:	4b51      	ldr	r3, [pc, #324]	; (80068d8 <adachi_special_move+0x3c0>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b4d      	ldr	r3, [pc, #308]	; (80068d0 <adachi_special_move+0x3b8>)
 800679a:	f005 fe03 	bl	800c3a4 <getWall>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02f      	beq.n	8006804 <adachi_special_move+0x2ec>
				set_straight(45.0, accel, vel, vel, 0.0);
 80067a4:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 80068dc <adachi_special_move+0x3c4>
 80067a8:	edd7 1a01 	vldr	s3, [r7, #4]
 80067ac:	ed97 1a01 	vldr	s2, [r7, #4]
 80067b0:	edd7 0a02 	vldr	s1, [r7, #8]
 80067b4:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80068e0 <adachi_special_move+0x3c8>
 80067b8:	f003 fd56 	bl	800a268 <set_straight>
				wait_straight();
 80067bc:	f003 fe48 	bl	800a450 <wait_straight>
				HAL_Delay(50);
 80067c0:	2032      	movs	r0, #50	; 0x32
 80067c2:	f7fa fc5b 	bl	800107c <HAL_Delay>
				set_rotation(180.0, nomal_rotation.accel,
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <adachi_special_move+0x3cc>)
 80067c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80067cc:	4b45      	ldr	r3, [pc, #276]	; (80068e4 <adachi_special_move+0x3cc>)
 80067ce:	ed93 7a00 	vldr	s14, [r3]
 80067d2:	eddf 1a42 	vldr	s3, [pc, #264]	; 80068dc <adachi_special_move+0x3c4>
 80067d6:	eeb0 1a47 	vmov.f32	s2, s14
 80067da:	eef0 0a67 	vmov.f32	s1, s15
 80067de:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80068e8 <adachi_special_move+0x3d0>
 80067e2:	f003 fd7b 	bl	800a2dc <set_rotation>
						nomal_rotation.vel_search, 0.0);
				wait_rotation();
 80067e6:	f003 fe73 	bl	800a4d0 <wait_rotation>
				HAL_Delay(50);
 80067ea:	2032      	movs	r0, #50	; 0x32
 80067ec:	f7fa fc46 	bl	800107c <HAL_Delay>
				back_100();
 80067f0:	f002 fe7c 	bl	80094ec <back_100>
				HAL_Delay(50);
 80067f4:	2032      	movs	r0, #50	; 0x32
 80067f6:	f7fa fc41 	bl	800107c <HAL_Delay>
				rotation_deviation.cumulative = 0.0;
 80067fa:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <adachi_special_move+0x3d4>)
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	605a      	str	r2, [r3, #4]
			} else {
				non_ketuate_goal(accel, vel);
			}
			break;
 8006802:	e0c0      	b.n	8006986 <adachi_special_move+0x46e>
				non_ketuate_goal(accel, vel);
 8006804:	edd7 0a01 	vldr	s1, [r7, #4]
 8006808:	ed97 0a02 	vldr	s0, [r7, #8]
 800680c:	f002 fe8e 	bl	800952c <non_ketuate_goal>
			break;
 8006810:	e0b9      	b.n	8006986 <adachi_special_move+0x46e>
		} else if ((goal_scale > 99 || goal_scale == 4)
 8006812:	7dbb      	ldrb	r3, [r7, #22]
 8006814:	2b63      	cmp	r3, #99	; 0x63
 8006816:	d802      	bhi.n	800681e <adachi_special_move+0x306>
 8006818:	7dbb      	ldrb	r3, [r7, #22]
 800681a:	2b04      	cmp	r3, #4
 800681c:	d10d      	bne.n	800683a <adachi_special_move+0x322>
				&& step_map[x.now][y.now] == 0) {
 800681e:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <adachi_special_move+0x3ac>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <adachi_special_move+0x3b0>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	4619      	mov	r1, r3
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <adachi_special_move+0x3bc>)
 800682c:	0103      	lsls	r3, r0, #4
 800682e:	440b      	add	r3, r1
 8006830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80a5 	beq.w	8006984 <adachi_special_move+0x46c>
			break;
		}

		flag = how_to_move_search_known(direction, (int8_t) x.now,
 800683a:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <adachi_special_move+0x3c0>)
 800683c:	7818      	ldrb	r0, [r3, #0]
 800683e:	4b21      	ldr	r3, [pc, #132]	; (80068c4 <adachi_special_move+0x3ac>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b259      	sxtb	r1, r3
				(int8_t) y.now);
 8006844:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <adachi_special_move+0x3b0>)
 8006846:	781b      	ldrb	r3, [r3, #0]
		flag = how_to_move_search_known(direction, (int8_t) x.now,
 8006848:	b25b      	sxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	f7ff f948 	bl	8005ae0 <how_to_move_search_known>
 8006850:	4603      	mov	r3, r0
 8006852:	747b      	strb	r3, [r7, #17]

		if (flag == 0 || flag == 11) {
 8006854:	7c7b      	ldrb	r3, [r7, #17]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <adachi_special_move+0x348>
 800685a:	7c7b      	ldrb	r3, [r7, #17]
 800685c:	2b0b      	cmp	r3, #11
 800685e:	d105      	bne.n	800686c <adachi_special_move+0x354>
			pass_180(accel, vel);
 8006860:	edd7 0a01 	vldr	s1, [r7, #4]
 8006864:	ed97 0a02 	vldr	s0, [r7, #8]
 8006868:	f002 fc42 	bl	80090f0 <pass_180>
		}
		if (flag == 1) {
 800686c:	7c7b      	ldrb	r3, [r7, #17]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10f      	bne.n	8006892 <adachi_special_move+0x37a>
			if (slalom_flag == 0) {
 8006872:	7d3b      	ldrb	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <adachi_special_move+0x36e>
				turn_left(accel, vel);
 8006878:	edd7 0a01 	vldr	s1, [r7, #4]
 800687c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006880:	f002 fba6 	bl	8008fd0 <turn_left>
 8006884:	e005      	b.n	8006892 <adachi_special_move+0x37a>
			} else {
				slalom_left90(accel, vel);
 8006886:	edd7 0a01 	vldr	s1, [r7, #4]
 800688a:	ed97 0a02 	vldr	s0, [r7, #8]
 800688e:	f002 fe87 	bl	80095a0 <slalom_left90>
			}
		}
		if (flag == 2) {
 8006892:	7c7b      	ldrb	r3, [r7, #17]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d105      	bne.n	80068a4 <adachi_special_move+0x38c>
			ketuate(accel, vel);
 8006898:	edd7 0a01 	vldr	s1, [r7, #4]
 800689c:	ed97 0a02 	vldr	s0, [r7, #8]
 80068a0:	f002 fd7c 	bl	800939c <ketuate>
		}
		if (flag == 3) {
 80068a4:	7c7b      	ldrb	r3, [r7, #17]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d128      	bne.n	80068fc <adachi_special_move+0x3e4>
			if (slalom_flag == 0) {
 80068aa:	7d3b      	ldrb	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11f      	bne.n	80068f0 <adachi_special_move+0x3d8>
				turn_right(accel, vel);
 80068b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80068b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80068b8:	f002 fbd2 	bl	8009060 <turn_right>
 80068bc:	e01e      	b.n	80068fc <adachi_special_move+0x3e4>
 80068be:	bf00      	nop
 80068c0:	20000674 	.word	0x20000674
 80068c4:	20000a90 	.word	0x20000a90
 80068c8:	200194e4 	.word	0x200194e4
 80068cc:	2000069e 	.word	0x2000069e
 80068d0:	20000990 	.word	0x20000990
 80068d4:	20000a94 	.word	0x20000a94
 80068d8:	20000668 	.word	0x20000668
 80068dc:	00000000 	.word	0x00000000
 80068e0:	42340000 	.word	0x42340000
 80068e4:	20000050 	.word	0x20000050
 80068e8:	43340000 	.word	0x43340000
 80068ec:	2001947c 	.word	0x2001947c
			} else {
				slalom_right90(accel, vel);
 80068f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80068f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80068f8:	f002 feaa 	bl	8009650 <slalom_right90>
			}
		}

		if (flag == 4) {
 80068fc:	7c7b      	ldrb	r3, [r7, #17]
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d105      	bne.n	800690e <adachi_special_move+0x3f6>
			turn_180(accel, vel);
 8006902:	edd7 0a01 	vldr	s1, [r7, #4]
 8006906:	ed97 0a02 	vldr	s0, [r7, #8]
 800690a:	f002 fc0d 	bl	8009128 <turn_180>
		}
		if (flag > 11) {
 800690e:	7c7b      	ldrb	r3, [r7, #17]
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d92b      	bls.n	800696c <adachi_special_move+0x454>
			set_straight(180.0 * (flag - 10), 5000.0, 1500.0, vel, vel);
 8006914:	7c7b      	ldrb	r3, [r7, #17]
 8006916:	3b0a      	subs	r3, #10
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fe2b 	bl	8000574 <__aeabi_i2d>
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <adachi_special_move+0x478>)
 8006924:	f7f9 fe90 	bl	8000648 <__aeabi_dmul>
 8006928:	4603      	mov	r3, r0
 800692a:	460c      	mov	r4, r1
 800692c:	4618      	mov	r0, r3
 800692e:	4621      	mov	r1, r4
 8006930:	f7fa f962 	bl	8000bf8 <__aeabi_d2f>
 8006934:	4603      	mov	r3, r0
 8006936:	ed97 2a01 	vldr	s4, [r7, #4]
 800693a:	edd7 1a01 	vldr	s3, [r7, #4]
 800693e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8006994 <adachi_special_move+0x47c>
 8006942:	eddf 0a15 	vldr	s1, [pc, #84]	; 8006998 <adachi_special_move+0x480>
 8006946:	ee00 3a10 	vmov	s0, r3
 800694a:	f003 fc8d 	bl	800a268 <set_straight>
			wait_straight();
 800694e:	f003 fd7f 	bl	800a450 <wait_straight>
			for (i = 0; i < flag - 10 - 1; i++) {
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
 8006956:	e004      	b.n	8006962 <adachi_special_move+0x44a>
				coordinate();
 8006958:	f004 fe26 	bl	800b5a8 <coordinate>
			for (i = 0; i < flag - 10 - 1; i++) {
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	3301      	adds	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
 8006962:	7dfa      	ldrb	r2, [r7, #23]
 8006964:	7c7b      	ldrb	r3, [r7, #17]
 8006966:	3b0b      	subs	r3, #11
 8006968:	429a      	cmp	r2, r3
 800696a:	dbf5      	blt.n	8006958 <adachi_special_move+0x440>
			}
		}
		coordinate();
 800696c:	f004 fe1c 	bl	800b5a8 <coordinate>
		addWall();
 8006970:	f005 fbea 	bl	800c148 <addWall>
	while (failsafe_flag == 0) {
 8006974:	4b09      	ldr	r3, [pc, #36]	; (800699c <adachi_special_move+0x484>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f43f ae0c 	beq.w	8006596 <adachi_special_move+0x7e>
	}
}
 800697e:	e002      	b.n	8006986 <adachi_special_move+0x46e>
			break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <adachi_special_move+0x46e>
			break;
 8006984:	bf00      	nop
}
 8006986:	bf00      	nop
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006990:	40668000 	.word	0x40668000
 8006994:	44bb8000 	.word	0x44bb8000
 8006998:	459c4000 	.word	0x459c4000
 800699c:	20000674 	.word	0x20000674

080069a0 <check_flag>:

uint8_t check_flag(uint16_t input) {
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	80fb      	strh	r3, [r7, #6]
//	uint16_t shift = 1;
	uint8_t flag = 10;
 80069aa:	230a      	movs	r3, #10
 80069ac:	73fb      	strb	r3, [r7, #15]
	if ((input & (0x400)) != 0) {
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <check_flag+0x1c>
		flag = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x800)) != 0) {
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <check_flag+0x2a>
		flag = 1;
 80069c6:	2301      	movs	r3, #1
 80069c8:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x1000)) != 0) {
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <check_flag+0x38>
		flag = 2;
 80069d4:	2302      	movs	r3, #2
 80069d6:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x2000)) != 0) {
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <check_flag+0x46>
		flag = 3;
 80069e2:	2303      	movs	r3, #3
 80069e4:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <adachi_map_special>:
		HAL_Delay(50);
	}
}

void adachi_map_special(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata_lo) {
 80069f4:	b082      	sub	sp, #8
 80069f6:	b590      	push	{r4, r7, lr}
 80069f8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8006a08:	1dfb      	adds	r3, r7, #7
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	1dbb      	adds	r3, r7, #6
 8006a10:	4602      	mov	r2, r0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	1d7b      	adds	r3, r7, #5
 8006a16:	460a      	mov	r2, r1
 8006a18:	701a      	strb	r2, [r3, #0]
	uint8_t x_adachi, y_adachi;
	queue_t q;
	uint8_t unknown_priority = 3;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
	uint8_t straight_priority = 2;
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t nomal_value = 5;
 8006a26:	2305      	movs	r3, #5
 8006a28:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
	uint8_t flag = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	uint16_t step;

	if (goal_x == 0 && goal_y == 0) {
 8006a32:	1dfb      	adds	r3, r7, #7
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <adachi_map_special+0x54>
 8006a3a:	1dbb      	adds	r3, r7, #6
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <adachi_map_special+0x54>
		straight_priority = 4;
 8006a42:	2304      	movs	r3, #4
 8006a44:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (goal_x == 0 && goal_y == 0) {
 8006a48:	1dfb      	adds	r3, r7, #7
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <adachi_map_special+0x6a>
 8006a50:	1dbb      	adds	r3, r7, #6
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <adachi_map_special+0x6a>
		straight_priority = 4;
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

//	moter_flag = 1;
	q.head = 0;
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 8006a68:	f107 030c 	add.w	r3, r7, #12
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8006a78:	e01f      	b.n	8006aba <adachi_map_special+0xc6>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8006a80:	e011      	b.n	8006aa6 <adachi_map_special+0xb2>
			step_map[x_adachi][y_adachi] = 0xffff;
 8006a82:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006a86:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4ad0      	ldr	r2, [pc, #832]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	440b      	add	r3, r1
 8006a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 8006a9a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8006aa6:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d9e9      	bls.n	8006a82 <adachi_map_special+0x8e>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8006aae:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8006aba:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006abe:	2b0f      	cmp	r3, #15
 8006ac0:	d9db      	bls.n	8006a7a <adachi_map_special+0x86>
		}
	}

	if (goal_scale == 1) {
 8006ac2:	1d7b      	adds	r3, r7, #5
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d11e      	bne.n	8006b08 <adachi_map_special+0x114>
		step_map[goal_x][goal_y] = 0;
 8006aca:	1dfb      	adds	r3, r7, #7
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	1dbb      	adds	r3, r7, #6
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	49bf      	ldr	r1, [pc, #764]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006ad4:	0112      	lsls	r2, r2, #4
 8006ad6:	4413      	add	r3, r2
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006ade:	1dfb      	adds	r3, r7, #7
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006ae6:	1dbb      	adds	r3, r7, #6
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006af4:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006af8:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006afc:	f107 030c 	add.w	r3, r7, #12
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd feb1 	bl	8004868 <queue_push>
 8006b06:	e1ac      	b.n	8006e62 <adachi_map_special+0x46e>
	} else if (goal_scale == 4) {
 8006b08:	1d7b      	adds	r3, r7, #5
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	f040 8085 	bne.w	8006c1c <adachi_map_special+0x228>
		step_map[goal_x][goal_y] = 0;
 8006b12:	1dfb      	adds	r3, r7, #7
 8006b14:	781a      	ldrb	r2, [r3, #0]
 8006b16:	1dbb      	adds	r3, r7, #6
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	49ad      	ldr	r1, [pc, #692]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006b1c:	0112      	lsls	r2, r2, #4
 8006b1e:	4413      	add	r3, r2
 8006b20:	2200      	movs	r2, #0
 8006b22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006b26:	1dfb      	adds	r3, r7, #7
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006b2e:	1dbb      	adds	r3, r7, #6
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006b3c:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006b40:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fe8d 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 8006b4e:	1dfb      	adds	r3, r7, #7
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	1dbb      	adds	r3, r7, #6
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	499d      	ldr	r1, [pc, #628]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006b5a:	0112      	lsls	r2, r2, #4
 8006b5c:	4413      	add	r3, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8006b64:	1dfb      	adds	r3, r7, #7
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006b70:	1dbb      	adds	r3, r7, #6
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006b7e:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006b82:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006b86:	f107 030c 	add.w	r3, r7, #12
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fe6c 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 8006b90:	1dfb      	adds	r3, r7, #7
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	1dbb      	adds	r3, r7, #6
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	498d      	ldr	r1, [pc, #564]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006b9c:	0112      	lsls	r2, r2, #4
 8006b9e:	4413      	add	r3, r2
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006ba6:	1dfb      	adds	r3, r7, #7
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y + 1;
 8006bae:	1dbb      	adds	r3, r7, #6
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006bc0:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006bc4:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006bc8:	f107 030c 	add.w	r3, r7, #12
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fd fe4b 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 8006bd2:	1dfb      	adds	r3, r7, #7
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	497c      	ldr	r1, [pc, #496]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006be0:	0112      	lsls	r2, r2, #4
 8006be2:	4413      	add	r3, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8006bea:	1dfb      	adds	r3, r7, #7
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y + 1;
 8006bf6:	1dbb      	adds	r3, r7, #6
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006c08:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006c0c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006c10:	f107 030c 	add.w	r3, r7, #12
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd fe27 	bl	8004868 <queue_push>
 8006c1a:	e122      	b.n	8006e62 <adachi_map_special+0x46e>
	} else if (goal_scale == 100) {
 8006c1c:	1d7b      	adds	r3, r7, #5
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b64      	cmp	r3, #100	; 0x64
 8006c22:	d144      	bne.n	8006cae <adachi_map_special+0x2ba>
		step_map[goal_x][goal_y] = 0;
 8006c24:	1dfb      	adds	r3, r7, #7
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	1dbb      	adds	r3, r7, #6
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4968      	ldr	r1, [pc, #416]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006c2e:	0112      	lsls	r2, r2, #4
 8006c30:	4413      	add	r3, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006c38:	1dfb      	adds	r3, r7, #7
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006c40:	1dbb      	adds	r3, r7, #6
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006c4e:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006c52:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fd fe04 	bl	8004868 <queue_push>
		if (goal_y < 15) {
 8006c60:	1dbb      	adds	r3, r7, #6
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b0e      	cmp	r3, #14
 8006c66:	f200 80fc 	bhi.w	8006e62 <adachi_map_special+0x46e>
			step_map[goal_x][goal_y + 1] = 0;
 8006c6a:	1dfb      	adds	r3, r7, #7
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	1dbb      	adds	r3, r7, #6
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4956      	ldr	r1, [pc, #344]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006c76:	0112      	lsls	r2, r2, #4
 8006c78:	4413      	add	r3, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8006c80:	1dfb      	adds	r3, r7, #7
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y + 1;
 8006c88:	1dbb      	adds	r3, r7, #6
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8006c9a:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006c9e:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd fdde 	bl	8004868 <queue_push>
 8006cac:	e0d9      	b.n	8006e62 <adachi_map_special+0x46e>
		}
	} else if (goal_scale == 101) {
 8006cae:	1d7b      	adds	r3, r7, #5
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b65      	cmp	r3, #101	; 0x65
 8006cb4:	d144      	bne.n	8006d40 <adachi_map_special+0x34c>
		step_map[goal_x][goal_y] = 0;
 8006cb6:	1dfb      	adds	r3, r7, #7
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	1dbb      	adds	r3, r7, #6
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	4944      	ldr	r1, [pc, #272]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006cc0:	0112      	lsls	r2, r2, #4
 8006cc2:	4413      	add	r3, r2
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006cca:	1dfb      	adds	r3, r7, #7
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006cd2:	1dbb      	adds	r3, r7, #6
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006ce0:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006ce4:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fd fdbb 	bl	8004868 <queue_push>
		if (goal_x > 0) {
 8006cf2:	1dfb      	adds	r3, r7, #7
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80b3 	beq.w	8006e62 <adachi_map_special+0x46e>
			step_map[goal_x - 1][goal_y] = 0;
 8006cfc:	1dfb      	adds	r3, r7, #7
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	1dbb      	adds	r3, r7, #6
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	4932      	ldr	r1, [pc, #200]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006d08:	0112      	lsls	r2, r2, #4
 8006d0a:	4413      	add	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x - 1;
 8006d12:	1dfb      	adds	r3, r7, #7
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y;
 8006d1e:	1dbb      	adds	r3, r7, #6
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8006d2c:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006d30:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fd95 	bl	8004868 <queue_push>
 8006d3e:	e090      	b.n	8006e62 <adachi_map_special+0x46e>
		}
	} else if (goal_scale == 102) {
 8006d40:	1d7b      	adds	r3, r7, #5
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b66      	cmp	r3, #102	; 0x66
 8006d46:	d145      	bne.n	8006dd4 <adachi_map_special+0x3e0>
		step_map[goal_x][goal_y] = 0;
 8006d48:	1dfb      	adds	r3, r7, #7
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	1dbb      	adds	r3, r7, #6
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	491f      	ldr	r1, [pc, #124]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	4413      	add	r3, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006d5c:	1dfb      	adds	r3, r7, #7
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006d64:	1dbb      	adds	r3, r7, #6
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006d72:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006d76:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006d7a:	f107 030c 	add.w	r3, r7, #12
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd fd72 	bl	8004868 <queue_push>
		if (goal_y > 0) {
 8006d84:	1dbb      	adds	r3, r7, #6
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d06a      	beq.n	8006e62 <adachi_map_special+0x46e>
			step_map[goal_x][goal_y - 1] = 0;
 8006d8c:	1dfb      	adds	r3, r7, #7
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	1dbb      	adds	r3, r7, #6
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	490e      	ldr	r1, [pc, #56]	; (8006dd0 <adachi_map_special+0x3dc>)
 8006d98:	0112      	lsls	r2, r2, #4
 8006d9a:	4413      	add	r3, r2
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8006da2:	1dfb      	adds	r3, r7, #7
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y - 1;
 8006daa:	1dbb      	adds	r3, r7, #6
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8006dbc:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006dc0:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd fd4d 	bl	8004868 <queue_push>
 8006dce:	e048      	b.n	8006e62 <adachi_map_special+0x46e>
 8006dd0:	20000a94 	.word	0x20000a94
		}
	} else if (goal_scale == 103) {
 8006dd4:	1d7b      	adds	r3, r7, #5
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b67      	cmp	r3, #103	; 0x67
 8006dda:	d142      	bne.n	8006e62 <adachi_map_special+0x46e>
		step_map[goal_x][goal_y] = 0;
 8006ddc:	1dfb      	adds	r3, r7, #7
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	1dbb      	adds	r3, r7, #6
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	49e3      	ldr	r1, [pc, #908]	; (8007174 <adachi_map_special+0x780>)
 8006de6:	0112      	lsls	r2, r2, #4
 8006de8:	4413      	add	r3, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006df0:	1dfb      	adds	r3, r7, #7
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006df8:	1dbb      	adds	r3, r7, #6
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006e06:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006e0a:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006e0e:	f107 030c 	add.w	r3, r7, #12
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd fd28 	bl	8004868 <queue_push>
		if (goal_x < 15) {
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b0e      	cmp	r3, #14
 8006e1e:	d820      	bhi.n	8006e62 <adachi_map_special+0x46e>
			step_map[goal_x + 1][goal_y] = 0;
 8006e20:	1dfb      	adds	r3, r7, #7
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	1dbb      	adds	r3, r7, #6
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	49d2      	ldr	r1, [pc, #840]	; (8007174 <adachi_map_special+0x780>)
 8006e2c:	0112      	lsls	r2, r2, #4
 8006e2e:	4413      	add	r3, r2
 8006e30:	2200      	movs	r2, #0
 8006e32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x + 1;
 8006e36:	1dfb      	adds	r3, r7, #7
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y;
 8006e42:	1dbb      	adds	r3, r7, #6
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8006e50:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006e54:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006e58:	f107 030c 	add.w	r3, r7, #12
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fd fd03 	bl	8004868 <queue_push>
		}
	}

	do {
		flag = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
		queue_pop(&q, &x_adachi, &y_adachi);
 8006e68:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8006e6c:	f207 2111 	addw	r1, r7, #529	; 0x211
 8006e70:	f107 030c 	add.w	r3, r7, #12
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd fcc5 	bl	8004804 <queue_pop>
//		while (step + 3 < step_map[x_adachi][y_adachi]) {
//			queue_push(&q, x_adachi, y_adachi);
//			queue_pop(&q, &x_adachi, &y_adachi);
//		}

		step = step_map[x_adachi][y_adachi];
 8006e7a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006e7e:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006e82:	4611      	mov	r1, r2
 8006e84:	4abb      	ldr	r2, [pc, #748]	; (8007174 <adachi_map_special+0x780>)
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	440b      	add	r3, r1
 8006e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8e:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
//			}
//			queue_push(&q, x_adachi + 1, y_adachi);
//			flag = 10;
//		}
///////////////////////////////////////////////////////////////////
		if ((getWall(x_adachi, y_adachi, North, &walldata_lo) == 0)
 8006e92:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006e96:	4618      	mov	r0, r3
 8006e98:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f005 fa7e 	bl	800c3a4 <getWall>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 80eb 	bne.w	8007086 <adachi_map_special+0x692>
				&& ((y_adachi + 1) < 16)) {
 8006eb0:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	f300 80e5 	bgt.w	8007086 <adachi_map_special+0x692>
			if (((step_map[x_adachi][y_adachi - 1] < step)
 8006ebc:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	49aa      	ldr	r1, [pc, #680]	; (8007174 <adachi_map_special+0x780>)
 8006eca:	0112      	lsls	r2, r2, #4
 8006ecc:	4413      	add	r3, r2
 8006ece:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006ed2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d956      	bls.n	8006f88 <adachi_map_special+0x594>
					&& (step_map[x_adachi][y_adachi - 1] >= step - nomal_value))
 8006eda:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	49a3      	ldr	r1, [pc, #652]	; (8007174 <adachi_map_special+0x780>)
 8006ee8:	0112      	lsls	r2, r2, #4
 8006eea:	4413      	add	r3, r2
 8006eec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8006ef6:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	4299      	cmp	r1, r3
 8006efe:	db43      	blt.n	8006f88 <adachi_map_special+0x594>
					&& ((y_adachi - 1) >= 0)
 8006f00:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006f04:	3b01      	subs	r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	db3e      	blt.n	8006f88 <adachi_map_special+0x594>
					&& getWall(x_adachi, y_adachi, South, &walldata.adachi) == 0
 8006f0a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006f14:	4619      	mov	r1, r3
 8006f16:	4b98      	ldr	r3, [pc, #608]	; (8007178 <adachi_map_special+0x784>)
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f005 fa43 	bl	800c3a4 <getWall>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d131      	bne.n	8006f88 <adachi_map_special+0x594>
					&& step_map[x_adachi][y_adachi + 1]
 8006f24:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006f2e:	3301      	adds	r3, #1
 8006f30:	4990      	ldr	r1, [pc, #576]	; (8007174 <adachi_map_special+0x780>)
 8006f32:	0112      	lsls	r2, r2, #4
 8006f34:	4413      	add	r3, r2
 8006f36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006f3a:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 8006f3c:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8006f40:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8006f44:	441a      	add	r2, r3
 8006f46:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi + 1]
 8006f4e:	4299      	cmp	r1, r3
 8006f50:	dd1a      	ble.n	8006f88 <adachi_map_special+0x594>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006f52:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8006f5c:	4413      	add	r3, r2
 8006f5e:	b299      	uxth	r1, r3
						- straight_priority;
 8006f60:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006f64:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006f66:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006f6a:	461c      	mov	r4, r3
 8006f6c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006f70:	3301      	adds	r3, #1
						- straight_priority;
 8006f72:	1a8a      	subs	r2, r1, r2
 8006f74:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006f76:	497f      	ldr	r1, [pc, #508]	; (8007174 <adachi_map_special+0x780>)
 8006f78:	0122      	lsls	r2, r4, #4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, North, &walldata.checked) == 0)
 8006f88:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006f92:	4619      	mov	r1, r3
 8006f94:	4b79      	ldr	r3, [pc, #484]	; (800717c <adachi_map_special+0x788>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	f005 fa04 	bl	800c3a4 <getWall>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d131      	bne.n	8007006 <adachi_map_special+0x612>
					&& (step_map[x_adachi][y_adachi + 1]
 8006fa2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006fac:	3301      	adds	r3, #1
 8006fae:	4971      	ldr	r1, [pc, #452]	; (8007174 <adachi_map_special+0x780>)
 8006fb0:	0112      	lsls	r2, r2, #4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006fb8:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1)) {
 8006fba:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8006fbe:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8006fc2:	441a      	add	r2, r3
 8006fc4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	3301      	adds	r3, #1
					&& (step_map[x_adachi][y_adachi + 1]
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	dd1a      	ble.n	8007006 <adachi_map_special+0x612>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006fd0:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8006fda:	4413      	add	r3, r2
 8006fdc:	b299      	uxth	r1, r3
						- unknown_priority;
 8006fde:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8006fe2:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006fe4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006fe8:	461c      	mov	r4, r3
 8006fea:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006fee:	3301      	adds	r3, #1
						- unknown_priority;
 8006ff0:	1a8a      	subs	r2, r1, r2
 8006ff2:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8006ff4:	495f      	ldr	r1, [pc, #380]	; (8007174 <adachi_map_special+0x780>)
 8006ff6:	0122      	lsls	r2, r4, #4
 8006ff8:	4413      	add	r3, r2
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi][y_adachi + 1] > step + nomal_value + 1
 8007006:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800700a:	461a      	mov	r2, r3
 800700c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007010:	3301      	adds	r3, #1
 8007012:	4958      	ldr	r1, [pc, #352]	; (8007174 <adachi_map_special+0x780>)
 8007014:	0112      	lsls	r2, r2, #4
 8007016:	4413      	add	r3, r2
 8007018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800701c:	4619      	mov	r1, r3
 800701e:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007022:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007026:	4413      	add	r3, r2
 8007028:	3301      	adds	r3, #1
 800702a:	4299      	cmp	r1, r3
 800702c:	dd19      	ble.n	8007062 <adachi_map_special+0x66e>
					&& flag == 0) {
 800702e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <adachi_map_special+0x66e>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value;
 8007036:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800703a:	b299      	uxth	r1, r3
 800703c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007040:	461c      	mov	r4, r3
 8007042:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007046:	3301      	adds	r3, #1
 8007048:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800704c:	440a      	add	r2, r1
 800704e:	b290      	uxth	r0, r2
 8007050:	4948      	ldr	r1, [pc, #288]	; (8007174 <adachi_map_special+0x780>)
 8007052:	0122      	lsls	r2, r4, #4
 8007054:	4413      	add	r3, r2
 8007056:	4602      	mov	r2, r0
 8007058:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 8007062:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007066:	2b01      	cmp	r3, #1
 8007068:	d10d      	bne.n	8007086 <adachi_map_special+0x692>
				queue_push(&q, x_adachi, y_adachi + 1);
 800706a:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800706e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007072:	3301      	adds	r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	f107 030c 	add.w	r3, r7, #12
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd fbf4 	bl	8004868 <queue_push>
				flag = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata_lo) == 0)
 8007086:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800708a:	4618      	mov	r0, r3
 800708c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007090:	4619      	mov	r1, r3
 8007092:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8007096:	2201      	movs	r2, #1
 8007098:	f005 f984 	bl	800c3a4 <getWall>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f040 80ed 	bne.w	800727e <adachi_map_special+0x88a>
				&& ((x_adachi - 1) >= 0)) {
 80070a4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f2c0 80e7 	blt.w	800727e <adachi_map_special+0x88a>
			if (((step_map[x_adachi + 1][y_adachi] < step)
 80070b0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80070b4:	3301      	adds	r3, #1
 80070b6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80070ba:	4611      	mov	r1, r2
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <adachi_map_special+0x780>)
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	440b      	add	r3, r1
 80070c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d95b      	bls.n	8007186 <adachi_map_special+0x792>
					&& (step_map[x_adachi + 1][y_adachi] >= step - nomal_value))
 80070ce:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80070d2:	3301      	adds	r3, #1
 80070d4:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80070d8:	4611      	mov	r1, r2
 80070da:	4a26      	ldr	r2, [pc, #152]	; (8007174 <adachi_map_special+0x780>)
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	440b      	add	r3, r1
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	4619      	mov	r1, r3
 80070e6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80070ea:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	4299      	cmp	r1, r3
 80070f2:	db48      	blt.n	8007186 <adachi_map_special+0x792>
					&& ((x_adachi + 1) < 16)
 80070f4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80070f8:	3301      	adds	r3, #1
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	dc43      	bgt.n	8007186 <adachi_map_special+0x792>
					&& (getWall(x_adachi, y_adachi, East, &walldata.adachi) == 0)
 80070fe:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007102:	4618      	mov	r0, r3
 8007104:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007108:	4619      	mov	r1, r3
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <adachi_map_special+0x784>)
 800710c:	2203      	movs	r2, #3
 800710e:	f005 f949 	bl	800c3a4 <getWall>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d136      	bne.n	8007186 <adachi_map_special+0x792>
					&& (step_map[x_adachi - 1][y_adachi]
 8007118:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800711c:	3b01      	subs	r3, #1
 800711e:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007122:	4611      	mov	r1, r2
 8007124:	4a13      	ldr	r2, [pc, #76]	; (8007174 <adachi_map_special+0x780>)
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	440b      	add	r3, r1
 800712a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712e:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1)) {
 8007130:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007134:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007138:	441a      	add	r2, r3
 800713a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	3301      	adds	r3, #1
					&& (step_map[x_adachi - 1][y_adachi]
 8007142:	4299      	cmp	r1, r3
 8007144:	dd1f      	ble.n	8007186 <adachi_map_special+0x792>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 8007146:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007150:	4413      	add	r3, r2
 8007152:	b299      	uxth	r1, r3
						- straight_priority;
 8007154:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007158:	b29a      	uxth	r2, r3
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 800715a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800715e:	3b01      	subs	r3, #1
 8007160:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- straight_priority;
 8007164:	1a8a      	subs	r2, r1, r2
 8007166:	b291      	uxth	r1, r2
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 8007168:	4a02      	ldr	r2, [pc, #8]	; (8007174 <adachi_map_special+0x780>)
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4403      	add	r3, r0
 800716e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007172:	e005      	b.n	8007180 <adachi_map_special+0x78c>
 8007174:	20000a94 	.word	0x20000a94
 8007178:	20000a18 	.word	0x20000a18
 800717c:	200009d4 	.word	0x200009d4
				flag = 1;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, West, &walldata.checked) == 0)
 8007186:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800718a:	4618      	mov	r0, r3
 800718c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007190:	4619      	mov	r1, r3
 8007192:	4bdf      	ldr	r3, [pc, #892]	; (8007510 <adachi_map_special+0xb1c>)
 8007194:	2201      	movs	r2, #1
 8007196:	f005 f905 	bl	800c3a4 <getWall>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d12f      	bne.n	8007200 <adachi_map_special+0x80c>
					&& (step_map[x_adachi - 1][y_adachi]
 80071a0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80071aa:	4611      	mov	r1, r2
 80071ac:	4ad9      	ldr	r2, [pc, #868]	; (8007514 <adachi_map_special+0xb20>)
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	440b      	add	r3, r1
 80071b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b6:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1)) {
 80071b8:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80071bc:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80071c0:	441a      	add	r2, r3
 80071c2:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	3301      	adds	r3, #1
					&& (step_map[x_adachi - 1][y_adachi]
 80071ca:	4299      	cmp	r1, r3
 80071cc:	dd18      	ble.n	8007200 <adachi_map_special+0x80c>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 80071ce:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80071d8:	4413      	add	r3, r2
 80071da:	b299      	uxth	r1, r3
						- unknown_priority;
 80071dc:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80071e0:	b29a      	uxth	r2, r3
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 80071e2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80071e6:	3b01      	subs	r3, #1
 80071e8:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- unknown_priority;
 80071ec:	1a8a      	subs	r2, r1, r2
 80071ee:	b291      	uxth	r1, r2
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 80071f0:	4ac8      	ldr	r2, [pc, #800]	; (8007514 <adachi_map_special+0xb20>)
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	4403      	add	r3, r0
 80071f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi - 1][y_adachi] > step + nomal_value + 1
 8007200:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007204:	3b01      	subs	r3, #1
 8007206:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800720a:	4611      	mov	r1, r2
 800720c:	4ac1      	ldr	r2, [pc, #772]	; (8007514 <adachi_map_special+0xb20>)
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	440b      	add	r3, r1
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	4619      	mov	r1, r3
 8007218:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800721c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007220:	4413      	add	r3, r2
 8007222:	3301      	adds	r3, #1
 8007224:	4299      	cmp	r1, r3
 8007226:	dd18      	ble.n	800725a <adachi_map_special+0x866>
					&& flag == 0) {
 8007228:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800722c:	2b00      	cmp	r3, #0
 800722e:	d114      	bne.n	800725a <adachi_map_special+0x866>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value;
 8007230:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007234:	b299      	uxth	r1, r3
 8007236:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800723a:	3b01      	subs	r3, #1
 800723c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007240:	4610      	mov	r0, r2
 8007242:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007246:	440a      	add	r2, r1
 8007248:	b291      	uxth	r1, r2
 800724a:	4ab2      	ldr	r2, [pc, #712]	; (8007514 <adachi_map_special+0xb20>)
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	4403      	add	r3, r0
 8007250:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}

			if (flag == 1) {
 800725a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800725e:	2b01      	cmp	r3, #1
 8007260:	d10d      	bne.n	800727e <adachi_map_special+0x88a>
				queue_push(&q, x_adachi - 1, y_adachi);
 8007262:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007266:	3b01      	subs	r3, #1
 8007268:	b2d9      	uxtb	r1, r3
 800726a:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800726e:	f107 030c 	add.w	r3, r7, #12
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd faf8 	bl	8004868 <queue_push>
				flag = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata_lo) == 0)
 800727e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007282:	4618      	mov	r0, r3
 8007284:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007288:	4619      	mov	r1, r3
 800728a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800728e:	2202      	movs	r2, #2
 8007290:	f005 f888 	bl	800c3a4 <getWall>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 80eb 	bne.w	8007472 <adachi_map_special+0xa7e>
				&& ((y_adachi - 1) >= 0)) {
 800729c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072a0:	3b01      	subs	r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f2c0 80e5 	blt.w	8007472 <adachi_map_special+0xa7e>
			if (((step_map[x_adachi][y_adachi + 1] < step)
 80072a8:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072ac:	461a      	mov	r2, r3
 80072ae:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072b2:	3301      	adds	r3, #1
 80072b4:	4997      	ldr	r1, [pc, #604]	; (8007514 <adachi_map_special+0xb20>)
 80072b6:	0112      	lsls	r2, r2, #4
 80072b8:	4413      	add	r3, r2
 80072ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80072be:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d956      	bls.n	8007374 <adachi_map_special+0x980>
					&& (step_map[x_adachi][y_adachi + 1] >= step - nomal_value))
 80072c6:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072ca:	461a      	mov	r2, r3
 80072cc:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072d0:	3301      	adds	r3, #1
 80072d2:	4990      	ldr	r1, [pc, #576]	; (8007514 <adachi_map_special+0xb20>)
 80072d4:	0112      	lsls	r2, r2, #4
 80072d6:	4413      	add	r3, r2
 80072d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80072dc:	4619      	mov	r1, r3
 80072de:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80072e2:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	4299      	cmp	r1, r3
 80072ea:	db43      	blt.n	8007374 <adachi_map_special+0x980>
					&& (y_adachi + 1) < 16
 80072ec:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072f0:	3301      	adds	r3, #1
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	dc3e      	bgt.n	8007374 <adachi_map_special+0x980>
					&& getWall(x_adachi, y_adachi, North, &walldata.adachi) == 0
 80072f6:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072fa:	4618      	mov	r0, r3
 80072fc:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007300:	4619      	mov	r1, r3
 8007302:	4b85      	ldr	r3, [pc, #532]	; (8007518 <adachi_map_special+0xb24>)
 8007304:	2200      	movs	r2, #0
 8007306:	f005 f84d 	bl	800c3a4 <getWall>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d131      	bne.n	8007374 <adachi_map_special+0x980>
					&& step_map[x_adachi][y_adachi - 1]
 8007310:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007314:	461a      	mov	r2, r3
 8007316:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800731a:	3b01      	subs	r3, #1
 800731c:	497d      	ldr	r1, [pc, #500]	; (8007514 <adachi_map_special+0xb20>)
 800731e:	0112      	lsls	r2, r2, #4
 8007320:	4413      	add	r3, r2
 8007322:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007326:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 8007328:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800732c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007330:	441a      	add	r2, r3
 8007332:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi - 1]
 800733a:	4299      	cmp	r1, r3
 800733c:	dd1a      	ble.n	8007374 <adachi_map_special+0x980>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 800733e:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007348:	4413      	add	r3, r2
 800734a:	b299      	uxth	r1, r3
						- straight_priority;
 800734c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007350:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 8007352:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007356:	461c      	mov	r4, r3
 8007358:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800735c:	3b01      	subs	r3, #1
						- straight_priority;
 800735e:	1a8a      	subs	r2, r1, r2
 8007360:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 8007362:	496c      	ldr	r1, [pc, #432]	; (8007514 <adachi_map_special+0xb20>)
 8007364:	0122      	lsls	r2, r4, #4
 8007366:	4413      	add	r3, r2
 8007368:	4602      	mov	r2, r0
 800736a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, South, &walldata.checked) == 0)
 8007374:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007378:	4618      	mov	r0, r3
 800737a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800737e:	4619      	mov	r1, r3
 8007380:	4b63      	ldr	r3, [pc, #396]	; (8007510 <adachi_map_special+0xb1c>)
 8007382:	2202      	movs	r2, #2
 8007384:	f005 f80e 	bl	800c3a4 <getWall>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d131      	bne.n	80073f2 <adachi_map_special+0x9fe>
					&& step_map[x_adachi][y_adachi - 1]
 800738e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007392:	461a      	mov	r2, r3
 8007394:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007398:	3b01      	subs	r3, #1
 800739a:	495e      	ldr	r1, [pc, #376]	; (8007514 <adachi_map_special+0xb20>)
 800739c:	0112      	lsls	r2, r2, #4
 800739e:	4413      	add	r3, r2
 80073a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80073a4:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1) {
 80073a6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80073aa:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80073ae:	441a      	add	r2, r3
 80073b0:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi - 1]
 80073b8:	4299      	cmp	r1, r3
 80073ba:	dd1a      	ble.n	80073f2 <adachi_map_special+0x9fe>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 80073bc:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80073c6:	4413      	add	r3, r2
 80073c8:	b299      	uxth	r1, r3
						- unknown_priority;
 80073ca:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80073ce:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 80073d0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80073d4:	461c      	mov	r4, r3
 80073d6:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80073da:	3b01      	subs	r3, #1
						- unknown_priority;
 80073dc:	1a8a      	subs	r2, r1, r2
 80073de:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 80073e0:	494c      	ldr	r1, [pc, #304]	; (8007514 <adachi_map_special+0xb20>)
 80073e2:	0122      	lsls	r2, r4, #4
 80073e4:	4413      	add	r3, r2
 80073e6:	4602      	mov	r2, r0
 80073e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi][y_adachi - 1] > step + nomal_value + 1
 80073f2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80073f6:	461a      	mov	r2, r3
 80073f8:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80073fc:	3b01      	subs	r3, #1
 80073fe:	4945      	ldr	r1, [pc, #276]	; (8007514 <adachi_map_special+0xb20>)
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	4413      	add	r3, r2
 8007404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007408:	4619      	mov	r1, r3
 800740a:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800740e:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007412:	4413      	add	r3, r2
 8007414:	3301      	adds	r3, #1
 8007416:	4299      	cmp	r1, r3
 8007418:	dd19      	ble.n	800744e <adachi_map_special+0xa5a>
					&& flag == 0) {
 800741a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800741e:	2b00      	cmp	r3, #0
 8007420:	d115      	bne.n	800744e <adachi_map_special+0xa5a>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value;
 8007422:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007426:	b299      	uxth	r1, r3
 8007428:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800742c:	461c      	mov	r4, r3
 800742e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007432:	3b01      	subs	r3, #1
 8007434:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007438:	440a      	add	r2, r1
 800743a:	b290      	uxth	r0, r2
 800743c:	4935      	ldr	r1, [pc, #212]	; (8007514 <adachi_map_special+0xb20>)
 800743e:	0122      	lsls	r2, r4, #4
 8007440:	4413      	add	r3, r2
 8007442:	4602      	mov	r2, r0
 8007444:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 800744e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007452:	2b01      	cmp	r3, #1
 8007454:	d10d      	bne.n	8007472 <adachi_map_special+0xa7e>
				queue_push(&q, x_adachi, y_adachi - 1);
 8007456:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800745a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800745e:	3b01      	subs	r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	f107 030c 	add.w	r3, r7, #12
 8007466:	4618      	mov	r0, r3
 8007468:	f7fd f9fe 	bl	8004868 <queue_push>
				flag = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata_lo) == 0)
 8007472:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007476:	4618      	mov	r0, r3
 8007478:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800747c:	4619      	mov	r1, r3
 800747e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8007482:	2203      	movs	r2, #3
 8007484:	f004 ff8e 	bl	800c3a4 <getWall>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 80ff 	bne.w	800768e <adachi_map_special+0xc9a>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 8007490:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007494:	3301      	adds	r3, #1
 8007496:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800749a:	4611      	mov	r1, r2
 800749c:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <adachi_map_special+0xb20>)
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	440b      	add	r3, r1
 80074a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80074ac:	3301      	adds	r3, #1
 80074ae:	429a      	cmp	r2, r3
 80074b0:	f340 80ed 	ble.w	800768e <adachi_map_special+0xc9a>
				&& ((x_adachi + 1) < 16)) {
 80074b4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074b8:	3301      	adds	r3, #1
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	f300 80e7 	bgt.w	800768e <adachi_map_special+0xc9a>
			if (((step_map[x_adachi - 1][y_adachi] < step)
 80074c0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80074ca:	4611      	mov	r1, r2
 80074cc:	4a11      	ldr	r2, [pc, #68]	; (8007514 <adachi_map_special+0xb20>)
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	440b      	add	r3, r1
 80074d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80074da:	429a      	cmp	r2, r3
 80074dc:	d95b      	bls.n	8007596 <adachi_map_special+0xba2>
					&& (step_map[x_adachi - 1][y_adachi] >= step - nomal_value))
 80074de:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074e2:	3b01      	subs	r3, #1
 80074e4:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80074e8:	4611      	mov	r1, r2
 80074ea:	4a0a      	ldr	r2, [pc, #40]	; (8007514 <adachi_map_special+0xb20>)
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	440b      	add	r3, r1
 80074f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f4:	4619      	mov	r1, r3
 80074f6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80074fa:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	4299      	cmp	r1, r3
 8007502:	db48      	blt.n	8007596 <adachi_map_special+0xba2>
					&& (x_adachi - 1) >= 0
 8007504:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007508:	3b01      	subs	r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	db43      	blt.n	8007596 <adachi_map_special+0xba2>
 800750e:	e005      	b.n	800751c <adachi_map_special+0xb28>
 8007510:	200009d4 	.word	0x200009d4
 8007514:	20000a94 	.word	0x20000a94
 8007518:	20000a18 	.word	0x20000a18
					&& getWall(x_adachi, y_adachi, West, &walldata.adachi) == 0
 800751c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007520:	4618      	mov	r0, r3
 8007522:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007526:	4619      	mov	r1, r3
 8007528:	4b62      	ldr	r3, [pc, #392]	; (80076b4 <adachi_map_special+0xcc0>)
 800752a:	2201      	movs	r2, #1
 800752c:	f004 ff3a 	bl	800c3a4 <getWall>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d12f      	bne.n	8007596 <adachi_map_special+0xba2>
					&& step_map[x_adachi + 1][y_adachi]
 8007536:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800753a:	3301      	adds	r3, #1
 800753c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007540:	4611      	mov	r1, r2
 8007542:	4a5d      	ldr	r2, [pc, #372]	; (80076b8 <adachi_map_special+0xcc4>)
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	440b      	add	r3, r1
 8007548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754c:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 800754e:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007552:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007556:	441a      	add	r2, r3
 8007558:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	3301      	adds	r3, #1
					&& step_map[x_adachi + 1][y_adachi]
 8007560:	4299      	cmp	r1, r3
 8007562:	dd18      	ble.n	8007596 <adachi_map_special+0xba2>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007564:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007568:	b29a      	uxth	r2, r3
 800756a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800756e:	4413      	add	r3, r2
 8007570:	b299      	uxth	r1, r3
						- straight_priority;
 8007572:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007576:	b29a      	uxth	r2, r3
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007578:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800757c:	3301      	adds	r3, #1
 800757e:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- straight_priority;
 8007582:	1a8a      	subs	r2, r1, r2
 8007584:	b291      	uxth	r1, r2
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007586:	4a4c      	ldr	r2, [pc, #304]	; (80076b8 <adachi_map_special+0xcc4>)
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4403      	add	r3, r0
 800758c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, East, &walldata.checked) == 0)
 8007596:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800759a:	4618      	mov	r0, r3
 800759c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80075a0:	4619      	mov	r1, r3
 80075a2:	4b46      	ldr	r3, [pc, #280]	; (80076bc <adachi_map_special+0xcc8>)
 80075a4:	2203      	movs	r2, #3
 80075a6:	f004 fefd 	bl	800c3a4 <getWall>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d12f      	bne.n	8007610 <adachi_map_special+0xc1c>
					&& step_map[x_adachi + 1][y_adachi]
 80075b0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80075b4:	3301      	adds	r3, #1
 80075b6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80075ba:	4611      	mov	r1, r2
 80075bc:	4a3e      	ldr	r2, [pc, #248]	; (80076b8 <adachi_map_special+0xcc4>)
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	440b      	add	r3, r1
 80075c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c6:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1) {
 80075c8:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80075cc:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80075d0:	441a      	add	r2, r3
 80075d2:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	3301      	adds	r3, #1
					&& step_map[x_adachi + 1][y_adachi]
 80075da:	4299      	cmp	r1, r3
 80075dc:	dd18      	ble.n	8007610 <adachi_map_special+0xc1c>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 80075de:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80075e8:	4413      	add	r3, r2
 80075ea:	b299      	uxth	r1, r3
						- unknown_priority;
 80075ec:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80075f0:	b29a      	uxth	r2, r3
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 80075f2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80075f6:	3301      	adds	r3, #1
 80075f8:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- unknown_priority;
 80075fc:	1a8a      	subs	r2, r1, r2
 80075fe:	b291      	uxth	r1, r2
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007600:	4a2d      	ldr	r2, [pc, #180]	; (80076b8 <adachi_map_special+0xcc4>)
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	4403      	add	r3, r0
 8007606:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi + 1][y_adachi] > step + nomal_value + 1
 8007610:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007614:	3301      	adds	r3, #1
 8007616:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800761a:	4611      	mov	r1, r2
 800761c:	4a26      	ldr	r2, [pc, #152]	; (80076b8 <adachi_map_special+0xcc4>)
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	440b      	add	r3, r1
 8007622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007626:	4619      	mov	r1, r3
 8007628:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800762c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007630:	4413      	add	r3, r2
 8007632:	3301      	adds	r3, #1
 8007634:	4299      	cmp	r1, r3
 8007636:	dd18      	ble.n	800766a <adachi_map_special+0xc76>
					&& flag == 0) {
 8007638:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800763c:	2b00      	cmp	r3, #0
 800763e:	d114      	bne.n	800766a <adachi_map_special+0xc76>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value;
 8007640:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007644:	b299      	uxth	r1, r3
 8007646:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800764a:	3301      	adds	r3, #1
 800764c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007650:	4610      	mov	r0, r2
 8007652:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007656:	440a      	add	r2, r1
 8007658:	b291      	uxth	r1, r2
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <adachi_map_special+0xcc4>)
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	4403      	add	r3, r0
 8007660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 800766a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800766e:	2b01      	cmp	r3, #1
 8007670:	d10d      	bne.n	800768e <adachi_map_special+0xc9a>
				queue_push(&q, x_adachi + 1, y_adachi);
 8007672:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007676:	3301      	adds	r3, #1
 8007678:	b2d9      	uxtb	r1, r3
 800767a:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd f8f0 	bl	8004868 <queue_push>
				flag = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
//		//myprintf("%d,%d,%d\n", x_adachi, y_adachi, step);
	} while (q.tail != q.head);
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 800769e:	429a      	cmp	r2, r3
 80076a0:	f47f abdf 	bne.w	8006e62 <adachi_map_special+0x46e>
}
 80076a4:	bf00      	nop
 80076a6:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80076aa:	46bd      	mov	sp, r7
 80076ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80076b0:	b002      	add	sp, #8
 80076b2:	4770      	bx	lr
 80076b4:	20000a18 	.word	0x20000a18
 80076b8:	20000a94 	.word	0x20000a94
 80076bc:	200009d4 	.word	0x200009d4

080076c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80076c6:	463b      	mov	r3, r7
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80076d2:	4b57      	ldr	r3, [pc, #348]	; (8007830 <MX_ADC1_Init+0x170>)
 80076d4:	4a57      	ldr	r2, [pc, #348]	; (8007834 <MX_ADC1_Init+0x174>)
 80076d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80076d8:	4b55      	ldr	r3, [pc, #340]	; (8007830 <MX_ADC1_Init+0x170>)
 80076da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80076e0:	4b53      	ldr	r3, [pc, #332]	; (8007830 <MX_ADC1_Init+0x170>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80076e6:	4b52      	ldr	r3, [pc, #328]	; (8007830 <MX_ADC1_Init+0x170>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80076ec:	4b50      	ldr	r3, [pc, #320]	; (8007830 <MX_ADC1_Init+0x170>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80076f2:	4b4f      	ldr	r3, [pc, #316]	; (8007830 <MX_ADC1_Init+0x170>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80076fa:	4b4d      	ldr	r3, [pc, #308]	; (8007830 <MX_ADC1_Init+0x170>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007700:	4b4b      	ldr	r3, [pc, #300]	; (8007830 <MX_ADC1_Init+0x170>)
 8007702:	2200      	movs	r2, #0
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007706:	4b4a      	ldr	r3, [pc, #296]	; (8007830 <MX_ADC1_Init+0x170>)
 8007708:	4a4b      	ldr	r2, [pc, #300]	; (8007838 <MX_ADC1_Init+0x178>)
 800770a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800770c:	4b48      	ldr	r3, [pc, #288]	; (8007830 <MX_ADC1_Init+0x170>)
 800770e:	2200      	movs	r2, #0
 8007710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8007712:	4b47      	ldr	r3, [pc, #284]	; (8007830 <MX_ADC1_Init+0x170>)
 8007714:	2209      	movs	r2, #9
 8007716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007718:	4b45      	ldr	r3, [pc, #276]	; (8007830 <MX_ADC1_Init+0x170>)
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007720:	4b43      	ldr	r3, [pc, #268]	; (8007830 <MX_ADC1_Init+0x170>)
 8007722:	2201      	movs	r2, #1
 8007724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007726:	4842      	ldr	r0, [pc, #264]	; (8007830 <MX_ADC1_Init+0x170>)
 8007728:	f7f9 fcca 	bl	80010c0 <HAL_ADC_Init>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8007732:	f001 f8bf 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007736:	2300      	movs	r3, #0
 8007738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800773a:	2301      	movs	r3, #1
 800773c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800773e:	2302      	movs	r3, #2
 8007740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007742:	463b      	mov	r3, r7
 8007744:	4619      	mov	r1, r3
 8007746:	483a      	ldr	r0, [pc, #232]	; (8007830 <MX_ADC1_Init+0x170>)
 8007748:	f7f9 fde6 	bl	8001318 <HAL_ADC_ConfigChannel>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8007752:	f001 f8af 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 8007756:	2302      	movs	r3, #2
 8007758:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800775a:	463b      	mov	r3, r7
 800775c:	4619      	mov	r1, r3
 800775e:	4834      	ldr	r0, [pc, #208]	; (8007830 <MX_ADC1_Init+0x170>)
 8007760:	f7f9 fdda 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800776a:	f001 f8a3 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800776e:	2302      	movs	r3, #2
 8007770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007772:	2303      	movs	r3, #3
 8007774:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007776:	463b      	mov	r3, r7
 8007778:	4619      	mov	r1, r3
 800777a:	482d      	ldr	r0, [pc, #180]	; (8007830 <MX_ADC1_Init+0x170>)
 800777c:	f7f9 fdcc 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8007786:	f001 f895 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 800778a:	2304      	movs	r3, #4
 800778c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800778e:	463b      	mov	r3, r7
 8007790:	4619      	mov	r1, r3
 8007792:	4827      	ldr	r0, [pc, #156]	; (8007830 <MX_ADC1_Init+0x170>)
 8007794:	f7f9 fdc0 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800779e:	f001 f889 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80077a6:	2305      	movs	r3, #5
 80077a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077aa:	463b      	mov	r3, r7
 80077ac:	4619      	mov	r1, r3
 80077ae:	4820      	ldr	r0, [pc, #128]	; (8007830 <MX_ADC1_Init+0x170>)
 80077b0:	f7f9 fdb2 	bl	8001318 <HAL_ADC_ConfigChannel>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80077ba:	f001 f87b 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 6;
 80077be:	2306      	movs	r3, #6
 80077c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077c2:	463b      	mov	r3, r7
 80077c4:	4619      	mov	r1, r3
 80077c6:	481a      	ldr	r0, [pc, #104]	; (8007830 <MX_ADC1_Init+0x170>)
 80077c8:	f7f9 fda6 	bl	8001318 <HAL_ADC_ConfigChannel>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80077d2:	f001 f86f 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80077d6:	2303      	movs	r3, #3
 80077d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80077da:	2307      	movs	r3, #7
 80077dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077de:	463b      	mov	r3, r7
 80077e0:	4619      	mov	r1, r3
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <MX_ADC1_Init+0x170>)
 80077e4:	f7f9 fd98 	bl	8001318 <HAL_ADC_ConfigChannel>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80077ee:	f001 f861 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 8;
 80077f2:	2308      	movs	r3, #8
 80077f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077f6:	463b      	mov	r3, r7
 80077f8:	4619      	mov	r1, r3
 80077fa:	480d      	ldr	r0, [pc, #52]	; (8007830 <MX_ADC1_Init+0x170>)
 80077fc:	f7f9 fd8c 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8007806:	f001 f855 	bl	80088b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800780a:	2309      	movs	r3, #9
 800780c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800780e:	2309      	movs	r3, #9
 8007810:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007812:	463b      	mov	r3, r7
 8007814:	4619      	mov	r1, r3
 8007816:	4806      	ldr	r0, [pc, #24]	; (8007830 <MX_ADC1_Init+0x170>)
 8007818:	f7f9 fd7e 	bl	8001318 <HAL_ADC_ConfigChannel>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8007822:	f001 f847 	bl	80088b4 <Error_Handler>
  }

}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000778 	.word	0x20000778
 8007834:	40012000 	.word	0x40012000
 8007838:	0f000001 	.word	0x0f000001

0800783c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007844:	f107 0314 	add.w	r3, r7, #20
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <HAL_ADC_MspInit+0x10c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d170      	bne.n	8007940 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800785e:	2300      	movs	r3, #0
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	4b3a      	ldr	r3, [pc, #232]	; (800794c <HAL_ADC_MspInit+0x110>)
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	4a39      	ldr	r2, [pc, #228]	; (800794c <HAL_ADC_MspInit+0x110>)
 8007868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786c:	6453      	str	r3, [r2, #68]	; 0x44
 800786e:	4b37      	ldr	r3, [pc, #220]	; (800794c <HAL_ADC_MspInit+0x110>)
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	4b33      	ldr	r3, [pc, #204]	; (800794c <HAL_ADC_MspInit+0x110>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	4a32      	ldr	r2, [pc, #200]	; (800794c <HAL_ADC_MspInit+0x110>)
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	6313      	str	r3, [r2, #48]	; 0x30
 800788a:	4b30      	ldr	r3, [pc, #192]	; (800794c <HAL_ADC_MspInit+0x110>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	4b2c      	ldr	r3, [pc, #176]	; (800794c <HAL_ADC_MspInit+0x110>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	4a2b      	ldr	r2, [pc, #172]	; (800794c <HAL_ADC_MspInit+0x110>)
 80078a0:	f043 0302 	orr.w	r3, r3, #2
 80078a4:	6313      	str	r3, [r2, #48]	; 0x30
 80078a6:	4b29      	ldr	r3, [pc, #164]	; (800794c <HAL_ADC_MspInit+0x110>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	60bb      	str	r3, [r7, #8]
 80078b0:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 80078b2:	230f      	movs	r3, #15
 80078b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078b6:	2303      	movs	r3, #3
 80078b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	4619      	mov	r1, r3
 80078c4:	4822      	ldr	r0, [pc, #136]	; (8007950 <HAL_ADC_MspInit+0x114>)
 80078c6:	f7fa ff43 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 80078ca:	2302      	movs	r3, #2
 80078cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078ce:	2303      	movs	r3, #3
 80078d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 80078d6:	f107 0314 	add.w	r3, r7, #20
 80078da:	4619      	mov	r1, r3
 80078dc:	481d      	ldr	r0, [pc, #116]	; (8007954 <HAL_ADC_MspInit+0x118>)
 80078de:	f7fa ff37 	bl	8002750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 80078e4:	4a1d      	ldr	r2, [pc, #116]	; (800795c <HAL_ADC_MspInit+0x120>)
 80078e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078ee:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80078f4:	4b18      	ldr	r3, [pc, #96]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80078fa:	4b17      	ldr	r3, [pc, #92]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 80078fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007900:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 8007904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007908:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 800790c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007910:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007912:	4b11      	ldr	r3, [pc, #68]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 8007914:	2200      	movs	r2, #0
 8007916:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007918:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 800791a:	2200      	movs	r2, #0
 800791c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 8007920:	2200      	movs	r2, #0
 8007922:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 8007926:	f7fa f8b9 	bl	8001a9c <HAL_DMA_Init>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8007930:	f000 ffc0 	bl	80088b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a08      	ldr	r2, [pc, #32]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
 800793a:	4a07      	ldr	r2, [pc, #28]	; (8007958 <HAL_ADC_MspInit+0x11c>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007940:	bf00      	nop
 8007942:	3728      	adds	r7, #40	; 0x28
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40012000 	.word	0x40012000
 800794c:	40023800 	.word	0x40023800
 8007950:	40020000 	.word	0x40020000
 8007954:	40020400 	.word	0x40020400
 8007958:	200007c0 	.word	0x200007c0
 800795c:	40026410 	.word	0x40026410

08007960 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
//	printf("%d\n", g_ADCBuffer[0]);
//	Batt = (float) g_ADCBuffer[0] / 4095 * 3.3 * 2;
//	printf("Batt=%.4f\n", Batt);
//	printf("\n");

}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <calculation_counter>:
 */

#include "buzzer.h"
#include "variable.h"

uint16_t calculation_counter(uint16_t Hz) { //タイマピリオドの計算
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	80fb      	strh	r3, [r7, #6]
	uint16_t count; //設定する値
	if (Hz == 0) {
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <calculation_counter+0x16>
		count = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	81fb      	strh	r3, [r7, #14]
 8007988:	e006      	b.n	8007998 <calculation_counter+0x24>
	} else {
		count = (1000000 / Hz - 1);
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	4a06      	ldr	r2, [pc, #24]	; (80079a8 <calculation_counter+0x34>)
 800798e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	81fb      	strh	r3, [r7, #14]
	}
	return count;
 8007998:	89fb      	ldrh	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	000f4240 	.word	0x000f4240

080079ac <set_buzzer>:

void set_buzzer(uint8_t index, uint16_t Hz, uint16_t ms) {
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
 80079b6:	460b      	mov	r3, r1
 80079b8:	80bb      	strh	r3, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	807b      	strh	r3, [r7, #2]
	buzzer_index = 0;
 80079be:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <set_buzzer+0x54>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
	buzzer_count = 0;
 80079c4:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <set_buzzer+0x58>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	801a      	strh	r2, [r3, #0]
	buzzer[index].ms = ms;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <set_buzzer+0x5c>)
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	887a      	ldrh	r2, [r7, #2]
 80079d4:	805a      	strh	r2, [r3, #2]
	buzzer[index].autoreload = calculation_counter(Hz);
 80079d6:	79fc      	ldrb	r4, [r7, #7]
 80079d8:	88bb      	ldrh	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff ffca 	bl	8007974 <calculation_counter>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <set_buzzer+0x5c>)
 80079e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	buzzer[index + 1].autoreload = 0xffff;
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	3301      	adds	r3, #1
 80079ee:	4a06      	ldr	r2, [pc, #24]	; (8007a08 <set_buzzer+0x5c>)
 80079f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079f4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	2000066a 	.word	0x2000066a
 8007a04:	2000000e 	.word	0x2000000e
 8007a08:	200193a4 	.word	0x200193a4

08007a0c <set_buzzer_mode>:

void set_buzzer_mode(uint8_t mode) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
	buzzer_flag = 0;
 8007a16:	4b30      	ldr	r3, [pc, #192]	; (8007ad8 <set_buzzer_mode+0xcc>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
	if (mode == 0) {
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d107      	bne.n	8007a32 <set_buzzer_mode+0x26>
		set_buzzer(0, C_4, 600);
 8007a22:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a26:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f7ff ffbe 	bl	80079ac <set_buzzer>
 8007a30:	e04b      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 1) {
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d107      	bne.n	8007a48 <set_buzzer_mode+0x3c>
		set_buzzer(0, D_4, 600);
 8007a38:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a3c:	f44f 7193 	mov.w	r1, #294	; 0x126
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7ff ffb3 	bl	80079ac <set_buzzer>
 8007a46:	e040      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 2) {
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d107      	bne.n	8007a5e <set_buzzer_mode+0x52>
		set_buzzer(0, E_4, 600);
 8007a4e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a52:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007a56:	2000      	movs	r0, #0
 8007a58:	f7ff ffa8 	bl	80079ac <set_buzzer>
 8007a5c:	e035      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 3) {
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d107      	bne.n	8007a74 <set_buzzer_mode+0x68>
		set_buzzer(0, F_4, 600);
 8007a64:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a68:	f240 115d 	movw	r1, #349	; 0x15d
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7ff ff9d 	bl	80079ac <set_buzzer>
 8007a72:	e02a      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 4) {
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d107      	bne.n	8007a8a <set_buzzer_mode+0x7e>
		set_buzzer(0, G_4, 600);
 8007a7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a7e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8007a82:	2000      	movs	r0, #0
 8007a84:	f7ff ff92 	bl	80079ac <set_buzzer>
 8007a88:	e01f      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 5) {
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	d107      	bne.n	8007aa0 <set_buzzer_mode+0x94>
		set_buzzer(0, A_4, 600);
 8007a90:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a94:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7ff ff87 	bl	80079ac <set_buzzer>
 8007a9e:	e014      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 6) {
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d107      	bne.n	8007ab6 <set_buzzer_mode+0xaa>
		set_buzzer(0, B_4, 600);
 8007aa6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007aaa:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8007aae:	2000      	movs	r0, #0
 8007ab0:	f7ff ff7c 	bl	80079ac <set_buzzer>
 8007ab4:	e009      	b.n	8007aca <set_buzzer_mode+0xbe>
	} else if (mode == 7) {
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	d106      	bne.n	8007aca <set_buzzer_mode+0xbe>
		set_buzzer(0, C_5, 600);
 8007abc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007ac0:	f240 210b 	movw	r1, #523	; 0x20b
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7ff ff71 	bl	80079ac <set_buzzer>
	}
	buzzer_flag = 1;
 8007aca:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <set_buzzer_mode+0xcc>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	2000066b 	.word	0x2000066b

08007adc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <MX_DMA_Init+0x3c>)
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	4a0b      	ldr	r2, [pc, #44]	; (8007b18 <MX_DMA_Init+0x3c>)
 8007aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007af0:	6313      	str	r3, [r2, #48]	; 0x30
 8007af2:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <MX_DMA_Init+0x3c>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	2038      	movs	r0, #56	; 0x38
 8007b04:	f7f9 ff93 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007b08:	2038      	movs	r0, #56	; 0x38
 8007b0a:	f7f9 ffac 	bl	8001a66 <HAL_NVIC_EnableIRQ>

}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40023800 	.word	0x40023800

08007b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b22:	f107 0314 	add.w	r3, r7, #20
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
 8007b2e:	60da      	str	r2, [r3, #12]
 8007b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	4b48      	ldr	r3, [pc, #288]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	4a47      	ldr	r2, [pc, #284]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b3c:	f043 0304 	orr.w	r3, r3, #4
 8007b40:	6313      	str	r3, [r2, #48]	; 0x30
 8007b42:	4b45      	ldr	r3, [pc, #276]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	4b41      	ldr	r3, [pc, #260]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	4a40      	ldr	r2, [pc, #256]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5e:	4b3e      	ldr	r3, [pc, #248]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	4b3a      	ldr	r3, [pc, #232]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	4a39      	ldr	r2, [pc, #228]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b74:	f043 0301 	orr.w	r3, r3, #1
 8007b78:	6313      	str	r3, [r2, #48]	; 0x30
 8007b7a:	4b37      	ldr	r3, [pc, #220]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b86:	2300      	movs	r3, #0
 8007b88:	607b      	str	r3, [r7, #4]
 8007b8a:	4b33      	ldr	r3, [pc, #204]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	4a32      	ldr	r2, [pc, #200]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b90:	f043 0302 	orr.w	r3, r3, #2
 8007b94:	6313      	str	r3, [r2, #48]	; 0x30
 8007b96:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <MX_GPIO_Init+0x13c>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UI_LED_CENTER_Pin|SENLED_R_Pin, GPIO_PIN_RESET);
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8007ba8:	482c      	ldr	r0, [pc, #176]	; (8007c5c <MX_GPIO_Init+0x140>)
 8007baa:	f7fa ff7b 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|FLAG_LED_Pin 
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f641 2170 	movw	r1, #6768	; 0x1a70
 8007bb4:	482a      	ldr	r0, [pc, #168]	; (8007c60 <MX_GPIO_Init+0x144>)
 8007bb6:	f7fa ff75 	bl	8002aa4 <HAL_GPIO_WritePin>
                          |UI_LED_RIGHT_Pin|SENLED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, GPIO_PIN_RESET);
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4829      	ldr	r0, [pc, #164]	; (8007c64 <MX_GPIO_Init+0x148>)
 8007bc0:	f7fa ff70 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bca:	4825      	ldr	r0, [pc, #148]	; (8007c60 <MX_GPIO_Init+0x144>)
 8007bcc:	f7fa ff6a 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin|MOTER_L_CWCCW_Pin, GPIO_PIN_SET);
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007bd6:	4823      	ldr	r0, [pc, #140]	; (8007c64 <MX_GPIO_Init+0x148>)
 8007bd8:	f7fa ff64 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UI_LED_CENTER_Pin|SENLED_R_Pin;
 8007bdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007be2:	2301      	movs	r3, #1
 8007be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bea:	2300      	movs	r3, #0
 8007bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bee:	f107 0314 	add.w	r3, r7, #20
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4819      	ldr	r0, [pc, #100]	; (8007c5c <MX_GPIO_Init+0x140>)
 8007bf6:	f7fa fdab 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 8007bfa:	f641 3370 	movw	r3, #7024	; 0x1b70
 8007bfe:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|UI_LED_RIGHT_Pin|SENLED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c00:	2301      	movs	r3, #1
 8007c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	4619      	mov	r1, r3
 8007c12:	4813      	ldr	r0, [pc, #76]	; (8007c60 <MX_GPIO_Init+0x144>)
 8007c14:	f7fa fd9c 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 8007c18:	f240 33c1 	movw	r3, #961	; 0x3c1
 8007c1c:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c2a:	f107 0314 	add.w	r3, r7, #20
 8007c2e:	4619      	mov	r1, r3
 8007c30:	480c      	ldr	r0, [pc, #48]	; (8007c64 <MX_GPIO_Init+0x148>)
 8007c32:	f7fa fd8d 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8007c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c40:	2301      	movs	r3, #1
 8007c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4806      	ldr	r0, [pc, #24]	; (8007c64 <MX_GPIO_Init+0x148>)
 8007c4c:	f7fa fd80 	bl	8002750 <HAL_GPIO_Init>

}
 8007c50:	bf00      	nop
 8007c52:	3728      	adds	r7, #40	; 0x28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	40020800 	.word	0x40020800
 8007c60:	40020000 	.word	0x40020000
 8007c64:	40020400 	.word	0x40020400

08007c68 <interrupt_1ms>:
#include "interrupt.h"

void buzzer_1ms(void);
void adc_1ms(void);

void interrupt_1ms(void) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af06      	add	r7, sp, #24

	//encoder
	real_L.vel = read_vel(LEFT); //mm/sec
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f002 ff9e 	bl	800abb0 <read_vel>
 8007c74:	eef0 7a40 	vmov.f32	s15, s0
 8007c78:	4ba1      	ldr	r3, [pc, #644]	; (8007f00 <interrupt_1ms+0x298>)
 8007c7a:	edc3 7a01 	vstr	s15, [r3, #4]
	real_R.vel = read_vel(RIGHT);
 8007c7e:	2001      	movs	r0, #1
 8007c80:	f002 ff96 	bl	800abb0 <read_vel>
 8007c84:	eef0 7a40 	vmov.f32	s15, s0
 8007c88:	4b9e      	ldr	r3, [pc, #632]	; (8007f04 <interrupt_1ms+0x29c>)
 8007c8a:	edc3 7a01 	vstr	s15, [r3, #4]
	integral_1ms(&real_L.dis, &real_L.vel);
 8007c8e:	499e      	ldr	r1, [pc, #632]	; (8007f08 <interrupt_1ms+0x2a0>)
 8007c90:	489e      	ldr	r0, [pc, #632]	; (8007f0c <interrupt_1ms+0x2a4>)
 8007c92:	f003 f941 	bl	800af18 <integral_1ms>
	integral_1ms(&real_R.dis, &real_R.vel);
 8007c96:	499e      	ldr	r1, [pc, #632]	; (8007f10 <interrupt_1ms+0x2a8>)
 8007c98:	489e      	ldr	r0, [pc, #632]	; (8007f14 <interrupt_1ms+0x2ac>)
 8007c9a:	f003 f93d 	bl	800af18 <integral_1ms>
	//encoder
//buzzer
	buzzer_1ms();
 8007c9e:	f000 f979 	bl	8007f94 <buzzer_1ms>
//buzzer

	if (log_flag == 1) {
 8007ca2:	4b9d      	ldr	r3, [pc, #628]	; (8007f18 <interrupt_1ms+0x2b0>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <interrupt_1ms+0x46>
		log_sampling();
 8007caa:	f002 f8e3 	bl	8009e74 <log_sampling>
	}

//ADC
	if (SEN_check_flag == 1) {
 8007cae:	4b9b      	ldr	r3, [pc, #620]	; (8007f1c <interrupt_1ms+0x2b4>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <interrupt_1ms+0x52>
		adc_1ms();
 8007cb6:	f000 f9e3 	bl	8008080 <adc_1ms>
	}
//ADC

//failsafe判定 //|| failsafe_accel > 3.0  real_R.vel > 2000.0 || real_L.vel > 2000.0||
	if ((rotation_deviation.cumulative > 20000.0 //200000
 8007cba:	4b99      	ldr	r3, [pc, #612]	; (8007f20 <interrupt_1ms+0x2b8>)
 8007cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cc0:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8007f24 <interrupt_1ms+0x2bc>
 8007cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ccc:	dc09      	bgt.n	8007ce2 <interrupt_1ms+0x7a>
	|| rotation_deviation.cumulative < -20000.0)
 8007cce:	4b94      	ldr	r3, [pc, #592]	; (8007f20 <interrupt_1ms+0x2b8>)
 8007cd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cd4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8007f28 <interrupt_1ms+0x2c0>
 8007cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce0:	d50a      	bpl.n	8007cf8 <interrupt_1ms+0x90>
			&& translation_parameter.back_rightturn_flag == 0
 8007ce2:	4b92      	ldr	r3, [pc, #584]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007ce4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <interrupt_1ms+0x90>
			&& failsafe_flag == 0) { //|| failsafe_accel > 39.2
 8007cec:	4b90      	ldr	r3, [pc, #576]	; (8007f30 <interrupt_1ms+0x2c8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <interrupt_1ms+0x90>
		failsafe();
 8007cf4:	f000 fb78 	bl	80083e8 <failsafe>
//		printf("R_vel=%6.2f,L_vel=%6.2f,rot_dev=%9.2f,acc=%5.2f\n", real_R.vel,
//				real_L.vel, rotation_deviation.cumulative, failsafe_accel);
	}

	//failsafe処理
	if (failsafe_flag == 1 && failsafe_counter < 1000) {
 8007cf8:	4b8d      	ldr	r3, [pc, #564]	; (8007f30 <interrupt_1ms+0x2c8>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d12c      	bne.n	8007d5a <interrupt_1ms+0xf2>
 8007d00:	4b8c      	ldr	r3, [pc, #560]	; (8007f34 <interrupt_1ms+0x2cc>)
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d08:	d227      	bcs.n	8007d5a <interrupt_1ms+0xf2>
		//	ui_led_3bit(7);
		ideal_translation.accel = 0.0;
 8007d0a:	4b8b      	ldr	r3, [pc, #556]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
		ideal_translation.vel = 0.0;
 8007d12:	4b89      	ldr	r3, [pc, #548]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	605a      	str	r2, [r3, #4]
		run_left_deviation.cumulative = 0.0;
 8007d1a:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <interrupt_1ms+0x2d4>)
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	605a      	str	r2, [r3, #4]
		run_right_deviation.cumulative = 0.0;
 8007d22:	4b87      	ldr	r3, [pc, #540]	; (8007f40 <interrupt_1ms+0x2d8>)
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	605a      	str	r2, [r3, #4]
		failsafe_counter++;
 8007d2a:	4b82      	ldr	r3, [pc, #520]	; (8007f34 <interrupt_1ms+0x2cc>)
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	4b80      	ldr	r3, [pc, #512]	; (8007f34 <interrupt_1ms+0x2cc>)
 8007d34:	801a      	strh	r2, [r3, #0]

		PID_control(&ideal_translation, &real_L, &real_R, &run_left_deviation,
 8007d36:	2300      	movs	r3, #0
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	4b82      	ldr	r3, [pc, #520]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	4b7b      	ldr	r3, [pc, #492]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007d40:	9302      	str	r3, [sp, #8]
 8007d42:	4b81      	ldr	r3, [pc, #516]	; (8007f48 <interrupt_1ms+0x2e0>)
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	4b7e      	ldr	r3, [pc, #504]	; (8007f40 <interrupt_1ms+0x2d8>)
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4b7c      	ldr	r3, [pc, #496]	; (8007f3c <interrupt_1ms+0x2d4>)
 8007d4c:	4a6d      	ldr	r2, [pc, #436]	; (8007f04 <interrupt_1ms+0x29c>)
 8007d4e:	496c      	ldr	r1, [pc, #432]	; (8007f00 <interrupt_1ms+0x298>)
 8007d50:	4879      	ldr	r0, [pc, #484]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007d52:	f002 fe67 	bl	800aa24 <PID_control>
				&run_right_deviation, &run_gain, &translation_parameter, &duty,
				0);
		duty_to_moter();
 8007d56:	f002 fcff 	bl	800a758 <duty_to_moter>
	}

	if (mode & 0x80) { //in_mode　モード中
 8007d5a:	4b7c      	ldr	r3, [pc, #496]	; (8007f4c <interrupt_1ms+0x2e4>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b25b      	sxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f280 80c5 	bge.w	8007ef0 <interrupt_1ms+0x288>
		//gyro
		real_rotation.vel = read_gyro();
 8007d66:	f001 fea3 	bl	8009ab0 <read_gyro>
 8007d6a:	eef0 7a40 	vmov.f32	s15, s0
 8007d6e:	4b78      	ldr	r3, [pc, #480]	; (8007f50 <interrupt_1ms+0x2e8>)
 8007d70:	edc3 7a01 	vstr	s15, [r3, #4]
		integral_1ms(&real_rotation.dis, &real_rotation.vel); //角速度から角度に
 8007d74:	4977      	ldr	r1, [pc, #476]	; (8007f54 <interrupt_1ms+0x2ec>)
 8007d76:	4878      	ldr	r0, [pc, #480]	; (8007f58 <interrupt_1ms+0x2f0>)
 8007d78:	f003 f8ce 	bl	800af18 <integral_1ms>
		//gyro
		failsafe_accel = read_accel();
 8007d7c:	f001 fee4 	bl	8009b48 <read_accel>
 8007d80:	eef0 7a40 	vmov.f32	s15, s0
 8007d84:	4b75      	ldr	r3, [pc, #468]	; (8007f5c <interrupt_1ms+0x2f4>)
 8007d86:	edc3 7a00 	vstr	s15, [r3]

		if (angle_calibration_flag == 1) {
 8007d8a:	4b75      	ldr	r3, [pc, #468]	; (8007f60 <interrupt_1ms+0x2f8>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d118      	bne.n	8007dc4 <interrupt_1ms+0x15c>
			angle_calibration_counter++;
 8007d92:	4b74      	ldr	r3, [pc, #464]	; (8007f64 <interrupt_1ms+0x2fc>)
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	3301      	adds	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	4b72      	ldr	r3, [pc, #456]	; (8007f64 <interrupt_1ms+0x2fc>)
 8007d9c:	801a      	strh	r2, [r3, #0]
			angle_calibration_integral += real_rotation.vel;
 8007d9e:	4b6c      	ldr	r3, [pc, #432]	; (8007f50 <interrupt_1ms+0x2e8>)
 8007da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007da4:	4b70      	ldr	r3, [pc, #448]	; (8007f68 <interrupt_1ms+0x300>)
 8007da6:	edd3 7a00 	vldr	s15, [r3]
 8007daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dae:	4b6e      	ldr	r3, [pc, #440]	; (8007f68 <interrupt_1ms+0x300>)
 8007db0:	edc3 7a00 	vstr	s15, [r3]
			if (angle_calibration_counter == 2000) {
 8007db4:	4b6b      	ldr	r3, [pc, #428]	; (8007f64 <interrupt_1ms+0x2fc>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007dbc:	d102      	bne.n	8007dc4 <interrupt_1ms+0x15c>
				angle_calibration_flag = 0;
 8007dbe:	4b68      	ldr	r3, [pc, #416]	; (8007f60 <interrupt_1ms+0x2f8>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
			}
		}

		wall_control();
 8007dc4:	f003 f950 	bl	800b068 <wall_control>

		//	wallcontrol_value = 0.0;

		if (moter_flag == 1 && failsafe_flag == 0) {
 8007dc8:	4b68      	ldr	r3, [pc, #416]	; (8007f6c <interrupt_1ms+0x304>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	f040 8082 	bne.w	8007ed6 <interrupt_1ms+0x26e>
 8007dd2:	4b57      	ldr	r3, [pc, #348]	; (8007f30 <interrupt_1ms+0x2c8>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d17d      	bne.n	8007ed6 <interrupt_1ms+0x26e>
			if (front_wall_flag == 0) {
 8007dda:	4b65      	ldr	r3, [pc, #404]	; (8007f70 <interrupt_1ms+0x308>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d149      	bne.n	8007e76 <interrupt_1ms+0x20e>
				if (translation_parameter.run_flag == 1) {
 8007de2:	4b52      	ldr	r3, [pc, #328]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007de4:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d104      	bne.n	8007df6 <interrupt_1ms+0x18e>
					control_accel(&ideal_translation, &translation_parameter,
 8007dec:	2200      	movs	r2, #0
 8007dee:	494f      	ldr	r1, [pc, #316]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007df0:	4851      	ldr	r0, [pc, #324]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007df2:	f002 fd33 	bl	800a85c <control_accel>
							0);
				}
				if (rotation_parameter.run_flag == 1) {
 8007df6:	4b5f      	ldr	r3, [pc, #380]	; (8007f74 <interrupt_1ms+0x30c>)
 8007df8:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <interrupt_1ms+0x1a8>
					control_accel(&ideal_rotation, &rotation_parameter, 1);
 8007e00:	2201      	movs	r2, #1
 8007e02:	495c      	ldr	r1, [pc, #368]	; (8007f74 <interrupt_1ms+0x30c>)
 8007e04:	485c      	ldr	r0, [pc, #368]	; (8007f78 <interrupt_1ms+0x310>)
 8007e06:	f002 fd29 	bl	800a85c <control_accel>
					integral_ideal(&ideal_rotation);
 8007e0a:	485b      	ldr	r0, [pc, #364]	; (8007f78 <interrupt_1ms+0x310>)
 8007e0c:	f003 f8b4 	bl	800af78 <integral_ideal>
				}

				PID_control(&ideal_translation, &real_L, &real_R,
 8007e10:	2300      	movs	r3, #0
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	4b4b      	ldr	r3, [pc, #300]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	4b44      	ldr	r3, [pc, #272]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	4b4a      	ldr	r3, [pc, #296]	; (8007f48 <interrupt_1ms+0x2e0>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	4b47      	ldr	r3, [pc, #284]	; (8007f40 <interrupt_1ms+0x2d8>)
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4b45      	ldr	r3, [pc, #276]	; (8007f3c <interrupt_1ms+0x2d4>)
 8007e26:	4a37      	ldr	r2, [pc, #220]	; (8007f04 <interrupt_1ms+0x29c>)
 8007e28:	4935      	ldr	r1, [pc, #212]	; (8007f00 <interrupt_1ms+0x298>)
 8007e2a:	4843      	ldr	r0, [pc, #268]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007e2c:	f002 fdfa 	bl	800aa24 <PID_control>
						&run_left_deviation, &run_right_deviation, &run_gain,
						&translation_parameter, &duty, 0);
				if (translation_parameter.back_rightturn_flag == 0
 8007e30:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <interrupt_1ms+0x2c4>)
 8007e32:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <interrupt_1ms+0x1e6>
						|| ideal_translation.vel > 50.0) {
 8007e3a:	4b3f      	ldr	r3, [pc, #252]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007e3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e40:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8007f7c <interrupt_1ms+0x314>
 8007e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4c:	dd0f      	ble.n	8007e6e <interrupt_1ms+0x206>
					PID_control(&ideal_rotation, &real_rotation, &real_rotation,
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	4b3c      	ldr	r3, [pc, #240]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	4b47      	ldr	r3, [pc, #284]	; (8007f74 <interrupt_1ms+0x30c>)
 8007e58:	9302      	str	r3, [sp, #8]
 8007e5a:	4b49      	ldr	r3, [pc, #292]	; (8007f80 <interrupt_1ms+0x318>)
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	4b30      	ldr	r3, [pc, #192]	; (8007f20 <interrupt_1ms+0x2b8>)
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4b2f      	ldr	r3, [pc, #188]	; (8007f20 <interrupt_1ms+0x2b8>)
 8007e64:	4a3a      	ldr	r2, [pc, #232]	; (8007f50 <interrupt_1ms+0x2e8>)
 8007e66:	493a      	ldr	r1, [pc, #232]	; (8007f50 <interrupt_1ms+0x2e8>)
 8007e68:	4843      	ldr	r0, [pc, #268]	; (8007f78 <interrupt_1ms+0x310>)
 8007e6a:	f002 fddb 	bl	800aa24 <PID_control>
							&rotation_deviation, &rotation_deviation,
							&rotation_gain, &rotation_parameter, &duty, 1);
				}
				integral_ideal(&ideal_translation);
 8007e6e:	4832      	ldr	r0, [pc, #200]	; (8007f38 <interrupt_1ms+0x2d0>)
 8007e70:	f003 f882 	bl	800af78 <integral_ideal>
 8007e74:	e02d      	b.n	8007ed2 <interrupt_1ms+0x26a>

			} else {
				duty.left -= (int) (front_wall_gain
 8007e76:	4b33      	ldr	r3, [pc, #204]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
						* (SEN_L.now - SEN_L.reference));
 8007e7a:	4a42      	ldr	r2, [pc, #264]	; (8007f84 <interrupt_1ms+0x31c>)
 8007e7c:	6811      	ldr	r1, [r2, #0]
 8007e7e:	4a41      	ldr	r2, [pc, #260]	; (8007f84 <interrupt_1ms+0x31c>)
 8007e80:	6852      	ldr	r2, [r2, #4]
 8007e82:	1a8a      	subs	r2, r1, r2
 8007e84:	ee07 2a90 	vmov	s15, r2
 8007e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e8c:	4a3e      	ldr	r2, [pc, #248]	; (8007f88 <interrupt_1ms+0x320>)
 8007e8e:	edd2 7a00 	vldr	s15, [r2]
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
				duty.left -= (int) (front_wall_gain
 8007e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e9a:	ee17 2a90 	vmov	r2, s15
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	4a28      	ldr	r2, [pc, #160]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007ea2:	6013      	str	r3, [r2, #0]
				duty.right -= (int) (front_wall_gain
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
						* (SEN_R.now - SEN_R.reference));
 8007ea8:	4a38      	ldr	r2, [pc, #224]	; (8007f8c <interrupt_1ms+0x324>)
 8007eaa:	6811      	ldr	r1, [r2, #0]
 8007eac:	4a37      	ldr	r2, [pc, #220]	; (8007f8c <interrupt_1ms+0x324>)
 8007eae:	6852      	ldr	r2, [r2, #4]
 8007eb0:	1a8a      	subs	r2, r1, r2
 8007eb2:	ee07 2a90 	vmov	s15, r2
 8007eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eba:	4a33      	ldr	r2, [pc, #204]	; (8007f88 <interrupt_1ms+0x320>)
 8007ebc:	edd2 7a00 	vldr	s15, [r2]
 8007ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
				duty.right -= (int) (front_wall_gain
 8007ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec8:	ee17 2a90 	vmov	r2, s15
 8007ecc:	1a9b      	subs	r3, r3, r2
 8007ece:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007ed0:	6053      	str	r3, [r2, #4]
			}

			duty_to_moter();
 8007ed2:	f002 fc41 	bl	800a758 <duty_to_moter>
		}

		if (moter_flag == 0) {
 8007ed6:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <interrupt_1ms+0x304>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10c      	bne.n	8007ef8 <interrupt_1ms+0x290>
			duty.left = 0;
 8007ede:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
			duty.right = 0;
 8007ee4:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <interrupt_1ms+0x2dc>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	605a      	str	r2, [r3, #4]
			duty_to_moter();
 8007eea:	f002 fc35 	bl	800a758 <duty_to_moter>
//	if (Batt < 3.72) {
//		low_batt_flag = 0xff;
//	} else {
//		//low_batt_flag = 0;
//	}
}
 8007eee:	e003      	b.n	8007ef8 <interrupt_1ms+0x290>
		integral_1ms(&mode_select_dis, &real_R.vel);
 8007ef0:	4907      	ldr	r1, [pc, #28]	; (8007f10 <interrupt_1ms+0x2a8>)
 8007ef2:	4827      	ldr	r0, [pc, #156]	; (8007f90 <interrupt_1ms+0x328>)
 8007ef4:	f003 f810 	bl	800af18 <integral_1ms>
}
 8007ef8:	bf00      	nop
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	2001936c 	.word	0x2001936c
 8007f04:	20000ca4 	.word	0x20000ca4
 8007f08:	20019370 	.word	0x20019370
 8007f0c:	20019374 	.word	0x20019374
 8007f10:	20000ca8 	.word	0x20000ca8
 8007f14:	20000cac 	.word	0x20000cac
 8007f18:	2000068a 	.word	0x2000068a
 8007f1c:	20000683 	.word	0x20000683
 8007f20:	2001947c 	.word	0x2001947c
 8007f24:	469c4000 	.word	0x469c4000
 8007f28:	c69c4000 	.word	0xc69c4000
 8007f2c:	20019378 	.word	0x20019378
 8007f30:	20000674 	.word	0x20000674
 8007f34:	20000680 	.word	0x20000680
 8007f38:	2001941c 	.word	0x2001941c
 8007f3c:	20019444 	.word	0x20019444
 8007f40:	20031c0c 	.word	0x20031c0c
 8007f44:	20031bc8 	.word	0x20031bc8
 8007f48:	2000001c 	.word	0x2000001c
 8007f4c:	20000669 	.word	0x20000669
 8007f50:	200194e8 	.word	0x200194e8
 8007f54:	200194ec 	.word	0x200194ec
 8007f58:	200194f0 	.word	0x200194f0
 8007f5c:	20000698 	.word	0x20000698
 8007f60:	20000690 	.word	0x20000690
 8007f64:	20031bec 	.word	0x20031bec
 8007f68:	20000694 	.word	0x20000694
 8007f6c:	20000682 	.word	0x20000682
 8007f70:	200006a0 	.word	0x200006a0
 8007f74:	20019488 	.word	0x20019488
 8007f78:	20000c98 	.word	0x20000c98
 8007f7c:	42480000 	.word	0x42480000
 8007f80:	20000010 	.word	0x20000010
 8007f84:	20031bf0 	.word	0x20031bf0
 8007f88:	20019450 	.word	0x20019450
 8007f8c:	20019428 	.word	0x20019428
 8007f90:	20000678 	.word	0x20000678

08007f94 <buzzer_1ms>:

void buzzer_1ms(void) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
	if (buzzer[buzzer_index].autoreload != 0xffff && buzzer_flag == 1) {
 8007f98:	4b33      	ldr	r3, [pc, #204]	; (8008068 <buzzer_1ms+0xd4>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4b33      	ldr	r3, [pc, #204]	; (800806c <buzzer_1ms+0xd8>)
 8007fa0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8007fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d040      	beq.n	800802e <buzzer_1ms+0x9a>
 8007fac:	4b30      	ldr	r3, [pc, #192]	; (8008070 <buzzer_1ms+0xdc>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d13c      	bne.n	800802e <buzzer_1ms+0x9a>
		if (buzzer_count == 0) {
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <buzzer_1ms+0xe0>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d131      	bne.n	8008020 <buzzer_1ms+0x8c>
			if (buzzer[buzzer_index].autoreload != 0) {
 8007fbc:	4b2a      	ldr	r3, [pc, #168]	; (8008068 <buzzer_1ms+0xd4>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b2a      	ldr	r3, [pc, #168]	; (800806c <buzzer_1ms+0xd8>)
 8007fc4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d025      	beq.n	8008018 <buzzer_1ms+0x84>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8007fcc:	2104      	movs	r1, #4
 8007fce:	482a      	ldr	r0, [pc, #168]	; (8008078 <buzzer_1ms+0xe4>)
 8007fd0:	f7fb fd00 	bl	80039d4 <HAL_TIM_PWM_Stop>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <buzzer_1ms+0xd4>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4b24      	ldr	r3, [pc, #144]	; (800806c <buzzer_1ms+0xd8>)
 8007fdc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	4b24      	ldr	r3, [pc, #144]	; (8008078 <buzzer_1ms+0xe4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
						buzzer[buzzer_index].autoreload / 2);
				__HAL_TIM_SET_AUTORELOAD(&htim3,
 8007fea:	4b1f      	ldr	r3, [pc, #124]	; (8008068 <buzzer_1ms+0xd4>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	; (800806c <buzzer_1ms+0xd8>)
 8007ff2:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8007ff6:	4b20      	ldr	r3, [pc, #128]	; (8008078 <buzzer_1ms+0xe4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <buzzer_1ms+0xd4>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	4b1a      	ldr	r3, [pc, #104]	; (800806c <buzzer_1ms+0xd8>)
 8008004:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8008008:	461a      	mov	r2, r3
 800800a:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <buzzer_1ms+0xe4>)
 800800c:	60da      	str	r2, [r3, #12]
						buzzer[buzzer_index].autoreload);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800800e:	2104      	movs	r1, #4
 8008010:	4819      	ldr	r0, [pc, #100]	; (8008078 <buzzer_1ms+0xe4>)
 8008012:	f7fb fca1 	bl	8003958 <HAL_TIM_PWM_Start>
 8008016:	e003      	b.n	8008020 <buzzer_1ms+0x8c>
			} else {
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8008018:	2104      	movs	r1, #4
 800801a:	4817      	ldr	r0, [pc, #92]	; (8008078 <buzzer_1ms+0xe4>)
 800801c:	f7fb fcda 	bl	80039d4 <HAL_TIM_PWM_Stop>
			}
		}
		buzzer_count++;
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <buzzer_1ms+0xe0>)
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <buzzer_1ms+0xe0>)
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	e006      	b.n	800803c <buzzer_1ms+0xa8>
	} else {
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800802e:	2104      	movs	r1, #4
 8008030:	4811      	ldr	r0, [pc, #68]	; (8008078 <buzzer_1ms+0xe4>)
 8008032:	f7fb fccf 	bl	80039d4 <HAL_TIM_PWM_Stop>
		buzzer_count = 0;
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <buzzer_1ms+0xe0>)
 8008038:	2200      	movs	r2, #0
 800803a:	801a      	strh	r2, [r3, #0]
	}

	if (buzzer_count == buzzer[buzzer_index].ms) {
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <buzzer_1ms+0xd4>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	4a0a      	ldr	r2, [pc, #40]	; (800806c <buzzer_1ms+0xd8>)
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	885a      	ldrh	r2, [r3, #2]
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <buzzer_1ms+0xe0>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d108      	bne.n	8008062 <buzzer_1ms+0xce>
		buzzer_count = 0;
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <buzzer_1ms+0xe0>)
 8008052:	2200      	movs	r2, #0
 8008054:	801a      	strh	r2, [r3, #0]
		buzzer_index++;
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <buzzer_1ms+0xd4>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	b2da      	uxtb	r2, r3
 800805e:	4b02      	ldr	r3, [pc, #8]	; (8008068 <buzzer_1ms+0xd4>)
 8008060:	701a      	strb	r2, [r3, #0]
	}
}
 8008062:	bf00      	nop
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	2000066a 	.word	0x2000066a
 800806c:	200193a4 	.word	0x200193a4
 8008070:	2000066b 	.word	0x2000066b
 8008074:	2000000e 	.word	0x2000000e
 8008078:	200008d0 	.word	0x200008d0
 800807c:	00000000 	.word	0x00000000

08008080 <adc_1ms>:

void adc_1ms(void) {
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, 0);
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800808c:	488c      	ldr	r0, [pc, #560]	; (80082c0 <adc_1ms+0x240>)
 800808e:	f7fa fd09 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008092:	2300      	movs	r3, #0
 8008094:	71fb      	strb	r3, [r7, #7]
 8008096:	e002      	b.n	800809e <adc_1ms+0x1e>
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	3301      	adds	r3, #1
 800809c:	71fb      	strb	r3, [r7, #7]
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b63      	cmp	r3, #99	; 0x63
 80080a2:	d9f9      	bls.n	8008098 <adc_1ms+0x18>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80080a4:	2209      	movs	r2, #9
 80080a6:	4987      	ldr	r1, [pc, #540]	; (80082c4 <adc_1ms+0x244>)
 80080a8:	4887      	ldr	r0, [pc, #540]	; (80082c8 <adc_1ms+0x248>)
 80080aa:	f7f9 f84d 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, 1);
 80080ae:	2201      	movs	r2, #1
 80080b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080b4:	4882      	ldr	r0, [pc, #520]	; (80082c0 <adc_1ms+0x240>)
 80080b6:	f7fa fcf5 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80080ba:	2300      	movs	r3, #0
 80080bc:	71bb      	strb	r3, [r7, #6]
 80080be:	e002      	b.n	80080c6 <adc_1ms+0x46>
 80080c0:	79bb      	ldrb	r3, [r7, #6]
 80080c2:	3301      	adds	r3, #1
 80080c4:	71bb      	strb	r3, [r7, #6]
 80080c6:	79bb      	ldrb	r3, [r7, #6]
 80080c8:	2b63      	cmp	r3, #99	; 0x63
 80080ca:	d9f9      	bls.n	80080c0 <adc_1ms+0x40>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80080cc:	2209      	movs	r2, #9
 80080ce:	497d      	ldr	r1, [pc, #500]	; (80082c4 <adc_1ms+0x244>)
 80080d0:	487d      	ldr	r0, [pc, #500]	; (80082c8 <adc_1ms+0x248>)
 80080d2:	f7f9 f839 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_RF.now = (g_ADCBuffer[0] - g_ADCBuffer[1]) * 2;
 80080d6:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <adc_1ms+0x244>)
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	4b79      	ldr	r3, [pc, #484]	; (80082c4 <adc_1ms+0x244>)
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	4a79      	ldr	r2, [pc, #484]	; (80082cc <adc_1ms+0x24c>)
 80080e6:	6013      	str	r3, [r2, #0]
	SEN_RF_log.before_5ms = SEN_RF_log.before_4ms;
 80080e8:	4b79      	ldr	r3, [pc, #484]	; (80082d0 <adc_1ms+0x250>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	4a78      	ldr	r2, [pc, #480]	; (80082d0 <adc_1ms+0x250>)
 80080ee:	6113      	str	r3, [r2, #16]
	SEN_RF_log.before_4ms = SEN_RF_log.before_3ms;
 80080f0:	4b77      	ldr	r3, [pc, #476]	; (80082d0 <adc_1ms+0x250>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	4a76      	ldr	r2, [pc, #472]	; (80082d0 <adc_1ms+0x250>)
 80080f6:	60d3      	str	r3, [r2, #12]
	SEN_RF_log.before_3ms = SEN_RF_log.before_2ms;
 80080f8:	4b75      	ldr	r3, [pc, #468]	; (80082d0 <adc_1ms+0x250>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4a74      	ldr	r2, [pc, #464]	; (80082d0 <adc_1ms+0x250>)
 80080fe:	6093      	str	r3, [r2, #8]
	SEN_RF_log.before_2ms = SEN_RF_log.before_1ms;
 8008100:	4b73      	ldr	r3, [pc, #460]	; (80082d0 <adc_1ms+0x250>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a72      	ldr	r2, [pc, #456]	; (80082d0 <adc_1ms+0x250>)
 8008106:	6053      	str	r3, [r2, #4]
	SEN_RF_log.before_1ms = SEN_RF_log.now;
 8008108:	4b71      	ldr	r3, [pc, #452]	; (80082d0 <adc_1ms+0x250>)
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	4a70      	ldr	r2, [pc, #448]	; (80082d0 <adc_1ms+0x250>)
 800810e:	6013      	str	r3, [r2, #0]
	SEN_RF_log.now = SEN_RF.now;
 8008110:	4b6e      	ldr	r3, [pc, #440]	; (80082cc <adc_1ms+0x24c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a6e      	ldr	r2, [pc, #440]	; (80082d0 <adc_1ms+0x250>)
 8008116:	6153      	str	r3, [r2, #20]
	SEN_RF.diff_1ms = SEN_RF_log.now - SEN_RF_log.before_1ms;
 8008118:	4b6d      	ldr	r3, [pc, #436]	; (80082d0 <adc_1ms+0x250>)
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	4b6c      	ldr	r3, [pc, #432]	; (80082d0 <adc_1ms+0x250>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	4a6a      	ldr	r2, [pc, #424]	; (80082cc <adc_1ms+0x24c>)
 8008124:	6113      	str	r3, [r2, #16]
	SEN_RF.diff = SEN_RF_log.now - SEN_RF_log.before_3ms;
 8008126:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <adc_1ms+0x250>)
 8008128:	695a      	ldr	r2, [r3, #20]
 800812a:	4b69      	ldr	r3, [pc, #420]	; (80082d0 <adc_1ms+0x250>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	4a66      	ldr	r2, [pc, #408]	; (80082cc <adc_1ms+0x24c>)
 8008132:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, 0);
 8008134:	2200      	movs	r2, #0
 8008136:	2120      	movs	r1, #32
 8008138:	4861      	ldr	r0, [pc, #388]	; (80082c0 <adc_1ms+0x240>)
 800813a:	f7fa fcb3 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 800813e:	2300      	movs	r3, #0
 8008140:	717b      	strb	r3, [r7, #5]
 8008142:	e002      	b.n	800814a <adc_1ms+0xca>
 8008144:	797b      	ldrb	r3, [r7, #5]
 8008146:	3301      	adds	r3, #1
 8008148:	717b      	strb	r3, [r7, #5]
 800814a:	797b      	ldrb	r3, [r7, #5]
 800814c:	2b63      	cmp	r3, #99	; 0x63
 800814e:	d9f9      	bls.n	8008144 <adc_1ms+0xc4>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008150:	2209      	movs	r2, #9
 8008152:	495c      	ldr	r1, [pc, #368]	; (80082c4 <adc_1ms+0x244>)
 8008154:	485c      	ldr	r0, [pc, #368]	; (80082c8 <adc_1ms+0x248>)
 8008156:	f7f8 fff7 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, 1);
 800815a:	2201      	movs	r2, #1
 800815c:	2120      	movs	r1, #32
 800815e:	4858      	ldr	r0, [pc, #352]	; (80082c0 <adc_1ms+0x240>)
 8008160:	f7fa fca0 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008164:	2300      	movs	r3, #0
 8008166:	713b      	strb	r3, [r7, #4]
 8008168:	e002      	b.n	8008170 <adc_1ms+0xf0>
 800816a:	793b      	ldrb	r3, [r7, #4]
 800816c:	3301      	adds	r3, #1
 800816e:	713b      	strb	r3, [r7, #4]
 8008170:	793b      	ldrb	r3, [r7, #4]
 8008172:	2b63      	cmp	r3, #99	; 0x63
 8008174:	d9f9      	bls.n	800816a <adc_1ms+0xea>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008176:	2209      	movs	r2, #9
 8008178:	4952      	ldr	r1, [pc, #328]	; (80082c4 <adc_1ms+0x244>)
 800817a:	4853      	ldr	r0, [pc, #332]	; (80082c8 <adc_1ms+0x248>)
 800817c:	f7f8 ffe4 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_L.now = g_ADCBuffer[2] - g_ADCBuffer[3];
 8008180:	4b50      	ldr	r3, [pc, #320]	; (80082c4 <adc_1ms+0x244>)
 8008182:	889b      	ldrh	r3, [r3, #4]
 8008184:	461a      	mov	r2, r3
 8008186:	4b4f      	ldr	r3, [pc, #316]	; (80082c4 <adc_1ms+0x244>)
 8008188:	88db      	ldrh	r3, [r3, #6]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	4a51      	ldr	r2, [pc, #324]	; (80082d4 <adc_1ms+0x254>)
 800818e:	6013      	str	r3, [r2, #0]
	SEN_L_log.before_5ms = SEN_L_log.before_4ms;
 8008190:	4b51      	ldr	r3, [pc, #324]	; (80082d8 <adc_1ms+0x258>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	4a50      	ldr	r2, [pc, #320]	; (80082d8 <adc_1ms+0x258>)
 8008196:	6113      	str	r3, [r2, #16]
	SEN_L_log.before_4ms = SEN_L_log.before_3ms;
 8008198:	4b4f      	ldr	r3, [pc, #316]	; (80082d8 <adc_1ms+0x258>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	4a4e      	ldr	r2, [pc, #312]	; (80082d8 <adc_1ms+0x258>)
 800819e:	60d3      	str	r3, [r2, #12]
	SEN_L_log.before_3ms = SEN_L_log.before_2ms;
 80081a0:	4b4d      	ldr	r3, [pc, #308]	; (80082d8 <adc_1ms+0x258>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a4c      	ldr	r2, [pc, #304]	; (80082d8 <adc_1ms+0x258>)
 80081a6:	6093      	str	r3, [r2, #8]
	SEN_L_log.before_2ms = SEN_L_log.before_1ms;
 80081a8:	4b4b      	ldr	r3, [pc, #300]	; (80082d8 <adc_1ms+0x258>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a4a      	ldr	r2, [pc, #296]	; (80082d8 <adc_1ms+0x258>)
 80081ae:	6053      	str	r3, [r2, #4]
	SEN_L_log.before_1ms = SEN_L_log.now;
 80081b0:	4b49      	ldr	r3, [pc, #292]	; (80082d8 <adc_1ms+0x258>)
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4a48      	ldr	r2, [pc, #288]	; (80082d8 <adc_1ms+0x258>)
 80081b6:	6013      	str	r3, [r2, #0]
	SEN_L_log.now = SEN_L.now;
 80081b8:	4b46      	ldr	r3, [pc, #280]	; (80082d4 <adc_1ms+0x254>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a46      	ldr	r2, [pc, #280]	; (80082d8 <adc_1ms+0x258>)
 80081be:	6153      	str	r3, [r2, #20]
	SEN_L.diff_1ms = SEN_L_log.now - SEN_L_log.before_1ms;
 80081c0:	4b45      	ldr	r3, [pc, #276]	; (80082d8 <adc_1ms+0x258>)
 80081c2:	695a      	ldr	r2, [r3, #20]
 80081c4:	4b44      	ldr	r3, [pc, #272]	; (80082d8 <adc_1ms+0x258>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	4a42      	ldr	r2, [pc, #264]	; (80082d4 <adc_1ms+0x254>)
 80081cc:	6113      	str	r3, [r2, #16]
	SEN_L.diff = SEN_L_log.now - SEN_L_log.before_3ms;
 80081ce:	4b42      	ldr	r3, [pc, #264]	; (80082d8 <adc_1ms+0x258>)
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	4b41      	ldr	r3, [pc, #260]	; (80082d8 <adc_1ms+0x258>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	4a3e      	ldr	r2, [pc, #248]	; (80082d4 <adc_1ms+0x254>)
 80081da:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, 0);
 80081dc:	2200      	movs	r2, #0
 80081de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081e2:	483e      	ldr	r0, [pc, #248]	; (80082dc <adc_1ms+0x25c>)
 80081e4:	f7fa fc5e 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	70fb      	strb	r3, [r7, #3]
 80081ec:	e002      	b.n	80081f4 <adc_1ms+0x174>
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	3301      	adds	r3, #1
 80081f2:	70fb      	strb	r3, [r7, #3]
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	2b63      	cmp	r3, #99	; 0x63
 80081f8:	d9f9      	bls.n	80081ee <adc_1ms+0x16e>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80081fa:	2209      	movs	r2, #9
 80081fc:	4931      	ldr	r1, [pc, #196]	; (80082c4 <adc_1ms+0x244>)
 80081fe:	4832      	ldr	r0, [pc, #200]	; (80082c8 <adc_1ms+0x248>)
 8008200:	f7f8 ffa2 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, 1);
 8008204:	2201      	movs	r2, #1
 8008206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800820a:	4834      	ldr	r0, [pc, #208]	; (80082dc <adc_1ms+0x25c>)
 800820c:	f7fa fc4a 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008210:	2300      	movs	r3, #0
 8008212:	70bb      	strb	r3, [r7, #2]
 8008214:	e002      	b.n	800821c <adc_1ms+0x19c>
 8008216:	78bb      	ldrb	r3, [r7, #2]
 8008218:	3301      	adds	r3, #1
 800821a:	70bb      	strb	r3, [r7, #2]
 800821c:	78bb      	ldrb	r3, [r7, #2]
 800821e:	2b63      	cmp	r3, #99	; 0x63
 8008220:	d9f9      	bls.n	8008216 <adc_1ms+0x196>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008222:	2209      	movs	r2, #9
 8008224:	4927      	ldr	r1, [pc, #156]	; (80082c4 <adc_1ms+0x244>)
 8008226:	4828      	ldr	r0, [pc, #160]	; (80082c8 <adc_1ms+0x248>)
 8008228:	f7f8 ff8e 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_R.now = g_ADCBuffer[4] - g_ADCBuffer[5];
 800822c:	4b25      	ldr	r3, [pc, #148]	; (80082c4 <adc_1ms+0x244>)
 800822e:	891b      	ldrh	r3, [r3, #8]
 8008230:	461a      	mov	r2, r3
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <adc_1ms+0x244>)
 8008234:	895b      	ldrh	r3, [r3, #10]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	4a29      	ldr	r2, [pc, #164]	; (80082e0 <adc_1ms+0x260>)
 800823a:	6013      	str	r3, [r2, #0]
	SEN_R_log.before_5ms = SEN_R_log.before_4ms;
 800823c:	4b29      	ldr	r3, [pc, #164]	; (80082e4 <adc_1ms+0x264>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4a28      	ldr	r2, [pc, #160]	; (80082e4 <adc_1ms+0x264>)
 8008242:	6113      	str	r3, [r2, #16]
	SEN_R_log.before_4ms = SEN_R_log.before_3ms;
 8008244:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <adc_1ms+0x264>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4a26      	ldr	r2, [pc, #152]	; (80082e4 <adc_1ms+0x264>)
 800824a:	60d3      	str	r3, [r2, #12]
	SEN_R_log.before_3ms = SEN_R_log.before_2ms;
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <adc_1ms+0x264>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4a24      	ldr	r2, [pc, #144]	; (80082e4 <adc_1ms+0x264>)
 8008252:	6093      	str	r3, [r2, #8]
	SEN_R_log.before_2ms = SEN_R_log.before_1ms;
 8008254:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <adc_1ms+0x264>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a22      	ldr	r2, [pc, #136]	; (80082e4 <adc_1ms+0x264>)
 800825a:	6053      	str	r3, [r2, #4]
	SEN_R_log.before_1ms = SEN_R_log.now;
 800825c:	4b21      	ldr	r3, [pc, #132]	; (80082e4 <adc_1ms+0x264>)
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4a20      	ldr	r2, [pc, #128]	; (80082e4 <adc_1ms+0x264>)
 8008262:	6013      	str	r3, [r2, #0]
	SEN_R_log.now = SEN_R.now;
 8008264:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <adc_1ms+0x260>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <adc_1ms+0x264>)
 800826a:	6153      	str	r3, [r2, #20]
	SEN_R.diff_1ms = SEN_R_log.now - SEN_R_log.before_1ms;
 800826c:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <adc_1ms+0x264>)
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <adc_1ms+0x264>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <adc_1ms+0x260>)
 8008278:	6113      	str	r3, [r2, #16]
	SEN_R.diff = SEN_R_log.now - SEN_R_log.before_3ms;
 800827a:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <adc_1ms+0x264>)
 800827c:	695a      	ldr	r2, [r3, #20]
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <adc_1ms+0x264>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <adc_1ms+0x260>)
 8008286:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, 0);
 8008288:	2200      	movs	r2, #0
 800828a:	2140      	movs	r1, #64	; 0x40
 800828c:	480c      	ldr	r0, [pc, #48]	; (80082c0 <adc_1ms+0x240>)
 800828e:	f7fa fc09 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	707b      	strb	r3, [r7, #1]
 8008296:	e002      	b.n	800829e <adc_1ms+0x21e>
 8008298:	787b      	ldrb	r3, [r7, #1]
 800829a:	3301      	adds	r3, #1
 800829c:	707b      	strb	r3, [r7, #1]
 800829e:	787b      	ldrb	r3, [r7, #1]
 80082a0:	2b63      	cmp	r3, #99	; 0x63
 80082a2:	d9f9      	bls.n	8008298 <adc_1ms+0x218>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80082a4:	2209      	movs	r2, #9
 80082a6:	4907      	ldr	r1, [pc, #28]	; (80082c4 <adc_1ms+0x244>)
 80082a8:	4807      	ldr	r0, [pc, #28]	; (80082c8 <adc_1ms+0x248>)
 80082aa:	f7f8 ff4d 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, 1);
 80082ae:	2201      	movs	r2, #1
 80082b0:	2140      	movs	r1, #64	; 0x40
 80082b2:	4803      	ldr	r0, [pc, #12]	; (80082c0 <adc_1ms+0x240>)
 80082b4:	f7fa fbf6 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80082b8:	2300      	movs	r3, #0
 80082ba:	703b      	strb	r3, [r7, #0]
 80082bc:	e017      	b.n	80082ee <adc_1ms+0x26e>
 80082be:	bf00      	nop
 80082c0:	40020000 	.word	0x40020000
 80082c4:	20031bb0 	.word	0x20031bb0
 80082c8:	20000778 	.word	0x20000778
 80082cc:	20019460 	.word	0x20019460
 80082d0:	20031c24 	.word	0x20031c24
 80082d4:	20031bf0 	.word	0x20031bf0
 80082d8:	20019354 	.word	0x20019354
 80082dc:	40020800 	.word	0x40020800
 80082e0:	20019428 	.word	0x20019428
 80082e4:	20031c40 	.word	0x20031c40
 80082e8:	783b      	ldrb	r3, [r7, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	703b      	strb	r3, [r7, #0]
 80082ee:	783b      	ldrb	r3, [r7, #0]
 80082f0:	2b63      	cmp	r3, #99	; 0x63
 80082f2:	d9f9      	bls.n	80082e8 <adc_1ms+0x268>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80082f4:	2209      	movs	r2, #9
 80082f6:	4934      	ldr	r1, [pc, #208]	; (80083c8 <adc_1ms+0x348>)
 80082f8:	4834      	ldr	r0, [pc, #208]	; (80083cc <adc_1ms+0x34c>)
 80082fa:	f7f8 ff25 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_LF.now = g_ADCBuffer[6] - g_ADCBuffer[7];
 80082fe:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <adc_1ms+0x348>)
 8008300:	899b      	ldrh	r3, [r3, #12]
 8008302:	461a      	mov	r2, r3
 8008304:	4b30      	ldr	r3, [pc, #192]	; (80083c8 <adc_1ms+0x348>)
 8008306:	89db      	ldrh	r3, [r3, #14]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	4a31      	ldr	r2, [pc, #196]	; (80083d0 <adc_1ms+0x350>)
 800830c:	6013      	str	r3, [r2, #0]
	SEN_LF_log.before_5ms = SEN_LF_log.before_4ms;
 800830e:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <adc_1ms+0x354>)
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	4a30      	ldr	r2, [pc, #192]	; (80083d4 <adc_1ms+0x354>)
 8008314:	6113      	str	r3, [r2, #16]
	SEN_LF_log.before_4ms = SEN_LF_log.before_3ms;
 8008316:	4b2f      	ldr	r3, [pc, #188]	; (80083d4 <adc_1ms+0x354>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	4a2e      	ldr	r2, [pc, #184]	; (80083d4 <adc_1ms+0x354>)
 800831c:	60d3      	str	r3, [r2, #12]
	SEN_LF_log.before_3ms = SEN_LF_log.before_2ms;
 800831e:	4b2d      	ldr	r3, [pc, #180]	; (80083d4 <adc_1ms+0x354>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <adc_1ms+0x354>)
 8008324:	6093      	str	r3, [r2, #8]
	SEN_LF_log.before_2ms = SEN_LF_log.before_1ms;
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <adc_1ms+0x354>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2a      	ldr	r2, [pc, #168]	; (80083d4 <adc_1ms+0x354>)
 800832c:	6053      	str	r3, [r2, #4]
	SEN_LF_log.before_1ms = SEN_LF_log.now;
 800832e:	4b29      	ldr	r3, [pc, #164]	; (80083d4 <adc_1ms+0x354>)
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <adc_1ms+0x354>)
 8008334:	6013      	str	r3, [r2, #0]
	SEN_LF_log.now = SEN_LF.now;
 8008336:	4b26      	ldr	r3, [pc, #152]	; (80083d0 <adc_1ms+0x350>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <adc_1ms+0x354>)
 800833c:	6153      	str	r3, [r2, #20]
	SEN_LF.diff_1ms = SEN_LF_log.before_1ms;
 800833e:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <adc_1ms+0x354>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <adc_1ms+0x350>)
 8008344:	6113      	str	r3, [r2, #16]
	SEN_LF.diff = SEN_LF_log.before_3ms;
 8008346:	4b23      	ldr	r3, [pc, #140]	; (80083d4 <adc_1ms+0x354>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <adc_1ms+0x350>)
 800834c:	60d3      	str	r3, [r2, #12]

	SEN_F.now = (int) ((SEN_RF.now + SEN_LF.now) / 2);
 800834e:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <adc_1ms+0x358>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b1f      	ldr	r3, [pc, #124]	; (80083d0 <adc_1ms+0x350>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4413      	add	r3, r2
 8008358:	0fda      	lsrs	r2, r3, #31
 800835a:	4413      	add	r3, r2
 800835c:	105b      	asrs	r3, r3, #1
 800835e:	461a      	mov	r2, r3
 8008360:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <adc_1ms+0x35c>)
 8008362:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008364:	2209      	movs	r2, #9
 8008366:	4918      	ldr	r1, [pc, #96]	; (80083c8 <adc_1ms+0x348>)
 8008368:	4818      	ldr	r0, [pc, #96]	; (80083cc <adc_1ms+0x34c>)
 800836a:	f7f8 feed 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	Batt = (float) g_ADCBuffer[8] / 4095 * 3.3 * 2;
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <adc_1ms+0x348>)
 8008370:	8a1b      	ldrh	r3, [r3, #16]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80083e0 <adc_1ms+0x360>
 800837e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008382:	ee16 0a90 	vmov	r0, s13
 8008386:	f7f8 f907 	bl	8000598 <__aeabi_f2d>
 800838a:	a30d      	add	r3, pc, #52	; (adr r3, 80083c0 <adc_1ms+0x340>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f8 f95a 	bl	8000648 <__aeabi_dmul>
 8008394:	4603      	mov	r3, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4618      	mov	r0, r3
 800839a:	4621      	mov	r1, r4
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	f7f7 ff9c 	bl	80002dc <__adddf3>
 80083a4:	4603      	mov	r3, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4618      	mov	r0, r3
 80083aa:	4621      	mov	r1, r4
 80083ac:	f7f8 fc24 	bl	8000bf8 <__aeabi_d2f>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <adc_1ms+0x364>)
 80083b4:	601a      	str	r2, [r3, #0]
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd90      	pop	{r4, r7, pc}
 80083be:	bf00      	nop
 80083c0:	66666666 	.word	0x66666666
 80083c4:	400a6666 	.word	0x400a6666
 80083c8:	20031bb0 	.word	0x20031bb0
 80083cc:	20000778 	.word	0x20000778
 80083d0:	20031bd0 	.word	0x20031bd0
 80083d4:	20000a5c 	.word	0x20000a5c
 80083d8:	20019460 	.word	0x20019460
 80083dc:	20031b94 	.word	0x20031b94
 80083e0:	457ff000 	.word	0x457ff000
 80083e4:	20000a8c 	.word	0x20000a8c

080083e8 <failsafe>:

void failsafe(void) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
	failsafe_flag = 1;
 80083ec:	4b25      	ldr	r3, [pc, #148]	; (8008484 <failsafe+0x9c>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	701a      	strb	r2, [r3, #0]
	ideal_translation.accel = 0.0;
 80083f2:	4b25      	ldr	r3, [pc, #148]	; (8008488 <failsafe+0xa0>)
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 80083fa:	4b23      	ldr	r3, [pc, #140]	; (8008488 <failsafe+0xa0>)
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	605a      	str	r2, [r3, #4]
	duty_to_moter();
 8008402:	f002 f9a9 	bl	800a758 <duty_to_moter>
	set_buzzer(0, C_4, 300);
 8008406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800840a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800840e:	2000      	movs	r0, #0
 8008410:	f7ff facc 	bl	80079ac <set_buzzer>
	set_buzzer(1, 0, 300);
 8008414:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008418:	2100      	movs	r1, #0
 800841a:	2001      	movs	r0, #1
 800841c:	f7ff fac6 	bl	80079ac <set_buzzer>
	set_buzzer(2, D_4, 300);
 8008420:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008424:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008428:	2002      	movs	r0, #2
 800842a:	f7ff fabf 	bl	80079ac <set_buzzer>
	set_buzzer(3, 0, 300);
 800842e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008432:	2100      	movs	r1, #0
 8008434:	2003      	movs	r0, #3
 8008436:	f7ff fab9 	bl	80079ac <set_buzzer>
	set_buzzer(4, E_4, 300);
 800843a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800843e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008442:	2004      	movs	r0, #4
 8008444:	f7ff fab2 	bl	80079ac <set_buzzer>
	set_buzzer(5, 0, 300);
 8008448:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800844c:	2100      	movs	r1, #0
 800844e:	2005      	movs	r0, #5
 8008450:	f7ff faac 	bl	80079ac <set_buzzer>
	set_buzzer(6, F_4, 300);
 8008454:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008458:	f240 115d 	movw	r1, #349	; 0x15d
 800845c:	2006      	movs	r0, #6
 800845e:	f7ff faa5 	bl	80079ac <set_buzzer>
	x.now = 0;
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <failsafe+0xa4>)
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8008468:	4b09      	ldr	r3, [pc, #36]	; (8008490 <failsafe+0xa8>)
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
	direction = 0;
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <failsafe+0xac>)
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]

	failsafe_flag = 1;
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <failsafe+0x9c>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
	failsafe_counter = 0;
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <failsafe+0xb0>)
 800847c:	2200      	movs	r2, #0
 800847e:	801a      	strh	r2, [r3, #0]
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000674 	.word	0x20000674
 8008488:	2001941c 	.word	0x2001941c
 800848c:	20000a90 	.word	0x20000a90
 8008490:	200194e4 	.word	0x200194e4
 8008494:	20000668 	.word	0x20000668
 8008498:	20000680 	.word	0x20000680

0800849c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b085      	sub	sp, #20
 80084a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80084a2:	f7f8 fd79 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80084a6:	f000 f99b 	bl	80087e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80084aa:	f7ff fb37 	bl	8007b1c <MX_GPIO_Init>
	MX_DMA_Init();
 80084ae:	f7ff fb15 	bl	8007adc <MX_DMA_Init>
	MX_ADC1_Init();
 80084b2:	f7ff f905 	bl	80076c0 <MX_ADC1_Init>
	MX_SPI2_Init();
 80084b6:	f003 f8af 	bl	800b618 <MX_SPI2_Init>
	MX_SPI3_Init();
 80084ba:	f003 f8e3 	bl	800b684 <MX_SPI3_Init>
	MX_TIM2_Init();
 80084be:	f003 fad7 	bl	800ba70 <MX_TIM2_Init>
	MX_TIM3_Init();
 80084c2:	f003 fb39 	bl	800bb38 <MX_TIM3_Init>
	MX_TIM6_Init();
 80084c6:	f003 fb91 	bl	800bbec <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80084ca:	48a2      	ldr	r0, [pc, #648]	; (8008754 <main+0x2b8>)
 80084cc:	f7fb f9f5 	bl	80038ba <HAL_TIM_Base_Start_IT>
	SEGGER_RTT_Init();
 80084d0:	f7fc f992 	bl	80047f8 <SEGGER_RTT_Init>
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80084d4:	2300      	movs	r3, #0
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	2300      	movs	r3, #0
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	2000      	movs	r0, #0
 80084e0:	f7fc f920 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	printf("\x1b[0m");
 80084e4:	489c      	ldr	r0, [pc, #624]	; (8008758 <main+0x2bc>)
 80084e6:	f004 fc97 	bl	800ce18 <iprintf>
	init_walldata();
 80084ea:	f003 ff47 	bl	800c37c <init_walldata>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, SET);
 80084ee:	2201      	movs	r2, #1
 80084f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084f4:	4899      	ldr	r0, [pc, #612]	; (800875c <main+0x2c0>)
 80084f6:	f7fa fad5 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 80084fa:	2201      	movs	r2, #1
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	4898      	ldr	r0, [pc, #608]	; (8008760 <main+0x2c4>)
 8008500:	f7fa fad0 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 8008504:	2201      	movs	r2, #1
 8008506:	2140      	movs	r1, #64	; 0x40
 8008508:	4895      	ldr	r0, [pc, #596]	; (8008760 <main+0x2c4>)
 800850a:	f7fa facb 	bl	8002aa4 <HAL_GPIO_WritePin>
	init_gyro();
 800850e:	f001 fa7f 	bl	8009a10 <init_gyro>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8008512:	2100      	movs	r1, #0
 8008514:	4893      	ldr	r0, [pc, #588]	; (8008764 <main+0x2c8>)
 8008516:	f7fb fa5d 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800851a:	2104      	movs	r1, #4
 800851c:	4891      	ldr	r0, [pc, #580]	; (8008764 <main+0x2c8>)
 800851e:	f7fb fa59 	bl	80039d4 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8008522:	4b90      	ldr	r3, [pc, #576]	; (8008764 <main+0x2c8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800852a:	4b8e      	ldr	r3, [pc, #568]	; (8008764 <main+0x2c8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
	set_led(0);
 8008532:	2000      	movs	r0, #0
 8008534:	f001 fc2a 	bl	8009d8c <set_led>
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, SET);
 8008538:	2201      	movs	r2, #1
 800853a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800853e:	4887      	ldr	r0, [pc, #540]	; (800875c <main+0x2c0>)
 8008540:	f7fa fab0 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, SET);
 8008544:	2201      	movs	r2, #1
 8008546:	2140      	movs	r1, #64	; 0x40
 8008548:	4884      	ldr	r0, [pc, #528]	; (800875c <main+0x2c0>)
 800854a:	f7fa faab 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, SET);
 800854e:	2201      	movs	r2, #1
 8008550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008554:	4884      	ldr	r0, [pc, #528]	; (8008768 <main+0x2cc>)
 8008556:	f7fa faa5 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, SET);
 800855a:	2201      	movs	r2, #1
 800855c:	2120      	movs	r1, #32
 800855e:	487f      	ldr	r0, [pc, #508]	; (800875c <main+0x2c0>)
 8008560:	f7fa faa0 	bl	8002aa4 <HAL_GPIO_WritePin>
	clear_Map(&walldata.real);
 8008564:	4881      	ldr	r0, [pc, #516]	; (800876c <main+0x2d0>)
 8008566:	f003 feb1 	bl	800c2cc <clear_Map>
	clear_Map(&walldata.checked);
 800856a:	4881      	ldr	r0, [pc, #516]	; (8008770 <main+0x2d4>)
 800856c:	f003 feae 	bl	800c2cc <clear_Map>
	clear_adachiMap(&walldata.adachi);
 8008570:	4880      	ldr	r0, [pc, #512]	; (8008774 <main+0x2d8>)
 8008572:	f003 fede 	bl	800c332 <clear_adachiMap>

	HAL_Delay(10);
 8008576:	200a      	movs	r0, #10
 8008578:	f7f8 fd80 	bl	800107c <HAL_Delay>
	Battery_Check();
 800857c:	f001 fb8c 	bl	8009c98 <Battery_Check>
//	walldata.real.column[1]++;

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
//			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	for (i = 0; i < 17; i++) {
 8008580:	2300      	movs	r3, #0
 8008582:	80fb      	strh	r3, [r7, #6]
 8008584:	e024      	b.n	80085d0 <main+0x134>
		for (j = 0; j < 17; j++) {
 8008586:	2300      	movs	r3, #0
 8008588:	80bb      	strh	r3, [r7, #4]
 800858a:	e010      	b.n	80085ae <main+0x112>
			step_map[i][j] = i + j * 16;
 800858c:	88bb      	ldrh	r3, [r7, #4]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	b298      	uxth	r0, r3
 8008592:	88fa      	ldrh	r2, [r7, #6]
 8008594:	88bb      	ldrh	r3, [r7, #4]
 8008596:	88f9      	ldrh	r1, [r7, #6]
 8008598:	4401      	add	r1, r0
 800859a:	b288      	uxth	r0, r1
 800859c:	4976      	ldr	r1, [pc, #472]	; (8008778 <main+0x2dc>)
 800859e:	0112      	lsls	r2, r2, #4
 80085a0:	4413      	add	r3, r2
 80085a2:	4602      	mov	r2, r0
 80085a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < 17; j++) {
 80085a8:	88bb      	ldrh	r3, [r7, #4]
 80085aa:	3301      	adds	r3, #1
 80085ac:	80bb      	strh	r3, [r7, #4]
 80085ae:	88bb      	ldrh	r3, [r7, #4]
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d9eb      	bls.n	800858c <main+0xf0>
		}
		printf("i=%d,pari=%d\n", i, check_parity(i));
 80085b4:	88fc      	ldrh	r4, [r7, #6]
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 fafd 	bl	8009bb8 <check_parity>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	4621      	mov	r1, r4
 80085c4:	486d      	ldr	r0, [pc, #436]	; (800877c <main+0x2e0>)
 80085c6:	f004 fc27 	bl	800ce18 <iprintf>
	for (i = 0; i < 17; i++) {
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	3301      	adds	r3, #1
 80085ce:	80fb      	strh	r3, [r7, #6]
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	2b10      	cmp	r3, #16
 80085d4:	d9d7      	bls.n	8008586 <main+0xea>
	}

//	output_Walldata(REAL);
	mode = 0;
 80085d6:	4b6a      	ldr	r3, [pc, #424]	; (8008780 <main+0x2e4>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
	mode_select_dis = 10;
 80085dc:	4b69      	ldr	r3, [pc, #420]	; (8008784 <main+0x2e8>)
 80085de:	4a6a      	ldr	r2, [pc, #424]	; (8008788 <main+0x2ec>)
 80085e0:	601a      	str	r2, [r3, #0]


	SEN_L.reference = 376;
 80085e2:	4b6a      	ldr	r3, [pc, #424]	; (800878c <main+0x2f0>)
 80085e4:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80085e8:	605a      	str	r2, [r3, #4]
	SEN_L.threshold = 61;
 80085ea:	4b68      	ldr	r3, [pc, #416]	; (800878c <main+0x2f0>)
 80085ec:	223d      	movs	r2, #61	; 0x3d
 80085ee:	609a      	str	r2, [r3, #8]
	SEN_R.reference = 394;
 80085f0:	4b67      	ldr	r3, [pc, #412]	; (8008790 <main+0x2f4>)
 80085f2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 80085f6:	605a      	str	r2, [r3, #4]
	SEN_R.threshold = 100;
 80085f8:	4b65      	ldr	r3, [pc, #404]	; (8008790 <main+0x2f4>)
 80085fa:	2264      	movs	r2, #100	; 0x64
 80085fc:	609a      	str	r2, [r3, #8]
	SEN_LF.reference = 496;
 80085fe:	4b65      	ldr	r3, [pc, #404]	; (8008794 <main+0x2f8>)
 8008600:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008604:	605a      	str	r2, [r3, #4]
	SEN_LF.threshold = 228;
 8008606:	4b63      	ldr	r3, [pc, #396]	; (8008794 <main+0x2f8>)
 8008608:	22e4      	movs	r2, #228	; 0xe4
 800860a:	609a      	str	r2, [r3, #8]
	SEN_RF.reference = 550;
 800860c:	4b62      	ldr	r3, [pc, #392]	; (8008798 <main+0x2fc>)
 800860e:	f240 2226 	movw	r2, #550	; 0x226
 8008612:	605a      	str	r2, [r3, #4]
	SEN_RF.threshold = 220;
 8008614:	4b60      	ldr	r3, [pc, #384]	; (8008798 <main+0x2fc>)
 8008616:	22dc      	movs	r2, #220	; 0xdc
 8008618:	609a      	str	r2, [r3, #8]

	SEN_F.threshold = (int) (SEN_RF.threshold + SEN_LF.threshold) / 2;
 800861a:	4b5f      	ldr	r3, [pc, #380]	; (8008798 <main+0x2fc>)
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	4b5d      	ldr	r3, [pc, #372]	; (8008794 <main+0x2f8>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	4413      	add	r3, r2
 8008624:	0fda      	lsrs	r2, r3, #31
 8008626:	4413      	add	r3, r2
 8008628:	105b      	asrs	r3, r3, #1
 800862a:	461a      	mov	r2, r3
 800862c:	4b5b      	ldr	r3, [pc, #364]	; (800879c <main+0x300>)
 800862e:	609a      	str	r2, [r3, #8]
	SEN_F.reference = (int) (SEN_RF.reference + SEN_LF.reference) / 2;
 8008630:	4b59      	ldr	r3, [pc, #356]	; (8008798 <main+0x2fc>)
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	4b57      	ldr	r3, [pc, #348]	; (8008794 <main+0x2f8>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4413      	add	r3, r2
 800863a:	0fda      	lsrs	r2, r3, #31
 800863c:	4413      	add	r3, r2
 800863e:	105b      	asrs	r3, r3, #1
 8008640:	461a      	mov	r2, r3
 8008642:	4b56      	ldr	r3, [pc, #344]	; (800879c <main+0x300>)
 8008644:	605a      	str	r2, [r3, #4]

	run_gain.Kp = 0.6;
 8008646:	4b56      	ldr	r3, [pc, #344]	; (80087a0 <main+0x304>)
 8008648:	4a56      	ldr	r2, [pc, #344]	; (80087a4 <main+0x308>)
 800864a:	601a      	str	r2, [r3, #0]
	run_gain.Ki = 0.15;
 800864c:	4b54      	ldr	r3, [pc, #336]	; (80087a0 <main+0x304>)
 800864e:	4a56      	ldr	r2, [pc, #344]	; (80087a8 <main+0x30c>)
 8008650:	605a      	str	r2, [r3, #4]
	rotation_gain.Kp = 0.41;
 8008652:	4b56      	ldr	r3, [pc, #344]	; (80087ac <main+0x310>)
 8008654:	4a56      	ldr	r2, [pc, #344]	; (80087b0 <main+0x314>)
 8008656:	601a      	str	r2, [r3, #0]
	rotation_gain.Ki = 0.005;//3
 8008658:	4b54      	ldr	r3, [pc, #336]	; (80087ac <main+0x310>)
 800865a:	4a56      	ldr	r2, [pc, #344]	; (80087b4 <main+0x318>)
 800865c:	605a      	str	r2, [r3, #4]
	wall_cntrol_gain.Kp = 0.05;
 800865e:	4b56      	ldr	r3, [pc, #344]	; (80087b8 <main+0x31c>)
 8008660:	4a56      	ldr	r2, [pc, #344]	; (80087bc <main+0x320>)
 8008662:	601a      	str	r2, [r3, #0]
	wall_cntrol_gain.Kd = 0.0;
 8008664:	4b54      	ldr	r3, [pc, #336]	; (80087b8 <main+0x31c>)
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	609a      	str	r2, [r3, #8]

	nomal_run.vel_search = 280.0;
 800866c:	4b54      	ldr	r3, [pc, #336]	; (80087c0 <main+0x324>)
 800866e:	4a55      	ldr	r2, [pc, #340]	; (80087c4 <main+0x328>)
 8008670:	601a      	str	r2, [r3, #0]
	nomal_run.accel = 1000.0;
 8008672:	4b53      	ldr	r3, [pc, #332]	; (80087c0 <main+0x324>)
 8008674:	4a54      	ldr	r2, [pc, #336]	; (80087c8 <main+0x32c>)
 8008676:	60da      	str	r2, [r3, #12]
	nomal_rotation.vel_search=750.0;
 8008678:	4b54      	ldr	r3, [pc, #336]	; (80087cc <main+0x330>)
 800867a:	4a55      	ldr	r2, [pc, #340]	; (80087d0 <main+0x334>)
 800867c:	601a      	str	r2, [r3, #0]
	nomal_rotation.accel=1700.0;
 800867e:	4b53      	ldr	r3, [pc, #332]	; (80087cc <main+0x330>)
 8008680:	4a54      	ldr	r2, [pc, #336]	; (80087d4 <main+0x338>)
 8008682:	60da      	str	r2, [r3, #12]

	x.goal = 4;
 8008684:	4b54      	ldr	r3, [pc, #336]	; (80087d8 <main+0x33c>)
 8008686:	2204      	movs	r2, #4
 8008688:	705a      	strb	r2, [r3, #1]
	y.goal = 0;
 800868a:	4b54      	ldr	r3, [pc, #336]	; (80087dc <main+0x340>)
 800868c:	2200      	movs	r2, #0
 800868e:	705a      	strb	r2, [r3, #1]
//		}

//		printf("mode:sel_dis=%3.2f,vel=%3.2f\n", mode_select_dis, real_R.vel);
//		printf("R=%8.2f,	L=%8.2f\n",test_R,test_L);

		set_led(mode);
 8008690:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <main+0x2e4>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fb79 	bl	8009d8c <set_led>
		if (mode_select_dis > 30) {
 800869a:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <main+0x2e8>)
 800869c:	edd3 7a00 	vldr	s15, [r3]
 80086a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80086a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ac:	dd15      	ble.n	80086da <main+0x23e>
			mode_select_dis = 0;
 80086ae:	4b35      	ldr	r3, [pc, #212]	; (8008784 <main+0x2e8>)
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
			mode++;
 80086b6:	4b32      	ldr	r3, [pc, #200]	; (8008780 <main+0x2e4>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	4b30      	ldr	r3, [pc, #192]	; (8008780 <main+0x2e4>)
 80086c0:	701a      	strb	r2, [r3, #0]
			if (mode >= 8) {
 80086c2:	4b2f      	ldr	r3, [pc, #188]	; (8008780 <main+0x2e4>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	d902      	bls.n	80086d0 <main+0x234>
				mode = 0;
 80086ca:	4b2d      	ldr	r3, [pc, #180]	; (8008780 <main+0x2e4>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
			}
			set_buzzer_mode(mode);
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <main+0x2e4>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff f999 	bl	8007a0c <set_buzzer_mode>
		}

		if (mode_select_dis < -30) {
 80086da:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <main+0x2e8>)
 80086dc:	edd3 7a00 	vldr	s15, [r3]
 80086e0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80086e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ec:	d515      	bpl.n	800871a <main+0x27e>
			mode_select_dis = 0;
 80086ee:	4b25      	ldr	r3, [pc, #148]	; (8008784 <main+0x2e8>)
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
			if (mode == 0) {
 80086f6:	4b22      	ldr	r3, [pc, #136]	; (8008780 <main+0x2e4>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <main+0x268>
				mode = 8;
 80086fe:	4b20      	ldr	r3, [pc, #128]	; (8008780 <main+0x2e4>)
 8008700:	2208      	movs	r2, #8
 8008702:	701a      	strb	r2, [r3, #0]
			}
			mode--;
 8008704:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <main+0x2e4>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	3b01      	subs	r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	4b1c      	ldr	r3, [pc, #112]	; (8008780 <main+0x2e4>)
 800870e:	701a      	strb	r2, [r3, #0]
			set_buzzer_mode(mode);
 8008710:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <main+0x2e4>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff f979 	bl	8007a0c <set_buzzer_mode>
		}

		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 800871a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800871e:	4810      	ldr	r0, [pc, #64]	; (8008760 <main+0x2c4>)
 8008720:	f7fa f9a8 	bl	8002a74 <HAL_GPIO_ReadPin>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10f      	bne.n	800874a <main+0x2ae>
			mode_select_dis = 0;
 800872a:	4b16      	ldr	r3, [pc, #88]	; (8008784 <main+0x2e8>)
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
			set_led(0);
 8008732:	2000      	movs	r0, #0
 8008734:	f001 fb2a 	bl	8009d8c <set_led>
			set_buzzer_mode(mode);
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <main+0x2e4>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff f965 	bl	8007a0c <set_buzzer_mode>
			chattering();
 8008742:	f000 fffb 	bl	800973c <chattering>
			go_mode();
 8008746:	f000 fa2d 	bl	8008ba4 <go_mode>
		}
		HAL_GPIO_TogglePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin);
 800874a:	2110      	movs	r1, #16
 800874c:	4803      	ldr	r0, [pc, #12]	; (800875c <main+0x2c0>)
 800874e:	f7fa f9c2 	bl	8002ad6 <HAL_GPIO_TogglePin>
		set_led(mode);
 8008752:	e79d      	b.n	8008690 <main+0x1f4>
 8008754:	20000910 	.word	0x20000910
 8008758:	0800ed28 	.word	0x0800ed28
 800875c:	40020000 	.word	0x40020000
 8008760:	40020400 	.word	0x40020400
 8008764:	20000950 	.word	0x20000950
 8008768:	40020800 	.word	0x40020800
 800876c:	20000990 	.word	0x20000990
 8008770:	200009d4 	.word	0x200009d4
 8008774:	20000a18 	.word	0x20000a18
 8008778:	20000a94 	.word	0x20000a94
 800877c:	0800ed30 	.word	0x0800ed30
 8008780:	20000669 	.word	0x20000669
 8008784:	20000678 	.word	0x20000678
 8008788:	41200000 	.word	0x41200000
 800878c:	20031bf0 	.word	0x20031bf0
 8008790:	20019428 	.word	0x20019428
 8008794:	20031bd0 	.word	0x20031bd0
 8008798:	20019460 	.word	0x20019460
 800879c:	20031b94 	.word	0x20031b94
 80087a0:	2000001c 	.word	0x2000001c
 80087a4:	3f19999a 	.word	0x3f19999a
 80087a8:	3e19999a 	.word	0x3e19999a
 80087ac:	20000010 	.word	0x20000010
 80087b0:	3ed1eb85 	.word	0x3ed1eb85
 80087b4:	3ba3d70a 	.word	0x3ba3d70a
 80087b8:	20031c18 	.word	0x20031c18
 80087bc:	3d4ccccd 	.word	0x3d4ccccd
 80087c0:	20000040 	.word	0x20000040
 80087c4:	438c0000 	.word	0x438c0000
 80087c8:	447a0000 	.word	0x447a0000
 80087cc:	20000050 	.word	0x20000050
 80087d0:	443b8000 	.word	0x443b8000
 80087d4:	44d48000 	.word	0x44d48000
 80087d8:	20000a90 	.word	0x20000a90
 80087dc:	200194e4 	.word	0x200194e4

080087e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b094      	sub	sp, #80	; 0x50
 80087e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80087e6:	f107 031c 	add.w	r3, r7, #28
 80087ea:	2234      	movs	r2, #52	; 0x34
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f003 fead 	bl	800c54e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80087f4:	f107 0308 	add.w	r3, r7, #8
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	605a      	str	r2, [r3, #4]
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8008804:	2300      	movs	r3, #0
 8008806:	607b      	str	r3, [r7, #4]
 8008808:	4b28      	ldr	r3, [pc, #160]	; (80088ac <SystemClock_Config+0xcc>)
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	4a27      	ldr	r2, [pc, #156]	; (80088ac <SystemClock_Config+0xcc>)
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008812:	6413      	str	r3, [r2, #64]	; 0x40
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <SystemClock_Config+0xcc>)
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008820:	2300      	movs	r3, #0
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <SystemClock_Config+0xd0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <SystemClock_Config+0xd0>)
 800882a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <SystemClock_Config+0xd0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008838:	603b      	str	r3, [r7, #0]
 800883a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800883c:	2301      	movs	r3, #1
 800883e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008844:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008846:	2302      	movs	r3, #2
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800884a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800884e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8008850:	2308      	movs	r3, #8
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 8008854:	2364      	movs	r3, #100	; 0x64
 8008856:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008858:	2302      	movs	r3, #2
 800885a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800885c:	2302      	movs	r3, #2
 800885e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8008860:	2302      	movs	r3, #2
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008864:	f107 031c 	add.w	r3, r7, #28
 8008868:	4618      	mov	r0, r3
 800886a:	f7fa fb07 	bl	8002e7c <HAL_RCC_OscConfig>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SystemClock_Config+0x98>
		Error_Handler();
 8008874:	f000 f81e 	bl	80088b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008878:	230f      	movs	r3, #15
 800887a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800887c:	2302      	movs	r3, #2
 800887e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008880:	2300      	movs	r3, #0
 8008882:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008888:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	2103      	movs	r1, #3
 8008894:	4618      	mov	r0, r3
 8008896:	f7fa f939 	bl	8002b0c <HAL_RCC_ClockConfig>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <SystemClock_Config+0xc4>
		Error_Handler();
 80088a0:	f000 f808 	bl	80088b4 <Error_Handler>
	}
}
 80088a4:	bf00      	nop
 80088a6:	3750      	adds	r7, #80	; 0x50
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40023800 	.word	0x40023800
 80088b0:	40007000 	.word	0x40007000

080088b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80088b8:	bf00      	nop
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <mode_0>:
#include "other.h"
#include "motion.h"
#include "adachi.h"
#include "buzzer.h"

void mode_0(void) {
 80088c2:	b580      	push	{r7, lr}
 80088c4:	af00      	add	r7, sp, #0
//	uint8_t i;
	read_all_log_from_flash();
 80088c6:	f000 ffd1 	bl	800986c <read_all_log_from_flash>
	log_output();
 80088ca:	f001 fb8b 	bl	8009fe4 <log_output>

//	read_all_walldata();
//	adachi_map(x.goal, y.goal, 4, walldata.real);
//	output_Walldata(REAL);
}
 80088ce:	bf00      	nop
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <mode_1>:

void mode_1(void) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
//	moter_flag = 1;
//	printf("4,mode=%d,%d\n", mode, (mode & 0x80));

//	run_gain.Ki=0;

	start_led();
 80088d8:	f001 fc62 	bl	800a1a0 <start_led>
//	log_start();
	set_straight(90.0 * 2, 3500, 300, 0.0, 0.0);
 80088dc:	ed9f 2a07 	vldr	s4, [pc, #28]	; 80088fc <mode_1+0x28>
 80088e0:	eddf 1a06 	vldr	s3, [pc, #24]	; 80088fc <mode_1+0x28>
 80088e4:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8008900 <mode_1+0x2c>
 80088e8:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008904 <mode_1+0x30>
 80088ec:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008908 <mode_1+0x34>
 80088f0:	f001 fcba 	bl	800a268 <set_straight>
	wait_straight();
 80088f4:	f001 fdac 	bl	800a450 <wait_straight>
//	run_right_deviation.cumulative = 0.0;
//	//	set_straight(90.0, 3500, 300, 0.0, 0.0);
////	wait_straight();
//	moter_flag = 0;
//	save_log_to_flash();
}
 80088f8:	bf00      	nop
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	00000000 	.word	0x00000000
 8008900:	43960000 	.word	0x43960000
 8008904:	455ac000 	.word	0x455ac000
 8008908:	43340000 	.word	0x43340000

0800890c <mode_2>:

void mode_2(void) {
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0

	start_led();
 8008910:	f001 fc46 	bl	800a1a0 <start_led>
//	log_start();
//	adachi_search_run_known(x.goal, y.goal, 4, nomal_run.accel, nomal_run.vel_search, 0, 0);
	search_run_special(x.goal, y.goal, 4);
 8008914:	4b04      	ldr	r3, [pc, #16]	; (8008928 <mode_2+0x1c>)
 8008916:	7858      	ldrb	r0, [r3, #1]
 8008918:	4b04      	ldr	r3, [pc, #16]	; (800892c <mode_2+0x20>)
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2204      	movs	r2, #4
 800891e:	4619      	mov	r1, r3
 8008920:	f7fd fabe 	bl	8005ea0 <search_run_special>
}
 8008924:	bf00      	nop
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20000a90 	.word	0x20000a90
 800892c:	200194e4 	.word	0x200194e4

08008930 <mode_3>:

void mode_3(void) { //253.558
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
	rotation_gain.Kp = 0.41 / 2;
 8008934:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <mode_3+0x94>)
 8008936:	4a24      	ldr	r2, [pc, #144]	; (80089c8 <mode_3+0x98>)
 8008938:	601a      	str	r2, [r3, #0]
	rotation_gain.Ki = 0.005 / 10; //3
 800893a:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <mode_3+0x94>)
 800893c:	4a23      	ldr	r2, [pc, #140]	; (80089cc <mode_3+0x9c>)
 800893e:	605a      	str	r2, [r3, #4]
	start_led();
 8008940:	f001 fc2e 	bl	800a1a0 <start_led>
	log_start();
 8008944:	f001 fa7a 	bl	8009e3c <log_start>
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8008948:	4b21      	ldr	r3, [pc, #132]	; (80089d0 <mode_3+0xa0>)
 800894a:	edd3 7a03 	vldr	s15, [r3, #12]
 800894e:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <mode_3+0xa0>)
 8008950:	ed93 7a00 	vldr	s14, [r3]
 8008954:	eef0 0a47 	vmov.f32	s1, s14
 8008958:	eeb0 0a67 	vmov.f32	s0, s15
 800895c:	f000 fb16 	bl	8008f8c <go_entrance>
	pass_180(nomal_run.accel, nomal_run.vel_search);
 8008960:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <mode_3+0xa0>)
 8008962:	edd3 7a03 	vldr	s15, [r3, #12]
 8008966:	4b1a      	ldr	r3, [pc, #104]	; (80089d0 <mode_3+0xa0>)
 8008968:	ed93 7a00 	vldr	s14, [r3]
 800896c:	eef0 0a47 	vmov.f32	s1, s14
 8008970:	eeb0 0a67 	vmov.f32	s0, s15
 8008974:	f000 fbbc 	bl	80090f0 <pass_180>
	slalom_left90(nomal_run.accel, nomal_run.vel_search);
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <mode_3+0xa0>)
 800897a:	edd3 7a03 	vldr	s15, [r3, #12]
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <mode_3+0xa0>)
 8008980:	ed93 7a00 	vldr	s14, [r3]
 8008984:	eef0 0a47 	vmov.f32	s1, s14
 8008988:	eeb0 0a67 	vmov.f32	s0, s15
 800898c:	f000 fe08 	bl	80095a0 <slalom_left90>
	set_straight(45.0 * 3, nomal_run.accel, nomal_run.vel_search,
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <mode_3+0xa0>)
 8008992:	edd3 7a03 	vldr	s15, [r3, #12]
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <mode_3+0xa0>)
 8008998:	ed93 7a00 	vldr	s14, [r3]
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <mode_3+0xa0>)
 800899e:	edd3 6a00 	vldr	s13, [r3]
 80089a2:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80089d4 <mode_3+0xa4>
 80089a6:	eef0 1a66 	vmov.f32	s3, s13
 80089aa:	eeb0 1a47 	vmov.f32	s2, s14
 80089ae:	eef0 0a67 	vmov.f32	s1, s15
 80089b2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80089d8 <mode_3+0xa8>
 80089b6:	f001 fc57 	bl	800a268 <set_straight>
			nomal_run.vel_search, 0.0);
	wait_straight();
 80089ba:	f001 fd49 	bl	800a450 <wait_straight>
//	save_log_to_flash();
}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000010 	.word	0x20000010
 80089c8:	3e51eb85 	.word	0x3e51eb85
 80089cc:	3a03126f 	.word	0x3a03126f
 80089d0:	20000040 	.word	0x20000040
 80089d4:	00000000 	.word	0x00000000
 80089d8:	43070000 	.word	0x43070000

080089dc <mode_4>:

void mode_4(void) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
	start_led();
 80089e0:	f001 fbde 	bl	800a1a0 <start_led>
	//log_start();
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 80089e4:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <mode_4+0x6c>)
 80089e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80089ea:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <mode_4+0x6c>)
 80089ec:	ed93 7a00 	vldr	s14, [r3]
 80089f0:	eef0 0a47 	vmov.f32	s1, s14
 80089f4:	eeb0 0a67 	vmov.f32	s0, s15
 80089f8:	f000 fac8 	bl	8008f8c <go_entrance>
	pass_180(nomal_run.accel, nomal_run.vel_search);
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <mode_4+0x6c>)
 80089fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a02:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <mode_4+0x6c>)
 8008a04:	ed93 7a00 	vldr	s14, [r3]
 8008a08:	eef0 0a47 	vmov.f32	s1, s14
 8008a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a10:	f000 fb6e 	bl	80090f0 <pass_180>
	slalom_right90(nomal_run.accel, nomal_run.vel_search);
 8008a14:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <mode_4+0x6c>)
 8008a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a1a:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <mode_4+0x6c>)
 8008a1c:	ed93 7a00 	vldr	s14, [r3]
 8008a20:	eef0 0a47 	vmov.f32	s1, s14
 8008a24:	eeb0 0a67 	vmov.f32	s0, s15
 8008a28:	f000 fe12 	bl	8009650 <slalom_right90>
	stop90(nomal_run.accel, nomal_run.vel_search);
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <mode_4+0x6c>)
 8008a2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <mode_4+0x6c>)
 8008a34:	ed93 7a00 	vldr	s14, [r3]
 8008a38:	eef0 0a47 	vmov.f32	s1, s14
 8008a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a40:	f000 fe5e 	bl	8009700 <stop90>
	//save_log_to_flash();
}
 8008a44:	bf00      	nop
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000040 	.word	0x20000040

08008a4c <mode_5>:

void mode_5(void) { //nomal_run.accel, nomal_run.vel_search,nomal_run.vel_search
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0

	start_led();
 8008a52:	f001 fba5 	bl	800a1a0 <start_led>
	log_start();
 8008a56:	f001 f9f1 	bl	8009e3c <log_start>
	for (uint8_t i = 0; i < 8; i++) {
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	71fb      	strb	r3, [r7, #7]
 8008a5e:	e00e      	b.n	8008a7e <mode_5+0x32>
		turn_left(nomal_run.accel, nomal_run.vel_search);
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <mode_5+0x40>)
 8008a62:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <mode_5+0x40>)
 8008a68:	ed93 7a00 	vldr	s14, [r3]
 8008a6c:	eef0 0a47 	vmov.f32	s1, s14
 8008a70:	eeb0 0a67 	vmov.f32	s0, s15
 8008a74:	f000 faac 	bl	8008fd0 <turn_left>
	for (uint8_t i = 0; i < 8; i++) {
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	71fb      	strb	r3, [r7, #7]
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	2b07      	cmp	r3, #7
 8008a82:	d9ed      	bls.n	8008a60 <mode_5+0x14>
	}
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000040 	.word	0x20000040

08008a90 <mode_6>:

void mode_6(void) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0

	start_led();
 8008a94:	f001 fb84 	bl	800a1a0 <start_led>
	log_start();
 8008a98:	f001 f9d0 	bl	8009e3c <log_start>

	front_wall_gain = 0.4;
 8008a9c:	4b03      	ldr	r3, [pc, #12]	; (8008aac <mode_6+0x1c>)
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <mode_6+0x20>)
 8008aa0:	601a      	str	r2, [r3, #0]
	front_wall_flag = 1;
 8008aa2:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <mode_6+0x24>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	701a      	strb	r2, [r3, #0]
	while (1)
 8008aa8:	e7fe      	b.n	8008aa8 <mode_6+0x18>
 8008aaa:	bf00      	nop
 8008aac:	20019450 	.word	0x20019450
 8008ab0:	3ecccccd 	.word	0x3ecccccd
 8008ab4:	200006a0 	.word	0x200006a0

08008ab8 <mode_7>:
		;

}

void mode_7(void) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
//	rotation_gain.Ki = 0.001;
//	while (failsafe_flag == 0) {
//		printf("rot_Dev=%8.3f\n", rotation_deviation.cumulative);
//	}

	start_led();
 8008abc:	f001 fb70 	bl	800a1a0 <start_led>
	moter_flag = 0;
 8008ac0:	4b35      	ldr	r3, [pc, #212]	; (8008b98 <mode_7+0xe0>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
	log_start();
 8008ac6:	f001 f9b9 	bl	8009e3c <log_start>
	while (log_index < 1000) {
 8008aca:	bf00      	nop
 8008acc:	4b33      	ldr	r3, [pc, #204]	; (8008b9c <mode_7+0xe4>)
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ad4:	d3fa      	bcc.n	8008acc <mode_7+0x14>

	}
	set_buzzer(0, C_4, 600);
 8008ad6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008ada:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7fe ff64 	bl	80079ac <set_buzzer>
	log_flag = 0;
 8008ae4:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <mode_7+0xe8>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
	start_led();
 8008aea:	f001 fb59 	bl	800a1a0 <start_led>
	moter_flag = 0;
 8008aee:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <mode_7+0xe0>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 8008af4:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <mode_7+0xe8>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]
	while (log_index < 2000) {
 8008afa:	bf00      	nop
 8008afc:	4b27      	ldr	r3, [pc, #156]	; (8008b9c <mode_7+0xe4>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b04:	d3fa      	bcc.n	8008afc <mode_7+0x44>

	}
	set_buzzer(0, C_4, 600);
 8008b06:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008b0a:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f7fe ff4c 	bl	80079ac <set_buzzer>
	log_flag = 0;
 8008b14:	4b22      	ldr	r3, [pc, #136]	; (8008ba0 <mode_7+0xe8>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
	start_led();
 8008b1a:	f001 fb41 	bl	800a1a0 <start_led>
	moter_flag = 0;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <mode_7+0xe0>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 8008b24:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <mode_7+0xe8>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
	while (log_index < 3000) {
 8008b2a:	bf00      	nop
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <mode_7+0xe4>)
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d9f9      	bls.n	8008b2c <mode_7+0x74>

	}
	set_buzzer(0, C_4, 600);
 8008b38:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008b3c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b40:	2000      	movs	r0, #0
 8008b42:	f7fe ff33 	bl	80079ac <set_buzzer>
	log_flag = 0;
 8008b46:	4b16      	ldr	r3, [pc, #88]	; (8008ba0 <mode_7+0xe8>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
	start_led();
 8008b4c:	f001 fb28 	bl	800a1a0 <start_led>
	moter_flag = 0;
 8008b50:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <mode_7+0xe0>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <mode_7+0xe8>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	701a      	strb	r2, [r3, #0]
	while (log_index < 4000) {
 8008b5c:	bf00      	nop
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <mode_7+0xe4>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008b66:	d3fa      	bcc.n	8008b5e <mode_7+0xa6>

	}
	set_buzzer(0, C_4, 600);
 8008b68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008b6c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b70:	2000      	movs	r0, #0
 8008b72:	f7fe ff1b 	bl	80079ac <set_buzzer>
	while (log_flag == 1) {
 8008b76:	bf00      	nop
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <mode_7+0xe8>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d0fb      	beq.n	8008b78 <mode_7+0xc0>

	}
	set_buzzer(0, C_4, 600);
 8008b80:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008b84:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b88:	2000      	movs	r0, #0
 8008b8a:	f7fe ff0f 	bl	80079ac <set_buzzer>
	save_log_to_flash();
 8008b8e:	f000 fe55 	bl	800983c <save_log_to_flash>

//	out_put_pass(pass);
//	while (SWITCH == 1) {
//
//	}
}
 8008b92:	bf00      	nop
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000682 	.word	0x20000682
 8008b9c:	20000684 	.word	0x20000684
 8008ba0:	2000068a 	.word	0x2000068a

08008ba4 <go_mode>:

void go_mode(void) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	71fb      	strb	r3, [r7, #7]
	printf("0,mode=%d,%d\n", mode, (mode & 0x80));
 8008bae:	4bad      	ldr	r3, [pc, #692]	; (8008e64 <go_mode+0x2c0>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4bab      	ldr	r3, [pc, #684]	; (8008e64 <go_mode+0x2c0>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	48aa      	ldr	r0, [pc, #680]	; (8008e68 <go_mode+0x2c4>)
 8008bc0:	f004 f92a 	bl	800ce18 <iprintf>
	mode = mode | 0x80;
 8008bc4:	4ba7      	ldr	r3, [pc, #668]	; (8008e64 <go_mode+0x2c0>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	4ba5      	ldr	r3, [pc, #660]	; (8008e64 <go_mode+0x2c0>)
 8008bd0:	701a      	strb	r2, [r3, #0]
	printf("1,mode=%d,%d\n", mode, (mode & 0x80));
 8008bd2:	4ba4      	ldr	r3, [pc, #656]	; (8008e64 <go_mode+0x2c0>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4ba2      	ldr	r3, [pc, #648]	; (8008e64 <go_mode+0x2c0>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be0:	461a      	mov	r2, r3
 8008be2:	48a2      	ldr	r0, [pc, #648]	; (8008e6c <go_mode+0x2c8>)
 8008be4:	f004 f918 	bl	800ce18 <iprintf>
	Battery_Check();
 8008be8:	f001 f856 	bl	8009c98 <Battery_Check>
	failsafe_flag = 0;
 8008bec:	4ba0      	ldr	r3, [pc, #640]	; (8008e70 <go_mode+0x2cc>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8008bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bf6:	f7f8 fa41 	bl	800107c <HAL_Delay>
	ideal_translation.accel = 0.0;
 8008bfa:	4b9e      	ldr	r3, [pc, #632]	; (8008e74 <go_mode+0x2d0>)
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 8008c02:	4b9c      	ldr	r3, [pc, #624]	; (8008e74 <go_mode+0x2d0>)
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
	ideal_translation.dis = 0.0;
 8008c0a:	4b9a      	ldr	r3, [pc, #616]	; (8008e74 <go_mode+0x2d0>)
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	609a      	str	r2, [r3, #8]
	ideal_rotation.accel = 0.0;
 8008c12:	4b99      	ldr	r3, [pc, #612]	; (8008e78 <go_mode+0x2d4>)
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
	ideal_rotation.dis = 0.0;
 8008c1a:	4b97      	ldr	r3, [pc, #604]	; (8008e78 <go_mode+0x2d4>)
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
	ideal_rotation.vel = 0.0;
 8008c22:	4b95      	ldr	r3, [pc, #596]	; (8008e78 <go_mode+0x2d4>)
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	605a      	str	r2, [r3, #4]
	rotation_parameter.back_rightturn_flag = 0;
 8008c2a:	4b94      	ldr	r3, [pc, #592]	; (8008e7c <go_mode+0x2d8>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	761a      	strb	r2, [r3, #24]
	rotation_deviation.now = 0.0;
 8008c30:	4b93      	ldr	r3, [pc, #588]	; (8008e80 <go_mode+0x2dc>)
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 8008c38:	4b91      	ldr	r3, [pc, #580]	; (8008e80 <go_mode+0x2dc>)
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 8008c40:	4b90      	ldr	r3, [pc, #576]	; (8008e84 <go_mode+0x2e0>)
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
	run_left_deviation.cumulative = 0.0;
 8008c48:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <go_mode+0x2e4>)
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]
	run_right_deviation.cumulative = 0.0;
 8008c50:	4b8e      	ldr	r3, [pc, #568]	; (8008e8c <go_mode+0x2e8>)
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	605a      	str	r2, [r3, #4]
	moter_flag = 0;
 8008c58:	4b8d      	ldr	r3, [pc, #564]	; (8008e90 <go_mode+0x2ec>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
	x.now = 0;
 8008c5e:	4b8d      	ldr	r3, [pc, #564]	; (8008e94 <go_mode+0x2f0>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8008c64:	4b8c      	ldr	r3, [pc, #560]	; (8008e98 <go_mode+0x2f4>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
	direction = 0;
 8008c6a:	4b8c      	ldr	r3, [pc, #560]	; (8008e9c <go_mode+0x2f8>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
	if ((mode & 0xf) == 0) {
 8008c70:	4b7c      	ldr	r3, [pc, #496]	; (8008e64 <go_mode+0x2c0>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <go_mode+0xde>
		mode_0();
 8008c7c:	f7ff fe21 	bl	80088c2 <mode_0>
 8008c80:	e12b      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 1) {
 8008c82:	4b78      	ldr	r3, [pc, #480]	; (8008e64 <go_mode+0x2c0>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d132      	bne.n	8008cf4 <go_mode+0x150>
		printf("2,mode=%d,%d\n", mode, (mode & 0x80));
 8008c8e:	4b75      	ldr	r3, [pc, #468]	; (8008e64 <go_mode+0x2c0>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	4b73      	ldr	r3, [pc, #460]	; (8008e64 <go_mode+0x2c0>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4880      	ldr	r0, [pc, #512]	; (8008ea0 <go_mode+0x2fc>)
 8008ca0:	f004 f8ba 	bl	800ce18 <iprintf>
		for (i = 0; i < 2; i++) {
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	71fb      	strb	r3, [r7, #7]
 8008ca8:	e013      	b.n	8008cd2 <go_mode+0x12e>
			set_led((mode & 0xf));
 8008caa:	4b6e      	ldr	r3, [pc, #440]	; (8008e64 <go_mode+0x2c0>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f869 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008cba:	2064      	movs	r0, #100	; 0x64
 8008cbc:	f7f8 f9de 	bl	800107c <HAL_Delay>
			set_led(0);
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f001 f863 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008cc6:	2064      	movs	r0, #100	; 0x64
 8008cc8:	f7f8 f9d8 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	71fb      	strb	r3, [r7, #7]
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d9e8      	bls.n	8008caa <go_mode+0x106>
		}
		mode_1();
 8008cd8:	f7ff fdfc 	bl	80088d4 <mode_1>
		printf("3,mode=%d,%d\n", mode, (mode & 0x80));
 8008cdc:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <go_mode+0x2c0>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4b60      	ldr	r3, [pc, #384]	; (8008e64 <go_mode+0x2c0>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	461a      	mov	r2, r3
 8008cec:	486d      	ldr	r0, [pc, #436]	; (8008ea4 <go_mode+0x300>)
 8008cee:	f004 f893 	bl	800ce18 <iprintf>
 8008cf2:	e0f2      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 2) {
 8008cf4:	4b5b      	ldr	r3, [pc, #364]	; (8008e64 <go_mode+0x2c0>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d11c      	bne.n	8008d3a <go_mode+0x196>
		for (i = 0; i < 2; i++) {
 8008d00:	2300      	movs	r3, #0
 8008d02:	71fb      	strb	r3, [r7, #7]
 8008d04:	e013      	b.n	8008d2e <go_mode+0x18a>
			set_led((mode & 0xf));
 8008d06:	4b57      	ldr	r3, [pc, #348]	; (8008e64 <go_mode+0x2c0>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 f83b 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008d16:	2064      	movs	r0, #100	; 0x64
 8008d18:	f7f8 f9b0 	bl	800107c <HAL_Delay>
			set_led(0);
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f001 f835 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008d22:	2064      	movs	r0, #100	; 0x64
 8008d24:	f7f8 f9aa 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	71fb      	strb	r3, [r7, #7]
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d9e8      	bls.n	8008d06 <go_mode+0x162>
		}
		mode_2();
 8008d34:	f7ff fdea 	bl	800890c <mode_2>
 8008d38:	e0cf      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 3) {
 8008d3a:	4b4a      	ldr	r3, [pc, #296]	; (8008e64 <go_mode+0x2c0>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d11c      	bne.n	8008d80 <go_mode+0x1dc>
		for (i = 0; i < 2; i++) {
 8008d46:	2300      	movs	r3, #0
 8008d48:	71fb      	strb	r3, [r7, #7]
 8008d4a:	e013      	b.n	8008d74 <go_mode+0x1d0>
			set_led((mode & 0xf));
 8008d4c:	4b45      	ldr	r3, [pc, #276]	; (8008e64 <go_mode+0x2c0>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 f818 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008d5c:	2064      	movs	r0, #100	; 0x64
 8008d5e:	f7f8 f98d 	bl	800107c <HAL_Delay>
			set_led(0);
 8008d62:	2000      	movs	r0, #0
 8008d64:	f001 f812 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008d68:	2064      	movs	r0, #100	; 0x64
 8008d6a:	f7f8 f987 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	3301      	adds	r3, #1
 8008d72:	71fb      	strb	r3, [r7, #7]
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d9e8      	bls.n	8008d4c <go_mode+0x1a8>
		}
		mode_3();
 8008d7a:	f7ff fdd9 	bl	8008930 <mode_3>
 8008d7e:	e0ac      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 4) {
 8008d80:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <go_mode+0x2c0>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d11c      	bne.n	8008dc6 <go_mode+0x222>
		for (i = 0; i < 2; i++) {
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	71fb      	strb	r3, [r7, #7]
 8008d90:	e013      	b.n	8008dba <go_mode+0x216>
			set_led((mode & 0xf));
 8008d92:	4b34      	ldr	r3, [pc, #208]	; (8008e64 <go_mode+0x2c0>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fff5 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008da2:	2064      	movs	r0, #100	; 0x64
 8008da4:	f7f8 f96a 	bl	800107c <HAL_Delay>
			set_led(0);
 8008da8:	2000      	movs	r0, #0
 8008daa:	f000 ffef 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008dae:	2064      	movs	r0, #100	; 0x64
 8008db0:	f7f8 f964 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	3301      	adds	r3, #1
 8008db8:	71fb      	strb	r3, [r7, #7]
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d9e8      	bls.n	8008d92 <go_mode+0x1ee>
		}
		mode_4();
 8008dc0:	f7ff fe0c 	bl	80089dc <mode_4>
 8008dc4:	e089      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 5) {
 8008dc6:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <go_mode+0x2c0>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	d11c      	bne.n	8008e0c <go_mode+0x268>
		for (i = 0; i < 2; i++) {
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	71fb      	strb	r3, [r7, #7]
 8008dd6:	e013      	b.n	8008e00 <go_mode+0x25c>
			set_led((mode & 0xf));
 8008dd8:	4b22      	ldr	r3, [pc, #136]	; (8008e64 <go_mode+0x2c0>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 ffd2 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008de8:	2064      	movs	r0, #100	; 0x64
 8008dea:	f7f8 f947 	bl	800107c <HAL_Delay>
			set_led(0);
 8008dee:	2000      	movs	r0, #0
 8008df0:	f000 ffcc 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008df4:	2064      	movs	r0, #100	; 0x64
 8008df6:	f7f8 f941 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d9e8      	bls.n	8008dd8 <go_mode+0x234>
		}
		mode_5();
 8008e06:	f7ff fe21 	bl	8008a4c <mode_5>
 8008e0a:	e066      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 6) {
 8008e0c:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <go_mode+0x2c0>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d11c      	bne.n	8008e52 <go_mode+0x2ae>
		for (i = 0; i < 2; i++) {
 8008e18:	2300      	movs	r3, #0
 8008e1a:	71fb      	strb	r3, [r7, #7]
 8008e1c:	e013      	b.n	8008e46 <go_mode+0x2a2>
			set_led((mode & 0xf));
 8008e1e:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <go_mode+0x2c0>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 ffaf 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008e2e:	2064      	movs	r0, #100	; 0x64
 8008e30:	f7f8 f924 	bl	800107c <HAL_Delay>
			set_led(0);
 8008e34:	2000      	movs	r0, #0
 8008e36:	f000 ffa9 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008e3a:	2064      	movs	r0, #100	; 0x64
 8008e3c:	f7f8 f91e 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	3301      	adds	r3, #1
 8008e44:	71fb      	strb	r3, [r7, #7]
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d9e8      	bls.n	8008e1e <go_mode+0x27a>
		}
		mode_6();
 8008e4c:	f7ff fe20 	bl	8008a90 <mode_6>
 8008e50:	e043      	b.n	8008eda <go_mode+0x336>
	} else if ((mode & 0xf) == 7) {
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <go_mode+0x2c0>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	d13d      	bne.n	8008eda <go_mode+0x336>
		for (i = 0; i < 2; i++) {
 8008e5e:	2300      	movs	r3, #0
 8008e60:	71fb      	strb	r3, [r7, #7]
 8008e62:	e035      	b.n	8008ed0 <go_mode+0x32c>
 8008e64:	20000669 	.word	0x20000669
 8008e68:	0800ed40 	.word	0x0800ed40
 8008e6c:	0800ed50 	.word	0x0800ed50
 8008e70:	20000674 	.word	0x20000674
 8008e74:	2001941c 	.word	0x2001941c
 8008e78:	20000c98 	.word	0x20000c98
 8008e7c:	20019488 	.word	0x20019488
 8008e80:	2001947c 	.word	0x2001947c
 8008e84:	2000067c 	.word	0x2000067c
 8008e88:	20019444 	.word	0x20019444
 8008e8c:	20031c0c 	.word	0x20031c0c
 8008e90:	20000682 	.word	0x20000682
 8008e94:	20000a90 	.word	0x20000a90
 8008e98:	200194e4 	.word	0x200194e4
 8008e9c:	20000668 	.word	0x20000668
 8008ea0:	0800ed60 	.word	0x0800ed60
 8008ea4:	0800ed70 	.word	0x0800ed70
			set_led((mode & 0xf));
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <go_mode+0x3bc>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 ff6a 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008eb8:	2064      	movs	r0, #100	; 0x64
 8008eba:	f7f8 f8df 	bl	800107c <HAL_Delay>
			set_led(0);
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f000 ff64 	bl	8009d8c <set_led>
			HAL_Delay(100);
 8008ec4:	2064      	movs	r0, #100	; 0x64
 8008ec6:	f7f8 f8d9 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	71fb      	strb	r3, [r7, #7]
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d9e8      	bls.n	8008ea8 <go_mode+0x304>
		}
		mode_7();
 8008ed6:	f7ff fdef 	bl	8008ab8 <mode_7>
	}

	HAL_Delay(200);
 8008eda:	20c8      	movs	r0, #200	; 0xc8
 8008edc:	f7f8 f8ce 	bl	800107c <HAL_Delay>
	ideal_translation.accel = 0.0;
 8008ee0:	4b20      	ldr	r3, [pc, #128]	; (8008f64 <go_mode+0x3c0>)
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 8008ee8:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <go_mode+0x3c0>)
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	605a      	str	r2, [r3, #4]

	duty.left = 0;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <go_mode+0x3c4>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
	duty.right = 0;
 8008ef6:	4b1c      	ldr	r3, [pc, #112]	; (8008f68 <go_mode+0x3c4>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	605a      	str	r2, [r3, #4]
	duty_to_moter();
 8008efc:	f001 fc2c 	bl	800a758 <duty_to_moter>
	x.now = 0;
 8008f00:	4b1a      	ldr	r3, [pc, #104]	; (8008f6c <go_mode+0x3c8>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8008f06:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <go_mode+0x3cc>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
	direction = 0;
 8008f0c:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <go_mode+0x3d0>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]
	if (failsafe_flag == 1) {
 8008f12:	4b19      	ldr	r3, [pc, #100]	; (8008f78 <go_mode+0x3d4>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d105      	bne.n	8008f26 <go_mode+0x382>
		while (failsafe_counter < 1000) {
 8008f1a:	bf00      	nop
 8008f1c:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <go_mode+0x3d8>)
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f24:	d3fa      	bcc.n	8008f1c <go_mode+0x378>
		}
	}
	mode = mode & 0x7f;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <go_mode+0x3bc>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <go_mode+0x3bc>)
 8008f32:	701a      	strb	r2, [r3, #0]
	moter_flag = 0;
 8008f34:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <go_mode+0x3dc>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
	failsafe_flag = 0;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <go_mode+0x3d4>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]
	SEN_check_flag = 0;
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <go_mode+0x3e0>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
	set_led(0);
 8008f46:	2000      	movs	r0, #0
 8008f48:	f000 ff20 	bl	8009d8c <set_led>

	if (log_index != 0) {
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <go_mode+0x3e4>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <go_mode+0x3b4>
		save_log_to_flash();
 8008f54:	f000 fc72 	bl	800983c <save_log_to_flash>
	}
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000669 	.word	0x20000669
 8008f64:	2001941c 	.word	0x2001941c
 8008f68:	20031bc8 	.word	0x20031bc8
 8008f6c:	20000a90 	.word	0x20000a90
 8008f70:	200194e4 	.word	0x200194e4
 8008f74:	20000668 	.word	0x20000668
 8008f78:	20000674 	.word	0x20000674
 8008f7c:	20000680 	.word	0x20000680
 8008f80:	20000682 	.word	0x20000682
 8008f84:	20000683 	.word	0x20000683
 8008f88:	20000684 	.word	0x20000684

08008f8c <go_entrance>:
#include "other.h"
#include "stdint.h"
#include "walldata.h"
#include "motion.h"

void go_entrance(float accel, float vel) {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f96:	edc7 0a00 	vstr	s1, [r7]
//	rotation_deviation.now = 0.0;
//rotation_deviation.cumulative = 0.0;
	moter_flag = 1;
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <go_entrance+0x38>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	701a      	strb	r2, [r3, #0]
	set_straight(67.0, accel, vel, 0.0, vel);
 8008fa0:	ed97 2a00 	vldr	s4, [r7]
 8008fa4:	eddf 1a08 	vldr	s3, [pc, #32]	; 8008fc8 <go_entrance+0x3c>
 8008fa8:	ed97 1a00 	vldr	s2, [r7]
 8008fac:	edd7 0a01 	vldr	s1, [r7, #4]
 8008fb0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008fcc <go_entrance+0x40>
 8008fb4:	f001 f958 	bl	800a268 <set_straight>
	wait_straight();
 8008fb8:	f001 fa4a 	bl	800a450 <wait_straight>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20000682 	.word	0x20000682
 8008fc8:	00000000 	.word	0x00000000
 8008fcc:	42860000 	.word	0x42860000

08008fd0 <turn_left>:
//	rotation_deviation.cumulative = 0.0;
	set_straight(22.0, accel, vel, 0.0, 0.0);
	wait_straight();
}

void turn_left(float accel, float vel) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8008fda:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 8008fde:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8009050 <turn_left+0x80>
 8008fe2:	edd7 1a00 	vldr	s3, [r7]
 8008fe6:	ed97 1a00 	vldr	s2, [r7]
 8008fea:	edd7 0a01 	vldr	s1, [r7, #4]
 8008fee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009054 <turn_left+0x84>
 8008ff2:	f001 f939 	bl	800a268 <set_straight>
	wait_straight();
 8008ff6:	f001 fa2b 	bl	800a450 <wait_straight>
	HAL_Delay(200);
 8008ffa:	20c8      	movs	r0, #200	; 0xc8
 8008ffc:	f7f8 f83e 	bl	800107c <HAL_Delay>
	set_rotation(90.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 8009000:	4b15      	ldr	r3, [pc, #84]	; (8009058 <turn_left+0x88>)
 8009002:	edd3 7a03 	vldr	s15, [r3, #12]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <turn_left+0x88>)
 8009008:	ed93 7a00 	vldr	s14, [r3]
 800900c:	eddf 1a10 	vldr	s3, [pc, #64]	; 8009050 <turn_left+0x80>
 8009010:	eeb0 1a47 	vmov.f32	s2, s14
 8009014:	eef0 0a67 	vmov.f32	s1, s15
 8009018:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800905c <turn_left+0x8c>
 800901c:	f001 f95e 	bl	800a2dc <set_rotation>
	wait_rotation();
 8009020:	f001 fa56 	bl	800a4d0 <wait_rotation>
	HAL_Delay(200);
 8009024:	20c8      	movs	r0, #200	; 0xc8
 8009026:	f7f8 f829 	bl	800107c <HAL_Delay>
	set_straight(45.0, accel, vel, 0.0, vel);
 800902a:	ed97 2a00 	vldr	s4, [r7]
 800902e:	eddf 1a08 	vldr	s3, [pc, #32]	; 8009050 <turn_left+0x80>
 8009032:	ed97 1a00 	vldr	s2, [r7]
 8009036:	edd7 0a01 	vldr	s1, [r7, #4]
 800903a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009054 <turn_left+0x84>
 800903e:	f001 f913 	bl	800a268 <set_straight>
	wait_straight();
 8009042:	f001 fa05 	bl	800a450 <wait_straight>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	00000000 	.word	0x00000000
 8009054:	42340000 	.word	0x42340000
 8009058:	20000050 	.word	0x20000050
 800905c:	42b40000 	.word	0x42b40000

08009060 <turn_right>:

void turn_right(float accel, float vel) {
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	ed87 0a01 	vstr	s0, [r7, #4]
 800906a:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 800906e:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 80090e0 <turn_right+0x80>
 8009072:	edd7 1a00 	vldr	s3, [r7]
 8009076:	ed97 1a00 	vldr	s2, [r7]
 800907a:	edd7 0a01 	vldr	s1, [r7, #4]
 800907e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80090e4 <turn_right+0x84>
 8009082:	f001 f8f1 	bl	800a268 <set_straight>
	wait_straight();
 8009086:	f001 f9e3 	bl	800a450 <wait_straight>
	HAL_Delay(200);
 800908a:	20c8      	movs	r0, #200	; 0xc8
 800908c:	f7f7 fff6 	bl	800107c <HAL_Delay>
	set_rotation(-90.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 8009090:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <turn_right+0x88>)
 8009092:	edd3 7a03 	vldr	s15, [r3, #12]
 8009096:	4b14      	ldr	r3, [pc, #80]	; (80090e8 <turn_right+0x88>)
 8009098:	ed93 7a00 	vldr	s14, [r3]
 800909c:	eddf 1a10 	vldr	s3, [pc, #64]	; 80090e0 <turn_right+0x80>
 80090a0:	eeb0 1a47 	vmov.f32	s2, s14
 80090a4:	eef0 0a67 	vmov.f32	s1, s15
 80090a8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80090ec <turn_right+0x8c>
 80090ac:	f001 f916 	bl	800a2dc <set_rotation>
	wait_rotation();
 80090b0:	f001 fa0e 	bl	800a4d0 <wait_rotation>
	HAL_Delay(200);
 80090b4:	20c8      	movs	r0, #200	; 0xc8
 80090b6:	f7f7 ffe1 	bl	800107c <HAL_Delay>
	set_straight(45.0, accel, vel, 0.0, vel);
 80090ba:	ed97 2a00 	vldr	s4, [r7]
 80090be:	eddf 1a08 	vldr	s3, [pc, #32]	; 80090e0 <turn_right+0x80>
 80090c2:	ed97 1a00 	vldr	s2, [r7]
 80090c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80090ca:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80090e4 <turn_right+0x84>
 80090ce:	f001 f8cb 	bl	800a268 <set_straight>
	wait_straight();
 80090d2:	f001 f9bd 	bl	800a450 <wait_straight>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	00000000 	.word	0x00000000
 80090e4:	42340000 	.word	0x42340000
 80090e8:	20000050 	.word	0x20000050
 80090ec:	c2b40000 	.word	0xc2b40000

080090f0 <pass_180>:

void pass_180(float accel, float vel) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80090fa:	edc7 0a00 	vstr	s1, [r7]
	set_straight(90.0, accel, vel, vel, vel);
 80090fe:	ed97 2a00 	vldr	s4, [r7]
 8009102:	edd7 1a00 	vldr	s3, [r7]
 8009106:	ed97 1a00 	vldr	s2, [r7]
 800910a:	edd7 0a01 	vldr	s1, [r7, #4]
 800910e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8009124 <pass_180+0x34>
 8009112:	f001 f8a9 	bl	800a268 <set_straight>
	wait_straight();
 8009116:	f001 f99b 	bl	800a450 <wait_straight>
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	42b40000 	.word	0x42b40000

08009128 <turn_180>:

void turn_180(float accel, float vel) {
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009132:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 8009136:	ed9f 2a89 	vldr	s4, [pc, #548]	; 800935c <turn_180+0x234>
 800913a:	edd7 1a00 	vldr	s3, [r7]
 800913e:	ed97 1a00 	vldr	s2, [r7]
 8009142:	edd7 0a01 	vldr	s1, [r7, #4]
 8009146:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009360 <turn_180+0x238>
 800914a:	f001 f88d 	bl	800a268 <set_straight>
	wait_straight();
 800914e:	f001 f97f 	bl	800a450 <wait_straight>
	HAL_Delay(50);
 8009152:	2032      	movs	r0, #50	; 0x32
 8009154:	f7f7 ff92 	bl	800107c <HAL_Delay>

	set_rotation(180.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 8009158:	4b82      	ldr	r3, [pc, #520]	; (8009364 <turn_180+0x23c>)
 800915a:	edd3 7a03 	vldr	s15, [r3, #12]
 800915e:	4b81      	ldr	r3, [pc, #516]	; (8009364 <turn_180+0x23c>)
 8009160:	ed93 7a00 	vldr	s14, [r3]
 8009164:	eddf 1a7d 	vldr	s3, [pc, #500]	; 800935c <turn_180+0x234>
 8009168:	eeb0 1a47 	vmov.f32	s2, s14
 800916c:	eef0 0a67 	vmov.f32	s1, s15
 8009170:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009368 <turn_180+0x240>
 8009174:	f001 f8b2 	bl	800a2dc <set_rotation>
	wait_rotation();
 8009178:	f001 f9aa 	bl	800a4d0 <wait_rotation>
	if (getWall(x.now, y.now, (direction + 2) % 4, &walldata.real) == 1) {
 800917c:	4b7b      	ldr	r3, [pc, #492]	; (800936c <turn_180+0x244>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	4b7b      	ldr	r3, [pc, #492]	; (8009370 <turn_180+0x248>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	461c      	mov	r4, r3
 8009188:	4b7a      	ldr	r3, [pc, #488]	; (8009374 <turn_180+0x24c>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	3302      	adds	r3, #2
 800918e:	4259      	negs	r1, r3
 8009190:	f003 0203 	and.w	r2, r3, #3
 8009194:	f001 0303 	and.w	r3, r1, #3
 8009198:	bf58      	it	pl
 800919a:	425a      	negpl	r2, r3
 800919c:	4b76      	ldr	r3, [pc, #472]	; (8009378 <turn_180+0x250>)
 800919e:	4621      	mov	r1, r4
 80091a0:	f003 f900 	bl	800c3a4 <getWall>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d160      	bne.n	800926c <turn_180+0x144>
		HAL_Delay(50);
 80091aa:	2032      	movs	r0, #50	; 0x32
 80091ac:	f7f7 ff66 	bl	800107c <HAL_Delay>
		back_100();
 80091b0:	f000 f99c 	bl	80094ec <back_100>
		if (u_turn_counter == 100) {
 80091b4:	4b71      	ldr	r3, [pc, #452]	; (800937c <turn_180+0x254>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b64      	cmp	r3, #100	; 0x64
 80091ba:	d105      	bne.n	80091c8 <turn_180+0xa0>

			save_all_walldata();
 80091bc:	f000 fbc0 	bl	8009940 <save_all_walldata>
			u_turn_counter = 0;
 80091c0:	4b6e      	ldr	r3, [pc, #440]	; (800937c <turn_180+0x254>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e032      	b.n	800922e <turn_180+0x106>
		} else if (u_turn_counter > 4 || (x.now == 7 && y.now == 7)
 80091c8:	4b6c      	ldr	r3, [pc, #432]	; (800937c <turn_180+0x254>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d81f      	bhi.n	8009210 <turn_180+0xe8>
 80091d0:	4b66      	ldr	r3, [pc, #408]	; (800936c <turn_180+0x244>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b07      	cmp	r3, #7
 80091d6:	d103      	bne.n	80091e0 <turn_180+0xb8>
 80091d8:	4b65      	ldr	r3, [pc, #404]	; (8009370 <turn_180+0x248>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b07      	cmp	r3, #7
 80091de:	d017      	beq.n	8009210 <turn_180+0xe8>
				|| (x.now == 8 && y.now == 7) || (x.now == 7 && y.now == 8)
 80091e0:	4b62      	ldr	r3, [pc, #392]	; (800936c <turn_180+0x244>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b08      	cmp	r3, #8
 80091e6:	d103      	bne.n	80091f0 <turn_180+0xc8>
 80091e8:	4b61      	ldr	r3, [pc, #388]	; (8009370 <turn_180+0x248>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b07      	cmp	r3, #7
 80091ee:	d00f      	beq.n	8009210 <turn_180+0xe8>
 80091f0:	4b5e      	ldr	r3, [pc, #376]	; (800936c <turn_180+0x244>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	d103      	bne.n	8009200 <turn_180+0xd8>
 80091f8:	4b5d      	ldr	r3, [pc, #372]	; (8009370 <turn_180+0x248>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d007      	beq.n	8009210 <turn_180+0xe8>
				|| (x.now == 8 && y.now == 8)) {
 8009200:	4b5a      	ldr	r3, [pc, #360]	; (800936c <turn_180+0x244>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b08      	cmp	r3, #8
 8009206:	d109      	bne.n	800921c <turn_180+0xf4>
 8009208:	4b59      	ldr	r3, [pc, #356]	; (8009370 <turn_180+0x248>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d105      	bne.n	800921c <turn_180+0xf4>
			save_all_walldata();
 8009210:	f000 fb96 	bl	8009940 <save_all_walldata>
			u_turn_counter = 0;
 8009214:	4b59      	ldr	r3, [pc, #356]	; (800937c <turn_180+0x254>)
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	e008      	b.n	800922e <turn_180+0x106>
		} else {
			HAL_Delay(5);
 800921c:	2005      	movs	r0, #5
 800921e:	f7f7 ff2d 	bl	800107c <HAL_Delay>
			u_turn_counter++;
 8009222:	4b56      	ldr	r3, [pc, #344]	; (800937c <turn_180+0x254>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4b54      	ldr	r3, [pc, #336]	; (800937c <turn_180+0x254>)
 800922c:	701a      	strb	r2, [r3, #0]
		}

		rotation_deviation.now = 0.0;
 800922e:	4b54      	ldr	r3, [pc, #336]	; (8009380 <turn_180+0x258>)
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
		rotation_deviation.cumulative = 0.0;
 8009236:	4b52      	ldr	r3, [pc, #328]	; (8009380 <turn_180+0x258>)
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 800923e:	4b51      	ldr	r3, [pc, #324]	; (8009384 <turn_180+0x25c>)
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
		run_left_deviation.cumulative = 0.0;
 8009246:	4b50      	ldr	r3, [pc, #320]	; (8009388 <turn_180+0x260>)
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	605a      	str	r2, [r3, #4]
		run_right_deviation.cumulative = 0.0;
 800924e:	4b4f      	ldr	r3, [pc, #316]	; (800938c <turn_180+0x264>)
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 8009256:	4b4b      	ldr	r3, [pc, #300]	; (8009384 <turn_180+0x25c>)
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
		go_entrance(accel, vel);
 800925e:	edd7 0a00 	vldr	s1, [r7]
 8009262:	ed97 0a01 	vldr	s0, [r7, #4]
 8009266:	f7ff fe91 	bl	8008f8c <go_entrance>
		run_right_deviation.cumulative = 0.0;
		wallcontrol_value = 0.0;
		set_straight(67.0, accel, vel, 0.0, vel);
		wait_straight();
	}
}
 800926a:	e073      	b.n	8009354 <turn_180+0x22c>
		if (u_turn_counter == 100) {
 800926c:	4b43      	ldr	r3, [pc, #268]	; (800937c <turn_180+0x254>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b64      	cmp	r3, #100	; 0x64
 8009272:	d105      	bne.n	8009280 <turn_180+0x158>
			save_all_walldata();
 8009274:	f000 fb64 	bl	8009940 <save_all_walldata>
			u_turn_counter = 0;
 8009278:	4b40      	ldr	r3, [pc, #256]	; (800937c <turn_180+0x254>)
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	e032      	b.n	80092e6 <turn_180+0x1be>
		} else if (u_turn_counter > 4 || (x.now == 7 && y.now == 7)
 8009280:	4b3e      	ldr	r3, [pc, #248]	; (800937c <turn_180+0x254>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b04      	cmp	r3, #4
 8009286:	d81f      	bhi.n	80092c8 <turn_180+0x1a0>
 8009288:	4b38      	ldr	r3, [pc, #224]	; (800936c <turn_180+0x244>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b07      	cmp	r3, #7
 800928e:	d103      	bne.n	8009298 <turn_180+0x170>
 8009290:	4b37      	ldr	r3, [pc, #220]	; (8009370 <turn_180+0x248>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b07      	cmp	r3, #7
 8009296:	d017      	beq.n	80092c8 <turn_180+0x1a0>
				|| (x.now == 8 && y.now == 7) || (x.now == 7 && y.now == 8)
 8009298:	4b34      	ldr	r3, [pc, #208]	; (800936c <turn_180+0x244>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b08      	cmp	r3, #8
 800929e:	d103      	bne.n	80092a8 <turn_180+0x180>
 80092a0:	4b33      	ldr	r3, [pc, #204]	; (8009370 <turn_180+0x248>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	d00f      	beq.n	80092c8 <turn_180+0x1a0>
 80092a8:	4b30      	ldr	r3, [pc, #192]	; (800936c <turn_180+0x244>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	d103      	bne.n	80092b8 <turn_180+0x190>
 80092b0:	4b2f      	ldr	r3, [pc, #188]	; (8009370 <turn_180+0x248>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d007      	beq.n	80092c8 <turn_180+0x1a0>
				|| (x.now == 8 && y.now == 8)) {
 80092b8:	4b2c      	ldr	r3, [pc, #176]	; (800936c <turn_180+0x244>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d109      	bne.n	80092d4 <turn_180+0x1ac>
 80092c0:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <turn_180+0x248>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d105      	bne.n	80092d4 <turn_180+0x1ac>
			save_all_walldata();
 80092c8:	f000 fb3a 	bl	8009940 <save_all_walldata>
			u_turn_counter = 0;
 80092cc:	4b2b      	ldr	r3, [pc, #172]	; (800937c <turn_180+0x254>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	e008      	b.n	80092e6 <turn_180+0x1be>
			HAL_Delay(5);
 80092d4:	2005      	movs	r0, #5
 80092d6:	f7f7 fed1 	bl	800107c <HAL_Delay>
			u_turn_counter++;
 80092da:	4b28      	ldr	r3, [pc, #160]	; (800937c <turn_180+0x254>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	4b26      	ldr	r3, [pc, #152]	; (800937c <turn_180+0x254>)
 80092e4:	701a      	strb	r2, [r3, #0]
		set_straight(-20.0, 600.0, 300.0, 0.0, 0.0);
 80092e6:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 800935c <turn_180+0x234>
 80092ea:	eddf 1a1c 	vldr	s3, [pc, #112]	; 800935c <turn_180+0x234>
 80092ee:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8009390 <turn_180+0x268>
 80092f2:	eddf 0a28 	vldr	s1, [pc, #160]	; 8009394 <turn_180+0x26c>
 80092f6:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80092fa:	f000 ffb5 	bl	800a268 <set_straight>
		wait_straight();
 80092fe:	f001 f8a7 	bl	800a450 <wait_straight>
		HAL_Delay(10);
 8009302:	200a      	movs	r0, #10
 8009304:	f7f7 feba 	bl	800107c <HAL_Delay>
		rotation_deviation.now = 0.0;
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <turn_180+0x258>)
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
		rotation_deviation.cumulative = 0.0;
 8009310:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <turn_180+0x258>)
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <turn_180+0x25c>)
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
		run_left_deviation.cumulative = 0.0;
 8009320:	4b19      	ldr	r3, [pc, #100]	; (8009388 <turn_180+0x260>)
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	605a      	str	r2, [r3, #4]
		run_right_deviation.cumulative = 0.0;
 8009328:	4b18      	ldr	r3, [pc, #96]	; (800938c <turn_180+0x264>)
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 8009330:	4b14      	ldr	r3, [pc, #80]	; (8009384 <turn_180+0x25c>)
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	601a      	str	r2, [r3, #0]
		set_straight(67.0, accel, vel, 0.0, vel);
 8009338:	ed97 2a00 	vldr	s4, [r7]
 800933c:	eddf 1a07 	vldr	s3, [pc, #28]	; 800935c <turn_180+0x234>
 8009340:	ed97 1a00 	vldr	s2, [r7]
 8009344:	edd7 0a01 	vldr	s1, [r7, #4]
 8009348:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009398 <turn_180+0x270>
 800934c:	f000 ff8c 	bl	800a268 <set_straight>
		wait_straight();
 8009350:	f001 f87e 	bl	800a450 <wait_straight>
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	00000000 	.word	0x00000000
 8009360:	42340000 	.word	0x42340000
 8009364:	20000050 	.word	0x20000050
 8009368:	43340000 	.word	0x43340000
 800936c:	20000a90 	.word	0x20000a90
 8009370:	200194e4 	.word	0x200194e4
 8009374:	20000668 	.word	0x20000668
 8009378:	20000990 	.word	0x20000990
 800937c:	2000069f 	.word	0x2000069f
 8009380:	2001947c 	.word	0x2001947c
 8009384:	2000067c 	.word	0x2000067c
 8009388:	20019444 	.word	0x20019444
 800938c:	20031c0c 	.word	0x20031c0c
 8009390:	43960000 	.word	0x43960000
 8009394:	44160000 	.word	0x44160000
 8009398:	42860000 	.word	0x42860000

0800939c <ketuate>:

void ketuate(float accel, float vel) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80093a6:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 80093aa:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80094c0 <ketuate+0x124>
 80093ae:	edd7 1a00 	vldr	s3, [r7]
 80093b2:	ed97 1a00 	vldr	s2, [r7]
 80093b6:	edd7 0a01 	vldr	s1, [r7, #4]
 80093ba:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80094c4 <ketuate+0x128>
 80093be:	f000 ff53 	bl	800a268 <set_straight>
	wait_straight();
 80093c2:	f001 f845 	bl	800a450 <wait_straight>
	HAL_Delay(50);
 80093c6:	2032      	movs	r0, #50	; 0x32
 80093c8:	f7f7 fe58 	bl	800107c <HAL_Delay>
	set_rotation(180.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 80093cc:	4b3e      	ldr	r3, [pc, #248]	; (80094c8 <ketuate+0x12c>)
 80093ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80093d2:	4b3d      	ldr	r3, [pc, #244]	; (80094c8 <ketuate+0x12c>)
 80093d4:	ed93 7a00 	vldr	s14, [r3]
 80093d8:	eddf 1a39 	vldr	s3, [pc, #228]	; 80094c0 <ketuate+0x124>
 80093dc:	eeb0 1a47 	vmov.f32	s2, s14
 80093e0:	eef0 0a67 	vmov.f32	s1, s15
 80093e4:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80094cc <ketuate+0x130>
 80093e8:	f000 ff78 	bl	800a2dc <set_rotation>
	wait_rotation();
 80093ec:	f001 f870 	bl	800a4d0 <wait_rotation>
	HAL_Delay(50);
 80093f0:	2032      	movs	r0, #50	; 0x32
 80093f2:	f7f7 fe43 	bl	800107c <HAL_Delay>
	back_100();
 80093f6:	f000 f879 	bl	80094ec <back_100>
	if (u_turn_counter == 100) {
 80093fa:	4b35      	ldr	r3, [pc, #212]	; (80094d0 <ketuate+0x134>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b64      	cmp	r3, #100	; 0x64
 8009400:	d105      	bne.n	800940e <ketuate+0x72>
		save_all_walldata();
 8009402:	f000 fa9d 	bl	8009940 <save_all_walldata>
		u_turn_counter = 0;
 8009406:	4b32      	ldr	r3, [pc, #200]	; (80094d0 <ketuate+0x134>)
 8009408:	2200      	movs	r2, #0
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	e032      	b.n	8009474 <ketuate+0xd8>
	} else if (u_turn_counter > 4 || (x.now == 7 && y.now == 7)
 800940e:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <ketuate+0x134>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b04      	cmp	r3, #4
 8009414:	d81f      	bhi.n	8009456 <ketuate+0xba>
 8009416:	4b2f      	ldr	r3, [pc, #188]	; (80094d4 <ketuate+0x138>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b07      	cmp	r3, #7
 800941c:	d103      	bne.n	8009426 <ketuate+0x8a>
 800941e:	4b2e      	ldr	r3, [pc, #184]	; (80094d8 <ketuate+0x13c>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b07      	cmp	r3, #7
 8009424:	d017      	beq.n	8009456 <ketuate+0xba>
			|| (x.now == 8 && y.now == 7) || (x.now == 7 && y.now == 8)
 8009426:	4b2b      	ldr	r3, [pc, #172]	; (80094d4 <ketuate+0x138>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b08      	cmp	r3, #8
 800942c:	d103      	bne.n	8009436 <ketuate+0x9a>
 800942e:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <ketuate+0x13c>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b07      	cmp	r3, #7
 8009434:	d00f      	beq.n	8009456 <ketuate+0xba>
 8009436:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <ketuate+0x138>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b07      	cmp	r3, #7
 800943c:	d103      	bne.n	8009446 <ketuate+0xaa>
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <ketuate+0x13c>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b08      	cmp	r3, #8
 8009444:	d007      	beq.n	8009456 <ketuate+0xba>
			|| (x.now == 8 && y.now == 8)) {
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <ketuate+0x138>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b08      	cmp	r3, #8
 800944c:	d109      	bne.n	8009462 <ketuate+0xc6>
 800944e:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <ketuate+0x13c>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b08      	cmp	r3, #8
 8009454:	d105      	bne.n	8009462 <ketuate+0xc6>
		save_all_walldata();
 8009456:	f000 fa73 	bl	8009940 <save_all_walldata>
		u_turn_counter = 0;
 800945a:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <ketuate+0x134>)
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	e008      	b.n	8009474 <ketuate+0xd8>
	} else {
		HAL_Delay(5);
 8009462:	2005      	movs	r0, #5
 8009464:	f7f7 fe0a 	bl	800107c <HAL_Delay>
		u_turn_counter++;
 8009468:	4b19      	ldr	r3, [pc, #100]	; (80094d0 <ketuate+0x134>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	b2da      	uxtb	r2, r3
 8009470:	4b17      	ldr	r3, [pc, #92]	; (80094d0 <ketuate+0x134>)
 8009472:	701a      	strb	r2, [r3, #0]
	}
	rotation_deviation.cumulative = 0.0;
 8009474:	4b19      	ldr	r3, [pc, #100]	; (80094dc <ketuate+0x140>)
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	605a      	str	r2, [r3, #4]
	rotation_deviation.now = 0.0;
 800947c:	4b17      	ldr	r3, [pc, #92]	; (80094dc <ketuate+0x140>)
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 8009484:	4b15      	ldr	r3, [pc, #84]	; (80094dc <ketuate+0x140>)
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 800948c:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <ketuate+0x144>)
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
	run_left_deviation.cumulative = 0.0;
 8009494:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <ketuate+0x148>)
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	605a      	str	r2, [r3, #4]
	run_right_deviation.cumulative = 0.0;
 800949c:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <ketuate+0x14c>)
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <ketuate+0x144>)
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
	go_entrance(accel, vel);
 80094ac:	edd7 0a00 	vldr	s1, [r7]
 80094b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80094b4:	f7ff fd6a 	bl	8008f8c <go_entrance>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	00000000 	.word	0x00000000
 80094c4:	42340000 	.word	0x42340000
 80094c8:	20000050 	.word	0x20000050
 80094cc:	43340000 	.word	0x43340000
 80094d0:	2000069f 	.word	0x2000069f
 80094d4:	20000a90 	.word	0x20000a90
 80094d8:	200194e4 	.word	0x200194e4
 80094dc:	2001947c 	.word	0x2001947c
 80094e0:	2000067c 	.word	0x2000067c
 80094e4:	20019444 	.word	0x20019444
 80094e8:	20031c0c 	.word	0x20031c0c

080094ec <back_100>:
	HAL_Delay(5);
	rotation_deviation.cumulative = 0.0;
	go_entrance(accel, vel);
}

void back_100(void) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
	set_straight(-40.0, 300, 80, 0.0, 0.0);
 80094f0:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8009518 <back_100+0x2c>
 80094f4:	eddf 1a08 	vldr	s3, [pc, #32]	; 8009518 <back_100+0x2c>
 80094f8:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800951c <back_100+0x30>
 80094fc:	eddf 0a08 	vldr	s1, [pc, #32]	; 8009520 <back_100+0x34>
 8009500:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009524 <back_100+0x38>
 8009504:	f000 feb0 	bl	800a268 <set_straight>
	wall_control_flag = 0;
 8009508:	4b07      	ldr	r3, [pc, #28]	; (8009528 <back_100+0x3c>)
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
	wait_straight();
 800950e:	f000 ff9f 	bl	800a450 <wait_straight>
}
 8009512:	bf00      	nop
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	00000000 	.word	0x00000000
 800951c:	42a00000 	.word	0x42a00000
 8009520:	43960000 	.word	0x43960000
 8009524:	c2200000 	.word	0xc2200000
 8009528:	2000069d 	.word	0x2000069d

0800952c <non_ketuate_goal>:
	wall_control_flag = 0;
	wait_straight();
	HAL_Delay(50);
}

void non_ketuate_goal(float accel, float vel) {
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	ed87 0a01 	vstr	s0, [r7, #4]
 8009536:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 800953a:	ed9f 2a14 	vldr	s4, [pc, #80]	; 800958c <non_ketuate_goal+0x60>
 800953e:	edd7 1a00 	vldr	s3, [r7]
 8009542:	ed97 1a00 	vldr	s2, [r7]
 8009546:	edd7 0a01 	vldr	s1, [r7, #4]
 800954a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009590 <non_ketuate_goal+0x64>
 800954e:	f000 fe8b 	bl	800a268 <set_straight>
	wait_straight();
 8009552:	f000 ff7d 	bl	800a450 <wait_straight>
	HAL_Delay(50);
 8009556:	2032      	movs	r0, #50	; 0x32
 8009558:	f7f7 fd90 	bl	800107c <HAL_Delay>
	set_straight(-25.0, 500, 150, 0.0, 0.0);
 800955c:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 800958c <non_ketuate_goal+0x60>
 8009560:	eddf 1a0a 	vldr	s3, [pc, #40]	; 800958c <non_ketuate_goal+0x60>
 8009564:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8009594 <non_ketuate_goal+0x68>
 8009568:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8009598 <non_ketuate_goal+0x6c>
 800956c:	eebb 0a09 	vmov.f32	s0, #185	; 0xc1c80000 -25.0
 8009570:	f000 fe7a 	bl	800a268 <set_straight>
	wall_control_flag = 0;
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <non_ketuate_goal+0x70>)
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
	wait_straight();
 800957a:	f000 ff69 	bl	800a450 <wait_straight>
	HAL_Delay(50);
 800957e:	2032      	movs	r0, #50	; 0x32
 8009580:	f7f7 fd7c 	bl	800107c <HAL_Delay>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	00000000 	.word	0x00000000
 8009590:	42340000 	.word	0x42340000
 8009594:	43160000 	.word	0x43160000
 8009598:	43fa0000 	.word	0x43fa0000
 800959c:	2000069d 	.word	0x2000069d

080095a0 <slalom_left90>:

void slalom_left90(float run_accel, float run_vel) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80095aa:	edc7 0a00 	vstr	s1, [r7]
	float rota_accel, rota_vel, in_offset, out_offset, angle_offset = 0.0;
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]
	if (run_vel == 280.0) {
 80095b4:	edd7 7a00 	vldr	s15, [r7]
 80095b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009640 <slalom_left90+0xa0>
 80095bc:	eef4 7a47 	vcmp.f32	s15, s14
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	d109      	bne.n	80095da <slalom_left90+0x3a>
		rota_accel = 2300;
 80095c6:	4b1f      	ldr	r3, [pc, #124]	; (8009644 <slalom_left90+0xa4>)
 80095c8:	61fb      	str	r3, [r7, #28]
		rota_vel = 1000;
 80095ca:	4b1f      	ldr	r3, [pc, #124]	; (8009648 <slalom_left90+0xa8>)
 80095cc:	61bb      	str	r3, [r7, #24]
		in_offset = 0;
 80095ce:	f04f 0300 	mov.w	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
		out_offset = 0;
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
	}
	set_straight(in_offset, run_accel, run_vel, run_vel, run_vel);
 80095da:	ed97 2a00 	vldr	s4, [r7]
 80095de:	edd7 1a00 	vldr	s3, [r7]
 80095e2:	ed97 1a00 	vldr	s2, [r7]
 80095e6:	edd7 0a01 	vldr	s1, [r7, #4]
 80095ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80095ee:	f000 fe3b 	bl	800a268 <set_straight>
	wait_straight();
 80095f2:	f000 ff2d 	bl	800a450 <wait_straight>
	set_rotation(90.0 + angle_offset, rota_accel, rota_vel, run_vel);
 80095f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80095fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800964c <slalom_left90+0xac>
 80095fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009602:	edd7 1a00 	vldr	s3, [r7]
 8009606:	ed97 1a06 	vldr	s2, [r7, #24]
 800960a:	edd7 0a07 	vldr	s1, [r7, #28]
 800960e:	eeb0 0a67 	vmov.f32	s0, s15
 8009612:	f000 fe63 	bl	800a2dc <set_rotation>
	wait_rotation();
 8009616:	f000 ff5b 	bl	800a4d0 <wait_rotation>
	set_straight(out_offset, run_accel, run_vel, run_vel, run_vel);
 800961a:	ed97 2a00 	vldr	s4, [r7]
 800961e:	edd7 1a00 	vldr	s3, [r7]
 8009622:	ed97 1a00 	vldr	s2, [r7]
 8009626:	edd7 0a01 	vldr	s1, [r7, #4]
 800962a:	ed97 0a04 	vldr	s0, [r7, #16]
 800962e:	f000 fe1b 	bl	800a268 <set_straight>
	wait_straight();
 8009632:	f000 ff0d 	bl	800a450 <wait_straight>
}
 8009636:	bf00      	nop
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	438c0000 	.word	0x438c0000
 8009644:	450fc000 	.word	0x450fc000
 8009648:	447a0000 	.word	0x447a0000
 800964c:	42b40000 	.word	0x42b40000

08009650 <slalom_right90>:

void slalom_right90(float run_accel, float run_vel) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	ed87 0a01 	vstr	s0, [r7, #4]
 800965a:	edc7 0a00 	vstr	s1, [r7]
	float rota_accel, rota_vel, in_offset, out_offset;
	float angle_offset = 0.0;
 800965e:	f04f 0300 	mov.w	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
	if (run_vel == 280.0) {
 8009664:	edd7 7a00 	vldr	s15, [r7]
 8009668:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80096f0 <slalom_right90+0xa0>
 800966c:	eef4 7a47 	vcmp.f32	s15, s14
 8009670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009674:	d109      	bne.n	800968a <slalom_right90+0x3a>
		rota_accel = 2700;
 8009676:	4b1f      	ldr	r3, [pc, #124]	; (80096f4 <slalom_right90+0xa4>)
 8009678:	61fb      	str	r3, [r7, #28]
		rota_vel = 1000;
 800967a:	4b1f      	ldr	r3, [pc, #124]	; (80096f8 <slalom_right90+0xa8>)
 800967c:	61bb      	str	r3, [r7, #24]
		in_offset = 0;
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
		out_offset = 0;
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
	}
	set_straight(in_offset, run_accel, run_vel, run_vel, run_vel);
 800968a:	ed97 2a00 	vldr	s4, [r7]
 800968e:	edd7 1a00 	vldr	s3, [r7]
 8009692:	ed97 1a00 	vldr	s2, [r7]
 8009696:	edd7 0a01 	vldr	s1, [r7, #4]
 800969a:	ed97 0a05 	vldr	s0, [r7, #20]
 800969e:	f000 fde3 	bl	800a268 <set_straight>
	wait_straight();
 80096a2:	f000 fed5 	bl	800a450 <wait_straight>
	set_rotation(-90.0 + angle_offset, rota_accel, rota_vel, run_vel);
 80096a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80096aa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80096fc <slalom_right90+0xac>
 80096ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096b2:	edd7 1a00 	vldr	s3, [r7]
 80096b6:	ed97 1a06 	vldr	s2, [r7, #24]
 80096ba:	edd7 0a07 	vldr	s1, [r7, #28]
 80096be:	eeb0 0a67 	vmov.f32	s0, s15
 80096c2:	f000 fe0b 	bl	800a2dc <set_rotation>
	wait_rotation();
 80096c6:	f000 ff03 	bl	800a4d0 <wait_rotation>
	set_straight(out_offset, run_accel, run_vel, run_vel, run_vel);
 80096ca:	ed97 2a00 	vldr	s4, [r7]
 80096ce:	edd7 1a00 	vldr	s3, [r7]
 80096d2:	ed97 1a00 	vldr	s2, [r7]
 80096d6:	edd7 0a01 	vldr	s1, [r7, #4]
 80096da:	ed97 0a04 	vldr	s0, [r7, #16]
 80096de:	f000 fdc3 	bl	800a268 <set_straight>
	wait_straight();
 80096e2:	f000 feb5 	bl	800a450 <wait_straight>

}
 80096e6:	bf00      	nop
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	438c0000 	.word	0x438c0000
 80096f4:	4528c000 	.word	0x4528c000
 80096f8:	447a0000 	.word	0x447a0000
 80096fc:	42b40000 	.word	0x42b40000

08009700 <stop90>:

void stop90(float run_accel, float run_vel) {
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	ed87 0a01 	vstr	s0, [r7, #4]
 800970a:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, run_accel, run_vel, run_vel, 0.0);
 800970e:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8009734 <stop90+0x34>
 8009712:	edd7 1a00 	vldr	s3, [r7]
 8009716:	ed97 1a00 	vldr	s2, [r7]
 800971a:	edd7 0a01 	vldr	s1, [r7, #4]
 800971e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009738 <stop90+0x38>
 8009722:	f000 fda1 	bl	800a268 <set_straight>
	wait_straight();
 8009726:	f000 fe93 	bl	800a450 <wait_straight>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	00000000 	.word	0x00000000
 8009738:	42340000 	.word	0x42340000

0800973c <chattering>:
#define CHATT 10000
#define SECTOR_BASE_ADRR 0x08160000ul
#define SECTOR14_BASE_ADRR 0x08140000ul
#define SECTOR13_BASE_ADRR 0x08120000ul

void chattering(void) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
	int i = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009746:	e002      	b.n	800974e <chattering+0x12>
		i++;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3301      	adds	r3, #1
 800974c:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f242 720f 	movw	r2, #9999	; 0x270f
 8009754:	4293      	cmp	r3, r2
 8009756:	ddf7      	ble.n	8009748 <chattering+0xc>
	}
	while (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8009758:	bf00      	nop
 800975a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800975e:	480a      	ldr	r0, [pc, #40]	; (8009788 <chattering+0x4c>)
 8009760:	f7f9 f988 	bl	8002a74 <HAL_GPIO_ReadPin>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0f7      	beq.n	800975a <chattering+0x1e>
	}
	i = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 800976e:	e002      	b.n	8009776 <chattering+0x3a>
		i++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3301      	adds	r3, #1
 8009774:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f242 720f 	movw	r2, #9999	; 0x270f
 800977c:	4293      	cmp	r3, r2
 800977e:	ddf7      	ble.n	8009770 <chattering+0x34>
	}
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40020400 	.word	0x40020400

0800978c <write_flash_log>:

void write_flash_log(uint32_t address, uint8_t *data, uint32_t size) {
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b093      	sub	sp, #76	; 0x4c
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
	uint32_t add = address;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_FLASH_Unlock(); //flash unlook
 800979c:	f7f8 fd48 	bl	8002230 <HAL_FLASH_Unlock>
	if (address == SECTOR14_BASE_ADRR) {
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a24      	ldr	r2, [pc, #144]	; (8009834 <write_flash_log+0xa8>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d110      	bne.n	80097ca <write_flash_log+0x3e>
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 80097a8:	2300      	movs	r3, #0
 80097aa:	633b      	str	r3, [r7, #48]	; 0x30
		EraseInitStruct.Sector = FLASH_SECTOR_14; //sector Name
 80097ac:	230e      	movs	r3, #14
 80097ae:	63bb      	str	r3, [r7, #56]	; 0x38
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 80097b0:	2302      	movs	r3, #2
 80097b2:	643b      	str	r3, [r7, #64]	; 0x40
		EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 80097b4:	2301      	movs	r3, #1
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t SectorError; //srroe sector nomber
		HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 80097b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80097bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f8 fea2 	bl	800250c <HAL_FLASHEx_Erase>
 80097c8:	e013      	b.n	80097f2 <write_flash_log+0x66>
	} else if (address == SECTOR13_BASE_ADRR) {
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4a1a      	ldr	r2, [pc, #104]	; (8009838 <write_flash_log+0xac>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d10f      	bne.n	80097f2 <write_flash_log+0x66>
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.Sector = FLASH_SECTOR_13; //sector Name
 80097d6:	230d      	movs	r3, #13
 80097d8:	623b      	str	r3, [r7, #32]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 80097da:	2302      	movs	r3, #2
 80097dc:	62bb      	str	r3, [r7, #40]	; 0x28
		EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 80097de:	2301      	movs	r3, #1
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t SectorError; //srroe sector nomber
		HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 80097e2:	f107 0214 	add.w	r2, r7, #20
 80097e6:	f107 0318 	add.w	r3, r7, #24
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f8 fe8d 	bl	800250c <HAL_FLASHEx_Erase>
	}
	for (add = address; add < (address + size); add++) {
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	647b      	str	r3, [r7, #68]	; 0x44
 80097f6:	e010      	b.n	800981a <write_flash_log+0x8e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f04f 0400 	mov.w	r4, #0
 8009802:	461a      	mov	r2, r3
 8009804:	4623      	mov	r3, r4
 8009806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009808:	2000      	movs	r0, #0
 800980a:	f7f8 fcbd 	bl	8002188 <HAL_FLASH_Program>
		data++;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3301      	adds	r3, #1
 8009812:	60bb      	str	r3, [r7, #8]
	for (add = address; add < (address + size); add++) {
 8009814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009816:	3301      	adds	r3, #1
 8009818:	647b      	str	r3, [r7, #68]	; 0x44
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009822:	429a      	cmp	r2, r3
 8009824:	d3e8      	bcc.n	80097f8 <write_flash_log+0x6c>
	}
	HAL_FLASH_Lock(); //flash look
 8009826:	f7f8 fd25 	bl	8002274 <HAL_FLASH_Lock>
}
 800982a:	bf00      	nop
 800982c:	374c      	adds	r7, #76	; 0x4c
 800982e:	46bd      	mov	sp, r7
 8009830:	bd90      	pop	{r4, r7, pc}
 8009832:	bf00      	nop
 8009834:	08140000 	.word	0x08140000
 8009838:	08120000 	.word	0x08120000

0800983c <save_log_to_flash>:

void save_log_to_flash(void) {
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
	write_flash_log(SECTOR14_BASE_ADRR, (uint8_t*) &mylog, sizeof(mylog));
 8009840:	4a05      	ldr	r2, [pc, #20]	; (8009858 <save_log_to_flash+0x1c>)
 8009842:	4906      	ldr	r1, [pc, #24]	; (800985c <save_log_to_flash+0x20>)
 8009844:	4806      	ldr	r0, [pc, #24]	; (8009860 <save_log_to_flash+0x24>)
 8009846:	f7ff ffa1 	bl	800978c <write_flash_log>
	write_flash_log(SECTOR13_BASE_ADRR, (uint8_t*) &mylog2, sizeof(mylog2));
 800984a:	4a03      	ldr	r2, [pc, #12]	; (8009858 <save_log_to_flash+0x1c>)
 800984c:	4905      	ldr	r1, [pc, #20]	; (8009864 <save_log_to_flash+0x28>)
 800984e:	4806      	ldr	r0, [pc, #24]	; (8009868 <save_log_to_flash+0x2c>)
 8009850:	f7ff ff9c 	bl	800978c <write_flash_log>
}
 8009854:	bf00      	nop
 8009856:	bd80      	pop	{r7, pc}
 8009858:	000186a0 	.word	0x000186a0
 800985c:	20000cb0 	.word	0x20000cb0
 8009860:	08140000 	.word	0x08140000
 8009864:	200194f4 	.word	0x200194f4
 8009868:	08120000 	.word	0x08120000

0800986c <read_all_log_from_flash>:

void read_all_log_from_flash(void) {
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
	read_flash(SECTOR14_BASE_ADRR, (uint8_t*) &mylog, sizeof(mylog));
 8009870:	4a05      	ldr	r2, [pc, #20]	; (8009888 <read_all_log_from_flash+0x1c>)
 8009872:	4906      	ldr	r1, [pc, #24]	; (800988c <read_all_log_from_flash+0x20>)
 8009874:	4806      	ldr	r0, [pc, #24]	; (8009890 <read_all_log_from_flash+0x24>)
 8009876:	f000 f852 	bl	800991e <read_flash>
	read_flash(SECTOR13_BASE_ADRR, (uint8_t*) &mylog2, sizeof(mylog2));
 800987a:	4a03      	ldr	r2, [pc, #12]	; (8009888 <read_all_log_from_flash+0x1c>)
 800987c:	4905      	ldr	r1, [pc, #20]	; (8009894 <read_all_log_from_flash+0x28>)
 800987e:	4806      	ldr	r0, [pc, #24]	; (8009898 <read_all_log_from_flash+0x2c>)
 8009880:	f000 f84d 	bl	800991e <read_flash>
}
 8009884:	bf00      	nop
 8009886:	bd80      	pop	{r7, pc}
 8009888:	000186a0 	.word	0x000186a0
 800988c:	20000cb0 	.word	0x20000cb0
 8009890:	08140000 	.word	0x08140000
 8009894:	200194f4 	.word	0x200194f4
 8009898:	08120000 	.word	0x08120000

0800989c <erase_flash>:

void erase_flash(void) {
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_15; //sector Name
 80098a6:	230f      	movs	r3, #15
 80098a8:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 80098aa:	2302      	movs	r3, #2
 80098ac:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 80098ae:	2301      	movs	r3, #1
 80098b0:	613b      	str	r3, [r7, #16]

	uint32_t SectorError; //srroe sector nomber

	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 80098b2:	463a      	mov	r2, r7
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7f8 fe27 	bl	800250c <HAL_FLASHEx_Erase>
}
 80098be:	bf00      	nop
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <write_flash>:

void write_flash(uint32_t address, uint8_t *data, uint32_t size) {
 80098c6:	b590      	push	{r4, r7, lr}
 80098c8:	b087      	sub	sp, #28
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
	uint32_t add = address;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock(); //flash unlook
 80098d6:	f7f8 fcab 	bl	8002230 <HAL_FLASH_Unlock>
	erase_flash();
 80098da:	f7ff ffdf 	bl	800989c <erase_flash>
	for (add = address; add < (address + size); add++) {
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	e010      	b.n	8009906 <write_flash+0x40>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f04f 0400 	mov.w	r4, #0
 80098ee:	461a      	mov	r2, r3
 80098f0:	4623      	mov	r3, r4
 80098f2:	6979      	ldr	r1, [r7, #20]
 80098f4:	2000      	movs	r0, #0
 80098f6:	f7f8 fc47 	bl	8002188 <HAL_FLASH_Program>
		data++;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	3301      	adds	r3, #1
 80098fe:	60bb      	str	r3, [r7, #8]
	for (add = address; add < (address + size); add++) {
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3301      	adds	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4413      	add	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	429a      	cmp	r2, r3
 8009910:	d3e8      	bcc.n	80098e4 <write_flash+0x1e>
	}
	HAL_FLASH_Lock(); //flash look
 8009912:	f7f8 fcaf 	bl	8002274 <HAL_FLASH_Lock>
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	bd90      	pop	{r4, r7, pc}

0800991e <read_flash>:

void read_flash(uint32_t address, uint8_t *data, uint32_t size) {
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*) address, size);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4619      	mov	r1, r3
 8009930:	68b8      	ldr	r0, [r7, #8]
 8009932:	f002 fe01 	bl	800c538 <memcpy>
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <save_all_walldata>:

void save_all_walldata(void) {
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
	write_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
 8009944:	22cc      	movs	r2, #204	; 0xcc
 8009946:	4903      	ldr	r1, [pc, #12]	; (8009954 <save_all_walldata+0x14>)
 8009948:	4803      	ldr	r0, [pc, #12]	; (8009958 <save_all_walldata+0x18>)
 800994a:	f7ff ffbc 	bl	80098c6 <write_flash>
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000990 	.word	0x20000990
 8009958:	08160000 	.word	0x08160000

0800995c <read_spi>:

void read_all_walldata(void) {
	read_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
}

uint8_t read_spi(uint8_t addr) { //addrのデータを読み取る
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af02      	add	r7, sp, #8
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
	uint8_t data_tx[2], data_rx[2];
	data_tx[0] = (0x80 | addr); //readのMSB(1)とアドレス
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800996c:	b2db      	uxtb	r3, r3
 800996e:	733b      	strb	r3, [r7, #12]
	data_tx[1] = 0x00; //dummy
 8009970:	2300      	movs	r3, #0
 8009972:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 8009974:	2200      	movs	r2, #0
 8009976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800997a:	480c      	ldr	r0, [pc, #48]	; (80099ac <read_spi+0x50>)
 800997c:	f7f9 f892 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 8009980:	f107 0208 	add.w	r2, r7, #8
 8009984:	f107 010c 	add.w	r1, r7, #12
 8009988:	2301      	movs	r3, #1
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2302      	movs	r3, #2
 800998e:	4808      	ldr	r0, [pc, #32]	; (80099b0 <read_spi+0x54>)
 8009990:	f7f9 fd1a 	bl	80033c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 8009994:	2201      	movs	r2, #1
 8009996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800999a:	4804      	ldr	r0, [pc, #16]	; (80099ac <read_spi+0x50>)
 800999c:	f7f9 f882 	bl	8002aa4 <HAL_GPIO_WritePin>

	return data_rx[1];
 80099a0:	7a7b      	ldrb	r3, [r7, #9]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40020000 	.word	0x40020000
 80099b0:	20000820 	.word	0x20000820

080099b4 <write_spi>:

void write_spi(uint8_t addr, uint8_t data) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	4603      	mov	r3, r0
 80099bc:	460a      	mov	r2, r1
 80099be:	71fb      	strb	r3, [r7, #7]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71bb      	strb	r3, [r7, #6]
	uint8_t data_rx[2], data_tx[2];
	data_tx[0] = 0x7f & addr;
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	723b      	strb	r3, [r7, #8]
	data_tx[1] = data;
 80099ce:	79bb      	ldrb	r3, [r7, #6]
 80099d0:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 80099d2:	2200      	movs	r2, #0
 80099d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80099d8:	480b      	ldr	r0, [pc, #44]	; (8009a08 <write_spi+0x54>)
 80099da:	f7f9 f863 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 80099de:	f107 020c 	add.w	r2, r7, #12
 80099e2:	f107 0108 	add.w	r1, r7, #8
 80099e6:	2301      	movs	r3, #1
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	2302      	movs	r3, #2
 80099ec:	4807      	ldr	r0, [pc, #28]	; (8009a0c <write_spi+0x58>)
 80099ee:	f7f9 fceb 	bl	80033c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 80099f2:	2201      	movs	r2, #1
 80099f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80099f8:	4803      	ldr	r0, [pc, #12]	; (8009a08 <write_spi+0x54>)
 80099fa:	f7f9 f853 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40020000 	.word	0x40020000
 8009a0c:	20000820 	.word	0x20000820

08009a10 <init_gyro>:

void init_gyro(void) {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
	read_spi(WHO_AM_I);
 8009a14:	2000      	movs	r0, #0
 8009a16:	f7ff ffa1 	bl	800995c <read_spi>
	HAL_Delay(10);
 8009a1a:	200a      	movs	r0, #10
 8009a1c:	f7f7 fb2e 	bl	800107c <HAL_Delay>
	if (read_spi(WHO_AM_I) != 0xe0) {
 8009a20:	2000      	movs	r0, #0
 8009a22:	f7ff ff9b 	bl	800995c <read_spi>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2be0      	cmp	r3, #224	; 0xe0
 8009a2a:	d002      	beq.n	8009a32 <init_gyro+0x22>
		printf("gyro init error\n");
 8009a2c:	481e      	ldr	r0, [pc, #120]	; (8009aa8 <init_gyro+0x98>)
 8009a2e:	f003 fa7b 	bl	800cf28 <puts>
	}
	HAL_Delay(10);
 8009a32:	200a      	movs	r0, #10
 8009a34:	f7f7 fb22 	bl	800107c <HAL_Delay>
	write_spi(0x05, 0x00); //USER_CTRL いろんな機能をoffに
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2005      	movs	r0, #5
 8009a3c:	f7ff ffba 	bl	80099b4 <write_spi>
	HAL_Delay(10);
 8009a40:	200a      	movs	r0, #10
 8009a42:	f7f7 fb1b 	bl	800107c <HAL_Delay>
	write_spi(0x06, 0x09); //PWRMGMT_1 温度センサoff クロックを自動設定 スリープ解除
 8009a46:	2109      	movs	r1, #9
 8009a48:	2006      	movs	r0, #6
 8009a4a:	f7ff ffb3 	bl	80099b4 <write_spi>
	HAL_Delay(10);
 8009a4e:	200a      	movs	r0, #10
 8009a50:	f7f7 fb14 	bl	800107c <HAL_Delay>
	write_spi(0x07, 0x3f); //PWRMGMT_2 ジャイロ・加速度センサoff
 8009a54:	213f      	movs	r1, #63	; 0x3f
 8009a56:	2007      	movs	r0, #7
 8009a58:	f7ff ffac 	bl	80099b4 <write_spi>

	HAL_Delay(10);
 8009a5c:	200a      	movs	r0, #10
 8009a5e:	f7f7 fb0d 	bl	800107c <HAL_Delay>
	write_spi(0x7f, 0x20); //REG_BANK_SEL bank2に移動
 8009a62:	2120      	movs	r1, #32
 8009a64:	207f      	movs	r0, #127	; 0x7f
 8009a66:	f7ff ffa5 	bl	80099b4 <write_spi>

	HAL_Delay(10);
 8009a6a:	200a      	movs	r0, #10
 8009a6c:	f7f7 fb06 	bl	800107c <HAL_Delay>
	write_spi(0x01, 0x06); //GYRO_CONFIG_1 +-2000dps non-filter
 8009a70:	2106      	movs	r1, #6
 8009a72:	2001      	movs	r0, #1
 8009a74:	f7ff ff9e 	bl	80099b4 <write_spi>
	HAL_Delay(10);
 8009a78:	200a      	movs	r0, #10
 8009a7a:	f7f7 faff 	bl	800107c <HAL_Delay>
	write_spi(0x14, 0x04); //ACCEL_CONFIG +-8g non-filter
 8009a7e:	2104      	movs	r1, #4
 8009a80:	2014      	movs	r0, #20
 8009a82:	f7ff ff97 	bl	80099b4 <write_spi>

	HAL_Delay(10);
 8009a86:	200a      	movs	r0, #10
 8009a88:	f7f7 faf8 	bl	800107c <HAL_Delay>
	write_spi(0x7f, 0x00); //REG_BANK_SEL bank0に移動
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	207f      	movs	r0, #127	; 0x7f
 8009a90:	f7ff ff90 	bl	80099b4 <write_spi>

	HAL_Delay(10);
 8009a94:	200a      	movs	r0, #10
 8009a96:	f7f7 faf1 	bl	800107c <HAL_Delay>
	write_spi(0x07, 0x00); //PWRMGMT_2 ジャイロ・加速度センサon
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	2007      	movs	r0, #7
 8009a9e:	f7ff ff89 	bl	80099b4 <write_spi>
}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	0800ed80 	.word	0x0800ed80
 8009aac:	00000000 	.word	0x00000000

08009ab0 <read_gyro>:

float read_gyro(void) {
 8009ab0:	b5b0      	push	{r4, r5, r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
	uint8_t data_l;
	int8_t data_h;
	int16_t value;
	data_h = read_spi(0x37);
 8009ab6:	2037      	movs	r0, #55	; 0x37
 8009ab8:	f7ff ff50 	bl	800995c <read_spi>
 8009abc:	4603      	mov	r3, r0
 8009abe:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x38);
 8009ac0:	2038      	movs	r0, #56	; 0x38
 8009ac2:	f7ff ff4b 	bl	800995c <read_spi>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 8009aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	b21a      	sxth	r2, r3
 8009ad2:	79bb      	ldrb	r3, [r7, #6]
 8009ad4:	b21b      	sxth	r3, r3
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	80bb      	strh	r3, [r7, #4]
//	if (rotation_parameter.back_rightturn_flag == 1) {
//		value = -1 * value;
//	}
	return (float) value * 0.0610370189 - angle_calibration; //*2000/(2^15-1) return deg/sec
 8009ada:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae6:	ee17 0a90 	vmov	r0, s15
 8009aea:	f7f6 fd55 	bl	8000598 <__aeabi_f2d>
 8009aee:	a313      	add	r3, pc, #76	; (adr r3, 8009b3c <read_gyro+0x8c>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fda8 	bl	8000648 <__aeabi_dmul>
 8009af8:	4603      	mov	r3, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	4625      	mov	r5, r4
 8009afe:	461c      	mov	r4, r3
 8009b00:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <read_gyro+0x88>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7f6 fd47 	bl	8000598 <__aeabi_f2d>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fbe1 	bl	80002d8 <__aeabi_dsub>
 8009b16:	4603      	mov	r3, r0
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f7f7 f86b 	bl	8000bf8 <__aeabi_d2f>
 8009b22:	4603      	mov	r3, r0
 8009b24:	ee07 3a90 	vmov	s15, r3
}
 8009b28:	eeb0 0a67 	vmov.f32	s0, s15
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bdb0      	pop	{r4, r5, r7, pc}
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	2000068c 	.word	0x2000068c
 8009b3c:	800aaabd 	.word	0x800aaabd
 8009b40:	3faf403e 	.word	0x3faf403e
 8009b44:	00000000 	.word	0x00000000

08009b48 <read_accel>:

float read_accel(void) {
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
	uint8_t data_l, data_h;
	int16_t value;
	data_h = read_spi(0x2d);
 8009b4e:	202d      	movs	r0, #45	; 0x2d
 8009b50:	f7ff ff04 	bl	800995c <read_spi>
 8009b54:	4603      	mov	r3, r0
 8009b56:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x2e);
 8009b58:	202e      	movs	r0, #46	; 0x2e
 8009b5a:	f7ff feff 	bl	800995c <read_spi>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	021b      	lsls	r3, r3, #8
 8009b66:	b21a      	sxth	r2, r3
 8009b68:	79bb      	ldrb	r3, [r7, #6]
 8009b6a:	b21b      	sxth	r3, r3
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	80bb      	strh	r3, [r7, #4]
	return (float) value * 0.00239427472762; //*9.8...*8/(2^15-1) return m/s^2
 8009b70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009b74:	ee07 3a90 	vmov	s15, r3
 8009b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b7c:	ee17 0a90 	vmov	r0, s15
 8009b80:	f7f6 fd0a 	bl	8000598 <__aeabi_f2d>
 8009b84:	a30a      	add	r3, pc, #40	; (adr r3, 8009bb0 <read_accel+0x68>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 fd5d 	bl	8000648 <__aeabi_dmul>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	460c      	mov	r4, r1
 8009b92:	4618      	mov	r0, r3
 8009b94:	4621      	mov	r1, r4
 8009b96:	f7f7 f82f 	bl	8000bf8 <__aeabi_d2f>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	ee07 3a90 	vmov	s15, r3
}
 8009ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd90      	pop	{r4, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	74e3780e 	.word	0x74e3780e
 8009bb4:	3f639d28 	.word	0x3f639d28

08009bb8 <check_parity>:

uint16_t check_parity(uint16_t val) {
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 8;
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	0a1b      	lsrs	r3, r3, #8
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	88fb      	ldrh	r3, [r7, #6]
 8009bca:	4053      	eors	r3, r2
 8009bcc:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 4;
 8009bce:	88fb      	ldrh	r3, [r7, #6]
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	4053      	eors	r3, r2
 8009bd8:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 2;
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	089b      	lsrs	r3, r3, #2
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	4053      	eors	r3, r2
 8009be4:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 1;
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	88fb      	ldrh	r3, [r7, #6]
 8009bee:	4053      	eors	r3, r2
 8009bf0:	80fb      	strh	r3, [r7, #6]
	return val & 0x0001;
 8009bf2:	88fb      	ldrh	r3, [r7, #6]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	b29b      	uxth	r3, r3
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <read_spi_en>:

uint16_t read_spi_en(uint8_t le_ri, uint16_t addr) { //addrのデータを読み取る
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	4603      	mov	r3, r0
 8009c10:	460a      	mov	r2, r1
 8009c12:	71fb      	strb	r3, [r7, #7]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80bb      	strh	r3, [r7, #4]
	uint16_t data_tx;
	uint16_t data_rx;

	data_tx = (0x4000 | addr); //14bitが1でread 0でwrite
 8009c18:	88bb      	ldrh	r3, [r7, #4]
 8009c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	81fb      	strh	r3, [r7, #14]
	data_tx = data_tx | (check_parity(data_tx) << 15); //偶パリティ
 8009c22:	89fb      	ldrh	r3, [r7, #14]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff ffc7 	bl	8009bb8 <check_parity>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	03db      	lsls	r3, r3, #15
 8009c2e:	b21a      	sxth	r2, r3
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	b21b      	sxth	r3, r3
 8009c34:	4313      	orrs	r3, r2
 8009c36:	b21b      	sxth	r3, r3
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	81fb      	strh	r3, [r7, #14]

	if (le_ri == LEFT) { //select CS
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <read_spi_en+0x46>
		HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 0);
 8009c42:	2200      	movs	r2, #0
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	4812      	ldr	r0, [pc, #72]	; (8009c90 <read_spi_en+0x88>)
 8009c48:	f7f8 ff2c 	bl	8002aa4 <HAL_GPIO_WritePin>
 8009c4c:	e007      	b.n	8009c5e <read_spi_en+0x56>
	} else if (le_ri == RIGHT) {
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d104      	bne.n	8009c5e <read_spi_en+0x56>
		HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 0);
 8009c54:	2200      	movs	r2, #0
 8009c56:	2140      	movs	r1, #64	; 0x40
 8009c58:	480d      	ldr	r0, [pc, #52]	; (8009c90 <read_spi_en+0x88>)
 8009c5a:	f7f8 ff23 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &data_tx, (uint8_t*) &data_rx, 1,
 8009c5e:	f107 020c 	add.w	r2, r7, #12
 8009c62:	f107 010e 	add.w	r1, r7, #14
 8009c66:	2364      	movs	r3, #100	; 0x64
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4809      	ldr	r0, [pc, #36]	; (8009c94 <read_spi_en+0x8c>)
 8009c6e:	f7f9 fbab 	bl	80033c8 <HAL_SPI_TransmitReceive>
			100);
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 8009c72:	2201      	movs	r2, #1
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	4806      	ldr	r0, [pc, #24]	; (8009c90 <read_spi_en+0x88>)
 8009c78:	f7f8 ff14 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	2140      	movs	r1, #64	; 0x40
 8009c80:	4803      	ldr	r0, [pc, #12]	; (8009c90 <read_spi_en+0x88>)
 8009c82:	f7f8 ff0f 	bl	8002aa4 <HAL_GPIO_WritePin>
	return data_rx;
 8009c86:	89bb      	ldrh	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	40020400 	.word	0x40020400
 8009c94:	20000878 	.word	0x20000878

08009c98 <Battery_Check>:
	} else {

	}
}

void Battery_Check(void) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4836      	ldr	r0, [pc, #216]	; (8009d78 <Battery_Check+0xe0>)
 8009ca0:	f7f9 fe98 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8009ca4:	2104      	movs	r1, #4
 8009ca6:	4834      	ldr	r0, [pc, #208]	; (8009d78 <Battery_Check+0xe0>)
 8009ca8:	f7f9 fe94 	bl	80039d4 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8009cac:	4b32      	ldr	r3, [pc, #200]	; (8009d78 <Battery_Check+0xe0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8009cb4:	4b30      	ldr	r3, [pc, #192]	; (8009d78 <Battery_Check+0xe0>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, SET);
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009cc2:	482e      	ldr	r0, [pc, #184]	; (8009d7c <Battery_Check+0xe4>)
 8009cc4:	f7f8 feee 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, SET);
 8009cc8:	2201      	movs	r2, #1
 8009cca:	2140      	movs	r1, #64	; 0x40
 8009ccc:	482b      	ldr	r0, [pc, #172]	; (8009d7c <Battery_Check+0xe4>)
 8009cce:	f7f8 fee9 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, SET);
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cd8:	4829      	ldr	r0, [pc, #164]	; (8009d80 <Battery_Check+0xe8>)
 8009cda:	f7f8 fee3 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, SET);
 8009cde:	2201      	movs	r2, #1
 8009ce0:	2120      	movs	r1, #32
 8009ce2:	4826      	ldr	r0, [pc, #152]	; (8009d7c <Battery_Check+0xe4>)
 8009ce4:	f7f8 fede 	bl	8002aa4 <HAL_GPIO_WritePin>

	SEN_check_flag = 1;
 8009ce8:	4b26      	ldr	r3, [pc, #152]	; (8009d84 <Battery_Check+0xec>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8009cee:	200a      	movs	r0, #10
 8009cf0:	f7f7 f9c4 	bl	800107c <HAL_Delay>
	SEN_check_flag = 0;
 8009cf4:	4b23      	ldr	r3, [pc, #140]	; (8009d84 <Battery_Check+0xec>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
//	}

//	Batt = (float) g_ADCBuffer[8] / 4095 * 3.3 * 2;
//	printf("%4.2f\n", Batt);

	if ((Batt < 3.72 && Batt > 3.35) || (Batt < 3.25)) { //7.7
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <Battery_Check+0xf0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7f6 fc4a 	bl	8000598 <__aeabi_f2d>
 8009d04:	a318      	add	r3, pc, #96	; (adr r3, 8009d68 <Battery_Check+0xd0>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00c      	beq.n	8009d2e <Battery_Check+0x96>
 8009d14:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <Battery_Check+0xf0>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f6 fc3d 	bl	8000598 <__aeabi_f2d>
 8009d1e:	a314      	add	r3, pc, #80	; (adr r3, 8009d70 <Battery_Check+0xd8>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 ff20 	bl	8000b68 <__aeabi_dcmpgt>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <Battery_Check+0xac>
 8009d2e:	4b16      	ldr	r3, [pc, #88]	; (8009d88 <Battery_Check+0xf0>)
 8009d30:	edd3 7a00 	vldr	s15, [r3]
 8009d34:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 8009d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d40:	d400      	bmi.n	8009d44 <Battery_Check+0xac>
			set_led(6);
			HAL_Delay(500);
			//	myprintf("%6.2f\n",Battery);
		}
	}
}
 8009d42:	e00e      	b.n	8009d62 <Battery_Check+0xca>
			set_led(3);
 8009d44:	2003      	movs	r0, #3
 8009d46:	f000 f821 	bl	8009d8c <set_led>
			HAL_Delay(500);
 8009d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d4e:	f7f7 f995 	bl	800107c <HAL_Delay>
			set_led(6);
 8009d52:	2006      	movs	r0, #6
 8009d54:	f000 f81a 	bl	8009d8c <set_led>
			HAL_Delay(500);
 8009d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d5c:	f7f7 f98e 	bl	800107c <HAL_Delay>
			set_led(3);
 8009d60:	e7f0      	b.n	8009d44 <Battery_Check+0xac>
}
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	f3af 8000 	nop.w
 8009d68:	5c28f5c3 	.word	0x5c28f5c3
 8009d6c:	400dc28f 	.word	0x400dc28f
 8009d70:	cccccccd 	.word	0xcccccccd
 8009d74:	400acccc 	.word	0x400acccc
 8009d78:	20000950 	.word	0x20000950
 8009d7c:	40020000 	.word	0x40020000
 8009d80:	40020800 	.word	0x40020800
 8009d84:	20000683 	.word	0x20000683
 8009d88:	20000a8c 	.word	0x20000a8c

08009d8c <set_led>:

void set_led(uint8_t num) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
	if ((0x01 & num) != 0) {
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d006      	beq.n	8009db0 <set_led+0x24>
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, SET);
 8009da2:	2201      	movs	r2, #1
 8009da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009da8:	4821      	ldr	r0, [pc, #132]	; (8009e30 <set_led+0xa4>)
 8009daa:	f7f8 fe7b 	bl	8002aa4 <HAL_GPIO_WritePin>
 8009dae:	e005      	b.n	8009dbc <set_led+0x30>
	} else {
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, RESET);
 8009db0:	2200      	movs	r2, #0
 8009db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009db6:	481e      	ldr	r0, [pc, #120]	; (8009e30 <set_led+0xa4>)
 8009db8:	f7f8 fe74 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x02 & num) != 0) {
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <set_led+0x4a>
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, SET);
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009dce:	4819      	ldr	r0, [pc, #100]	; (8009e34 <set_led+0xa8>)
 8009dd0:	f7f8 fe68 	bl	8002aa4 <HAL_GPIO_WritePin>
 8009dd4:	e005      	b.n	8009de2 <set_led+0x56>
	} else {
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, RESET);
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ddc:	4815      	ldr	r0, [pc, #84]	; (8009e34 <set_led+0xa8>)
 8009dde:	f7f8 fe61 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x04 & num) != 0) {
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <set_led+0x6e>
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, SET);
 8009dee:	2201      	movs	r2, #1
 8009df0:	2101      	movs	r1, #1
 8009df2:	4811      	ldr	r0, [pc, #68]	; (8009e38 <set_led+0xac>)
 8009df4:	f7f8 fe56 	bl	8002aa4 <HAL_GPIO_WritePin>
 8009df8:	e004      	b.n	8009e04 <set_led+0x78>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, RESET);
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	480e      	ldr	r0, [pc, #56]	; (8009e38 <set_led+0xac>)
 8009e00:	f7f8 fe50 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x08 & num) != 0) {
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <set_led+0x90>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, SET);
 8009e10:	2201      	movs	r2, #1
 8009e12:	2110      	movs	r1, #16
 8009e14:	4806      	ldr	r0, [pc, #24]	; (8009e30 <set_led+0xa4>)
 8009e16:	f7f8 fe45 	bl	8002aa4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
	}
}
 8009e1a:	e004      	b.n	8009e26 <set_led+0x9a>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2110      	movs	r1, #16
 8009e20:	4803      	ldr	r0, [pc, #12]	; (8009e30 <set_led+0xa4>)
 8009e22:	f7f8 fe3f 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	40020000 	.word	0x40020000
 8009e34:	40020800 	.word	0x40020800
 8009e38:	40020400 	.word	0x40020400

08009e3c <log_start>:

void log_start(void) {
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
	log_often_count = 0;
 8009e40:	4b08      	ldr	r3, [pc, #32]	; (8009e64 <log_start+0x28>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	801a      	strh	r2, [r3, #0]
	log_index = 0;
 8009e46:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <log_start+0x2c>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	801a      	strh	r2, [r3, #0]
	log_how_often = 1;
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <log_start+0x30>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	801a      	strh	r2, [r3, #0]
	log_flag = 1;
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <log_start+0x34>)
 8009e54:	2201      	movs	r2, #1
 8009e56:	701a      	strb	r2, [r3, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000688 	.word	0x20000688
 8009e68:	20000684 	.word	0x20000684
 8009e6c:	20000686 	.word	0x20000686
 8009e70:	2000068a 	.word	0x2000068a

08009e74 <log_sampling>:

void log_sampling(void) {
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
	log_often_count++;
 8009e78:	4b4c      	ldr	r3, [pc, #304]	; (8009fac <log_sampling+0x138>)
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <log_sampling+0x138>)
 8009e82:	801a      	strh	r2, [r3, #0]
	if (log_index == LOG_MAX - 1) {
 8009e84:	4b4a      	ldr	r3, [pc, #296]	; (8009fb0 <log_sampling+0x13c>)
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	f241 3287 	movw	r2, #4999	; 0x1387
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d106      	bne.n	8009e9e <log_sampling+0x2a>
		log_flag = 0;
 8009e90:	4b48      	ldr	r3, [pc, #288]	; (8009fb4 <log_sampling+0x140>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	701a      	strb	r2, [r3, #0]
		log_index = 0;
 8009e96:	4b46      	ldr	r3, [pc, #280]	; (8009fb0 <log_sampling+0x13c>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	801a      	strh	r2, [r3, #0]
		log_index++;
		log_often_count = 0;
		//	printf(",%4.8f,%4.8f,%4.8f,%4.8f\n",real_L.vel,real_R.vel,real_L.dis,real_R.dis);

	}
}
 8009e9c:	e080      	b.n	8009fa0 <log_sampling+0x12c>
	} else if (log_often_count == log_how_often) {
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <log_sampling+0x138>)
 8009ea0:	881a      	ldrh	r2, [r3, #0]
 8009ea2:	4b45      	ldr	r3, [pc, #276]	; (8009fb8 <log_sampling+0x144>)
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d17a      	bne.n	8009fa0 <log_sampling+0x12c>
		mylog.log_1[log_index] = real_L.vel;
 8009eaa:	4b41      	ldr	r3, [pc, #260]	; (8009fb0 <log_sampling+0x13c>)
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	4b42      	ldr	r3, [pc, #264]	; (8009fbc <log_sampling+0x148>)
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	4942      	ldr	r1, [pc, #264]	; (8009fc0 <log_sampling+0x14c>)
 8009eb6:	0083      	lsls	r3, r0, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	601a      	str	r2, [r3, #0]
		mylog.log_2[log_index] = real_R.vel;
 8009ebc:	4b3c      	ldr	r3, [pc, #240]	; (8009fb0 <log_sampling+0x13c>)
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	4b40      	ldr	r3, [pc, #256]	; (8009fc4 <log_sampling+0x150>)
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	493e      	ldr	r1, [pc, #248]	; (8009fc0 <log_sampling+0x14c>)
 8009ec8:	f500 539c 	add.w	r3, r0, #4992	; 0x1380
 8009ecc:	3308      	adds	r3, #8
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	601a      	str	r2, [r3, #0]
		mylog.log_3[log_index] = ideal_translation.vel;
 8009ed4:	4b36      	ldr	r3, [pc, #216]	; (8009fb0 <log_sampling+0x13c>)
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4b3b      	ldr	r3, [pc, #236]	; (8009fc8 <log_sampling+0x154>)
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	4938      	ldr	r1, [pc, #224]	; (8009fc0 <log_sampling+0x14c>)
 8009ee0:	f500 531c 	add.w	r3, r0, #9984	; 0x2700
 8009ee4:	3310      	adds	r3, #16
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	601a      	str	r2, [r3, #0]
		mylog.log_4[log_index] = real_rotation.vel;
 8009eec:	4b30      	ldr	r3, [pc, #192]	; (8009fb0 <log_sampling+0x13c>)
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	4b36      	ldr	r3, [pc, #216]	; (8009fcc <log_sampling+0x158>)
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	4932      	ldr	r1, [pc, #200]	; (8009fc0 <log_sampling+0x14c>)
 8009ef8:	f500 536a 	add.w	r3, r0, #14976	; 0x3a80
 8009efc:	3318      	adds	r3, #24
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	601a      	str	r2, [r3, #0]
		mylog.log_5[log_index] = ideal_rotation.vel;
 8009f04:	4b2a      	ldr	r3, [pc, #168]	; (8009fb0 <log_sampling+0x13c>)
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <log_sampling+0x15c>)
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	492c      	ldr	r1, [pc, #176]	; (8009fc0 <log_sampling+0x14c>)
 8009f10:	f500 439c 	add.w	r3, r0, #19968	; 0x4e00
 8009f14:	3320      	adds	r3, #32
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	601a      	str	r2, [r3, #0]
		mylog2.log_1[log_index] = real_rotation.dis;
 8009f1c:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <log_sampling+0x13c>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	4b2a      	ldr	r3, [pc, #168]	; (8009fcc <log_sampling+0x158>)
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	492b      	ldr	r1, [pc, #172]	; (8009fd4 <log_sampling+0x160>)
 8009f28:	0083      	lsls	r3, r0, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	601a      	str	r2, [r3, #0]
		mylog2.log_2[log_index] = ideal_rotation.dis;
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <log_sampling+0x13c>)
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	4b26      	ldr	r3, [pc, #152]	; (8009fd0 <log_sampling+0x15c>)
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	4926      	ldr	r1, [pc, #152]	; (8009fd4 <log_sampling+0x160>)
 8009f3a:	f500 539c 	add.w	r3, r0, #4992	; 0x1380
 8009f3e:	3308      	adds	r3, #8
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	601a      	str	r2, [r3, #0]
		mylog2.log_3[log_index] = rotation_deviation.cumulative;
 8009f46:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <log_sampling+0x13c>)
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <log_sampling+0x164>)
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	4920      	ldr	r1, [pc, #128]	; (8009fd4 <log_sampling+0x160>)
 8009f52:	f500 531c 	add.w	r3, r0, #9984	; 0x2700
 8009f56:	3310      	adds	r3, #16
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	601a      	str	r2, [r3, #0]
		mylog2.log_4[log_index] = run_left_deviation.cumulative;
 8009f5e:	4b14      	ldr	r3, [pc, #80]	; (8009fb0 <log_sampling+0x13c>)
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	4618      	mov	r0, r3
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <log_sampling+0x168>)
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	491a      	ldr	r1, [pc, #104]	; (8009fd4 <log_sampling+0x160>)
 8009f6a:	f500 536a 	add.w	r3, r0, #14976	; 0x3a80
 8009f6e:	3318      	adds	r3, #24
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	601a      	str	r2, [r3, #0]
		mylog2.log_5[log_index] = run_right_deviation.cumulative;
 8009f76:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <log_sampling+0x13c>)
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <log_sampling+0x16c>)
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	4914      	ldr	r1, [pc, #80]	; (8009fd4 <log_sampling+0x160>)
 8009f82:	f500 439c 	add.w	r3, r0, #19968	; 0x4e00
 8009f86:	3320      	adds	r3, #32
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	601a      	str	r2, [r3, #0]
		log_index++;
 8009f8e:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <log_sampling+0x13c>)
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	3301      	adds	r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <log_sampling+0x13c>)
 8009f98:	801a      	strh	r2, [r3, #0]
		log_often_count = 0;
 8009f9a:	4b04      	ldr	r3, [pc, #16]	; (8009fac <log_sampling+0x138>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	801a      	strh	r2, [r3, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20000688 	.word	0x20000688
 8009fb0:	20000684 	.word	0x20000684
 8009fb4:	2000068a 	.word	0x2000068a
 8009fb8:	20000686 	.word	0x20000686
 8009fbc:	2001936c 	.word	0x2001936c
 8009fc0:	20000cb0 	.word	0x20000cb0
 8009fc4:	20000ca4 	.word	0x20000ca4
 8009fc8:	2001941c 	.word	0x2001941c
 8009fcc:	200194e8 	.word	0x200194e8
 8009fd0:	20000c98 	.word	0x20000c98
 8009fd4:	200194f4 	.word	0x200194f4
 8009fd8:	2001947c 	.word	0x2001947c
 8009fdc:	20019444 	.word	0x20019444
 8009fe0:	20031c0c 	.word	0x20031c0c

08009fe4 <log_output>:

void log_output(void) {
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af02      	add	r7, sp, #8
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0,
 8009fea:	2302      	movs	r3, #2
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f7fa fb95 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
	for (uint16_t i = 0; i < LOG_MAX; i++) {
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	80fb      	strh	r3, [r7, #6]
 8009ffe:	e0b6      	b.n	800a16e <log_output+0x18a>
		printf(",");
 800a000:	202c      	movs	r0, #44	; 0x2c
 800a002:	f002 ff21 	bl	800ce48 <putchar>
		printf("%8.2f,", mylog.log_1[i]);
 800a006:	88fb      	ldrh	r3, [r7, #6]
 800a008:	4a62      	ldr	r2, [pc, #392]	; (800a194 <log_output+0x1b0>)
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4618      	mov	r0, r3
 800a012:	f7f6 fac1 	bl	8000598 <__aeabi_f2d>
 800a016:	4603      	mov	r3, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	461a      	mov	r2, r3
 800a01c:	4623      	mov	r3, r4
 800a01e:	485e      	ldr	r0, [pc, #376]	; (800a198 <log_output+0x1b4>)
 800a020:	f002 fefa 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog.log_2[i]);
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	4a5b      	ldr	r2, [pc, #364]	; (800a194 <log_output+0x1b0>)
 800a028:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a02c:	3308      	adds	r3, #8
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f7f6 faaf 	bl	8000598 <__aeabi_f2d>
 800a03a:	4603      	mov	r3, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	461a      	mov	r2, r3
 800a040:	4623      	mov	r3, r4
 800a042:	4855      	ldr	r0, [pc, #340]	; (800a198 <log_output+0x1b4>)
 800a044:	f002 fee8 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog.log_3[i]);
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	4a52      	ldr	r2, [pc, #328]	; (800a194 <log_output+0x1b0>)
 800a04c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a050:	3310      	adds	r3, #16
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f6 fa9d 	bl	8000598 <__aeabi_f2d>
 800a05e:	4603      	mov	r3, r0
 800a060:	460c      	mov	r4, r1
 800a062:	461a      	mov	r2, r3
 800a064:	4623      	mov	r3, r4
 800a066:	484c      	ldr	r0, [pc, #304]	; (800a198 <log_output+0x1b4>)
 800a068:	f002 fed6 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog.log_4[i]);
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	4a49      	ldr	r2, [pc, #292]	; (800a194 <log_output+0x1b0>)
 800a070:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800a074:	3318      	adds	r3, #24
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7f6 fa8b 	bl	8000598 <__aeabi_f2d>
 800a082:	4603      	mov	r3, r0
 800a084:	460c      	mov	r4, r1
 800a086:	461a      	mov	r2, r3
 800a088:	4623      	mov	r3, r4
 800a08a:	4843      	ldr	r0, [pc, #268]	; (800a198 <log_output+0x1b4>)
 800a08c:	f002 fec4 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog.log_5[i]);
 800a090:	88fb      	ldrh	r3, [r7, #6]
 800a092:	4a40      	ldr	r2, [pc, #256]	; (800a194 <log_output+0x1b0>)
 800a094:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a098:	3320      	adds	r3, #32
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f6 fa79 	bl	8000598 <__aeabi_f2d>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	483a      	ldr	r0, [pc, #232]	; (800a198 <log_output+0x1b4>)
 800a0b0:	f002 feb2 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog2.log_1[i]);
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	4a39      	ldr	r2, [pc, #228]	; (800a19c <log_output+0x1b8>)
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f6 fa6a 	bl	8000598 <__aeabi_f2d>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4623      	mov	r3, r4
 800a0cc:	4832      	ldr	r0, [pc, #200]	; (800a198 <log_output+0x1b4>)
 800a0ce:	f002 fea3 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog2.log_2[i]);
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	4a31      	ldr	r2, [pc, #196]	; (800a19c <log_output+0x1b8>)
 800a0d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a0da:	3308      	adds	r3, #8
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 fa58 	bl	8000598 <__aeabi_f2d>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4623      	mov	r3, r4
 800a0f0:	4829      	ldr	r0, [pc, #164]	; (800a198 <log_output+0x1b4>)
 800a0f2:	f002 fe91 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog2.log_3[i]);
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	4a28      	ldr	r2, [pc, #160]	; (800a19c <log_output+0x1b8>)
 800a0fa:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a0fe:	3310      	adds	r3, #16
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f7f6 fa46 	bl	8000598 <__aeabi_f2d>
 800a10c:	4603      	mov	r3, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	461a      	mov	r2, r3
 800a112:	4623      	mov	r3, r4
 800a114:	4820      	ldr	r0, [pc, #128]	; (800a198 <log_output+0x1b4>)
 800a116:	f002 fe7f 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog2.log_4[i]);
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <log_output+0x1b8>)
 800a11e:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800a122:	3318      	adds	r3, #24
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7f6 fa34 	bl	8000598 <__aeabi_f2d>
 800a130:	4603      	mov	r3, r0
 800a132:	460c      	mov	r4, r1
 800a134:	461a      	mov	r2, r3
 800a136:	4623      	mov	r3, r4
 800a138:	4817      	ldr	r0, [pc, #92]	; (800a198 <log_output+0x1b4>)
 800a13a:	f002 fe6d 	bl	800ce18 <iprintf>
		printf("%8.2f,", mylog2.log_5[i]);
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	4a16      	ldr	r2, [pc, #88]	; (800a19c <log_output+0x1b8>)
 800a142:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a146:	3320      	adds	r3, #32
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4618      	mov	r0, r3
 800a150:	f7f6 fa22 	bl	8000598 <__aeabi_f2d>
 800a154:	4603      	mov	r3, r0
 800a156:	460c      	mov	r4, r1
 800a158:	461a      	mov	r2, r3
 800a15a:	4623      	mov	r3, r4
 800a15c:	480e      	ldr	r0, [pc, #56]	; (800a198 <log_output+0x1b4>)
 800a15e:	f002 fe5b 	bl	800ce18 <iprintf>
		printf("\n");
 800a162:	200a      	movs	r0, #10
 800a164:	f002 fe70 	bl	800ce48 <putchar>
	for (uint16_t i = 0; i < LOG_MAX; i++) {
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	3301      	adds	r3, #1
 800a16c:	80fb      	strh	r3, [r7, #6]
 800a16e:	88fb      	ldrh	r3, [r7, #6]
 800a170:	f241 3287 	movw	r2, #4999	; 0x1387
 800a174:	4293      	cmp	r3, r2
 800a176:	f67f af43 	bls.w	800a000 <log_output+0x1c>
	}
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0,
 800a17a:	2300      	movs	r3, #0
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	2000      	movs	r0, #0
 800a186:	f7fa facd 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	SEGGER_RTT_MODE_NO_BLOCK_SKIP);
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd90      	pop	{r4, r7, pc}
 800a192:	bf00      	nop
 800a194:	20000cb0 	.word	0x20000cb0
 800a198:	0800ed90 	.word	0x0800ed90
 800a19c:	200194f4 	.word	0x200194f4

0800a1a0 <start_led>:

void start_led(void) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
	SEN_check_flag = 1;
 800a1a4:	4b24      	ldr	r3, [pc, #144]	; (800a238 <start_led+0x98>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	701a      	strb	r2, [r3, #0]
	while (SEN_R.now < 1000 || SEN_RF.now < 1000 ){
 800a1aa:	bf00      	nop
 800a1ac:	4b23      	ldr	r3, [pc, #140]	; (800a23c <start_led+0x9c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b4:	dbfa      	blt.n	800a1ac <start_led+0xc>
 800a1b6:	4b22      	ldr	r3, [pc, #136]	; (800a240 <start_led+0xa0>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1be:	dbf5      	blt.n	800a1ac <start_led+0xc>
//			||SEN_L.now < 1000&& SEN_LF.now < 1000) {

	}
	set_buzzer(0, C_5, 800);
 800a1c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a1c4:	f240 210b 	movw	r1, #523	; 0x20b
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f7fd fbef 	bl	80079ac <set_buzzer>
//	log_start();

	angle_calibration_integral = 0.0;
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <start_led+0xa4>)
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]
	angle_calibration = 0.0;
 800a1d6:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <start_led+0xa8>)
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
	angle_calibration_counter = 0;
 800a1de:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <start_led+0xac>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	801a      	strh	r2, [r3, #0]
	angle_calibration_flag = 1;
 800a1e4:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <start_led+0xb0>)
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
	while (angle_calibration_flag == 1) {
 800a1ea:	bf00      	nop
 800a1ec:	4b18      	ldr	r3, [pc, #96]	; (800a250 <start_led+0xb0>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d0fb      	beq.n	800a1ec <start_led+0x4c>

	}
	angle_calibration = angle_calibration_integral / 2000.0;
 800a1f4:	4b13      	ldr	r3, [pc, #76]	; (800a244 <start_led+0xa4>)
 800a1f6:	ed93 7a00 	vldr	s14, [r3]
 800a1fa:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a254 <start_led+0xb4>
 800a1fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a202:	4b11      	ldr	r3, [pc, #68]	; (800a248 <start_led+0xa8>)
 800a204:	edc3 7a00 	vstr	s15, [r3]
	real_rotation.dis = 0.0;
 800a208:	4b13      	ldr	r3, [pc, #76]	; (800a258 <start_led+0xb8>)
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
	ideal_translation.vel = 0.0;
 800a210:	4b12      	ldr	r3, [pc, #72]	; (800a25c <start_led+0xbc>)
 800a212:	f04f 0200 	mov.w	r2, #0
 800a216:	605a      	str	r2, [r3, #4]

	rotation_deviation.cumulative = 0;
 800a218:	4b11      	ldr	r3, [pc, #68]	; (800a260 <start_led+0xc0>)
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	605a      	str	r2, [r3, #4]
	set_buzzer(0, E_5, 800);
 800a220:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a224:	f240 2193 	movw	r1, #659	; 0x293
 800a228:	2000      	movs	r0, #0
 800a22a:	f7fd fbbf 	bl	80079ac <set_buzzer>
	moter_flag = 1;
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <start_led+0xc4>)
 800a230:	2201      	movs	r2, #1
 800a232:	701a      	strb	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000683 	.word	0x20000683
 800a23c:	20019428 	.word	0x20019428
 800a240:	20019460 	.word	0x20019460
 800a244:	20000694 	.word	0x20000694
 800a248:	2000068c 	.word	0x2000068c
 800a24c:	20031bec 	.word	0x20031bec
 800a250:	20000690 	.word	0x20000690
 800a254:	44fa0000 	.word	0x44fa0000
 800a258:	200194e8 	.word	0x200194e8
 800a25c:	2001941c 	.word	0x2001941c
 800a260:	2001947c 	.word	0x2001947c
 800a264:	20000682 	.word	0x20000682

0800a268 <set_straight>:
#include "run.h"
#include "variable.h"
#include "tim.h"

void set_straight(float i_distance, float accel, float max_vel, float strat_vel,
		float end_vel) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	ed87 0a05 	vstr	s0, [r7, #20]
 800a272:	edc7 0a04 	vstr	s1, [r7, #16]
 800a276:	ed87 1a03 	vstr	s2, [r7, #12]
 800a27a:	edc7 1a02 	vstr	s3, [r7, #8]
 800a27e:	ed87 2a01 	vstr	s4, [r7, #4]

	trapezoid_preparation(&translation_parameter, i_distance, accel, max_vel,
 800a282:	ed97 2a01 	vldr	s4, [r7, #4]
 800a286:	edd7 1a02 	vldr	s3, [r7, #8]
 800a28a:	ed97 1a03 	vldr	s2, [r7, #12]
 800a28e:	edd7 0a04 	vldr	s1, [r7, #16]
 800a292:	ed97 0a05 	vldr	s0, [r7, #20]
 800a296:	480e      	ldr	r0, [pc, #56]	; (800a2d0 <set_straight+0x68>)
 800a298:	f000 f94a 	bl	800a530 <trapezoid_preparation>
			strat_vel, end_vel);
	wall_control_flag = 1;
 800a29c:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <set_straight+0x6c>)
 800a29e:	2201      	movs	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]
	if (i_distance < 0) {
 800a2a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800a2a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ae:	d502      	bpl.n	800a2b6 <set_straight+0x4e>
		wall_control_flag = 0;
 800a2b0:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <set_straight+0x6c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	701a      	strb	r2, [r3, #0]
	}
	translation_parameter.run_flag = 1;
 800a2b6:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <set_straight+0x68>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ideal_translation.vel = translation_parameter.strat_vel;
 800a2be:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <set_straight+0x68>)
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	4a05      	ldr	r2, [pc, #20]	; (800a2d8 <set_straight+0x70>)
 800a2c4:	6053      	str	r3, [r2, #4]
}
 800a2c6:	bf00      	nop
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20019378 	.word	0x20019378
 800a2d4:	2000069d 	.word	0x2000069d
 800a2d8:	2001941c 	.word	0x2001941c

0800a2dc <set_rotation>:

void set_rotation(float i_angle, float accel, float max_vel, float center_vel) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	ed87 0a03 	vstr	s0, [r7, #12]
 800a2e6:	edc7 0a02 	vstr	s1, [r7, #8]
 800a2ea:	ed87 1a01 	vstr	s2, [r7, #4]
 800a2ee:	edc7 1a00 	vstr	s3, [r7]
	rotation_parameter.back_rightturn_flag = 0;
 800a2f2:	4b48      	ldr	r3, [pc, #288]	; (800a414 <set_rotation+0x138>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	761a      	strb	r2, [r3, #24]
	trapezoid_preparation(&rotation_parameter, i_angle, accel, max_vel, 0.0,
 800a2f8:	ed9f 2a47 	vldr	s4, [pc, #284]	; 800a418 <set_rotation+0x13c>
 800a2fc:	eddf 1a46 	vldr	s3, [pc, #280]	; 800a418 <set_rotation+0x13c>
 800a300:	ed97 1a01 	vldr	s2, [r7, #4]
 800a304:	edd7 0a02 	vldr	s1, [r7, #8]
 800a308:	ed97 0a03 	vldr	s0, [r7, #12]
 800a30c:	4841      	ldr	r0, [pc, #260]	; (800a414 <set_rotation+0x138>)
 800a30e:	f000 f90f 	bl	800a530 <trapezoid_preparation>
			0.0);

	wall_control_flag = 0;
 800a312:	4b42      	ldr	r3, [pc, #264]	; (800a41c <set_rotation+0x140>)
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
	ideal_rotation.vel = 0.0;
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <set_rotation+0x144>)
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	605a      	str	r2, [r3, #4]
	ideal_translation.accel = 0.0;
 800a320:	4b40      	ldr	r3, [pc, #256]	; (800a424 <set_rotation+0x148>)
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = center_vel;
 800a328:	4a3e      	ldr	r2, [pc, #248]	; (800a424 <set_rotation+0x148>)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6053      	str	r3, [r2, #4]
	rotation_deviation.now = 0.0;
 800a32e:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <set_rotation+0x14c>)
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
	if ((i_angle > 80.0) && (i_angle < 100.0)) {
 800a336:	edd7 7a03 	vldr	s15, [r7, #12]
 800a33a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800a42c <set_rotation+0x150>
 800a33e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	dd0f      	ble.n	800a368 <set_rotation+0x8c>
 800a348:	edd7 7a03 	vldr	s15, [r7, #12]
 800a34c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a430 <set_rotation+0x154>
 800a350:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a358:	d506      	bpl.n	800a368 <set_rotation+0x8c>
		direction++;
 800a35a:	4b36      	ldr	r3, [pc, #216]	; (800a434 <set_rotation+0x158>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	4b34      	ldr	r3, [pc, #208]	; (800a434 <set_rotation+0x158>)
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e042      	b.n	800a3ee <set_rotation+0x112>
	} else if ((i_angle < -80.0) && (i_angle > -100.0)) {
 800a368:	edd7 7a03 	vldr	s15, [r7, #12]
 800a36c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a438 <set_rotation+0x15c>
 800a370:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a378:	d50f      	bpl.n	800a39a <set_rotation+0xbe>
 800a37a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a37e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a43c <set_rotation+0x160>
 800a382:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38a:	dd06      	ble.n	800a39a <set_rotation+0xbe>
		direction += 3;
 800a38c:	4b29      	ldr	r3, [pc, #164]	; (800a434 <set_rotation+0x158>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	3303      	adds	r3, #3
 800a392:	b2da      	uxtb	r2, r3
 800a394:	4b27      	ldr	r3, [pc, #156]	; (800a434 <set_rotation+0x158>)
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	e029      	b.n	800a3ee <set_rotation+0x112>
	} else if (((i_angle > 170.0) && (i_angle < 190.0))
 800a39a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a39e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a440 <set_rotation+0x164>
 800a3a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3aa:	dd08      	ble.n	800a3be <set_rotation+0xe2>
 800a3ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3b0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a444 <set_rotation+0x168>
 800a3b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3bc:	d411      	bmi.n	800a3e2 <set_rotation+0x106>
			|| ((i_angle < -170.0) && (i_angle > -190.0))) {
 800a3be:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3c2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a448 <set_rotation+0x16c>
 800a3c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ce:	d50e      	bpl.n	800a3ee <set_rotation+0x112>
 800a3d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a44c <set_rotation+0x170>
 800a3d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e0:	dd05      	ble.n	800a3ee <set_rotation+0x112>
		direction += 2;
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <set_rotation+0x158>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	4b12      	ldr	r3, [pc, #72]	; (800a434 <set_rotation+0x158>)
 800a3ec:	701a      	strb	r2, [r3, #0]
	}
	if (direction > 3) {
 800a3ee:	4b11      	ldr	r3, [pc, #68]	; (800a434 <set_rotation+0x158>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d905      	bls.n	800a402 <set_rotation+0x126>
		direction -= 4;
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <set_rotation+0x158>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	3b04      	subs	r3, #4
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <set_rotation+0x158>)
 800a400:	701a      	strb	r2, [r3, #0]
	}
	rotation_parameter.run_flag = 1;
 800a402:	4b04      	ldr	r3, [pc, #16]	; (800a414 <set_rotation+0x138>)
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
//	log_start();
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20019488 	.word	0x20019488
 800a418:	00000000 	.word	0x00000000
 800a41c:	2000069d 	.word	0x2000069d
 800a420:	20000c98 	.word	0x20000c98
 800a424:	2001941c 	.word	0x2001941c
 800a428:	2001947c 	.word	0x2001947c
 800a42c:	42a00000 	.word	0x42a00000
 800a430:	42c80000 	.word	0x42c80000
 800a434:	20000668 	.word	0x20000668
 800a438:	c2a00000 	.word	0xc2a00000
 800a43c:	c2c80000 	.word	0xc2c80000
 800a440:	432a0000 	.word	0x432a0000
 800a444:	433e0000 	.word	0x433e0000
 800a448:	c32a0000 	.word	0xc32a0000
 800a44c:	c33e0000 	.word	0xc33e0000

0800a450 <wait_straight>:

void wait_straight(void) {
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
//LEFTEING = 1;
//	printf("wait_st%6.2f\n", ideal_translation.vel);
	while (translation_parameter.run_flag == 1 && failsafe_flag == 0) {
 800a454:	bf00      	nop
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <wait_straight+0x68>)
 800a458:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d103      	bne.n	800a468 <wait_straight+0x18>
 800a460:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <wait_straight+0x6c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d0f6      	beq.n	800a456 <wait_straight+0x6>

	}
//LEFTFRONT = 1;
//translation_parameter.run_flag=1;
	ideal_translation.accel = 0.0;
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <wait_straight+0x70>)
 800a46a:	f04f 0200 	mov.w	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]
	ideal_translation.dis = 0.0;
 800a470:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <wait_straight+0x70>)
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	609a      	str	r2, [r3, #8]
	ideal_translation.vel = translation_parameter.end_vel;
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <wait_straight+0x68>)
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	4a10      	ldr	r2, [pc, #64]	; (800a4c0 <wait_straight+0x70>)
 800a47e:	6053      	str	r3, [r2, #4]
	translation_parameter.back_rightturn_flag = 0;
 800a480:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <wait_straight+0x68>)
 800a482:	2200      	movs	r2, #0
 800a484:	761a      	strb	r2, [r3, #24]
	run_left_deviation.now = 0.0;
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <wait_straight+0x74>)
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
	run_left_deviation.difference = 0.0;
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <wait_straight+0x74>)
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	609a      	str	r2, [r3, #8]
	run_right_deviation.now = 0.0;
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <wait_straight+0x78>)
 800a498:	f04f 0200 	mov.w	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
	run_right_deviation.difference = 0.0;
 800a49e:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <wait_straight+0x78>)
 800a4a0:	f04f 0200 	mov.w	r2, #0
 800a4a4:	609a      	str	r2, [r3, #8]
	rotation_parameter.back_rightturn_flag = 0;
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <wait_straight+0x7c>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	761a      	strb	r2, [r3, #24]
}
 800a4ac:	bf00      	nop
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20019378 	.word	0x20019378
 800a4bc:	20000674 	.word	0x20000674
 800a4c0:	2001941c 	.word	0x2001941c
 800a4c4:	20019444 	.word	0x20019444
 800a4c8:	20031c0c 	.word	0x20031c0c
 800a4cc:	20019488 	.word	0x20019488

0800a4d0 <wait_rotation>:

void wait_rotation(void) {
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
//	LEFTEING = 1;
	while (rotation_parameter.run_flag == 1 && failsafe_flag == 0) {
 800a4d4:	bf00      	nop
 800a4d6:	4b11      	ldr	r3, [pc, #68]	; (800a51c <wait_rotation+0x4c>)
 800a4d8:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d103      	bne.n	800a4e8 <wait_rotation+0x18>
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <wait_rotation+0x50>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0f6      	beq.n	800a4d6 <wait_rotation+0x6>

	}
//	LEFTFRONT = 1;
//	rotation_gain.Ki = 0.0;
	ideal_translation.dis = 0.0;
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	; (800a524 <wait_rotation+0x54>)
 800a4ea:	f04f 0200 	mov.w	r2, #0
 800a4ee:	609a      	str	r2, [r3, #8]
	ideal_rotation.accel = 0.0;
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <wait_rotation+0x58>)
 800a4f2:	f04f 0200 	mov.w	r2, #0
 800a4f6:	601a      	str	r2, [r3, #0]
	ideal_rotation.dis = 0.0;
 800a4f8:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <wait_rotation+0x58>)
 800a4fa:	f04f 0200 	mov.w	r2, #0
 800a4fe:	609a      	str	r2, [r3, #8]
	ideal_rotation.vel = 0.0;
 800a500:	4b09      	ldr	r3, [pc, #36]	; (800a528 <wait_rotation+0x58>)
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	605a      	str	r2, [r3, #4]
//	rotation_parameter.back_rightturn_flag = 0;
	rotation_deviation.now = 0.0;
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <wait_rotation+0x5c>)
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
//	rotation_deviation.cumulative = 0.0;
//	duty.left = 0;
//	duty.right = 0;
//	duty_to_moter();
}
 800a510:	bf00      	nop
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20019488 	.word	0x20019488
 800a520:	20000674 	.word	0x20000674
 800a524:	2001941c 	.word	0x2001941c
 800a528:	20000c98 	.word	0x20000c98
 800a52c:	2001947c 	.word	0x2001947c

0800a530 <trapezoid_preparation>:

void trapezoid_preparation(trapezoid_t *trapezoid, float i_distance,
		float accel, float max_vel, float strat_vel, float end_vel) {
 800a530:	b5b0      	push	{r4, r5, r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6178      	str	r0, [r7, #20]
 800a538:	ed87 0a04 	vstr	s0, [r7, #16]
 800a53c:	edc7 0a03 	vstr	s1, [r7, #12]
 800a540:	ed87 1a02 	vstr	s2, [r7, #8]
 800a544:	edc7 1a01 	vstr	s3, [r7, #4]
 800a548:	ed87 2a00 	vstr	s4, [r7]
//任意のパラメータから台形加速の概要を計算
//trapezoidはポインタでとってる

	trapezoid->back_rightturn_flag = 0;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	761a      	strb	r2, [r3, #24]

	if (i_distance < 0) {
 800a552:	edd7 7a04 	vldr	s15, [r7, #16]
 800a556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	d508      	bpl.n	800a572 <trapezoid_preparation+0x42>
		i_distance = i_distance * -1;
 800a560:	edd7 7a04 	vldr	s15, [r7, #16]
 800a564:	eef1 7a67 	vneg.f32	s15, s15
 800a568:	edc7 7a04 	vstr	s15, [r7, #16]
		trapezoid->back_rightturn_flag = 1;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2201      	movs	r2, #1
 800a570:	761a      	strb	r2, [r3, #24]
	}

	trapezoid->accel = accel;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	605a      	str	r2, [r3, #4]
	trapezoid->end_vel = end_vel;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	611a      	str	r2, [r3, #16]
	trapezoid->i_distance = i_distance;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	601a      	str	r2, [r3, #0]
	trapezoid->max_vel = max_vel;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	609a      	str	r2, [r3, #8]
	trapezoid->strat_vel = strat_vel;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	60da      	str	r2, [r3, #12]
//	trapezoid->triangle = triangle;
//	trapezoid->triangle_flag = triangle_flag;
//↑任意の値を代入してる

	if (accel != 0.0) {
 800a590:	edd7 7a03 	vldr	s15, [r7, #12]
 800a594:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	f000 80cc 	beq.w	800a738 <trapezoid_preparation+0x208>

		trapezoid->acceldistance = (max_vel * max_vel - strat_vel * strat_vel)
 800a5a0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a5a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5ac:	edd7 6a01 	vldr	s13, [r7, #4]
 800a5b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5bc:	ee17 0a90 	vmov	r0, s15
 800a5c0:	f7f5 ffea 	bl	8000598 <__aeabi_f2d>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460d      	mov	r5, r1
				/ (2.0 * accel);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7f5 ffe5 	bl	8000598 <__aeabi_f2d>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	f7f5 fe83 	bl	80002dc <__adddf3>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7f6 f95d 	bl	800089c <__aeabi_ddiv>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7f6 fb05 	bl	8000bf8 <__aeabi_d2f>
 800a5ee:	4602      	mov	r2, r0
		trapezoid->acceldistance = (max_vel * max_vel - strat_vel * strat_vel)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	61da      	str	r2, [r3, #28]
		trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800a5f4:	ed97 7a02 	vldr	s14, [r7, #8]
 800a5f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a600:	edd7 6a00 	vldr	s13, [r7]
 800a604:	edd7 7a00 	vldr	s15, [r7]
 800a608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a60c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a610:	ee17 0a90 	vmov	r0, s15
 800a614:	f7f5 ffc0 	bl	8000598 <__aeabi_f2d>
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
				/ (2.0 * accel);
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7f5 ffbb 	bl	8000598 <__aeabi_f2d>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	f7f5 fe59 	bl	80002dc <__adddf3>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f6 f933 	bl	800089c <__aeabi_ddiv>
 800a636:	4603      	mov	r3, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	4618      	mov	r0, r3
 800a63c:	4621      	mov	r1, r4
 800a63e:	f7f6 fadb 	bl	8000bf8 <__aeabi_d2f>
 800a642:	4602      	mov	r2, r0
		trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	621a      	str	r2, [r3, #32]
		while (i_distance
 800a648:	e063      	b.n	800a712 <trapezoid_preparation+0x1e2>
				< trapezoid->acceldistance + trapezoid->deacceldistance) {
			max_vel = max_vel * 0.95;
 800a64a:	68b8      	ldr	r0, [r7, #8]
 800a64c:	f7f5 ffa4 	bl	8000598 <__aeabi_f2d>
 800a650:	a33f      	add	r3, pc, #252	; (adr r3, 800a750 <trapezoid_preparation+0x220>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f7f5 fff7 	bl	8000648 <__aeabi_dmul>
 800a65a:	4603      	mov	r3, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	4618      	mov	r0, r3
 800a660:	4621      	mov	r1, r4
 800a662:	f7f6 fac9 	bl	8000bf8 <__aeabi_d2f>
 800a666:	4603      	mov	r3, r0
 800a668:	60bb      	str	r3, [r7, #8]
			trapezoid->acceldistance = (max_vel * max_vel
 800a66a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a66e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a672:	ee27 7a27 	vmul.f32	s14, s14, s15
					- strat_vel * strat_vel) / (2.0 * accel);
 800a676:	edd7 6a01 	vldr	s13, [r7, #4]
 800a67a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a67e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a682:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a686:	ee17 0a90 	vmov	r0, s15
 800a68a:	f7f5 ff85 	bl	8000598 <__aeabi_f2d>
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7f5 ff80 	bl	8000598 <__aeabi_f2d>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	f7f5 fe1e 	bl	80002dc <__adddf3>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f6 f8f8 	bl	800089c <__aeabi_ddiv>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	f7f6 faa0 	bl	8000bf8 <__aeabi_d2f>
 800a6b8:	4602      	mov	r2, r0
			trapezoid->acceldistance = (max_vel * max_vel
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	61da      	str	r2, [r3, #28]
			trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800a6be:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6ca:	edd7 6a00 	vldr	s13, [r7]
 800a6ce:	edd7 7a00 	vldr	s15, [r7]
 800a6d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6da:	ee17 0a90 	vmov	r0, s15
 800a6de:	f7f5 ff5b 	bl	8000598 <__aeabi_f2d>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	460d      	mov	r5, r1
					/ (2.0 * accel);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7f5 ff56 	bl	8000598 <__aeabi_f2d>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	f7f5 fdf4 	bl	80002dc <__adddf3>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f6 f8ce 	bl	800089c <__aeabi_ddiv>
 800a700:	4603      	mov	r3, r0
 800a702:	460c      	mov	r4, r1
 800a704:	4618      	mov	r0, r3
 800a706:	4621      	mov	r1, r4
 800a708:	f7f6 fa76 	bl	8000bf8 <__aeabi_d2f>
 800a70c:	4602      	mov	r2, r0
			trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	621a      	str	r2, [r3, #32]
				< trapezoid->acceldistance + trapezoid->deacceldistance) {
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	ed93 7a07 	vldr	s14, [r3, #28]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a71e:	ee77 7a27 	vadd.f32	s15, s14, s15
		while (i_distance
 800a722:	ed97 7a04 	vldr	s14, [r7, #16]
 800a726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	d48c      	bmi.n	800a64a <trapezoid_preparation+0x11a>
		}
		trapezoid->max_vel = max_vel;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	609a      	str	r2, [r3, #8]
	} else {
		trapezoid->acceldistance = 0.0;
		trapezoid->deacceldistance = 0.0;
	}

}
 800a736:	e007      	b.n	800a748 <trapezoid_preparation+0x218>
		trapezoid->acceldistance = 0.0;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	61da      	str	r2, [r3, #28]
		trapezoid->deacceldistance = 0.0;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	621a      	str	r2, [r3, #32]
}
 800a748:	bf00      	nop
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bdb0      	pop	{r4, r5, r7, pc}
 800a750:	66666666 	.word	0x66666666
 800a754:	3fee6666 	.word	0x3fee6666

0800a758 <duty_to_moter>:

void duty_to_moter(void) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
	int duty_left = 0, duty_right = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	2300      	movs	r3, #0
 800a764:	603b      	str	r3, [r7, #0]

	if (duty.left >= 0) {
 800a766:	4b39      	ldr	r3, [pc, #228]	; (800a84c <duty_to_moter+0xf4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db09      	blt.n	800a782 <duty_to_moter+0x2a>
		HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, RESET);
 800a76e:	2200      	movs	r2, #0
 800a770:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a774:	4836      	ldr	r0, [pc, #216]	; (800a850 <duty_to_moter+0xf8>)
 800a776:	f7f8 f995 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_left = duty.left;
 800a77a:	4b34      	ldr	r3, [pc, #208]	; (800a84c <duty_to_moter+0xf4>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	607b      	str	r3, [r7, #4]
 800a780:	e009      	b.n	800a796 <duty_to_moter+0x3e>
	} else {
		HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, SET);
 800a782:	2201      	movs	r2, #1
 800a784:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a788:	4831      	ldr	r0, [pc, #196]	; (800a850 <duty_to_moter+0xf8>)
 800a78a:	f7f8 f98b 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_left = (duty.left * -1);
 800a78e:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <duty_to_moter+0xf4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	425b      	negs	r3, r3
 800a794:	607b      	str	r3, [r7, #4]
	}
	if (duty.right >= 0) {
 800a796:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <duty_to_moter+0xf4>)
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	db09      	blt.n	800a7b2 <duty_to_moter+0x5a>
		HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, SET);
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7a4:	482a      	ldr	r0, [pc, #168]	; (800a850 <duty_to_moter+0xf8>)
 800a7a6:	f7f8 f97d 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_right = duty.right;
 800a7aa:	4b28      	ldr	r3, [pc, #160]	; (800a84c <duty_to_moter+0xf4>)
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	e009      	b.n	800a7c6 <duty_to_moter+0x6e>
	} else {
		HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, RESET);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7b8:	4825      	ldr	r0, [pc, #148]	; (800a850 <duty_to_moter+0xf8>)
 800a7ba:	f7f8 f973 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_right = (duty.right * -1);
 800a7be:	4b23      	ldr	r3, [pc, #140]	; (800a84c <duty_to_moter+0xf4>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	425b      	negs	r3, r3
 800a7c4:	603b      	str	r3, [r7, #0]
	}

	if (duty_left >= 800) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a7cc:	db02      	blt.n	800a7d4 <duty_to_moter+0x7c>
		duty_left = 800 - 1;
 800a7ce:	f240 331f 	movw	r3, #799	; 0x31f
 800a7d2:	607b      	str	r3, [r7, #4]
	}
	if (duty_right >= 800) {
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a7da:	db02      	blt.n	800a7e2 <duty_to_moter+0x8a>
		duty_right = 800 - 1;
 800a7dc:	f240 331f 	movw	r3, #799	; 0x31f
 800a7e0:	603b      	str	r3, [r7, #0]
	}
	if (duty_left <= -800) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f513 7f48 	cmn.w	r3, #800	; 0x320
 800a7e8:	dc01      	bgt.n	800a7ee <duty_to_moter+0x96>
		duty_left = -800 + 1;
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	; (800a854 <duty_to_moter+0xfc>)
 800a7ec:	607b      	str	r3, [r7, #4]
	}
	if (duty_right <= -800) {
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f513 7f48 	cmn.w	r3, #800	; 0x320
 800a7f4:	dc01      	bgt.n	800a7fa <duty_to_moter+0xa2>
		duty_right = -800 + 1;
 800a7f6:	4b17      	ldr	r3, [pc, #92]	; (800a854 <duty_to_moter+0xfc>)
 800a7f8:	603b      	str	r3, [r7, #0]
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4816      	ldr	r0, [pc, #88]	; (800a858 <duty_to_moter+0x100>)
 800a7fe:	f7f9 f8e9 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800a802:	2104      	movs	r1, #4
 800a804:	4814      	ldr	r0, [pc, #80]	; (800a858 <duty_to_moter+0x100>)
 800a806:	f7f9 f8e5 	bl	80039d4 <HAL_TIM_PWM_Stop>
	if (duty_left == 0 && duty_right == 0) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d102      	bne.n	800a816 <duty_to_moter+0xbe>
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00f      	beq.n	800a836 <duty_to_moter+0xde>

	} else {
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_right); //MOTER_R
 800a816:	4b10      	ldr	r3, [pc, #64]	; (800a858 <duty_to_moter+0x100>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_left); //MOTER_L
 800a81e:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <duty_to_moter+0x100>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800a826:	2100      	movs	r1, #0
 800a828:	480b      	ldr	r0, [pc, #44]	; (800a858 <duty_to_moter+0x100>)
 800a82a:	f7f9 f895 	bl	8003958 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800a82e:	2104      	movs	r1, #4
 800a830:	4809      	ldr	r0, [pc, #36]	; (800a858 <duty_to_moter+0x100>)
 800a832:	f7f9 f891 	bl	8003958 <HAL_TIM_PWM_Start>
	}

	duty.left = 0;
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <duty_to_moter+0xf4>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
	duty.right = 0;
 800a83c:	4b03      	ldr	r3, [pc, #12]	; (800a84c <duty_to_moter+0xf4>)
 800a83e:	2200      	movs	r2, #0
 800a840:	605a      	str	r2, [r3, #4]
}
 800a842:	bf00      	nop
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20031bc8 	.word	0x20031bc8
 800a850:	40020400 	.word	0x40020400
 800a854:	fffffce1 	.word	0xfffffce1
 800a858:	20000950 	.word	0x20000950

0800a85c <control_accel>:

void control_accel(run_t *ideal, trapezoid_t *trapezoid, uint8_t rotation_flag) {
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	71fb      	strb	r3, [r7, #7]
	if (trapezoid->back_rightturn_flag == 1) {
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d138      	bne.n	800a8e6 <control_accel+0x8a>
		ideal->dis *= -1.0;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f5 fe8d 	bl	8000598 <__aeabi_f2d>
 800a87e:	4603      	mov	r3, r0
 800a880:	460c      	mov	r4, r1
 800a882:	4618      	mov	r0, r3
 800a884:	4621      	mov	r1, r4
 800a886:	f7f6 f9b7 	bl	8000bf8 <__aeabi_d2f>
 800a88a:	4603      	mov	r3, r0
 800a88c:	ee07 3a90 	vmov	s15, r3
 800a890:	eef1 7a67 	vneg.f32	s15, s15
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	edc3 7a02 	vstr	s15, [r3, #8]
		ideal->vel *= -1.0;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f5 fe7a 	bl	8000598 <__aeabi_f2d>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f7f6 f9a4 	bl	8000bf8 <__aeabi_d2f>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef1 7a67 	vneg.f32	s15, s15
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	edc3 7a01 	vstr	s15, [r3, #4]
		ideal->accel *= -1.0;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f5 fe67 	bl	8000598 <__aeabi_f2d>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7f6 f991 	bl	8000bf8 <__aeabi_d2f>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef1 7a67 	vneg.f32	s15, s15
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	edc3 7a00 	vstr	s15, [r3]
	}

	if (ideal->dis < trapezoid->acceldistance) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	ed93 7a02 	vldr	s14, [r3, #8]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	edd3 7a07 	vldr	s15, [r3, #28]
 800a8f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fa:	d518      	bpl.n	800a92e <control_accel+0xd2>
//		UI_LED1 = 1;
		if (ideal->vel < trapezoid->max_vel) {
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	ed93 7a01 	vldr	s14, [r3, #4]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	edd3 7a02 	vldr	s15, [r3, #8]
 800a908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	d504      	bpl.n	800a91c <control_accel+0xc0>
			ideal->accel = trapezoid->accel;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e041      	b.n	800a9a0 <control_accel+0x144>
		} else {
			ideal->vel = trapezoid->max_vel;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	605a      	str	r2, [r3, #4]
			ideal->accel = 0;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	e038      	b.n	800a9a0 <control_accel+0x144>
		}

	} else if (ideal->dis
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	ed93 7a02 	vldr	s14, [r3, #8]
			< (trapezoid->i_distance - trapezoid->deacceldistance)) {
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	edd3 6a00 	vldr	s13, [r3]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	edd3 7a08 	vldr	s15, [r3, #32]
 800a940:	ee76 7ae7 	vsub.f32	s15, s13, s15
	} else if (ideal->dis
 800a944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d508      	bpl.n	800a960 <control_accel+0x104>
//		UI_LED2 = 1;
		ideal->accel = 0;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	601a      	str	r2, [r3, #0]

		ideal->vel = trapezoid->max_vel;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	605a      	str	r2, [r3, #4]
 800a95e:	e01f      	b.n	800a9a0 <control_accel+0x144>
	} else if (ideal->vel > trapezoid->end_vel) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	ed93 7a01 	vldr	s14, [r3, #4]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	edd3 7a04 	vldr	s15, [r3, #16]
 800a96c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	dd08      	ble.n	800a988 <control_accel+0x12c>
		ideal->accel = -trapezoid->accel;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	edd3 7a01 	vldr	s15, [r3, #4]
 800a97c:	eef1 7a67 	vneg.f32	s15, s15
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	edc3 7a00 	vstr	s15, [r3]
 800a986:	e00b      	b.n	800a9a0 <control_accel+0x144>

	} else {
		trapezoid->run_flag = 0;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ideal->accel = 0;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	601a      	str	r2, [r3, #0]
		ideal->vel = trapezoid->end_vel;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	691a      	ldr	r2, [r3, #16]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	605a      	str	r2, [r3, #4]
	}

	if (trapezoid->back_rightturn_flag == 1) {
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d138      	bne.n	800aa1c <control_accel+0x1c0>
		ideal->dis *= -1.0;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f5 fdf2 	bl	8000598 <__aeabi_f2d>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f7f6 f91c 	bl	8000bf8 <__aeabi_d2f>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef1 7a67 	vneg.f32	s15, s15
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	edc3 7a02 	vstr	s15, [r3, #8]
		ideal->vel *= -1.0;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f5 fddf 	bl	8000598 <__aeabi_f2d>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	4618      	mov	r0, r3
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	f7f6 f909 	bl	8000bf8 <__aeabi_d2f>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eef1 7a67 	vneg.f32	s15, s15
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	edc3 7a01 	vstr	s15, [r3, #4]
		ideal->accel *= -1.0;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f5 fdcc 	bl	8000598 <__aeabi_f2d>
 800aa00:	4603      	mov	r3, r0
 800aa02:	460c      	mov	r4, r1
 800aa04:	4618      	mov	r0, r3
 800aa06:	4621      	mov	r1, r4
 800aa08:	f7f6 f8f6 	bl	8000bf8 <__aeabi_d2f>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef1 7a67 	vneg.f32	s15, s15
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	edc3 7a00 	vstr	s15, [r3]
	}

//	printf("ideal_vel=%4.2f,ideal_dis=%4.2f\n", ideal->vel, ideal->dis);

}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd90      	pop	{r4, r7, pc}

0800aa24 <PID_control>:

void PID_control(run_t *ideal, run_t *left, run_t *right,
		deviation_t *left_deviation, deviation_t *right_deviation, gain_t *gain,
		trapezoid_t *parameter, duty_t *duty, uint8_t rotation_flag) {
 800aa24:	b480      	push	{r7}
 800aa26:	b089      	sub	sp, #36	; 0x24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	603b      	str	r3, [r7, #0]
	int duty_left, duty_right;
	float Kp, Ki;

	Ki = gain->Ki;
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	61bb      	str	r3, [r7, #24]
	Kp = gain->Kp;
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	617b      	str	r3, [r7, #20]

	left->vel = (left->vel + right->vel) / 2;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aa52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	edc3 7a01 	vstr	s15, [r3, #4]
	right->vel = left->vel;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	605a      	str	r2, [r3, #4]

	if (rotation_flag == 1) {
 800aa64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d10e      	bne.n	800aa8a <PID_control+0x66>
		right->vel += wallcontrol_value;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa72:	4b4d      	ldr	r3, [pc, #308]	; (800aba8 <PID_control+0x184>)
 800aa74:	edd3 7a00 	vldr	s15, [r3]
 800aa78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	edc3 7a01 	vstr	s15, [r3, #4]
		left->vel = right->vel;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685a      	ldr	r2, [r3, #4]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	605a      	str	r2, [r3, #4]

//	if (parameter->back_rightturn_flag == 1) {
//		ideal->vel *= -1.0;
//	}

	left_deviation->now = (ideal->vel - left->vel);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	edc3 7a00 	vstr	s15, [r3]
	right_deviation->now = (ideal->vel - right->vel);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	ed93 7a01 	vldr	s14, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	edd3 7a01 	vldr	s15, [r3, #4]
 800aaac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	edc3 7a00 	vstr	s15, [r3]
	if (rotation_flag == 0) {
 800aab6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d116      	bne.n	800aaec <PID_control+0xc8>
		left_deviation->cumulative += left_deviation->now;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	ed93 7a01 	vldr	s14, [r3, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	edd3 7a00 	vldr	s15, [r3]
 800aaca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	edc3 7a01 	vstr	s15, [r3, #4]
		right_deviation->cumulative += right_deviation->now;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	ed93 7a01 	vldr	s14, [r3, #4]
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	edd3 7a00 	vldr	s15, [r3]
 800aae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	edc3 7a01 	vstr	s15, [r3, #4]
 800aaea:	e012      	b.n	800ab12 <PID_control+0xee>
	} else if (rotation_flag == 1) {
 800aaec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d10e      	bne.n	800ab12 <PID_control+0xee>
		left_deviation->cumulative += left_deviation->now;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	ed93 7a01 	vldr	s14, [r3, #4]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	edd3 7a00 	vldr	s15, [r3]
 800ab00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	edc3 7a01 	vstr	s15, [r3, #4]
		right_deviation->cumulative = left_deviation->cumulative;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	605a      	str	r2, [r3, #4]
	}
	duty_left = (int) left_deviation->now * Kp
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	edd3 7a00 	vldr	s15, [r3]
 800ab18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab20:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab24:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ left_deviation->cumulative * Ki;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ab2e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab36:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty_left = (int) left_deviation->now * Kp
 800ab3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab3e:	ee17 3a90 	vmov	r3, s15
 800ab42:	61fb      	str	r3, [r7, #28]
	duty_right = (int) right_deviation->now * Kp
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	edd3 7a00 	vldr	s15, [r3]
 800ab4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab52:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab56:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ right_deviation->cumulative * Ki;
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	edd3 6a01 	vldr	s13, [r3, #4]
 800ab60:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab68:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty_right = (int) right_deviation->now * Kp
 800ab6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab70:	ee17 3a90 	vmov	r3, s15
 800ab74:	613b      	str	r3, [r7, #16]

	if (rotation_flag == 1) {
 800ab76:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d102      	bne.n	800ab84 <PID_control+0x160>
		duty_left = duty_left * -1;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	425b      	negs	r3, r3
 800ab82:	61fb      	str	r3, [r7, #28]
	}
//	if (parameter->back_rightturn_flag == 1) {
//		duty_left = duty_left * -1;
//		duty_right = duty_right * -1;
//	}
	duty->left += duty_left;
 800ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	441a      	add	r2, r3
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	601a      	str	r2, [r3, #0]
	duty->right += duty_right;
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	441a      	add	r2, r3
 800ab98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9a:	605a      	str	r2, [r3, #4]
}
 800ab9c:	bf00      	nop
 800ab9e:	3724      	adds	r7, #36	; 0x24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	2000067c 	.word	0x2000067c
 800abac:	00000000 	.word	0x00000000

0800abb0 <read_vel>:

float read_vel(uint8_t RorL) {
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	71fb      	strb	r3, [r7, #7]
	uint16_t val;
	float val2;
	float val_cor;
//	uint8_t table_index;
	uint8_t i;
	for (i = 0; i < 50; i++)
 800abba:	2300      	movs	r3, #0
 800abbc:	72fb      	strb	r3, [r7, #11]
 800abbe:	e002      	b.n	800abc6 <read_vel+0x16>
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
 800abc6:	7afb      	ldrb	r3, [r7, #11]
 800abc8:	2b31      	cmp	r3, #49	; 0x31
 800abca:	d9f9      	bls.n	800abc0 <read_vel+0x10>
		;
	read_spi_en(RorL, 0x3fff);
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff f818 	bl	8009c08 <read_spi_en>
	for (i = 0; i < 50; i++)
 800abd8:	2300      	movs	r3, #0
 800abda:	72fb      	strb	r3, [r7, #11]
 800abdc:	e002      	b.n	800abe4 <read_vel+0x34>
 800abde:	7afb      	ldrb	r3, [r7, #11]
 800abe0:	3301      	adds	r3, #1
 800abe2:	72fb      	strb	r3, [r7, #11]
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	2b31      	cmp	r3, #49	; 0x31
 800abe8:	d9f9      	bls.n	800abde <read_vel+0x2e>
		;
	val = (0x3fff & read_spi_en(RorL, 0x3fff));
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff f809 	bl	8009c08 <read_spi_en>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800abfc:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < 50; i++)
 800abfe:	2300      	movs	r3, #0
 800ac00:	72fb      	strb	r3, [r7, #11]
 800ac02:	e002      	b.n	800ac0a <read_vel+0x5a>
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	2b31      	cmp	r3, #49	; 0x31
 800ac0e:	d9f9      	bls.n	800ac04 <read_vel+0x54>
		;

//	table_index = val / 500;
	if (RorL == LEFT) {
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d17c      	bne.n	800ad10 <read_vel+0x160>
		en_log_L.before_5ms = en_log_L.before_4ms;
 800ac16:	4bb2      	ldr	r3, [pc, #712]	; (800aee0 <read_vel+0x330>)
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4ab1      	ldr	r2, [pc, #708]	; (800aee0 <read_vel+0x330>)
 800ac1c:	6113      	str	r3, [r2, #16]
		en_log_L.before_4ms = en_log_L.before_3ms;
 800ac1e:	4bb0      	ldr	r3, [pc, #704]	; (800aee0 <read_vel+0x330>)
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	4aaf      	ldr	r2, [pc, #700]	; (800aee0 <read_vel+0x330>)
 800ac24:	60d3      	str	r3, [r2, #12]
		en_log_L.before_3ms = en_log_L.before_2ms;
 800ac26:	4bae      	ldr	r3, [pc, #696]	; (800aee0 <read_vel+0x330>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	4aad      	ldr	r2, [pc, #692]	; (800aee0 <read_vel+0x330>)
 800ac2c:	6093      	str	r3, [r2, #8]
		en_log_L.before_2ms = en_log_L.before_1ms;
 800ac2e:	4bac      	ldr	r3, [pc, #688]	; (800aee0 <read_vel+0x330>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4aab      	ldr	r2, [pc, #684]	; (800aee0 <read_vel+0x330>)
 800ac34:	6053      	str	r3, [r2, #4]
		en_log_L.before_1ms = en_log_L.now;
 800ac36:	4baa      	ldr	r3, [pc, #680]	; (800aee0 <read_vel+0x330>)
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4aa9      	ldr	r2, [pc, #676]	; (800aee0 <read_vel+0x330>)
 800ac3c:	6013      	str	r3, [r2, #0]
		en_log_L.now = val;
 800ac3e:	893b      	ldrh	r3, [r7, #8]
 800ac40:	4aa7      	ldr	r2, [pc, #668]	; (800aee0 <read_vel+0x330>)
 800ac42:	6153      	str	r3, [r2, #20]

		val_cor = LPF[0] * en_log_L.now + LPF[1] * en_log_L.before_1ms
 800ac44:	4ba7      	ldr	r3, [pc, #668]	; (800aee4 <read_vel+0x334>)
 800ac46:	ed93 7a00 	vldr	s14, [r3]
 800ac4a:	4ba5      	ldr	r3, [pc, #660]	; (800aee0 <read_vel+0x330>)
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac5a:	4ba2      	ldr	r3, [pc, #648]	; (800aee4 <read_vel+0x334>)
 800ac5c:	edd3 6a01 	vldr	s13, [r3, #4]
 800ac60:	4b9f      	ldr	r3, [pc, #636]	; (800aee0 <read_vel+0x330>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac70:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ LPF[2] * en_log_L.before_2ms + LPF[3] * en_log_L.before_3ms
 800ac74:	4b9b      	ldr	r3, [pc, #620]	; (800aee4 <read_vel+0x334>)
 800ac76:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac7a:	4b99      	ldr	r3, [pc, #612]	; (800aee0 <read_vel+0x330>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac8e:	4b95      	ldr	r3, [pc, #596]	; (800aee4 <read_vel+0x334>)
 800ac90:	edd3 6a03 	vldr	s13, [r3, #12]
 800ac94:	4b92      	ldr	r3, [pc, #584]	; (800aee0 <read_vel+0x330>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	ee07 3a90 	vmov	s15, r3
 800ac9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aca4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ LPF[4] * en_log_L.before_4ms + LPF[5] * en_log_L.before_5ms;
 800aca8:	4b8e      	ldr	r3, [pc, #568]	; (800aee4 <read_vel+0x334>)
 800acaa:	edd3 6a04 	vldr	s13, [r3, #16]
 800acae:	4b8c      	ldr	r3, [pc, #560]	; (800aee0 <read_vel+0x330>)
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acc2:	4b88      	ldr	r3, [pc, #544]	; (800aee4 <read_vel+0x334>)
 800acc4:	edd3 6a05 	vldr	s13, [r3, #20]
 800acc8:	4b85      	ldr	r3, [pc, #532]	; (800aee0 <read_vel+0x330>)
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	ee07 3a90 	vmov	s15, r3
 800acd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		val_cor = LPF[0] * en_log_L.now + LPF[1] * en_log_L.before_1ms
 800acd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acdc:	edc7 7a03 	vstr	s15, [r7, #12]

		val_cor = (float) val;
 800ace0:	893b      	ldrh	r3, [r7, #8]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	edc7 7a03 	vstr	s15, [r7, #12]
//		test_L = (float) val;
		test_L = val_cor;
 800acee:	4a7e      	ldr	r2, [pc, #504]	; (800aee8 <read_vel+0x338>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6013      	str	r3, [r2, #0]
		test_L2 = val_cor - before_en_val[RorL];
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	4a7d      	ldr	r2, [pc, #500]	; (800aeec <read_vel+0x33c>)
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	edd3 7a00 	vldr	s15, [r3]
 800ad00:	ed97 7a03 	vldr	s14, [r7, #12]
 800ad04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad08:	4b79      	ldr	r3, [pc, #484]	; (800aef0 <read_vel+0x340>)
 800ad0a:	edc3 7a00 	vstr	s15, [r3]
 800ad0e:	e07b      	b.n	800ae08 <read_vel+0x258>

	} else {
		en_log_R.before_5ms = en_log_R.before_4ms;
 800ad10:	4b78      	ldr	r3, [pc, #480]	; (800aef4 <read_vel+0x344>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4a77      	ldr	r2, [pc, #476]	; (800aef4 <read_vel+0x344>)
 800ad16:	6113      	str	r3, [r2, #16]
		en_log_R.before_4ms = en_log_R.before_3ms;
 800ad18:	4b76      	ldr	r3, [pc, #472]	; (800aef4 <read_vel+0x344>)
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	4a75      	ldr	r2, [pc, #468]	; (800aef4 <read_vel+0x344>)
 800ad1e:	60d3      	str	r3, [r2, #12]
		en_log_R.before_3ms = en_log_R.before_2ms;
 800ad20:	4b74      	ldr	r3, [pc, #464]	; (800aef4 <read_vel+0x344>)
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4a73      	ldr	r2, [pc, #460]	; (800aef4 <read_vel+0x344>)
 800ad26:	6093      	str	r3, [r2, #8]
		en_log_R.before_2ms = en_log_R.before_1ms;
 800ad28:	4b72      	ldr	r3, [pc, #456]	; (800aef4 <read_vel+0x344>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a71      	ldr	r2, [pc, #452]	; (800aef4 <read_vel+0x344>)
 800ad2e:	6053      	str	r3, [r2, #4]
		en_log_R.before_1ms = en_log_R.now;
 800ad30:	4b70      	ldr	r3, [pc, #448]	; (800aef4 <read_vel+0x344>)
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	4a6f      	ldr	r2, [pc, #444]	; (800aef4 <read_vel+0x344>)
 800ad36:	6013      	str	r3, [r2, #0]
		en_log_R.now = val;
 800ad38:	893b      	ldrh	r3, [r7, #8]
 800ad3a:	4a6e      	ldr	r2, [pc, #440]	; (800aef4 <read_vel+0x344>)
 800ad3c:	6153      	str	r3, [r2, #20]

		val_cor = LPF[0] * en_log_R.now + LPF[1] * en_log_R.before_1ms
 800ad3e:	4b69      	ldr	r3, [pc, #420]	; (800aee4 <read_vel+0x334>)
 800ad40:	ed93 7a00 	vldr	s14, [r3]
 800ad44:	4b6b      	ldr	r3, [pc, #428]	; (800aef4 <read_vel+0x344>)
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad54:	4b63      	ldr	r3, [pc, #396]	; (800aee4 <read_vel+0x334>)
 800ad56:	edd3 6a01 	vldr	s13, [r3, #4]
 800ad5a:	4b66      	ldr	r3, [pc, #408]	; (800aef4 <read_vel+0x344>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ LPF[2] * en_log_R.before_2ms + LPF[3] * en_log_R.before_3ms
 800ad6e:	4b5d      	ldr	r3, [pc, #372]	; (800aee4 <read_vel+0x334>)
 800ad70:	edd3 6a02 	vldr	s13, [r3, #8]
 800ad74:	4b5f      	ldr	r3, [pc, #380]	; (800aef4 <read_vel+0x344>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	ee07 3a90 	vmov	s15, r3
 800ad7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad88:	4b56      	ldr	r3, [pc, #344]	; (800aee4 <read_vel+0x334>)
 800ad8a:	edd3 6a03 	vldr	s13, [r3, #12]
 800ad8e:	4b59      	ldr	r3, [pc, #356]	; (800aef4 <read_vel+0x344>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad9e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ LPF[4] * en_log_R.before_4ms + LPF[5] * en_log_R.before_5ms;
 800ada2:	4b50      	ldr	r3, [pc, #320]	; (800aee4 <read_vel+0x334>)
 800ada4:	edd3 6a04 	vldr	s13, [r3, #16]
 800ada8:	4b52      	ldr	r3, [pc, #328]	; (800aef4 <read_vel+0x344>)
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800adbc:	4b49      	ldr	r3, [pc, #292]	; (800aee4 <read_vel+0x334>)
 800adbe:	edd3 6a05 	vldr	s13, [r3, #20]
 800adc2:	4b4c      	ldr	r3, [pc, #304]	; (800aef4 <read_vel+0x344>)
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adce:	ee66 7aa7 	vmul.f32	s15, s13, s15
		val_cor = LPF[0] * en_log_R.now + LPF[1] * en_log_R.before_1ms
 800add2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800add6:	edc7 7a03 	vstr	s15, [r7, #12]
		val_cor = (float) val;
 800adda:	893b      	ldrh	r3, [r7, #8]
 800addc:	ee07 3a90 	vmov	s15, r3
 800ade0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade4:	edc7 7a03 	vstr	s15, [r7, #12]
//		test_R = (float) val;
		test_R = val_cor;
 800ade8:	4a43      	ldr	r2, [pc, #268]	; (800aef8 <read_vel+0x348>)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6013      	str	r3, [r2, #0]
		test_R2 = val_cor - before_en_val[RorL];
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	4a3e      	ldr	r2, [pc, #248]	; (800aeec <read_vel+0x33c>)
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	edd3 7a00 	vldr	s15, [r3]
 800adfa:	ed97 7a03 	vldr	s14, [r7, #12]
 800adfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae02:	4b3e      	ldr	r3, [pc, #248]	; (800aefc <read_vel+0x34c>)
 800ae04:	edc3 7a00 	vstr	s15, [r3]

	}

	val2 = (float) ((val_cor - before_en_val[RorL]));
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	4a38      	ldr	r2, [pc, #224]	; (800aeec <read_vel+0x33c>)
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	edd3 7a00 	vldr	s15, [r3]
 800ae14:	ed97 7a03 	vldr	s14, [r7, #12]
 800ae18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae1c:	edc7 7a04 	vstr	s15, [r7, #16]
	if (val2 < -8000) {
 800ae20:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae24:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800af00 <read_vel+0x350>
 800ae28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	d507      	bpl.n	800ae42 <read_vel+0x292>
		val2 += 16384;
 800ae32:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae36:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800af04 <read_vel+0x354>
 800ae3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae3e:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if (val2 > 8000) {
 800ae42:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800af08 <read_vel+0x358>
 800ae4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae52:	dd07      	ble.n	800ae64 <read_vel+0x2b4>
		val2 -= 16384;
 800ae54:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae58:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800af04 <read_vel+0x354>
 800ae5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae60:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	before_en_val[RorL] = val_cor;
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	4a21      	ldr	r2, [pc, #132]	; (800aeec <read_vel+0x33c>)
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	601a      	str	r2, [r3, #0]

	vel = ((float) (val2)) / 16384.0 * (3.1415926 * DIAMETER) * 1000;
 800ae70:	6938      	ldr	r0, [r7, #16]
 800ae72:	f7f5 fb91 	bl	8000598 <__aeabi_f2d>
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	4b24      	ldr	r3, [pc, #144]	; (800af0c <read_vel+0x35c>)
 800ae7c:	f7f5 fd0e 	bl	800089c <__aeabi_ddiv>
 800ae80:	4603      	mov	r3, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4618      	mov	r0, r3
 800ae86:	4621      	mov	r1, r4
 800ae88:	a313      	add	r3, pc, #76	; (adr r3, 800aed8 <read_vel+0x328>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fbdb 	bl	8000648 <__aeabi_dmul>
 800ae92:	4603      	mov	r3, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	4618      	mov	r0, r3
 800ae98:	4621      	mov	r1, r4
 800ae9a:	f04f 0200 	mov.w	r2, #0
 800ae9e:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <read_vel+0x360>)
 800aea0:	f7f5 fbd2 	bl	8000648 <__aeabi_dmul>
 800aea4:	4603      	mov	r3, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	4618      	mov	r0, r3
 800aeaa:	4621      	mov	r1, r4
 800aeac:	f7f5 fea4 	bl	8000bf8 <__aeabi_d2f>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	617b      	str	r3, [r7, #20]

	if (RorL == LEFT) {
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <read_vel+0x316>
		vel *= -1;
 800aeba:	edd7 7a05 	vldr	s15, [r7, #20]
 800aebe:	eef1 7a67 	vneg.f32	s15, s15
 800aec2:	edc7 7a05 	vstr	s15, [r7, #20]

//	if (translation_parameter.back_rightturn_flag == 1) { //バックするとき速度マイナスにするバカ
//		vel *= -1;
//	}

	return vel;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	ee07 3a90 	vmov	s15, r3
}
 800aecc:	eeb0 0a67 	vmov.f32	s0, s15
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	b4e27ded 	.word	0xb4e27ded
 800aedc:	40438a6b 	.word	0x40438a6b
 800aee0:	200194b0 	.word	0x200194b0
 800aee4:	20000028 	.word	0x20000028
 800aee8:	2001945c 	.word	0x2001945c
 800aeec:	2000066c 	.word	0x2000066c
 800aef0:	20031bc4 	.word	0x20031bc4
 800aef4:	200194cc 	.word	0x200194cc
 800aef8:	20019454 	.word	0x20019454
 800aefc:	20031c3c 	.word	0x20031c3c
 800af00:	c5fa0000 	.word	0xc5fa0000
 800af04:	46800000 	.word	0x46800000
 800af08:	45fa0000 	.word	0x45fa0000
 800af0c:	40d00000 	.word	0x40d00000
 800af10:	408f4000 	.word	0x408f4000
 800af14:	00000000 	.word	0x00000000

0800af18 <integral_1ms>:
//			vel *= -1;
//		}
//	return vel;
//}

void integral_1ms(float* dis, float*vel) {
 800af18:	b5b0      	push	{r4, r5, r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	*dis += *vel * 0.001;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f7f5 fb36 	bl	8000598 <__aeabi_f2d>
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f7f5 fb2f 	bl	8000598 <__aeabi_f2d>
 800af3a:	a30d      	add	r3, pc, #52	; (adr r3, 800af70 <integral_1ms+0x58>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 fb82 	bl	8000648 <__aeabi_dmul>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4620      	mov	r0, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	f7f5 f9c6 	bl	80002dc <__adddf3>
 800af50:	4603      	mov	r3, r0
 800af52:	460c      	mov	r4, r1
 800af54:	4618      	mov	r0, r3
 800af56:	4621      	mov	r1, r4
 800af58:	f7f5 fe4e 	bl	8000bf8 <__aeabi_d2f>
 800af5c:	4602      	mov	r2, r0
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	601a      	str	r2, [r3, #0]
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bdb0      	pop	{r4, r5, r7, pc}
 800af6a:	bf00      	nop
 800af6c:	f3af 8000 	nop.w
 800af70:	d2f1a9fc 	.word	0xd2f1a9fc
 800af74:	3f50624d 	.word	0x3f50624d

0800af78 <integral_ideal>:

void integral_ideal(run_t *ideal) {
 800af78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
	ideal->vel += ideal->accel * 0.001;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	4618      	mov	r0, r3
 800af88:	f7f5 fb06 	bl	8000598 <__aeabi_f2d>
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f7f5 faff 	bl	8000598 <__aeabi_f2d>
 800af9a:	a331      	add	r3, pc, #196	; (adr r3, 800b060 <integral_ideal+0xe8>)
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	f7f5 fb52 	bl	8000648 <__aeabi_dmul>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 f996 	bl	80002dc <__adddf3>
 800afb0:	4603      	mov	r3, r0
 800afb2:	460c      	mov	r4, r1
 800afb4:	4618      	mov	r0, r3
 800afb6:	4621      	mov	r1, r4
 800afb8:	f7f5 fe1e 	bl	8000bf8 <__aeabi_d2f>
 800afbc:	4602      	mov	r2, r0
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]
	ideal->dis += ideal->vel * 0.001 + ideal->accel * 0.001 * 0.001 / 2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7f5 fae6 	bl	8000598 <__aeabi_f2d>
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7f5 fadf 	bl	8000598 <__aeabi_f2d>
 800afda:	a321      	add	r3, pc, #132	; (adr r3, 800b060 <integral_ideal+0xe8>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 fb32 	bl	8000648 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4690      	mov	r8, r2
 800afea:	4699      	mov	r9, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f5 fad1 	bl	8000598 <__aeabi_f2d>
 800aff6:	a31a      	add	r3, pc, #104	; (adr r3, 800b060 <integral_ideal+0xe8>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 fb24 	bl	8000648 <__aeabi_dmul>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4610      	mov	r0, r2
 800b006:	4619      	mov	r1, r3
 800b008:	a315      	add	r3, pc, #84	; (adr r3, 800b060 <integral_ideal+0xe8>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 fb1b 	bl	8000648 <__aeabi_dmul>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4610      	mov	r0, r2
 800b018:	4619      	mov	r1, r3
 800b01a:	f04f 0200 	mov.w	r2, #0
 800b01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b022:	f7f5 fc3b 	bl	800089c <__aeabi_ddiv>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 f955 	bl	80002dc <__adddf3>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4620      	mov	r0, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	f7f5 f94f 	bl	80002dc <__adddf3>
 800b03e:	4603      	mov	r3, r0
 800b040:	460c      	mov	r4, r1
 800b042:	4618      	mov	r0, r3
 800b044:	4621      	mov	r1, r4
 800b046:	f7f5 fdd7 	bl	8000bf8 <__aeabi_d2f>
 800b04a:	4602      	mov	r2, r0
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w
 800b060:	d2f1a9fc 	.word	0xd2f1a9fc
 800b064:	3f50624d 	.word	0x3f50624d

0800b068 <wall_control>:

void wall_control(void) {
 800b068:	b5b0      	push	{r4, r5, r7, lr}
 800b06a:	af00      	add	r7, sp, #0
	test_L = (float) SEN_L.diff;
 800b06c:	4bac      	ldr	r3, [pc, #688]	; (800b320 <wall_control+0x2b8>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	ee07 3a90 	vmov	s15, r3
 800b074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b078:	4baa      	ldr	r3, [pc, #680]	; (800b324 <wall_control+0x2bc>)
 800b07a:	edc3 7a00 	vstr	s15, [r3]
	test_R = (float) SEN_R.diff;
 800b07e:	4baa      	ldr	r3, [pc, #680]	; (800b328 <wall_control+0x2c0>)
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	ee07 3a90 	vmov	s15, r3
 800b086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b08a:	4ba8      	ldr	r3, [pc, #672]	; (800b32c <wall_control+0x2c4>)
 800b08c:	edc3 7a00 	vstr	s15, [r3]
	test_L2 = (float) SEN_F.reference;
 800b090:	4ba7      	ldr	r3, [pc, #668]	; (800b330 <wall_control+0x2c8>)
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	ee07 3a90 	vmov	s15, r3
 800b098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b09c:	4ba5      	ldr	r3, [pc, #660]	; (800b334 <wall_control+0x2cc>)
 800b09e:	edc3 7a00 	vstr	s15, [r3]

	if ((wall_control_flag == 1) && (wall_control_oblique_flag == 0)) {
 800b0a2:	4ba5      	ldr	r3, [pc, #660]	; (800b338 <wall_control+0x2d0>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	f040 815a 	bne.w	800b360 <wall_control+0x2f8>
 800b0ac:	4ba3      	ldr	r3, [pc, #652]	; (800b33c <wall_control+0x2d4>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 8155 	bne.w	800b360 <wall_control+0x2f8>
		test_R2 = 1;
 800b0b6:	4ba2      	ldr	r3, [pc, #648]	; (800b340 <wall_control+0x2d8>)
 800b0b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0bc:	601a      	str	r2, [r3, #0]
		if (((ideal_translation.vel) > 100.0) && (SEN_L.diff < 15 )
 800b0be:	4ba1      	ldr	r3, [pc, #644]	; (800b344 <wall_control+0x2dc>)
 800b0c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0c4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800b348 <wall_control+0x2e0>
 800b0c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d0:	f340 8236 	ble.w	800b540 <wall_control+0x4d8>
 800b0d4:	4b92      	ldr	r3, [pc, #584]	; (800b320 <wall_control+0x2b8>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	2b0e      	cmp	r3, #14
 800b0da:	f300 8231 	bgt.w	800b540 <wall_control+0x4d8>
				&& (SEN_R.diff < 15 )
 800b0de:	4b92      	ldr	r3, [pc, #584]	; (800b328 <wall_control+0x2c0>)
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	2b0e      	cmp	r3, #14
 800b0e4:	f300 822c 	bgt.w	800b540 <wall_control+0x4d8>
				&& (SEN_F.now < SEN_F.reference )) { //&& (SEN_L.diff < 2000) && (SEN_R.diff < 2000)&& (SEN_F.now < SEN_F.threshold * 100))
 800b0e8:	4b91      	ldr	r3, [pc, #580]	; (800b330 <wall_control+0x2c8>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	4b90      	ldr	r3, [pc, #576]	; (800b330 <wall_control+0x2c8>)
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	f280 8225 	bge.w	800b540 <wall_control+0x4d8>
			test_R2 = 2;
 800b0f6:	4b92      	ldr	r3, [pc, #584]	; (800b340 <wall_control+0x2d8>)
 800b0f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0fc:	601a      	str	r2, [r3, #0]
			if (SEN_L.now > SEN_L.threshold && SEN_R.now > SEN_R.threshold) {
 800b0fe:	4b88      	ldr	r3, [pc, #544]	; (800b320 <wall_control+0x2b8>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	4b87      	ldr	r3, [pc, #540]	; (800b320 <wall_control+0x2b8>)
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	429a      	cmp	r2, r3
 800b108:	dd42      	ble.n	800b190 <wall_control+0x128>
 800b10a:	4b87      	ldr	r3, [pc, #540]	; (800b328 <wall_control+0x2c0>)
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	4b86      	ldr	r3, [pc, #536]	; (800b328 <wall_control+0x2c0>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	429a      	cmp	r2, r3
 800b114:	dd3c      	ble.n	800b190 <wall_control+0x128>
				test_R2 = 3;
 800b116:	4b8a      	ldr	r3, [pc, #552]	; (800b340 <wall_control+0x2d8>)
 800b118:	4a8c      	ldr	r2, [pc, #560]	; (800b34c <wall_control+0x2e4>)
 800b11a:	601a      	str	r2, [r3, #0]
				wallcontrol_value = wall_cntrol_gain.Kp
 800b11c:	4b8c      	ldr	r3, [pc, #560]	; (800b350 <wall_control+0x2e8>)
 800b11e:	ed93 7a00 	vldr	s14, [r3]
						* (((float) SEN_L.now - (float) SEN_L.reference)
 800b122:	4b7f      	ldr	r3, [pc, #508]	; (800b320 <wall_control+0x2b8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b12e:	4b7c      	ldr	r3, [pc, #496]	; (800b320 <wall_control+0x2b8>)
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13a:	ee76 6ae7 	vsub.f32	s13, s13, s15
								- ((float) SEN_R.now - (float) SEN_R.reference))
 800b13e:	4b7a      	ldr	r3, [pc, #488]	; (800b328 <wall_control+0x2c0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b14a:	4b77      	ldr	r3, [pc, #476]	; (800b328 <wall_control+0x2c0>)
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b156:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b15a:	ee76 7ae7 	vsub.f32	s15, s13, s15
						* (((float) SEN_L.now - (float) SEN_L.reference)
 800b15e:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ wall_cntrol_gain.Kd
 800b162:	4b7b      	ldr	r3, [pc, #492]	; (800b350 <wall_control+0x2e8>)
 800b164:	edd3 6a02 	vldr	s13, [r3, #8]
								* (float) (SEN_L.diff_1ms - SEN_R.diff_1ms);
 800b168:	4b6d      	ldr	r3, [pc, #436]	; (800b320 <wall_control+0x2b8>)
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	4b6e      	ldr	r3, [pc, #440]	; (800b328 <wall_control+0x2c0>)
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b17a:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ wall_cntrol_gain.Kd
 800b17e:	ee77 7a27 	vadd.f32	s15, s14, s15
				wallcontrol_value = wall_cntrol_gain.Kp
 800b182:	4b74      	ldr	r3, [pc, #464]	; (800b354 <wall_control+0x2ec>)
 800b184:	edc3 7a00 	vstr	s15, [r3]
				set_led(5);
 800b188:	2005      	movs	r0, #5
 800b18a:	f7fe fdff 	bl	8009d8c <set_led>
 800b18e:	e0c6      	b.n	800b31e <wall_control+0x2b6>
			} else if (SEN_L.now < SEN_L.threshold
 800b190:	4b63      	ldr	r3, [pc, #396]	; (800b320 <wall_control+0x2b8>)
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	4b62      	ldr	r3, [pc, #392]	; (800b320 <wall_control+0x2b8>)
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	429a      	cmp	r2, r3
 800b19a:	da5a      	bge.n	800b252 <wall_control+0x1ea>
					&& SEN_R.now > SEN_R.threshold) {
 800b19c:	4b62      	ldr	r3, [pc, #392]	; (800b328 <wall_control+0x2c0>)
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b61      	ldr	r3, [pc, #388]	; (800b328 <wall_control+0x2c0>)
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	dd54      	ble.n	800b252 <wall_control+0x1ea>
				test_R2 = 4;
 800b1a8:	4b65      	ldr	r3, [pc, #404]	; (800b340 <wall_control+0x2d8>)
 800b1aa:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b1ae:	601a      	str	r2, [r3, #0]
				wallcontrol_value = -2.0 * wall_cntrol_gain.Kp
 800b1b0:	4b67      	ldr	r3, [pc, #412]	; (800b350 <wall_control+0x2e8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7f5 f9ef 	bl	8000598 <__aeabi_f2d>
 800b1ba:	f04f 0200 	mov.w	r2, #0
 800b1be:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b1c2:	f7f5 fa41 	bl	8000648 <__aeabi_dmul>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	4625      	mov	r5, r4
 800b1cc:	461c      	mov	r4, r3
						* ((float) SEN_R.now - (float) SEN_R.reference)
 800b1ce:	4b56      	ldr	r3, [pc, #344]	; (800b328 <wall_control+0x2c0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1da:	4b53      	ldr	r3, [pc, #332]	; (800b328 <wall_control+0x2c0>)
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ea:	ee17 0a90 	vmov	r0, s15
 800b1ee:	f7f5 f9d3 	bl	8000598 <__aeabi_f2d>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7f5 fa25 	bl	8000648 <__aeabi_dmul>
 800b1fe:	4603      	mov	r3, r0
 800b200:	460c      	mov	r4, r1
 800b202:	4625      	mov	r5, r4
 800b204:	461c      	mov	r4, r3
						+ wall_cntrol_gain.Kd * (float) (-2 * SEN_R.diff_1ms);
 800b206:	4b52      	ldr	r3, [pc, #328]	; (800b350 <wall_control+0x2e8>)
 800b208:	ed93 7a02 	vldr	s14, [r3, #8]
 800b20c:	4b46      	ldr	r3, [pc, #280]	; (800b328 <wall_control+0x2c0>)
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	4613      	mov	r3, r2
 800b212:	07db      	lsls	r3, r3, #31
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b224:	ee17 0a90 	vmov	r0, s15
 800b228:	f7f5 f9b6 	bl	8000598 <__aeabi_f2d>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f852 	bl	80002dc <__adddf3>
 800b238:	4603      	mov	r3, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	4618      	mov	r0, r3
 800b23e:	4621      	mov	r1, r4
 800b240:	f7f5 fcda 	bl	8000bf8 <__aeabi_d2f>
 800b244:	4602      	mov	r2, r0
				wallcontrol_value = -2.0 * wall_cntrol_gain.Kp
 800b246:	4b43      	ldr	r3, [pc, #268]	; (800b354 <wall_control+0x2ec>)
 800b248:	601a      	str	r2, [r3, #0]
				set_led(4);
 800b24a:	2004      	movs	r0, #4
 800b24c:	f7fe fd9e 	bl	8009d8c <set_led>
 800b250:	e065      	b.n	800b31e <wall_control+0x2b6>
			} else if (SEN_L.now > SEN_L.threshold
 800b252:	4b33      	ldr	r3, [pc, #204]	; (800b320 <wall_control+0x2b8>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4b32      	ldr	r3, [pc, #200]	; (800b320 <wall_control+0x2b8>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	dd54      	ble.n	800b308 <wall_control+0x2a0>
					&& SEN_R.now < SEN_R.threshold) {
 800b25e:	4b32      	ldr	r3, [pc, #200]	; (800b328 <wall_control+0x2c0>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	4b31      	ldr	r3, [pc, #196]	; (800b328 <wall_control+0x2c0>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	429a      	cmp	r2, r3
 800b268:	da4e      	bge.n	800b308 <wall_control+0x2a0>
				test_R2 = 5;
 800b26a:	4b35      	ldr	r3, [pc, #212]	; (800b340 <wall_control+0x2d8>)
 800b26c:	4a3a      	ldr	r2, [pc, #232]	; (800b358 <wall_control+0x2f0>)
 800b26e:	601a      	str	r2, [r3, #0]
				wallcontrol_value = 2.0 * wall_cntrol_gain.Kp
 800b270:	4b37      	ldr	r3, [pc, #220]	; (800b350 <wall_control+0x2e8>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f7f5 f98f 	bl	8000598 <__aeabi_f2d>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	f7f5 f82d 	bl	80002dc <__adddf3>
 800b282:	4603      	mov	r3, r0
 800b284:	460c      	mov	r4, r1
 800b286:	4625      	mov	r5, r4
 800b288:	461c      	mov	r4, r3
						* ((float) SEN_L.now - (float) SEN_L.reference)
 800b28a:	4b25      	ldr	r3, [pc, #148]	; (800b320 <wall_control+0x2b8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b296:	4b22      	ldr	r3, [pc, #136]	; (800b320 <wall_control+0x2b8>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2a6:	ee17 0a90 	vmov	r0, s15
 800b2aa:	f7f5 f975 	bl	8000598 <__aeabi_f2d>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	f7f5 f9c7 	bl	8000648 <__aeabi_dmul>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	4625      	mov	r5, r4
 800b2c0:	461c      	mov	r4, r3
						+ wall_cntrol_gain.Kd * (float) (2 * SEN_L.diff_1ms);
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <wall_control+0x2e8>)
 800b2c4:	ed93 7a02 	vldr	s14, [r3, #8]
 800b2c8:	4b15      	ldr	r3, [pc, #84]	; (800b320 <wall_control+0x2b8>)
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2da:	ee17 0a90 	vmov	r0, s15
 800b2de:	f7f5 f95b 	bl	8000598 <__aeabi_f2d>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f4 fff7 	bl	80002dc <__adddf3>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	f7f5 fc7f 	bl	8000bf8 <__aeabi_d2f>
 800b2fa:	4602      	mov	r2, r0
				wallcontrol_value = 2.0 * wall_cntrol_gain.Kp
 800b2fc:	4b15      	ldr	r3, [pc, #84]	; (800b354 <wall_control+0x2ec>)
 800b2fe:	601a      	str	r2, [r3, #0]
				set_led(1);
 800b300:	2001      	movs	r0, #1
 800b302:	f7fe fd43 	bl	8009d8c <set_led>
 800b306:	e00a      	b.n	800b31e <wall_control+0x2b6>
			} else {
				test_R2 = 6;
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <wall_control+0x2d8>)
 800b30a:	4a14      	ldr	r2, [pc, #80]	; (800b35c <wall_control+0x2f4>)
 800b30c:	601a      	str	r2, [r3, #0]
				wallcontrol_value = 0.0;
 800b30e:	4b11      	ldr	r3, [pc, #68]	; (800b354 <wall_control+0x2ec>)
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
				set_led(2);
 800b316:	2002      	movs	r0, #2
 800b318:	f7fe fd38 	bl	8009d8c <set_led>
		if (((ideal_translation.vel) > 100.0) && (SEN_L.diff < 15 )
 800b31c:	e110      	b.n	800b540 <wall_control+0x4d8>
 800b31e:	e10f      	b.n	800b540 <wall_control+0x4d8>
 800b320:	20031bf0 	.word	0x20031bf0
 800b324:	2001945c 	.word	0x2001945c
 800b328:	20019428 	.word	0x20019428
 800b32c:	20019454 	.word	0x20019454
 800b330:	20031b94 	.word	0x20031b94
 800b334:	20031bc4 	.word	0x20031bc4
 800b338:	2000069d 	.word	0x2000069d
 800b33c:	2000069c 	.word	0x2000069c
 800b340:	20031c3c 	.word	0x20031c3c
 800b344:	2001941c 	.word	0x2001941c
 800b348:	42c80000 	.word	0x42c80000
 800b34c:	40400000 	.word	0x40400000
 800b350:	20031c18 	.word	0x20031c18
 800b354:	2000067c 	.word	0x2000067c
 800b358:	40a00000 	.word	0x40a00000
 800b35c:	40c00000 	.word	0x40c00000
//			}
//		} else {
//			wallcontrol_value = 0.0;
//
//		}
	} else if ((wall_control_flag == 1) && (wall_control_oblique_flag >= 1)) {
 800b360:	4b7b      	ldr	r3, [pc, #492]	; (800b550 <wall_control+0x4e8>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b01      	cmp	r3, #1
 800b366:	f040 80e0 	bne.w	800b52a <wall_control+0x4c2>
 800b36a:	4b7a      	ldr	r3, [pc, #488]	; (800b554 <wall_control+0x4ec>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 80db 	beq.w	800b52a <wall_control+0x4c2>
		test_R2 = 7;
 800b374:	4b78      	ldr	r3, [pc, #480]	; (800b558 <wall_control+0x4f0>)
 800b376:	4a79      	ldr	r2, [pc, #484]	; (800b55c <wall_control+0x4f4>)
 800b378:	601a      	str	r2, [r3, #0]
		wallcontrol_value = 0.0; //ここに斜め壁制御を書く
 800b37a:	4b79      	ldr	r3, [pc, #484]	; (800b560 <wall_control+0x4f8>)
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	601a      	str	r2, [r3, #0]
		if (wall_control_oblique_flag == 1 || wall_control_oblique_flag == 2) {
 800b382:	4b74      	ldr	r3, [pc, #464]	; (800b554 <wall_control+0x4ec>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d003      	beq.n	800b392 <wall_control+0x32a>
 800b38a:	4b72      	ldr	r3, [pc, #456]	; (800b554 <wall_control+0x4ec>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d149      	bne.n	800b426 <wall_control+0x3be>
			test_R2 = 8;
 800b392:	4b71      	ldr	r3, [pc, #452]	; (800b558 <wall_control+0x4f0>)
 800b394:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800b398:	601a      	str	r2, [r3, #0]
			if (SEN_L.now > SEN_L.oblique_threshold && SEN_L.diff_1ms < 180) {
 800b39a:	4b72      	ldr	r3, [pc, #456]	; (800b564 <wall_control+0x4fc>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b71      	ldr	r3, [pc, #452]	; (800b564 <wall_control+0x4fc>)
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	dd1c      	ble.n	800b3e0 <wall_control+0x378>
 800b3a6:	4b6f      	ldr	r3, [pc, #444]	; (800b564 <wall_control+0x4fc>)
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2bb3      	cmp	r3, #179	; 0xb3
 800b3ac:	dc18      	bgt.n	800b3e0 <wall_control+0x378>
				test_R2 = 9;
 800b3ae:	4b6a      	ldr	r3, [pc, #424]	; (800b558 <wall_control+0x4f0>)
 800b3b0:	4a6d      	ldr	r2, [pc, #436]	; (800b568 <wall_control+0x500>)
 800b3b2:	601a      	str	r2, [r3, #0]
				wallcontrol_value += (float) oblique_Side_gain
						* (float) (SEN_L.now - SEN_L.oblique_reference);
 800b3b4:	4b6b      	ldr	r3, [pc, #428]	; (800b564 <wall_control+0x4fc>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	4b6a      	ldr	r3, [pc, #424]	; (800b564 <wall_control+0x4fc>)
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3c6:	4b69      	ldr	r3, [pc, #420]	; (800b56c <wall_control+0x504>)
 800b3c8:	edd3 7a00 	vldr	s15, [r3]
 800b3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
				wallcontrol_value += (float) oblique_Side_gain
 800b3d0:	4b63      	ldr	r3, [pc, #396]	; (800b560 <wall_control+0x4f8>)
 800b3d2:	edd3 7a00 	vldr	s15, [r3]
 800b3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3da:	4b61      	ldr	r3, [pc, #388]	; (800b560 <wall_control+0x4f8>)
 800b3dc:	edc3 7a00 	vstr	s15, [r3]
			}
			if (SEN_LF.now > SEN_LF.oblique_threshold && SEN_LF.diff < 20) {
 800b3e0:	4b63      	ldr	r3, [pc, #396]	; (800b570 <wall_control+0x508>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	4b62      	ldr	r3, [pc, #392]	; (800b570 <wall_control+0x508>)
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	dd1c      	ble.n	800b426 <wall_control+0x3be>
 800b3ec:	4b60      	ldr	r3, [pc, #384]	; (800b570 <wall_control+0x508>)
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b13      	cmp	r3, #19
 800b3f2:	dc18      	bgt.n	800b426 <wall_control+0x3be>
				test_R2 = 10;
 800b3f4:	4b58      	ldr	r3, [pc, #352]	; (800b558 <wall_control+0x4f0>)
 800b3f6:	4a5f      	ldr	r2, [pc, #380]	; (800b574 <wall_control+0x50c>)
 800b3f8:	601a      	str	r2, [r3, #0]
				wallcontrol_value += (float) oblique_Front_gain
						* (float) (SEN_LF.now - SEN_LF.oblique_reference);
 800b3fa:	4b5d      	ldr	r3, [pc, #372]	; (800b570 <wall_control+0x508>)
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4b5c      	ldr	r3, [pc, #368]	; (800b570 <wall_control+0x508>)
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	ee07 3a90 	vmov	s15, r3
 800b408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b40c:	4b5a      	ldr	r3, [pc, #360]	; (800b578 <wall_control+0x510>)
 800b40e:	edd3 7a00 	vldr	s15, [r3]
 800b412:	ee27 7a27 	vmul.f32	s14, s14, s15
				wallcontrol_value += (float) oblique_Front_gain
 800b416:	4b52      	ldr	r3, [pc, #328]	; (800b560 <wall_control+0x4f8>)
 800b418:	edd3 7a00 	vldr	s15, [r3]
 800b41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b420:	4b4f      	ldr	r3, [pc, #316]	; (800b560 <wall_control+0x4f8>)
 800b422:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if (wall_control_oblique_flag == 1 || wall_control_oblique_flag == 3) {
 800b426:	4b4b      	ldr	r3, [pc, #300]	; (800b554 <wall_control+0x4ec>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d003      	beq.n	800b436 <wall_control+0x3ce>
 800b42e:	4b49      	ldr	r3, [pc, #292]	; (800b554 <wall_control+0x4ec>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	2b03      	cmp	r3, #3
 800b434:	d15e      	bne.n	800b4f4 <wall_control+0x48c>
			test_R2 = 11;
 800b436:	4b48      	ldr	r3, [pc, #288]	; (800b558 <wall_control+0x4f0>)
 800b438:	4a50      	ldr	r2, [pc, #320]	; (800b57c <wall_control+0x514>)
 800b43a:	601a      	str	r2, [r3, #0]
			if (SEN_R.now > SEN_R.oblique_threshold && SEN_R.diff_1ms < 180) {
 800b43c:	4b50      	ldr	r3, [pc, #320]	; (800b580 <wall_control+0x518>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	4b4f      	ldr	r3, [pc, #316]	; (800b580 <wall_control+0x518>)
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	429a      	cmp	r2, r3
 800b446:	dd32      	ble.n	800b4ae <wall_control+0x446>
 800b448:	4b4d      	ldr	r3, [pc, #308]	; (800b580 <wall_control+0x518>)
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	2bb3      	cmp	r3, #179	; 0xb3
 800b44e:	dc2e      	bgt.n	800b4ae <wall_control+0x446>
				test_R2 = 12;
 800b450:	4b41      	ldr	r3, [pc, #260]	; (800b558 <wall_control+0x4f0>)
 800b452:	4a4c      	ldr	r2, [pc, #304]	; (800b584 <wall_control+0x51c>)
 800b454:	601a      	str	r2, [r3, #0]
				wallcontrol_value -= (float) oblique_Side_gain
 800b456:	4b42      	ldr	r3, [pc, #264]	; (800b560 <wall_control+0x4f8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f5 f89c 	bl	8000598 <__aeabi_f2d>
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
						* (float) (SEN_R.now - SEN_R.oblique_reference) * 2.0;
 800b464:	4b46      	ldr	r3, [pc, #280]	; (800b580 <wall_control+0x518>)
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	4b45      	ldr	r3, [pc, #276]	; (800b580 <wall_control+0x518>)
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	ee07 3a90 	vmov	s15, r3
 800b472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b476:	4b3d      	ldr	r3, [pc, #244]	; (800b56c <wall_control+0x504>)
 800b478:	edd3 7a00 	vldr	s15, [r3]
 800b47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b480:	ee17 0a90 	vmov	r0, s15
 800b484:	f7f5 f888 	bl	8000598 <__aeabi_f2d>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	f7f4 ff26 	bl	80002dc <__adddf3>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
				wallcontrol_value -= (float) oblique_Side_gain
 800b494:	4620      	mov	r0, r4
 800b496:	4629      	mov	r1, r5
 800b498:	f7f4 ff1e 	bl	80002d8 <__aeabi_dsub>
 800b49c:	4603      	mov	r3, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	f7f5 fba8 	bl	8000bf8 <__aeabi_d2f>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	4b2d      	ldr	r3, [pc, #180]	; (800b560 <wall_control+0x4f8>)
 800b4ac:	601a      	str	r2, [r3, #0]

			}
			if (SEN_RF.now > SEN_RF.oblique_threshold && SEN_RF.diff < 30) {
 800b4ae:	4b36      	ldr	r3, [pc, #216]	; (800b588 <wall_control+0x520>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b35      	ldr	r3, [pc, #212]	; (800b588 <wall_control+0x520>)
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	dd1c      	ble.n	800b4f4 <wall_control+0x48c>
 800b4ba:	4b33      	ldr	r3, [pc, #204]	; (800b588 <wall_control+0x520>)
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2b1d      	cmp	r3, #29
 800b4c0:	dc18      	bgt.n	800b4f4 <wall_control+0x48c>
				test_R2 = 13;
 800b4c2:	4b25      	ldr	r3, [pc, #148]	; (800b558 <wall_control+0x4f0>)
 800b4c4:	4a31      	ldr	r2, [pc, #196]	; (800b58c <wall_control+0x524>)
 800b4c6:	601a      	str	r2, [r3, #0]
				wallcontrol_value -= (float) oblique_Front_gain
 800b4c8:	4b25      	ldr	r3, [pc, #148]	; (800b560 <wall_control+0x4f8>)
 800b4ca:	ed93 7a00 	vldr	s14, [r3]
						* (float) (SEN_RF.now - SEN_RF.oblique_reference);
 800b4ce:	4b2e      	ldr	r3, [pc, #184]	; (800b588 <wall_control+0x520>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b2d      	ldr	r3, [pc, #180]	; (800b588 <wall_control+0x520>)
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b4e0:	4b25      	ldr	r3, [pc, #148]	; (800b578 <wall_control+0x510>)
 800b4e2:	edd3 7a00 	vldr	s15, [r3]
 800b4e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				wallcontrol_value -= (float) oblique_Front_gain
 800b4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ee:	4b1c      	ldr	r3, [pc, #112]	; (800b560 <wall_control+0x4f8>)
 800b4f0:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if (wallcontrol_value > 300.0) {
 800b4f4:	4b1a      	ldr	r3, [pc, #104]	; (800b560 <wall_control+0x4f8>)
 800b4f6:	edd3 7a00 	vldr	s15, [r3]
 800b4fa:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800b590 <wall_control+0x528>
 800b4fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b506:	dd02      	ble.n	800b50e <wall_control+0x4a6>
			wallcontrol_value = 300.0;
 800b508:	4b15      	ldr	r3, [pc, #84]	; (800b560 <wall_control+0x4f8>)
 800b50a:	4a22      	ldr	r2, [pc, #136]	; (800b594 <wall_control+0x52c>)
 800b50c:	601a      	str	r2, [r3, #0]
		}
		if (wallcontrol_value < -300.0) {
 800b50e:	4b14      	ldr	r3, [pc, #80]	; (800b560 <wall_control+0x4f8>)
 800b510:	edd3 7a00 	vldr	s15, [r3]
 800b514:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b598 <wall_control+0x530>
 800b518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b520:	d50f      	bpl.n	800b542 <wall_control+0x4da>
			wallcontrol_value = -300.0;
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <wall_control+0x4f8>)
 800b524:	4a1d      	ldr	r2, [pc, #116]	; (800b59c <wall_control+0x534>)
 800b526:	601a      	str	r2, [r3, #0]
		if (wallcontrol_value < -300.0) {
 800b528:	e00b      	b.n	800b542 <wall_control+0x4da>
		}

	} else {
		test_R2 = 33;
 800b52a:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <wall_control+0x4f0>)
 800b52c:	4a1c      	ldr	r2, [pc, #112]	; (800b5a0 <wall_control+0x538>)
 800b52e:	601a      	str	r2, [r3, #0]
		wallcontrol_value = 0.0;
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <wall_control+0x4f8>)
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
		set_led(7);
 800b538:	2007      	movs	r0, #7
 800b53a:	f7fe fc27 	bl	8009d8c <set_led>
 800b53e:	e000      	b.n	800b542 <wall_control+0x4da>
		if (((ideal_translation.vel) > 100.0) && (SEN_L.diff < 15 )
 800b540:	bf00      	nop
	}
	test_float = wallcontrol_value;
 800b542:	4b07      	ldr	r3, [pc, #28]	; (800b560 <wall_control+0x4f8>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a17      	ldr	r2, [pc, #92]	; (800b5a4 <wall_control+0x53c>)
 800b548:	6013      	str	r3, [r2, #0]

}
 800b54a:	bf00      	nop
 800b54c:	bdb0      	pop	{r4, r5, r7, pc}
 800b54e:	bf00      	nop
 800b550:	2000069d 	.word	0x2000069d
 800b554:	2000069c 	.word	0x2000069c
 800b558:	20031c3c 	.word	0x20031c3c
 800b55c:	40e00000 	.word	0x40e00000
 800b560:	2000067c 	.word	0x2000067c
 800b564:	20031bf0 	.word	0x20031bf0
 800b568:	41100000 	.word	0x41100000
 800b56c:	20000064 	.word	0x20000064
 800b570:	20031bd0 	.word	0x20031bd0
 800b574:	41200000 	.word	0x41200000
 800b578:	20000060 	.word	0x20000060
 800b57c:	41300000 	.word	0x41300000
 800b580:	20019428 	.word	0x20019428
 800b584:	41400000 	.word	0x41400000
 800b588:	20019460 	.word	0x20019460
 800b58c:	41500000 	.word	0x41500000
 800b590:	43960000 	.word	0x43960000
 800b594:	43960000 	.word	0x43960000
 800b598:	c3960000 	.word	0xc3960000
 800b59c:	c3960000 	.word	0xc3960000
 800b5a0:	42040000 	.word	0x42040000
 800b5a4:	20031c58 	.word	0x20031c58

0800b5a8 <coordinate>:

void coordinate(void) {
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
	if (direction == North) {
 800b5ac:	4b17      	ldr	r3, [pc, #92]	; (800b60c <coordinate+0x64>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d106      	bne.n	800b5c2 <coordinate+0x1a>
		y.now++;
 800b5b4:	4b16      	ldr	r3, [pc, #88]	; (800b610 <coordinate+0x68>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	4b14      	ldr	r3, [pc, #80]	; (800b610 <coordinate+0x68>)
 800b5be:	701a      	strb	r2, [r3, #0]
	} else if (direction == South) {
		y.now--;
	} else if (direction == East) {
		x.now++;
	}
}
 800b5c0:	e01f      	b.n	800b602 <coordinate+0x5a>
	} else if (direction == West) {
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <coordinate+0x64>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d106      	bne.n	800b5d8 <coordinate+0x30>
		x.now--;
 800b5ca:	4b12      	ldr	r3, [pc, #72]	; (800b614 <coordinate+0x6c>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <coordinate+0x6c>)
 800b5d4:	701a      	strb	r2, [r3, #0]
}
 800b5d6:	e014      	b.n	800b602 <coordinate+0x5a>
	} else if (direction == South) {
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <coordinate+0x64>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d106      	bne.n	800b5ee <coordinate+0x46>
		y.now--;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <coordinate+0x68>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	4b09      	ldr	r3, [pc, #36]	; (800b610 <coordinate+0x68>)
 800b5ea:	701a      	strb	r2, [r3, #0]
}
 800b5ec:	e009      	b.n	800b602 <coordinate+0x5a>
	} else if (direction == East) {
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <coordinate+0x64>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d105      	bne.n	800b602 <coordinate+0x5a>
		x.now++;
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <coordinate+0x6c>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <coordinate+0x6c>)
 800b600:	701a      	strb	r2, [r3, #0]
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20000668 	.word	0x20000668
 800b610:	200194e4 	.word	0x200194e4
 800b614:	20000a90 	.word	0x20000a90

0800b618 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800b61c:	4b17      	ldr	r3, [pc, #92]	; (800b67c <MX_SPI2_Init+0x64>)
 800b61e:	4a18      	ldr	r2, [pc, #96]	; (800b680 <MX_SPI2_Init+0x68>)
 800b620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b622:	4b16      	ldr	r3, [pc, #88]	; (800b67c <MX_SPI2_Init+0x64>)
 800b624:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b62a:	4b14      	ldr	r3, [pc, #80]	; (800b67c <MX_SPI2_Init+0x64>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b630:	4b12      	ldr	r3, [pc, #72]	; (800b67c <MX_SPI2_Init+0x64>)
 800b632:	2200      	movs	r2, #0
 800b634:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b636:	4b11      	ldr	r3, [pc, #68]	; (800b67c <MX_SPI2_Init+0x64>)
 800b638:	2202      	movs	r2, #2
 800b63a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b63c:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <MX_SPI2_Init+0x64>)
 800b63e:	2201      	movs	r2, #1
 800b640:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b642:	4b0e      	ldr	r3, [pc, #56]	; (800b67c <MX_SPI2_Init+0x64>)
 800b644:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b648:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b64a:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <MX_SPI2_Init+0x64>)
 800b64c:	2218      	movs	r2, #24
 800b64e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <MX_SPI2_Init+0x64>)
 800b652:	2200      	movs	r2, #0
 800b654:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b656:	4b09      	ldr	r3, [pc, #36]	; (800b67c <MX_SPI2_Init+0x64>)
 800b658:	2200      	movs	r2, #0
 800b65a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <MX_SPI2_Init+0x64>)
 800b65e:	2200      	movs	r2, #0
 800b660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800b662:	4b06      	ldr	r3, [pc, #24]	; (800b67c <MX_SPI2_Init+0x64>)
 800b664:	220a      	movs	r2, #10
 800b666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b668:	4804      	ldr	r0, [pc, #16]	; (800b67c <MX_SPI2_Init+0x64>)
 800b66a:	f7f7 fe49 	bl	8003300 <HAL_SPI_Init>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800b674:	f7fd f91e 	bl	80088b4 <Error_Handler>
  }

}
 800b678:	bf00      	nop
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20000820 	.word	0x20000820
 800b680:	40003800 	.word	0x40003800

0800b684 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800b688:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b68a:	4a19      	ldr	r2, [pc, #100]	; (800b6f0 <MX_SPI3_Init+0x6c>)
 800b68c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800b68e:	4b17      	ldr	r3, [pc, #92]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b690:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b694:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800b696:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b698:	2200      	movs	r2, #0
 800b69a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800b69c:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b69e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b6a4:	4b11      	ldr	r3, [pc, #68]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b6aa:	4b10      	ldr	r3, [pc, #64]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6ba:	2218      	movs	r2, #24
 800b6bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800b6c4:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800b6d0:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6d2:	220a      	movs	r2, #10
 800b6d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800b6d6:	4805      	ldr	r0, [pc, #20]	; (800b6ec <MX_SPI3_Init+0x68>)
 800b6d8:	f7f7 fe12 	bl	8003300 <HAL_SPI_Init>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800b6e2:	f7fd f8e7 	bl	80088b4 <Error_Handler>
  }

}
 800b6e6:	bf00      	nop
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000878 	.word	0x20000878
 800b6f0:	40003c00 	.word	0x40003c00

0800b6f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	; 0x30
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6fc:	f107 031c 	add.w	r3, r7, #28
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	605a      	str	r2, [r3, #4]
 800b706:	609a      	str	r2, [r3, #8]
 800b708:	60da      	str	r2, [r3, #12]
 800b70a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a3b      	ldr	r2, [pc, #236]	; (800b800 <HAL_SPI_MspInit+0x10c>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d12d      	bne.n	800b772 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b716:	2300      	movs	r3, #0
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	4b3a      	ldr	r3, [pc, #232]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	4a39      	ldr	r2, [pc, #228]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b724:	6413      	str	r3, [r2, #64]	; 0x40
 800b726:	4b37      	ldr	r3, [pc, #220]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b72e:	61bb      	str	r3, [r7, #24]
 800b730:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	4b33      	ldr	r3, [pc, #204]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73a:	4a32      	ldr	r2, [pc, #200]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b73c:	f043 0302 	orr.w	r3, r3, #2
 800b740:	6313      	str	r3, [r2, #48]	; 0x30
 800b742:	4b30      	ldr	r3, [pc, #192]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 800b74e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800b752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b754:	2302      	movs	r3, #2
 800b756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b758:	2300      	movs	r3, #0
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b75c:	2303      	movs	r3, #3
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b760:	2305      	movs	r3, #5
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b764:	f107 031c 	add.w	r3, r7, #28
 800b768:	4619      	mov	r1, r3
 800b76a:	4827      	ldr	r0, [pc, #156]	; (800b808 <HAL_SPI_MspInit+0x114>)
 800b76c:	f7f6 fff0 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800b770:	e041      	b.n	800b7f6 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a25      	ldr	r2, [pc, #148]	; (800b80c <HAL_SPI_MspInit+0x118>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d13c      	bne.n	800b7f6 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
 800b780:	4b20      	ldr	r3, [pc, #128]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	4a1f      	ldr	r2, [pc, #124]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b78a:	6413      	str	r3, [r2, #64]	; 0x40
 800b78c:	4b1d      	ldr	r3, [pc, #116]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b794:	613b      	str	r3, [r7, #16]
 800b796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	4b19      	ldr	r3, [pc, #100]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	4a18      	ldr	r2, [pc, #96]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b7a2:	f043 0302 	orr.w	r3, r3, #2
 800b7a6:	6313      	str	r3, [r2, #48]	; 0x30
 800b7a8:	4b16      	ldr	r3, [pc, #88]	; (800b804 <HAL_SPI_MspInit+0x110>)
 800b7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 800b7b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800b7c6:	2307      	movs	r3, #7
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 800b7ca:	f107 031c 	add.w	r3, r7, #28
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	480d      	ldr	r0, [pc, #52]	; (800b808 <HAL_SPI_MspInit+0x114>)
 800b7d2:	f7f6 ffbd 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 800b7d6:	2330      	movs	r3, #48	; 0x30
 800b7d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b7e6:	2306      	movs	r3, #6
 800b7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7ea:	f107 031c 	add.w	r3, r7, #28
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4805      	ldr	r0, [pc, #20]	; (800b808 <HAL_SPI_MspInit+0x114>)
 800b7f2:	f7f6 ffad 	bl	8002750 <HAL_GPIO_Init>
}
 800b7f6:	bf00      	nop
 800b7f8:	3730      	adds	r7, #48	; 0x30
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	40003800 	.word	0x40003800
 800b804:	40023800 	.word	0x40023800
 800b808:	40020400 	.word	0x40020400
 800b80c:	40003c00 	.word	0x40003c00

0800b810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b816:	2300      	movs	r3, #0
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	4b10      	ldr	r3, [pc, #64]	; (800b85c <HAL_MspInit+0x4c>)
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	4a0f      	ldr	r2, [pc, #60]	; (800b85c <HAL_MspInit+0x4c>)
 800b820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b824:	6453      	str	r3, [r2, #68]	; 0x44
 800b826:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <HAL_MspInit+0x4c>)
 800b828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b82e:	607b      	str	r3, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b832:	2300      	movs	r3, #0
 800b834:	603b      	str	r3, [r7, #0]
 800b836:	4b09      	ldr	r3, [pc, #36]	; (800b85c <HAL_MspInit+0x4c>)
 800b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83a:	4a08      	ldr	r2, [pc, #32]	; (800b85c <HAL_MspInit+0x4c>)
 800b83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b840:	6413      	str	r3, [r2, #64]	; 0x40
 800b842:	4b06      	ldr	r3, [pc, #24]	; (800b85c <HAL_MspInit+0x4c>)
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40023800 	.word	0x40023800

0800b860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b864:	bf00      	nop
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b86e:	b480      	push	{r7}
 800b870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b872:	e7fe      	b.n	800b872 <HardFault_Handler+0x4>

0800b874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b878:	e7fe      	b.n	800b878 <MemManage_Handler+0x4>

0800b87a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b87a:	b480      	push	{r7}
 800b87c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b87e:	e7fe      	b.n	800b87e <BusFault_Handler+0x4>

0800b880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b884:	e7fe      	b.n	800b884 <UsageFault_Handler+0x4>

0800b886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b886:	b480      	push	{r7}
 800b888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b88a:	bf00      	nop
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b898:	bf00      	nop
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b8a6:	bf00      	nop
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b8b4:	f7f5 fbc2 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b8b8:	bf00      	nop
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b8c0:	4803      	ldr	r0, [pc, #12]	; (800b8d0 <TIM6_DAC_IRQHandler+0x14>)
 800b8c2:	f7f8 f8df 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_1ms();
 800b8c6:	f7fc f9cf 	bl	8007c68 <interrupt_1ms>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b8ca:	bf00      	nop
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000910 	.word	0x20000910

0800b8d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b8d8:	4802      	ldr	r0, [pc, #8]	; (800b8e4 <DMA2_Stream0_IRQHandler+0x10>)
 800b8da:	f7f6 f9ed 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b8de:	bf00      	nop
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	200007c0 	.word	0x200007c0

0800b8e8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e00a      	b.n	800b910 <_read+0x28>
		*ptr++ = __io_getchar();
 800b8fa:	f3af 8000 	nop.w
 800b8fe:	4601      	mov	r1, r0
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	60ba      	str	r2, [r7, #8]
 800b906:	b2ca      	uxtb	r2, r1
 800b908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	3301      	adds	r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	dbf0      	blt.n	800b8fa <_read+0x12>
	}

	return len;
 800b918:	687b      	ldr	r3, [r7, #4]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	60f8      	str	r0, [r7, #12]
 800b92a:	60b9      	str	r1, [r7, #8]
 800b92c:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

	(void) file; /* Not used, avoid warning */
	SEGGER_RTT_Write(0, ptr, len);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	461a      	mov	r2, r3
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	2000      	movs	r0, #0
 800b936:	f7f8 fed1 	bl	80046dc <SEGGER_RTT_Write>
	return len;
 800b93a:	687b      	ldr	r3, [r7, #4]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_close>:

int _close(int file) {
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	return -1;
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <_fstat>:

int _fstat(int file, struct stat *st) {
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b96c:	605a      	str	r2, [r3, #4]
	return 0;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <_isatty>:

int _isatty(int file) {
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	return 1;
 800b984:	2301      	movs	r3, #1
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
 800b99a:	60b9      	str	r1, [r7, #8]
 800b99c:	607a      	str	r2, [r7, #4]
	return 0;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b9b4:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <_sbrk+0x50>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <_sbrk+0x16>
		heap_end = &end;
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <_sbrk+0x50>)
 800b9be:	4a10      	ldr	r2, [pc, #64]	; (800ba00 <_sbrk+0x54>)
 800b9c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	; (800b9fc <_sbrk+0x50>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b9c8:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <_sbrk+0x50>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	466a      	mov	r2, sp
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d907      	bls.n	800b9e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b9d6:	f000 fd85 	bl	800c4e4 <__errno>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	230c      	movs	r3, #12
 800b9de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e4:	e006      	b.n	800b9f4 <_sbrk+0x48>
	}

	heap_end += incr;
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <_sbrk+0x50>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	4a03      	ldr	r2, [pc, #12]	; (800b9fc <_sbrk+0x50>)
 800b9f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20000664 	.word	0x20000664
 800ba00:	20031c60 	.word	0x20031c60

0800ba04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ba04:	b480      	push	{r7}
 800ba06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba08:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <SystemInit+0x60>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0e:	4a15      	ldr	r2, [pc, #84]	; (800ba64 <SystemInit+0x60>)
 800ba10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ba18:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <SystemInit+0x64>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a12      	ldr	r2, [pc, #72]	; (800ba68 <SystemInit+0x64>)
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba24:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <SystemInit+0x64>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ba2a:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <SystemInit+0x64>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a0e      	ldr	r2, [pc, #56]	; (800ba68 <SystemInit+0x64>)
 800ba30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ba34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ba3a:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <SystemInit+0x64>)
 800ba3c:	4a0b      	ldr	r2, [pc, #44]	; (800ba6c <SystemInit+0x68>)
 800ba3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <SystemInit+0x64>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <SystemInit+0x64>)
 800ba46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ba4c:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <SystemInit+0x64>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba52:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <SystemInit+0x60>)
 800ba54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba58:	609a      	str	r2, [r3, #8]
#endif
}
 800ba5a:	bf00      	nop
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	e000ed00 	.word	0xe000ed00
 800ba68:	40023800 	.word	0x40023800
 800ba6c:	24003010 	.word	0x24003010

0800ba70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba76:	f107 0320 	add.w	r3, r7, #32
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ba80:	1d3b      	adds	r3, r7, #4
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	605a      	str	r2, [r3, #4]
 800ba88:	609a      	str	r2, [r3, #8]
 800ba8a:	60da      	str	r2, [r3, #12]
 800ba8c:	611a      	str	r2, [r3, #16]
 800ba8e:	615a      	str	r2, [r3, #20]
 800ba90:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800ba92:	4b28      	ldr	r3, [pc, #160]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800ba94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ba98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800ba9a:	4b26      	ldr	r3, [pc, #152]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800baa0:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 800baa6:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800baa8:	f240 321f 	movw	r2, #799	; 0x31f
 800baac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bab6:	2280      	movs	r2, #128	; 0x80
 800bab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800baba:	481e      	ldr	r0, [pc, #120]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800babc:	f7f7 ff21 	bl	8003902 <HAL_TIM_PWM_Init>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800bac6:	f7fc fef5 	bl	80088b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800baca:	2300      	movs	r3, #0
 800bacc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bace:	2300      	movs	r3, #0
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bad2:	f107 0320 	add.w	r3, r7, #32
 800bad6:	4619      	mov	r1, r3
 800bad8:	4816      	ldr	r0, [pc, #88]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bada:	f7f8 fc48 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800bae4:	f7fc fee6 	bl	80088b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bae8:	2360      	movs	r3, #96	; 0x60
 800baea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10-1;
 800baec:	2309      	movs	r3, #9
 800baee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800baf8:	1d3b      	adds	r3, r7, #4
 800bafa:	2200      	movs	r2, #0
 800bafc:	4619      	mov	r1, r3
 800bafe:	480d      	ldr	r0, [pc, #52]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bb00:	f7f8 f8c8 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800bb0a:	f7fc fed3 	bl	80088b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bb0e:	1d3b      	adds	r3, r7, #4
 800bb10:	2204      	movs	r2, #4
 800bb12:	4619      	mov	r1, r3
 800bb14:	4807      	ldr	r0, [pc, #28]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bb16:	f7f8 f8bd 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800bb20:	f7fc fec8 	bl	80088b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800bb24:	4803      	ldr	r0, [pc, #12]	; (800bb34 <MX_TIM2_Init+0xc4>)
 800bb26:	f000 f8f5 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800bb2a:	bf00      	nop
 800bb2c:	3728      	adds	r7, #40	; 0x28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000950 	.word	0x20000950

0800bb38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08a      	sub	sp, #40	; 0x28
 800bb3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb3e:	f107 0320 	add.w	r3, r7, #32
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	605a      	str	r2, [r3, #4]
 800bb50:	609a      	str	r2, [r3, #8]
 800bb52:	60da      	str	r2, [r3, #12]
 800bb54:	611a      	str	r2, [r3, #16]
 800bb56:	615a      	str	r2, [r3, #20]
 800bb58:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800bb5a:	4b22      	ldr	r3, [pc, #136]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb5c:	4a22      	ldr	r2, [pc, #136]	; (800bbe8 <MX_TIM3_Init+0xb0>)
 800bb5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800bb60:	4b20      	ldr	r3, [pc, #128]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb62:	2263      	movs	r2, #99	; 0x63
 800bb64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bb66:	4b1f      	ldr	r3, [pc, #124]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3822-1;
 800bb6c:	4b1d      	ldr	r3, [pc, #116]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb6e:	f640 62ed 	movw	r2, #3821	; 0xeed
 800bb72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb74:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bb7a:	4b1a      	ldr	r3, [pc, #104]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb7c:	2280      	movs	r2, #128	; 0x80
 800bb7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800bb80:	4818      	ldr	r0, [pc, #96]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bb82:	f7f7 febe 	bl	8003902 <HAL_TIM_PWM_Init>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800bb8c:	f7fc fe92 	bl	80088b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bb90:	2300      	movs	r3, #0
 800bb92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bb98:	f107 0320 	add.w	r3, r7, #32
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4811      	ldr	r0, [pc, #68]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bba0:	f7f8 fbe5 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800bbaa:	f7fc fe83 	bl	80088b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bbae:	2360      	movs	r3, #96	; 0x60
 800bbb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1600;
 800bbb2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800bbb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bbc0:	1d3b      	adds	r3, r7, #4
 800bbc2:	2204      	movs	r2, #4
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4807      	ldr	r0, [pc, #28]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bbc8:	f7f8 f864 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800bbd2:	f7fc fe6f 	bl	80088b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800bbd6:	4803      	ldr	r0, [pc, #12]	; (800bbe4 <MX_TIM3_Init+0xac>)
 800bbd8:	f000 f89c 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800bbdc:	bf00      	nop
 800bbde:	3728      	adds	r7, #40	; 0x28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	200008d0 	.word	0x200008d0
 800bbe8:	40000400 	.word	0x40000400

0800bbec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bbf2:	463b      	mov	r3, r7
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800bbfa:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bbfc:	4a15      	ldr	r2, [pc, #84]	; (800bc54 <MX_TIM6_Init+0x68>)
 800bbfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800bc00:	4b13      	ldr	r3, [pc, #76]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc02:	2263      	movs	r2, #99	; 0x63
 800bc04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc06:	4b12      	ldr	r3, [pc, #72]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800bc0c:	4b10      	ldr	r3, [pc, #64]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bc12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bc14:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc16:	2280      	movs	r2, #128	; 0x80
 800bc18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800bc1a:	480d      	ldr	r0, [pc, #52]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc1c:	f7f7 fe22 	bl	8003864 <HAL_TIM_Base_Init>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800bc26:	f7fc fe45 	bl	80088b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800bc32:	463b      	mov	r3, r7
 800bc34:	4619      	mov	r1, r3
 800bc36:	4806      	ldr	r0, [pc, #24]	; (800bc50 <MX_TIM6_Init+0x64>)
 800bc38:	f7f8 fb99 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800bc42:	f7fc fe37 	bl	80088b4 <Error_Handler>
  }

}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000910 	.word	0x20000910
 800bc54:	40001000 	.word	0x40001000

0800bc58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc68:	d10e      	bne.n	800bc88 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	4a12      	ldr	r2, [pc, #72]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bc74:	f043 0301 	orr.w	r3, r3, #1
 800bc78:	6413      	str	r3, [r2, #64]	; 0x40
 800bc7a:	4b10      	ldr	r3, [pc, #64]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800bc86:	e012      	b.n	800bcae <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a0c      	ldr	r2, [pc, #48]	; (800bcc0 <HAL_TIM_PWM_MspInit+0x68>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d10d      	bne.n	800bcae <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bc9c:	f043 0302 	orr.w	r3, r3, #2
 800bca0:	6413      	str	r3, [r2, #64]	; 0x40
 800bca2:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <HAL_TIM_PWM_MspInit+0x64>)
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	68bb      	ldr	r3, [r7, #8]
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	40000400 	.word	0x40000400

0800bcc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a0e      	ldr	r2, [pc, #56]	; (800bd0c <HAL_TIM_Base_MspInit+0x48>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d115      	bne.n	800bd02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <HAL_TIM_Base_MspInit+0x4c>)
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <HAL_TIM_Base_MspInit+0x4c>)
 800bce0:	f043 0310 	orr.w	r3, r3, #16
 800bce4:	6413      	str	r3, [r2, #64]	; 0x40
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <HAL_TIM_Base_MspInit+0x4c>)
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	f003 0310 	and.w	r3, r3, #16
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2036      	movs	r0, #54	; 0x36
 800bcf8:	f7f5 fe99 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bcfc:	2036      	movs	r0, #54	; 0x36
 800bcfe:	f7f5 feb2 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	40001000 	.word	0x40001000
 800bd10:	40023800 	.word	0x40023800

0800bd14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08a      	sub	sp, #40	; 0x28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd1c:	f107 0314 	add.w	r3, r7, #20
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	605a      	str	r2, [r3, #4]
 800bd26:	609a      	str	r2, [r3, #8]
 800bd28:	60da      	str	r2, [r3, #12]
 800bd2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd34:	d13d      	bne.n	800bdb2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3e:	4a30      	ldr	r2, [pc, #192]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd40:	f043 0301 	orr.w	r3, r3, #1
 800bd44:	6313      	str	r3, [r2, #48]	; 0x30
 800bd46:	4b2e      	ldr	r3, [pc, #184]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	4b2a      	ldr	r3, [pc, #168]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5a:	4a29      	ldr	r2, [pc, #164]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd5c:	f043 0302 	orr.w	r3, r3, #2
 800bd60:	6313      	str	r3, [r2, #48]	; 0x30
 800bd62:	4b27      	ldr	r3, [pc, #156]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd66:	f003 0302 	and.w	r3, r3, #2
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 800bd6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd74:	2302      	movs	r3, #2
 800bd76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bd80:	2301      	movs	r3, #1
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 800bd84:	f107 0314 	add.w	r3, r7, #20
 800bd88:	4619      	mov	r1, r3
 800bd8a:	481e      	ldr	r0, [pc, #120]	; (800be04 <HAL_TIM_MspPostInit+0xf0>)
 800bd8c:	f7f6 fce0 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 800bd90:	2308      	movs	r3, #8
 800bd92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd94:	2302      	movs	r3, #2
 800bd96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bda0:	2301      	movs	r3, #1
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 800bda4:	f107 0314 	add.w	r3, r7, #20
 800bda8:	4619      	mov	r1, r3
 800bdaa:	4817      	ldr	r0, [pc, #92]	; (800be08 <HAL_TIM_MspPostInit+0xf4>)
 800bdac:	f7f6 fcd0 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800bdb0:	e022      	b.n	800bdf8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a15      	ldr	r2, [pc, #84]	; (800be0c <HAL_TIM_MspPostInit+0xf8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d11d      	bne.n	800bdf8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60bb      	str	r3, [r7, #8]
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc4:	4a0e      	ldr	r2, [pc, #56]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bdc6:	f043 0301 	orr.w	r3, r3, #1
 800bdca:	6313      	str	r3, [r2, #48]	; 0x30
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <HAL_TIM_MspPostInit+0xec>)
 800bdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	60bb      	str	r3, [r7, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 800bdd8:	2380      	movs	r3, #128	; 0x80
 800bdda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bddc:	2302      	movs	r3, #2
 800bdde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde4:	2300      	movs	r3, #0
 800bde6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bde8:	2302      	movs	r3, #2
 800bdea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 800bdec:	f107 0314 	add.w	r3, r7, #20
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4804      	ldr	r0, [pc, #16]	; (800be04 <HAL_TIM_MspPostInit+0xf0>)
 800bdf4:	f7f6 fcac 	bl	8002750 <HAL_GPIO_Init>
}
 800bdf8:	bf00      	nop
 800bdfa:	3728      	adds	r7, #40	; 0x28
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	40023800 	.word	0x40023800
 800be04:	40020000 	.word	0x40020000
 800be08:	40020400 	.word	0x40020400
 800be0c:	40000400 	.word	0x40000400

0800be10 <add_West_wall>:
#include "stdio.h"
#include "variable.h"
#include "walldata.h"
#include "main.h"

void add_West_wall(singlewalldata_t *walldate) {
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800be18:	2301      	movs	r3, #1
 800be1a:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800be1c:	89fb      	ldrh	r3, [r7, #14]
 800be1e:	4a0f      	ldr	r2, [pc, #60]	; (800be5c <add_West_wall+0x4c>)
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	4093      	lsls	r3, r2
 800be24:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now] |= new;
 800be26:	4b0e      	ldr	r3, [pc, #56]	; (800be60 <add_West_wall+0x50>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	3310      	adds	r3, #16
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	4413      	add	r3, r2
 800be32:	885a      	ldrh	r2, [r3, #2]
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <add_West_wall+0x50>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	89fb      	ldrh	r3, [r7, #14]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	b299      	uxth	r1, r3
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	f100 0310 	add.w	r3, r0, #16
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	4413      	add	r3, r2
 800be4a:	460a      	mov	r2, r1
 800be4c:	805a      	strh	r2, [r3, #2]
}
 800be4e:	bf00      	nop
 800be50:	3714      	adds	r7, #20
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	200194e4 	.word	0x200194e4
 800be60:	20000a90 	.word	0x20000a90

0800be64 <add_South_wall>:

void add_South_wall(singlewalldata_t *walldate) {
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800be6c:	2301      	movs	r3, #1
 800be6e:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	4a0c      	ldr	r2, [pc, #48]	; (800bea4 <add_South_wall+0x40>)
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	4093      	lsls	r3, r2
 800be78:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now] |= new;
 800be7a:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <add_South_wall+0x44>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800be86:	4b08      	ldr	r3, [pc, #32]	; (800bea8 <add_South_wall+0x44>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	4619      	mov	r1, r3
 800be8c:	89fb      	ldrh	r3, [r7, #14]
 800be8e:	4313      	orrs	r3, r2
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800be98:	bf00      	nop
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	20000a90 	.word	0x20000a90
 800bea8:	200194e4 	.word	0x200194e4

0800beac <add_East_wall>:

void add_East_wall(singlewalldata_t *walldate) {
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800beb4:	2301      	movs	r3, #1
 800beb6:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800beb8:	89fb      	ldrh	r3, [r7, #14]
 800beba:	4a0f      	ldr	r2, [pc, #60]	; (800bef8 <add_East_wall+0x4c>)
 800bebc:	7812      	ldrb	r2, [r2, #0]
 800bebe:	4093      	lsls	r3, r2
 800bec0:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now + 1] |= new;
 800bec2:	4b0e      	ldr	r3, [pc, #56]	; (800befc <add_East_wall+0x50>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	3301      	adds	r3, #1
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	3310      	adds	r3, #16
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	8859      	ldrh	r1, [r3, #2]
 800bed2:	4b0a      	ldr	r3, [pc, #40]	; (800befc <add_East_wall+0x50>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	3301      	adds	r3, #1
 800bed8:	89fa      	ldrh	r2, [r7, #14]
 800beda:	430a      	orrs	r2, r1
 800bedc:	b291      	uxth	r1, r2
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	3310      	adds	r3, #16
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	460a      	mov	r2, r1
 800bee8:	805a      	strh	r2, [r3, #2]
}
 800beea:	bf00      	nop
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	200194e4 	.word	0x200194e4
 800befc:	20000a90 	.word	0x20000a90

0800bf00 <add_North_wall>:

void add_North_wall(singlewalldata_t *walldate) {
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <add_North_wall+0x40>)
 800bf10:	7812      	ldrb	r2, [r2, #0]
 800bf12:	4093      	lsls	r3, r2
 800bf14:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now + 1] |= new;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <add_North_wall+0x44>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800bf22:	4b08      	ldr	r3, [pc, #32]	; (800bf44 <add_North_wall+0x44>)
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	89fb      	ldrh	r3, [r7, #14]
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	b299      	uxth	r1, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800bf34:	bf00      	nop
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	20000a90 	.word	0x20000a90
 800bf44:	200194e4 	.word	0x200194e4

0800bf48 <pull_West_wall>:

void pull_West_wall(singlewalldata_t *walldate) {
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800bf50:	2301      	movs	r3, #1
 800bf52:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800bf54:	89fb      	ldrh	r3, [r7, #14]
 800bf56:	4a10      	ldr	r2, [pc, #64]	; (800bf98 <pull_West_wall+0x50>)
 800bf58:	7812      	ldrb	r2, [r2, #0]
 800bf5a:	4093      	lsls	r3, r2
 800bf5c:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now] &= ~new;
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <pull_West_wall+0x54>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	3310      	adds	r3, #16
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	4413      	add	r3, r2
 800bf6a:	885b      	ldrh	r3, [r3, #2]
 800bf6c:	b21a      	sxth	r2, r3
 800bf6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf72:	43db      	mvns	r3, r3
 800bf74:	b21b      	sxth	r3, r3
 800bf76:	4013      	ands	r3, r2
 800bf78:	b21a      	sxth	r2, r3
 800bf7a:	4b08      	ldr	r3, [pc, #32]	; (800bf9c <pull_West_wall+0x54>)
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	b291      	uxth	r1, r2
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	3310      	adds	r3, #16
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	460a      	mov	r2, r1
 800bf8a:	805a      	strh	r2, [r3, #2]
}
 800bf8c:	bf00      	nop
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	200194e4 	.word	0x200194e4
 800bf9c:	20000a90 	.word	0x20000a90

0800bfa0 <pull_South_wall>:

void pull_South_wall(singlewalldata_t *walldate) {
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800bfac:	89fb      	ldrh	r3, [r7, #14]
 800bfae:	4a0f      	ldr	r2, [pc, #60]	; (800bfec <pull_South_wall+0x4c>)
 800bfb0:	7812      	ldrb	r2, [r2, #0]
 800bfb2:	4093      	lsls	r3, r2
 800bfb4:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now] &= ~new;
 800bfb6:	4b0e      	ldr	r3, [pc, #56]	; (800bff0 <pull_South_wall+0x50>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bfc2:	b21a      	sxth	r2, r3
 800bfc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	b21b      	sxth	r3, r3
 800bfcc:	4013      	ands	r3, r2
 800bfce:	b219      	sxth	r1, r3
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <pull_South_wall+0x50>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	b289      	uxth	r1, r1
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800bfde:	bf00      	nop
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20000a90 	.word	0x20000a90
 800bff0:	200194e4 	.word	0x200194e4

0800bff4 <pull_East_wall>:

void pull_East_wall(singlewalldata_t *walldate) {
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800bffc:	2301      	movs	r3, #1
 800bffe:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800c000:	89fb      	ldrh	r3, [r7, #14]
 800c002:	4a11      	ldr	r2, [pc, #68]	; (800c048 <pull_East_wall+0x54>)
 800c004:	7812      	ldrb	r2, [r2, #0]
 800c006:	4093      	lsls	r3, r2
 800c008:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now + 1] &= ~new;
 800c00a:	4b10      	ldr	r3, [pc, #64]	; (800c04c <pull_East_wall+0x58>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	3301      	adds	r3, #1
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	3310      	adds	r3, #16
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	4413      	add	r3, r2
 800c018:	885b      	ldrh	r3, [r3, #2]
 800c01a:	b21a      	sxth	r2, r3
 800c01c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c020:	43db      	mvns	r3, r3
 800c022:	b21b      	sxth	r3, r3
 800c024:	4013      	ands	r3, r2
 800c026:	b21a      	sxth	r2, r3
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <pull_East_wall+0x58>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	3301      	adds	r3, #1
 800c02e:	b291      	uxth	r1, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	3310      	adds	r3, #16
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	4413      	add	r3, r2
 800c038:	460a      	mov	r2, r1
 800c03a:	805a      	strh	r2, [r3, #2]
}
 800c03c:	bf00      	nop
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	200194e4 	.word	0x200194e4
 800c04c:	20000a90 	.word	0x20000a90

0800c050 <pull_North_wall>:

void pull_North_wall(singlewalldata_t *walldate) {
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800c05c:	89fb      	ldrh	r3, [r7, #14]
 800c05e:	4a0f      	ldr	r2, [pc, #60]	; (800c09c <pull_North_wall+0x4c>)
 800c060:	7812      	ldrb	r2, [r2, #0]
 800c062:	4093      	lsls	r3, r2
 800c064:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now + 1] &= ~new;
 800c066:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <pull_North_wall+0x50>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c072:	b21a      	sxth	r2, r3
 800c074:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c078:	43db      	mvns	r3, r3
 800c07a:	b21b      	sxth	r3, r3
 800c07c:	4013      	ands	r3, r2
 800c07e:	b219      	sxth	r1, r3
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <pull_North_wall+0x50>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	b289      	uxth	r1, r1
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800c08e:	bf00      	nop
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	20000a90 	.word	0x20000a90
 800c0a0:	200194e4 	.word	0x200194e4

0800c0a4 <add_walldata_one>:

void add_walldata_one(uint8_t dire, singlewalldata_t* walldata) {
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	6039      	str	r1, [r7, #0]
 800c0ae:	71fb      	strb	r3, [r7, #7]
	dire = dire % 4;
 800c0b0:	79fb      	ldrb	r3, [r7, #7]
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	71fb      	strb	r3, [r7, #7]
	if (dire == North) {
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d103      	bne.n	800c0c6 <add_walldata_one+0x22>
		add_North_wall(walldata);
 800c0be:	6838      	ldr	r0, [r7, #0]
 800c0c0:	f7ff ff1e 	bl	800bf00 <add_North_wall>
	} else if (dire == South) {
		add_South_wall(walldata);
	} else if (dire == East) {
		add_East_wall(walldata);
	}
}
 800c0c4:	e013      	b.n	800c0ee <add_walldata_one+0x4a>
	} else if (dire == West) {
 800c0c6:	79fb      	ldrb	r3, [r7, #7]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d103      	bne.n	800c0d4 <add_walldata_one+0x30>
		add_West_wall(walldata);
 800c0cc:	6838      	ldr	r0, [r7, #0]
 800c0ce:	f7ff fe9f 	bl	800be10 <add_West_wall>
}
 800c0d2:	e00c      	b.n	800c0ee <add_walldata_one+0x4a>
	} else if (dire == South) {
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d103      	bne.n	800c0e2 <add_walldata_one+0x3e>
		add_South_wall(walldata);
 800c0da:	6838      	ldr	r0, [r7, #0]
 800c0dc:	f7ff fec2 	bl	800be64 <add_South_wall>
}
 800c0e0:	e005      	b.n	800c0ee <add_walldata_one+0x4a>
	} else if (dire == East) {
 800c0e2:	79fb      	ldrb	r3, [r7, #7]
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d102      	bne.n	800c0ee <add_walldata_one+0x4a>
		add_East_wall(walldata);
 800c0e8:	6838      	ldr	r0, [r7, #0]
 800c0ea:	f7ff fedf 	bl	800beac <add_East_wall>
}
 800c0ee:	bf00      	nop
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <pull_walldata_one>:

void pull_walldata_one(uint8_t dire, singlewalldata_t* walldata) {
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	6039      	str	r1, [r7, #0]
 800c100:	71fb      	strb	r3, [r7, #7]
	dire = dire % 4;
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	71fb      	strb	r3, [r7, #7]
	if (dire == North) {
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d103      	bne.n	800c118 <pull_walldata_one+0x22>
		pull_North_wall(walldata);
 800c110:	6838      	ldr	r0, [r7, #0]
 800c112:	f7ff ff9d 	bl	800c050 <pull_North_wall>
	} else if (dire == South) {
		pull_South_wall(walldata);
	} else if (dire == East) {
		pull_East_wall(walldata);
	}
}
 800c116:	e013      	b.n	800c140 <pull_walldata_one+0x4a>
	} else if (dire == West) {
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d103      	bne.n	800c126 <pull_walldata_one+0x30>
		pull_West_wall(walldata);
 800c11e:	6838      	ldr	r0, [r7, #0]
 800c120:	f7ff ff12 	bl	800bf48 <pull_West_wall>
}
 800c124:	e00c      	b.n	800c140 <pull_walldata_one+0x4a>
	} else if (dire == South) {
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d103      	bne.n	800c134 <pull_walldata_one+0x3e>
		pull_South_wall(walldata);
 800c12c:	6838      	ldr	r0, [r7, #0]
 800c12e:	f7ff ff37 	bl	800bfa0 <pull_South_wall>
}
 800c132:	e005      	b.n	800c140 <pull_walldata_one+0x4a>
	} else if (dire == East) {
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	2b03      	cmp	r3, #3
 800c138:	d102      	bne.n	800c140 <pull_walldata_one+0x4a>
		pull_East_wall(walldata);
 800c13a:	6838      	ldr	r0, [r7, #0]
 800c13c:	f7ff ff5a 	bl	800bff4 <pull_East_wall>
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <addWall>:

void addWall(void) {
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
//	uint16_t new;
	if (add_wall_flag == 1) {
 800c14c:	4b55      	ldr	r3, [pc, #340]	; (800c2a4 <addWall+0x15c>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	f040 80a5 	bne.w	800c2a0 <addWall+0x158>
		if (direction == North) {
 800c156:	4b54      	ldr	r3, [pc, #336]	; (800c2a8 <addWall+0x160>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <addWall+0x2a>
			add_West_wall(&walldata.checked);
 800c15e:	4853      	ldr	r0, [pc, #332]	; (800c2ac <addWall+0x164>)
 800c160:	f7ff fe56 	bl	800be10 <add_West_wall>
			add_East_wall(&walldata.checked);
 800c164:	4851      	ldr	r0, [pc, #324]	; (800c2ac <addWall+0x164>)
 800c166:	f7ff fea1 	bl	800beac <add_East_wall>
			add_North_wall(&walldata.checked);
 800c16a:	4850      	ldr	r0, [pc, #320]	; (800c2ac <addWall+0x164>)
 800c16c:	f7ff fec8 	bl	800bf00 <add_North_wall>
 800c170:	e028      	b.n	800c1c4 <addWall+0x7c>
		} else if (direction == West) {
 800c172:	4b4d      	ldr	r3, [pc, #308]	; (800c2a8 <addWall+0x160>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d109      	bne.n	800c18e <addWall+0x46>
			add_West_wall(&walldata.checked);
 800c17a:	484c      	ldr	r0, [pc, #304]	; (800c2ac <addWall+0x164>)
 800c17c:	f7ff fe48 	bl	800be10 <add_West_wall>
			add_South_wall(&walldata.checked);
 800c180:	484a      	ldr	r0, [pc, #296]	; (800c2ac <addWall+0x164>)
 800c182:	f7ff fe6f 	bl	800be64 <add_South_wall>
			add_North_wall(&walldata.checked);
 800c186:	4849      	ldr	r0, [pc, #292]	; (800c2ac <addWall+0x164>)
 800c188:	f7ff feba 	bl	800bf00 <add_North_wall>
 800c18c:	e01a      	b.n	800c1c4 <addWall+0x7c>
		} else if (direction == South) {
 800c18e:	4b46      	ldr	r3, [pc, #280]	; (800c2a8 <addWall+0x160>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d109      	bne.n	800c1aa <addWall+0x62>
			add_West_wall(&walldata.checked);
 800c196:	4845      	ldr	r0, [pc, #276]	; (800c2ac <addWall+0x164>)
 800c198:	f7ff fe3a 	bl	800be10 <add_West_wall>
			add_South_wall(&walldata.checked);
 800c19c:	4843      	ldr	r0, [pc, #268]	; (800c2ac <addWall+0x164>)
 800c19e:	f7ff fe61 	bl	800be64 <add_South_wall>
			add_East_wall(&walldata.checked);
 800c1a2:	4842      	ldr	r0, [pc, #264]	; (800c2ac <addWall+0x164>)
 800c1a4:	f7ff fe82 	bl	800beac <add_East_wall>
 800c1a8:	e00c      	b.n	800c1c4 <addWall+0x7c>
		} else if (direction == East) {
 800c1aa:	4b3f      	ldr	r3, [pc, #252]	; (800c2a8 <addWall+0x160>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d108      	bne.n	800c1c4 <addWall+0x7c>
			add_North_wall(&walldata.checked);
 800c1b2:	483e      	ldr	r0, [pc, #248]	; (800c2ac <addWall+0x164>)
 800c1b4:	f7ff fea4 	bl	800bf00 <add_North_wall>
			add_South_wall(&walldata.checked);
 800c1b8:	483c      	ldr	r0, [pc, #240]	; (800c2ac <addWall+0x164>)
 800c1ba:	f7ff fe53 	bl	800be64 <add_South_wall>
			add_East_wall(&walldata.checked);
 800c1be:	483b      	ldr	r0, [pc, #236]	; (800c2ac <addWall+0x164>)
 800c1c0:	f7ff fe74 	bl	800beac <add_East_wall>
		}

		if (SEN_F.now > SEN_F.threshold) {
 800c1c4:	4b3a      	ldr	r3, [pc, #232]	; (800c2b0 <addWall+0x168>)
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	4b39      	ldr	r3, [pc, #228]	; (800c2b0 <addWall+0x168>)
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	dd06      	ble.n	800c1de <addWall+0x96>
			add_walldata_one(direction, &walldata.real);
 800c1d0:	4b35      	ldr	r3, [pc, #212]	; (800c2a8 <addWall+0x160>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4937      	ldr	r1, [pc, #220]	; (800c2b4 <addWall+0x16c>)
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff ff64 	bl	800c0a4 <add_walldata_one>
 800c1dc:	e014      	b.n	800c208 <addWall+0xc0>
		} else if (getWall(x.now, y.now, direction, &walldata.real)==0) {
 800c1de:	4b36      	ldr	r3, [pc, #216]	; (800c2b8 <addWall+0x170>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	4b35      	ldr	r3, [pc, #212]	; (800c2bc <addWall+0x174>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4b2f      	ldr	r3, [pc, #188]	; (800c2a8 <addWall+0x160>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	4b30      	ldr	r3, [pc, #192]	; (800c2b4 <addWall+0x16c>)
 800c1f2:	f000 f8d7 	bl	800c3a4 <getWall>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d105      	bne.n	800c208 <addWall+0xc0>
			pull_walldata_one(direction, &walldata.adachi);
 800c1fc:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <addWall+0x160>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	492f      	ldr	r1, [pc, #188]	; (800c2c0 <addWall+0x178>)
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff ff77 	bl	800c0f6 <pull_walldata_one>
		}

		if (SEN_R.now > SEN_R.threshold) {
 800c208:	4b2e      	ldr	r3, [pc, #184]	; (800c2c4 <addWall+0x17c>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <addWall+0x17c>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	429a      	cmp	r2, r3
 800c212:	dd08      	ble.n	800c226 <addWall+0xde>
			add_walldata_one(direction+3, &walldata.real);
 800c214:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <addWall+0x160>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	3303      	adds	r3, #3
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	4925      	ldr	r1, [pc, #148]	; (800c2b4 <addWall+0x16c>)
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff ff40 	bl	800c0a4 <add_walldata_one>
 800c224:	e016      	b.n	800c254 <addWall+0x10c>
		} else if (getWall(x.now, y.now, direction+3, &walldata.real)==0) {
 800c226:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <addWall+0x170>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <addWall+0x174>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	4b1d      	ldr	r3, [pc, #116]	; (800c2a8 <addWall+0x160>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	1cda      	adds	r2, r3, #3
 800c238:	4b1e      	ldr	r3, [pc, #120]	; (800c2b4 <addWall+0x16c>)
 800c23a:	f000 f8b3 	bl	800c3a4 <getWall>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d107      	bne.n	800c254 <addWall+0x10c>
			pull_walldata_one(direction+3, &walldata.adachi);
 800c244:	4b18      	ldr	r3, [pc, #96]	; (800c2a8 <addWall+0x160>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	3303      	adds	r3, #3
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	491c      	ldr	r1, [pc, #112]	; (800c2c0 <addWall+0x178>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff ff51 	bl	800c0f6 <pull_walldata_one>
		}

		if (SEN_L.now > SEN_L.threshold) {
 800c254:	4b1c      	ldr	r3, [pc, #112]	; (800c2c8 <addWall+0x180>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <addWall+0x180>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	dd08      	ble.n	800c272 <addWall+0x12a>
			add_walldata_one(direction+1, &walldata.real);
 800c260:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <addWall+0x160>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	3301      	adds	r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	4912      	ldr	r1, [pc, #72]	; (800c2b4 <addWall+0x16c>)
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff ff1a 	bl	800c0a4 <add_walldata_one>
		} else if (getWall(x.now, y.now, direction+1, &walldata.real)==0) {
			pull_walldata_one(direction+1, &walldata.adachi);
		}

	}
}
 800c270:	e016      	b.n	800c2a0 <addWall+0x158>
		} else if (getWall(x.now, y.now, direction+1, &walldata.real)==0) {
 800c272:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <addWall+0x170>)
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	4618      	mov	r0, r3
 800c278:	4b10      	ldr	r3, [pc, #64]	; (800c2bc <addWall+0x174>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	4619      	mov	r1, r3
 800c27e:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <addWall+0x160>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <addWall+0x16c>)
 800c286:	f000 f88d 	bl	800c3a4 <getWall>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d107      	bne.n	800c2a0 <addWall+0x158>
			pull_walldata_one(direction+1, &walldata.adachi);
 800c290:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <addWall+0x160>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	b2db      	uxtb	r3, r3
 800c298:	4909      	ldr	r1, [pc, #36]	; (800c2c0 <addWall+0x178>)
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff ff2b 	bl	800c0f6 <pull_walldata_one>
}
 800c2a0:	bf00      	nop
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	2000000c 	.word	0x2000000c
 800c2a8:	20000668 	.word	0x20000668
 800c2ac:	200009d4 	.word	0x200009d4
 800c2b0:	20031b94 	.word	0x20031b94
 800c2b4:	20000990 	.word	0x20000990
 800c2b8:	20000a90 	.word	0x20000a90
 800c2bc:	200194e4 	.word	0x200194e4
 800c2c0:	20000a18 	.word	0x20000a18
 800c2c4:	20019428 	.word	0x20019428
 800c2c8:	20031bf0 	.word	0x20031bf0

0800c2cc <clear_Map>:

void clear_Map(singlewalldata_t *walldate) {
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 16; i++) {
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
 800c2d8:	e00e      	b.n	800c2f8 <clear_Map+0x2c>
		walldate->column[i] = 0;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	3310      	adds	r3, #16
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	4413      	add	r3, r2
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0;
 800c2e8:	7bfa      	ldrb	r2, [r7, #15]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 16; i++) {
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b0f      	cmp	r3, #15
 800c2fc:	d9ed      	bls.n	800c2da <clear_Map+0xe>
	}
	walldate->column[0] = 0xffff;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c304:	845a      	strh	r2, [r3, #34]	; 0x22
	walldate->row[0] = 0xffff;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c30c:	801a      	strh	r2, [r3, #0]
	walldate->column[16] = 0xffff;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c314:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walldate->row[16] = 0xffff;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c31e:	841a      	strh	r2, [r3, #32]
	walldate->column[1] = 0x0001;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800c326:	bf00      	nop
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <clear_adachiMap>:

void clear_adachiMap(singlewalldata_t *walldate) {
 800c332:	b480      	push	{r7}
 800c334:	b085      	sub	sp, #20
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 17; i++) {
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
 800c33e:	e014      	b.n	800c36a <clear_adachiMap+0x38>
		walldate->column[i] = 0xffff;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	3310      	adds	r3, #16
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	4413      	add	r3, r2
 800c34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c34e:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0xffff;
 800c350:	7bfa      	ldrb	r2, [r7, #15]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c358:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		walldate->row[1] = 0xfffe;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c362:	805a      	strh	r2, [r3, #2]
	for (i = 0; i < 17; i++) {
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	3301      	adds	r3, #1
 800c368:	73fb      	strb	r3, [r7, #15]
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	2b10      	cmp	r3, #16
 800c36e:	d9e7      	bls.n	800c340 <clear_adachiMap+0xe>
	}
}
 800c370:	bf00      	nop
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <init_walldata>:

void init_walldata(void) {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
	clear_Map(&walldata.real);
 800c380:	4805      	ldr	r0, [pc, #20]	; (800c398 <init_walldata+0x1c>)
 800c382:	f7ff ffa3 	bl	800c2cc <clear_Map>
	clear_Map(&walldata.checked);
 800c386:	4805      	ldr	r0, [pc, #20]	; (800c39c <init_walldata+0x20>)
 800c388:	f7ff ffa0 	bl	800c2cc <clear_Map>
	clear_adachiMap(&walldata.adachi);
 800c38c:	4804      	ldr	r0, [pc, #16]	; (800c3a0 <init_walldata+0x24>)
 800c38e:	f7ff ffd0 	bl	800c332 <clear_adachiMap>
}
 800c392:	bf00      	nop
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20000990 	.word	0x20000990
 800c39c:	200009d4 	.word	0x200009d4
 800c3a0:	20000a18 	.word	0x20000a18

0800c3a4 <getWall>:
	SEGGER_RTT_MODE_NO_BLOCK_SKIP);
	printf("\x1b[0m");
}
//
int getWall(int x_check, int y_check, int direction_check,
		singlewalldata_t *walldate) { //(見たい座標のx,y,とその座標からの方角１～４壁があれば１
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
	int check_wall = 1;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	617b      	str	r3, [r7, #20]

	direction_check = direction_check % 4;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	425a      	negs	r2, r3
 800c3ba:	f003 0303 	and.w	r3, r3, #3
 800c3be:	f002 0203 	and.w	r2, r2, #3
 800c3c2:	bf58      	it	pl
 800c3c4:	4253      	negpl	r3, r2
 800c3c6:	607b      	str	r3, [r7, #4]

	if (direction_check == North) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d113      	bne.n	800c3f6 <getWall+0x52>
		check_wall <<= x_check;
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d6:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->row[y_check + 1];
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d048      	beq.n	800c482 <getWall+0xde>
			check_wall = 1;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	e045      	b.n	800c482 <getWall+0xde>
		}
	} else if (direction_check == East) {
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	d115      	bne.n	800c428 <getWall+0x84>
		check_wall <<= y_check;
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	fa02 f303 	lsl.w	r3, r2, r3
 800c404:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->column[x_check + 1];
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3301      	adds	r3, #1
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	3310      	adds	r3, #16
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	885b      	ldrh	r3, [r3, #2]
 800c414:	461a      	mov	r2, r3
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	4013      	ands	r3, r2
 800c41a:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d02f      	beq.n	800c482 <getWall+0xde>
			check_wall = 1;
 800c422:	2301      	movs	r3, #1
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e02c      	b.n	800c482 <getWall+0xde>
		}
	} else if (direction_check == South) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d112      	bne.n	800c454 <getWall+0xb0>
		check_wall <<= x_check;
 800c42e:	697a      	ldr	r2, [r7, #20]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	fa02 f303 	lsl.w	r3, r2, r3
 800c436:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->row[y_check];
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c440:	461a      	mov	r2, r3
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	4013      	ands	r3, r2
 800c446:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d019      	beq.n	800c482 <getWall+0xde>
			check_wall = 1;
 800c44e:	2301      	movs	r3, #1
 800c450:	617b      	str	r3, [r7, #20]
 800c452:	e016      	b.n	800c482 <getWall+0xde>
		}
	} else if (direction_check == West) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d113      	bne.n	800c482 <getWall+0xde>
		check_wall <<= y_check;
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	fa02 f303 	lsl.w	r3, r2, r3
 800c462:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->column[x_check];
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3310      	adds	r3, #16
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	4413      	add	r3, r2
 800c46e:	885b      	ldrh	r3, [r3, #2]
 800c470:	461a      	mov	r2, r3
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	4013      	ands	r3, r2
 800c476:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <getWall+0xde>
			check_wall = 1;
 800c47e:	2301      	movs	r3, #1
 800c480:	617b      	str	r3, [r7, #20]
		}
	}
	return check_wall;
 800c482:	697b      	ldr	r3, [r7, #20]
}
 800c484:	4618      	mov	r0, r3
 800c486:	371c      	adds	r7, #28
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800c490:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c4c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800c494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c496:	e003      	b.n	800c4a0 <LoopCopyDataInit>

0800c498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c498:	4b0c      	ldr	r3, [pc, #48]	; (800c4cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c49a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c49c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c49e:	3104      	adds	r1, #4

0800c4a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c4a0:	480b      	ldr	r0, [pc, #44]	; (800c4d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c4a2:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c4a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c4a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c4a8:	d3f6      	bcc.n	800c498 <CopyDataInit>
  ldr  r2, =_sbss
 800c4aa:	4a0b      	ldr	r2, [pc, #44]	; (800c4d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c4ac:	e002      	b.n	800c4b4 <LoopFillZerobss>

0800c4ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800c4ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c4b0:	f842 3b04 	str.w	r3, [r2], #4

0800c4b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c4b4:	4b09      	ldr	r3, [pc, #36]	; (800c4dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c4b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c4b8:	d3f9      	bcc.n	800c4ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c4ba:	f7ff faa3 	bl	800ba04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c4be:	f000 f817 	bl	800c4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c4c2:	f7fb ffeb 	bl	800849c <main>
  bx  lr    
 800c4c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c4c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800c4cc:	0800f0a0 	.word	0x0800f0a0
  ldr  r0, =_sdata
 800c4d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c4d4:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 800c4d8:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 800c4dc:	20031c60 	.word	0x20031c60

0800c4e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c4e0:	e7fe      	b.n	800c4e0 <ADC_IRQHandler>
	...

0800c4e4 <__errno>:
 800c4e4:	4b01      	ldr	r3, [pc, #4]	; (800c4ec <__errno+0x8>)
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20000068 	.word	0x20000068

0800c4f0 <__libc_init_array>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	4e0d      	ldr	r6, [pc, #52]	; (800c528 <__libc_init_array+0x38>)
 800c4f4:	4c0d      	ldr	r4, [pc, #52]	; (800c52c <__libc_init_array+0x3c>)
 800c4f6:	1ba4      	subs	r4, r4, r6
 800c4f8:	10a4      	asrs	r4, r4, #2
 800c4fa:	2500      	movs	r5, #0
 800c4fc:	42a5      	cmp	r5, r4
 800c4fe:	d109      	bne.n	800c514 <__libc_init_array+0x24>
 800c500:	4e0b      	ldr	r6, [pc, #44]	; (800c530 <__libc_init_array+0x40>)
 800c502:	4c0c      	ldr	r4, [pc, #48]	; (800c534 <__libc_init_array+0x44>)
 800c504:	f002 fbf6 	bl	800ecf4 <_init>
 800c508:	1ba4      	subs	r4, r4, r6
 800c50a:	10a4      	asrs	r4, r4, #2
 800c50c:	2500      	movs	r5, #0
 800c50e:	42a5      	cmp	r5, r4
 800c510:	d105      	bne.n	800c51e <__libc_init_array+0x2e>
 800c512:	bd70      	pop	{r4, r5, r6, pc}
 800c514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c518:	4798      	blx	r3
 800c51a:	3501      	adds	r5, #1
 800c51c:	e7ee      	b.n	800c4fc <__libc_init_array+0xc>
 800c51e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c522:	4798      	blx	r3
 800c524:	3501      	adds	r5, #1
 800c526:	e7f2      	b.n	800c50e <__libc_init_array+0x1e>
 800c528:	0800f098 	.word	0x0800f098
 800c52c:	0800f098 	.word	0x0800f098
 800c530:	0800f098 	.word	0x0800f098
 800c534:	0800f09c 	.word	0x0800f09c

0800c538 <memcpy>:
 800c538:	b510      	push	{r4, lr}
 800c53a:	1e43      	subs	r3, r0, #1
 800c53c:	440a      	add	r2, r1
 800c53e:	4291      	cmp	r1, r2
 800c540:	d100      	bne.n	800c544 <memcpy+0xc>
 800c542:	bd10      	pop	{r4, pc}
 800c544:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c54c:	e7f7      	b.n	800c53e <memcpy+0x6>

0800c54e <memset>:
 800c54e:	4402      	add	r2, r0
 800c550:	4603      	mov	r3, r0
 800c552:	4293      	cmp	r3, r2
 800c554:	d100      	bne.n	800c558 <memset+0xa>
 800c556:	4770      	bx	lr
 800c558:	f803 1b01 	strb.w	r1, [r3], #1
 800c55c:	e7f9      	b.n	800c552 <memset+0x4>

0800c55e <__cvt>:
 800c55e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c562:	ec55 4b10 	vmov	r4, r5, d0
 800c566:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c568:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	460e      	mov	r6, r1
 800c570:	4691      	mov	r9, r2
 800c572:	4619      	mov	r1, r3
 800c574:	bfb8      	it	lt
 800c576:	4622      	movlt	r2, r4
 800c578:	462b      	mov	r3, r5
 800c57a:	f027 0720 	bic.w	r7, r7, #32
 800c57e:	bfbb      	ittet	lt
 800c580:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c584:	461d      	movlt	r5, r3
 800c586:	2300      	movge	r3, #0
 800c588:	232d      	movlt	r3, #45	; 0x2d
 800c58a:	bfb8      	it	lt
 800c58c:	4614      	movlt	r4, r2
 800c58e:	2f46      	cmp	r7, #70	; 0x46
 800c590:	700b      	strb	r3, [r1, #0]
 800c592:	d004      	beq.n	800c59e <__cvt+0x40>
 800c594:	2f45      	cmp	r7, #69	; 0x45
 800c596:	d100      	bne.n	800c59a <__cvt+0x3c>
 800c598:	3601      	adds	r6, #1
 800c59a:	2102      	movs	r1, #2
 800c59c:	e000      	b.n	800c5a0 <__cvt+0x42>
 800c59e:	2103      	movs	r1, #3
 800c5a0:	ab03      	add	r3, sp, #12
 800c5a2:	9301      	str	r3, [sp, #4]
 800c5a4:	ab02      	add	r3, sp, #8
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4653      	mov	r3, sl
 800c5ac:	ec45 4b10 	vmov	d0, r4, r5
 800c5b0:	f000 fe0e 	bl	800d1d0 <_dtoa_r>
 800c5b4:	2f47      	cmp	r7, #71	; 0x47
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	d102      	bne.n	800c5c0 <__cvt+0x62>
 800c5ba:	f019 0f01 	tst.w	r9, #1
 800c5be:	d026      	beq.n	800c60e <__cvt+0xb0>
 800c5c0:	2f46      	cmp	r7, #70	; 0x46
 800c5c2:	eb08 0906 	add.w	r9, r8, r6
 800c5c6:	d111      	bne.n	800c5ec <__cvt+0x8e>
 800c5c8:	f898 3000 	ldrb.w	r3, [r8]
 800c5cc:	2b30      	cmp	r3, #48	; 0x30
 800c5ce:	d10a      	bne.n	800c5e6 <__cvt+0x88>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f4 fa9e 	bl	8000b18 <__aeabi_dcmpeq>
 800c5dc:	b918      	cbnz	r0, 800c5e6 <__cvt+0x88>
 800c5de:	f1c6 0601 	rsb	r6, r6, #1
 800c5e2:	f8ca 6000 	str.w	r6, [sl]
 800c5e6:	f8da 3000 	ldr.w	r3, [sl]
 800c5ea:	4499      	add	r9, r3
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f7f4 fa90 	bl	8000b18 <__aeabi_dcmpeq>
 800c5f8:	b938      	cbnz	r0, 800c60a <__cvt+0xac>
 800c5fa:	2230      	movs	r2, #48	; 0x30
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	454b      	cmp	r3, r9
 800c600:	d205      	bcs.n	800c60e <__cvt+0xb0>
 800c602:	1c59      	adds	r1, r3, #1
 800c604:	9103      	str	r1, [sp, #12]
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	e7f8      	b.n	800c5fc <__cvt+0x9e>
 800c60a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c612:	eba3 0308 	sub.w	r3, r3, r8
 800c616:	4640      	mov	r0, r8
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	b004      	add	sp, #16
 800c61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c620 <__exponent>:
 800c620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c622:	2900      	cmp	r1, #0
 800c624:	4604      	mov	r4, r0
 800c626:	bfba      	itte	lt
 800c628:	4249      	neglt	r1, r1
 800c62a:	232d      	movlt	r3, #45	; 0x2d
 800c62c:	232b      	movge	r3, #43	; 0x2b
 800c62e:	2909      	cmp	r1, #9
 800c630:	f804 2b02 	strb.w	r2, [r4], #2
 800c634:	7043      	strb	r3, [r0, #1]
 800c636:	dd20      	ble.n	800c67a <__exponent+0x5a>
 800c638:	f10d 0307 	add.w	r3, sp, #7
 800c63c:	461f      	mov	r7, r3
 800c63e:	260a      	movs	r6, #10
 800c640:	fb91 f5f6 	sdiv	r5, r1, r6
 800c644:	fb06 1115 	mls	r1, r6, r5, r1
 800c648:	3130      	adds	r1, #48	; 0x30
 800c64a:	2d09      	cmp	r5, #9
 800c64c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c650:	f103 32ff 	add.w	r2, r3, #4294967295
 800c654:	4629      	mov	r1, r5
 800c656:	dc09      	bgt.n	800c66c <__exponent+0x4c>
 800c658:	3130      	adds	r1, #48	; 0x30
 800c65a:	3b02      	subs	r3, #2
 800c65c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c660:	42bb      	cmp	r3, r7
 800c662:	4622      	mov	r2, r4
 800c664:	d304      	bcc.n	800c670 <__exponent+0x50>
 800c666:	1a10      	subs	r0, r2, r0
 800c668:	b003      	add	sp, #12
 800c66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c66c:	4613      	mov	r3, r2
 800c66e:	e7e7      	b.n	800c640 <__exponent+0x20>
 800c670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c674:	f804 2b01 	strb.w	r2, [r4], #1
 800c678:	e7f2      	b.n	800c660 <__exponent+0x40>
 800c67a:	2330      	movs	r3, #48	; 0x30
 800c67c:	4419      	add	r1, r3
 800c67e:	7083      	strb	r3, [r0, #2]
 800c680:	1d02      	adds	r2, r0, #4
 800c682:	70c1      	strb	r1, [r0, #3]
 800c684:	e7ef      	b.n	800c666 <__exponent+0x46>
	...

0800c688 <_printf_float>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	b08d      	sub	sp, #52	; 0x34
 800c68e:	460c      	mov	r4, r1
 800c690:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c694:	4616      	mov	r6, r2
 800c696:	461f      	mov	r7, r3
 800c698:	4605      	mov	r5, r0
 800c69a:	f001 fccb 	bl	800e034 <_localeconv_r>
 800c69e:	6803      	ldr	r3, [r0, #0]
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7f3 fdbc 	bl	8000220 <strlen>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b0:	9005      	str	r0, [sp, #20]
 800c6b2:	3307      	adds	r3, #7
 800c6b4:	f023 0307 	bic.w	r3, r3, #7
 800c6b8:	f103 0208 	add.w	r2, r3, #8
 800c6bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6c0:	f8d4 b000 	ldr.w	fp, [r4]
 800c6c4:	f8c8 2000 	str.w	r2, [r8]
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c6d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c6d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6d8:	9307      	str	r3, [sp, #28]
 800c6da:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6de:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e2:	4ba7      	ldr	r3, [pc, #668]	; (800c980 <_printf_float+0x2f8>)
 800c6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6e8:	f7f4 fa48 	bl	8000b7c <__aeabi_dcmpun>
 800c6ec:	bb70      	cbnz	r0, 800c74c <_printf_float+0xc4>
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f2:	4ba3      	ldr	r3, [pc, #652]	; (800c980 <_printf_float+0x2f8>)
 800c6f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6f8:	f7f4 fa22 	bl	8000b40 <__aeabi_dcmple>
 800c6fc:	bb30      	cbnz	r0, 800c74c <_printf_float+0xc4>
 800c6fe:	2200      	movs	r2, #0
 800c700:	2300      	movs	r3, #0
 800c702:	4640      	mov	r0, r8
 800c704:	4649      	mov	r1, r9
 800c706:	f7f4 fa11 	bl	8000b2c <__aeabi_dcmplt>
 800c70a:	b110      	cbz	r0, 800c712 <_printf_float+0x8a>
 800c70c:	232d      	movs	r3, #45	; 0x2d
 800c70e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c712:	4a9c      	ldr	r2, [pc, #624]	; (800c984 <_printf_float+0x2fc>)
 800c714:	4b9c      	ldr	r3, [pc, #624]	; (800c988 <_printf_float+0x300>)
 800c716:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c71a:	bf8c      	ite	hi
 800c71c:	4690      	movhi	r8, r2
 800c71e:	4698      	movls	r8, r3
 800c720:	2303      	movs	r3, #3
 800c722:	f02b 0204 	bic.w	r2, fp, #4
 800c726:	6123      	str	r3, [r4, #16]
 800c728:	6022      	str	r2, [r4, #0]
 800c72a:	f04f 0900 	mov.w	r9, #0
 800c72e:	9700      	str	r7, [sp, #0]
 800c730:	4633      	mov	r3, r6
 800c732:	aa0b      	add	r2, sp, #44	; 0x2c
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f9e6 	bl	800cb08 <_printf_common>
 800c73c:	3001      	adds	r0, #1
 800c73e:	f040 808d 	bne.w	800c85c <_printf_float+0x1d4>
 800c742:	f04f 30ff 	mov.w	r0, #4294967295
 800c746:	b00d      	add	sp, #52	; 0x34
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	4642      	mov	r2, r8
 800c74e:	464b      	mov	r3, r9
 800c750:	4640      	mov	r0, r8
 800c752:	4649      	mov	r1, r9
 800c754:	f7f4 fa12 	bl	8000b7c <__aeabi_dcmpun>
 800c758:	b110      	cbz	r0, 800c760 <_printf_float+0xd8>
 800c75a:	4a8c      	ldr	r2, [pc, #560]	; (800c98c <_printf_float+0x304>)
 800c75c:	4b8c      	ldr	r3, [pc, #560]	; (800c990 <_printf_float+0x308>)
 800c75e:	e7da      	b.n	800c716 <_printf_float+0x8e>
 800c760:	6861      	ldr	r1, [r4, #4]
 800c762:	1c4b      	adds	r3, r1, #1
 800c764:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c768:	a80a      	add	r0, sp, #40	; 0x28
 800c76a:	d13e      	bne.n	800c7ea <_printf_float+0x162>
 800c76c:	2306      	movs	r3, #6
 800c76e:	6063      	str	r3, [r4, #4]
 800c770:	2300      	movs	r3, #0
 800c772:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c776:	ab09      	add	r3, sp, #36	; 0x24
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	ec49 8b10 	vmov	d0, r8, r9
 800c77e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c782:	6022      	str	r2, [r4, #0]
 800c784:	f8cd a004 	str.w	sl, [sp, #4]
 800c788:	6861      	ldr	r1, [r4, #4]
 800c78a:	4628      	mov	r0, r5
 800c78c:	f7ff fee7 	bl	800c55e <__cvt>
 800c790:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c794:	2b47      	cmp	r3, #71	; 0x47
 800c796:	4680      	mov	r8, r0
 800c798:	d109      	bne.n	800c7ae <_printf_float+0x126>
 800c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79c:	1cd8      	adds	r0, r3, #3
 800c79e:	db02      	blt.n	800c7a6 <_printf_float+0x11e>
 800c7a0:	6862      	ldr	r2, [r4, #4]
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	dd47      	ble.n	800c836 <_printf_float+0x1ae>
 800c7a6:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7aa:	fa5f fa8a 	uxtb.w	sl, sl
 800c7ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7b4:	d824      	bhi.n	800c800 <_printf_float+0x178>
 800c7b6:	3901      	subs	r1, #1
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7be:	9109      	str	r1, [sp, #36]	; 0x24
 800c7c0:	f7ff ff2e 	bl	800c620 <__exponent>
 800c7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7c6:	1813      	adds	r3, r2, r0
 800c7c8:	2a01      	cmp	r2, #1
 800c7ca:	4681      	mov	r9, r0
 800c7cc:	6123      	str	r3, [r4, #16]
 800c7ce:	dc02      	bgt.n	800c7d6 <_printf_float+0x14e>
 800c7d0:	6822      	ldr	r2, [r4, #0]
 800c7d2:	07d1      	lsls	r1, r2, #31
 800c7d4:	d501      	bpl.n	800c7da <_printf_float+0x152>
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	6123      	str	r3, [r4, #16]
 800c7da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0a5      	beq.n	800c72e <_printf_float+0xa6>
 800c7e2:	232d      	movs	r3, #45	; 0x2d
 800c7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e8:	e7a1      	b.n	800c72e <_printf_float+0xa6>
 800c7ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c7ee:	f000 8177 	beq.w	800cae0 <_printf_float+0x458>
 800c7f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c7f6:	d1bb      	bne.n	800c770 <_printf_float+0xe8>
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	d1b9      	bne.n	800c770 <_printf_float+0xe8>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e7b6      	b.n	800c76e <_printf_float+0xe6>
 800c800:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c804:	d119      	bne.n	800c83a <_printf_float+0x1b2>
 800c806:	2900      	cmp	r1, #0
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	dd0c      	ble.n	800c826 <_printf_float+0x19e>
 800c80c:	6121      	str	r1, [r4, #16]
 800c80e:	b913      	cbnz	r3, 800c816 <_printf_float+0x18e>
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	07d2      	lsls	r2, r2, #31
 800c814:	d502      	bpl.n	800c81c <_printf_float+0x194>
 800c816:	3301      	adds	r3, #1
 800c818:	440b      	add	r3, r1
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c820:	f04f 0900 	mov.w	r9, #0
 800c824:	e7d9      	b.n	800c7da <_printf_float+0x152>
 800c826:	b913      	cbnz	r3, 800c82e <_printf_float+0x1a6>
 800c828:	6822      	ldr	r2, [r4, #0]
 800c82a:	07d0      	lsls	r0, r2, #31
 800c82c:	d501      	bpl.n	800c832 <_printf_float+0x1aa>
 800c82e:	3302      	adds	r3, #2
 800c830:	e7f3      	b.n	800c81a <_printf_float+0x192>
 800c832:	2301      	movs	r3, #1
 800c834:	e7f1      	b.n	800c81a <_printf_float+0x192>
 800c836:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c83a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c83e:	4293      	cmp	r3, r2
 800c840:	db05      	blt.n	800c84e <_printf_float+0x1c6>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	6123      	str	r3, [r4, #16]
 800c846:	07d1      	lsls	r1, r2, #31
 800c848:	d5e8      	bpl.n	800c81c <_printf_float+0x194>
 800c84a:	3301      	adds	r3, #1
 800c84c:	e7e5      	b.n	800c81a <_printf_float+0x192>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfd4      	ite	le
 800c852:	f1c3 0302 	rsble	r3, r3, #2
 800c856:	2301      	movgt	r3, #1
 800c858:	4413      	add	r3, r2
 800c85a:	e7de      	b.n	800c81a <_printf_float+0x192>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	055a      	lsls	r2, r3, #21
 800c860:	d407      	bmi.n	800c872 <_printf_float+0x1ea>
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	4642      	mov	r2, r8
 800c866:	4631      	mov	r1, r6
 800c868:	4628      	mov	r0, r5
 800c86a:	47b8      	blx	r7
 800c86c:	3001      	adds	r0, #1
 800c86e:	d12b      	bne.n	800c8c8 <_printf_float+0x240>
 800c870:	e767      	b.n	800c742 <_printf_float+0xba>
 800c872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c876:	f240 80dc 	bls.w	800ca32 <_printf_float+0x3aa>
 800c87a:	2200      	movs	r2, #0
 800c87c:	2300      	movs	r3, #0
 800c87e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c882:	f7f4 f949 	bl	8000b18 <__aeabi_dcmpeq>
 800c886:	2800      	cmp	r0, #0
 800c888:	d033      	beq.n	800c8f2 <_printf_float+0x26a>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4a41      	ldr	r2, [pc, #260]	; (800c994 <_printf_float+0x30c>)
 800c88e:	4631      	mov	r1, r6
 800c890:	4628      	mov	r0, r5
 800c892:	47b8      	blx	r7
 800c894:	3001      	adds	r0, #1
 800c896:	f43f af54 	beq.w	800c742 <_printf_float+0xba>
 800c89a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	db02      	blt.n	800c8a8 <_printf_float+0x220>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	07d8      	lsls	r0, r3, #31
 800c8a6:	d50f      	bpl.n	800c8c8 <_printf_float+0x240>
 800c8a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	47b8      	blx	r7
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	f43f af45 	beq.w	800c742 <_printf_float+0xba>
 800c8b8:	f04f 0800 	mov.w	r8, #0
 800c8bc:	f104 091a 	add.w	r9, r4, #26
 800c8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	4543      	cmp	r3, r8
 800c8c6:	dc09      	bgt.n	800c8dc <_printf_float+0x254>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	079b      	lsls	r3, r3, #30
 800c8cc:	f100 8103 	bmi.w	800cad6 <_printf_float+0x44e>
 800c8d0:	68e0      	ldr	r0, [r4, #12]
 800c8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d4:	4298      	cmp	r0, r3
 800c8d6:	bfb8      	it	lt
 800c8d8:	4618      	movlt	r0, r3
 800c8da:	e734      	b.n	800c746 <_printf_float+0xbe>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	464a      	mov	r2, r9
 800c8e0:	4631      	mov	r1, r6
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	47b8      	blx	r7
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	f43f af2b 	beq.w	800c742 <_printf_float+0xba>
 800c8ec:	f108 0801 	add.w	r8, r8, #1
 800c8f0:	e7e6      	b.n	800c8c0 <_printf_float+0x238>
 800c8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc2b      	bgt.n	800c950 <_printf_float+0x2c8>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4a26      	ldr	r2, [pc, #152]	; (800c994 <_printf_float+0x30c>)
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4628      	mov	r0, r5
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	f43f af1d 	beq.w	800c742 <_printf_float+0xba>
 800c908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90a:	b923      	cbnz	r3, 800c916 <_printf_float+0x28e>
 800c90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90e:	b913      	cbnz	r3, 800c916 <_printf_float+0x28e>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	07d9      	lsls	r1, r3, #31
 800c914:	d5d8      	bpl.n	800c8c8 <_printf_float+0x240>
 800c916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c91a:	4631      	mov	r1, r6
 800c91c:	4628      	mov	r0, r5
 800c91e:	47b8      	blx	r7
 800c920:	3001      	adds	r0, #1
 800c922:	f43f af0e 	beq.w	800c742 <_printf_float+0xba>
 800c926:	f04f 0900 	mov.w	r9, #0
 800c92a:	f104 0a1a 	add.w	sl, r4, #26
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	425b      	negs	r3, r3
 800c932:	454b      	cmp	r3, r9
 800c934:	dc01      	bgt.n	800c93a <_printf_float+0x2b2>
 800c936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c938:	e794      	b.n	800c864 <_printf_float+0x1dc>
 800c93a:	2301      	movs	r3, #1
 800c93c:	4652      	mov	r2, sl
 800c93e:	4631      	mov	r1, r6
 800c940:	4628      	mov	r0, r5
 800c942:	47b8      	blx	r7
 800c944:	3001      	adds	r0, #1
 800c946:	f43f aefc 	beq.w	800c742 <_printf_float+0xba>
 800c94a:	f109 0901 	add.w	r9, r9, #1
 800c94e:	e7ee      	b.n	800c92e <_printf_float+0x2a6>
 800c950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c954:	429a      	cmp	r2, r3
 800c956:	bfa8      	it	ge
 800c958:	461a      	movge	r2, r3
 800c95a:	2a00      	cmp	r2, #0
 800c95c:	4691      	mov	r9, r2
 800c95e:	dd07      	ble.n	800c970 <_printf_float+0x2e8>
 800c960:	4613      	mov	r3, r2
 800c962:	4631      	mov	r1, r6
 800c964:	4642      	mov	r2, r8
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	f43f aee9 	beq.w	800c742 <_printf_float+0xba>
 800c970:	f104 031a 	add.w	r3, r4, #26
 800c974:	f04f 0b00 	mov.w	fp, #0
 800c978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c97c:	9306      	str	r3, [sp, #24]
 800c97e:	e015      	b.n	800c9ac <_printf_float+0x324>
 800c980:	7fefffff 	.word	0x7fefffff
 800c984:	0800edd4 	.word	0x0800edd4
 800c988:	0800edd0 	.word	0x0800edd0
 800c98c:	0800eddc 	.word	0x0800eddc
 800c990:	0800edd8 	.word	0x0800edd8
 800c994:	0800ede0 	.word	0x0800ede0
 800c998:	2301      	movs	r3, #1
 800c99a:	9a06      	ldr	r2, [sp, #24]
 800c99c:	4631      	mov	r1, r6
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f aecd 	beq.w	800c742 <_printf_float+0xba>
 800c9a8:	f10b 0b01 	add.w	fp, fp, #1
 800c9ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c9b0:	ebaa 0309 	sub.w	r3, sl, r9
 800c9b4:	455b      	cmp	r3, fp
 800c9b6:	dcef      	bgt.n	800c998 <_printf_float+0x310>
 800c9b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	44d0      	add	r8, sl
 800c9c0:	db15      	blt.n	800c9ee <_printf_float+0x366>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	07da      	lsls	r2, r3, #31
 800c9c6:	d412      	bmi.n	800c9ee <_printf_float+0x366>
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9cc:	eba3 020a 	sub.w	r2, r3, sl
 800c9d0:	eba3 0a01 	sub.w	sl, r3, r1
 800c9d4:	4592      	cmp	sl, r2
 800c9d6:	bfa8      	it	ge
 800c9d8:	4692      	movge	sl, r2
 800c9da:	f1ba 0f00 	cmp.w	sl, #0
 800c9de:	dc0e      	bgt.n	800c9fe <_printf_float+0x376>
 800c9e0:	f04f 0800 	mov.w	r8, #0
 800c9e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9e8:	f104 091a 	add.w	r9, r4, #26
 800c9ec:	e019      	b.n	800ca22 <_printf_float+0x39a>
 800c9ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	47b8      	blx	r7
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	d1e5      	bne.n	800c9c8 <_printf_float+0x340>
 800c9fc:	e6a1      	b.n	800c742 <_printf_float+0xba>
 800c9fe:	4653      	mov	r3, sl
 800ca00:	4642      	mov	r2, r8
 800ca02:	4631      	mov	r1, r6
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b8      	blx	r7
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d1e9      	bne.n	800c9e0 <_printf_float+0x358>
 800ca0c:	e699      	b.n	800c742 <_printf_float+0xba>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	464a      	mov	r2, r9
 800ca12:	4631      	mov	r1, r6
 800ca14:	4628      	mov	r0, r5
 800ca16:	47b8      	blx	r7
 800ca18:	3001      	adds	r0, #1
 800ca1a:	f43f ae92 	beq.w	800c742 <_printf_float+0xba>
 800ca1e:	f108 0801 	add.w	r8, r8, #1
 800ca22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	eba3 030a 	sub.w	r3, r3, sl
 800ca2c:	4543      	cmp	r3, r8
 800ca2e:	dcee      	bgt.n	800ca0e <_printf_float+0x386>
 800ca30:	e74a      	b.n	800c8c8 <_printf_float+0x240>
 800ca32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca34:	2a01      	cmp	r2, #1
 800ca36:	dc01      	bgt.n	800ca3c <_printf_float+0x3b4>
 800ca38:	07db      	lsls	r3, r3, #31
 800ca3a:	d53a      	bpl.n	800cab2 <_printf_float+0x42a>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4642      	mov	r2, r8
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	f43f ae7b 	beq.w	800c742 <_printf_float+0xba>
 800ca4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	47b8      	blx	r7
 800ca56:	3001      	adds	r0, #1
 800ca58:	f108 0801 	add.w	r8, r8, #1
 800ca5c:	f43f ae71 	beq.w	800c742 <_printf_float+0xba>
 800ca60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca62:	2200      	movs	r2, #0
 800ca64:	f103 3aff 	add.w	sl, r3, #4294967295
 800ca68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f7f4 f853 	bl	8000b18 <__aeabi_dcmpeq>
 800ca72:	b9c8      	cbnz	r0, 800caa8 <_printf_float+0x420>
 800ca74:	4653      	mov	r3, sl
 800ca76:	4642      	mov	r2, r8
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47b8      	blx	r7
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d10e      	bne.n	800caa0 <_printf_float+0x418>
 800ca82:	e65e      	b.n	800c742 <_printf_float+0xba>
 800ca84:	2301      	movs	r3, #1
 800ca86:	4652      	mov	r2, sl
 800ca88:	4631      	mov	r1, r6
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	47b8      	blx	r7
 800ca8e:	3001      	adds	r0, #1
 800ca90:	f43f ae57 	beq.w	800c742 <_printf_float+0xba>
 800ca94:	f108 0801 	add.w	r8, r8, #1
 800ca98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	4543      	cmp	r3, r8
 800ca9e:	dcf1      	bgt.n	800ca84 <_printf_float+0x3fc>
 800caa0:	464b      	mov	r3, r9
 800caa2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800caa6:	e6de      	b.n	800c866 <_printf_float+0x1de>
 800caa8:	f04f 0800 	mov.w	r8, #0
 800caac:	f104 0a1a 	add.w	sl, r4, #26
 800cab0:	e7f2      	b.n	800ca98 <_printf_float+0x410>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7df      	b.n	800ca76 <_printf_float+0x3ee>
 800cab6:	2301      	movs	r3, #1
 800cab8:	464a      	mov	r2, r9
 800caba:	4631      	mov	r1, r6
 800cabc:	4628      	mov	r0, r5
 800cabe:	47b8      	blx	r7
 800cac0:	3001      	adds	r0, #1
 800cac2:	f43f ae3e 	beq.w	800c742 <_printf_float+0xba>
 800cac6:	f108 0801 	add.w	r8, r8, #1
 800caca:	68e3      	ldr	r3, [r4, #12]
 800cacc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cace:	1a9b      	subs	r3, r3, r2
 800cad0:	4543      	cmp	r3, r8
 800cad2:	dcf0      	bgt.n	800cab6 <_printf_float+0x42e>
 800cad4:	e6fc      	b.n	800c8d0 <_printf_float+0x248>
 800cad6:	f04f 0800 	mov.w	r8, #0
 800cada:	f104 0919 	add.w	r9, r4, #25
 800cade:	e7f4      	b.n	800caca <_printf_float+0x442>
 800cae0:	2900      	cmp	r1, #0
 800cae2:	f43f ae8b 	beq.w	800c7fc <_printf_float+0x174>
 800cae6:	2300      	movs	r3, #0
 800cae8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800caec:	ab09      	add	r3, sp, #36	; 0x24
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	ec49 8b10 	vmov	d0, r8, r9
 800caf4:	6022      	str	r2, [r4, #0]
 800caf6:	f8cd a004 	str.w	sl, [sp, #4]
 800cafa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7ff fd2d 	bl	800c55e <__cvt>
 800cb04:	4680      	mov	r8, r0
 800cb06:	e648      	b.n	800c79a <_printf_float+0x112>

0800cb08 <_printf_common>:
 800cb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb0c:	4691      	mov	r9, r2
 800cb0e:	461f      	mov	r7, r3
 800cb10:	688a      	ldr	r2, [r1, #8]
 800cb12:	690b      	ldr	r3, [r1, #16]
 800cb14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	bfb8      	it	lt
 800cb1c:	4613      	movlt	r3, r2
 800cb1e:	f8c9 3000 	str.w	r3, [r9]
 800cb22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb26:	4606      	mov	r6, r0
 800cb28:	460c      	mov	r4, r1
 800cb2a:	b112      	cbz	r2, 800cb32 <_printf_common+0x2a>
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	f8c9 3000 	str.w	r3, [r9]
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	0699      	lsls	r1, r3, #26
 800cb36:	bf42      	ittt	mi
 800cb38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb3c:	3302      	addmi	r3, #2
 800cb3e:	f8c9 3000 	strmi.w	r3, [r9]
 800cb42:	6825      	ldr	r5, [r4, #0]
 800cb44:	f015 0506 	ands.w	r5, r5, #6
 800cb48:	d107      	bne.n	800cb5a <_printf_common+0x52>
 800cb4a:	f104 0a19 	add.w	sl, r4, #25
 800cb4e:	68e3      	ldr	r3, [r4, #12]
 800cb50:	f8d9 2000 	ldr.w	r2, [r9]
 800cb54:	1a9b      	subs	r3, r3, r2
 800cb56:	42ab      	cmp	r3, r5
 800cb58:	dc28      	bgt.n	800cbac <_printf_common+0xa4>
 800cb5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	3300      	adds	r3, #0
 800cb62:	bf18      	it	ne
 800cb64:	2301      	movne	r3, #1
 800cb66:	0692      	lsls	r2, r2, #26
 800cb68:	d42d      	bmi.n	800cbc6 <_printf_common+0xbe>
 800cb6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb6e:	4639      	mov	r1, r7
 800cb70:	4630      	mov	r0, r6
 800cb72:	47c0      	blx	r8
 800cb74:	3001      	adds	r0, #1
 800cb76:	d020      	beq.n	800cbba <_printf_common+0xb2>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	68e5      	ldr	r5, [r4, #12]
 800cb7c:	f8d9 2000 	ldr.w	r2, [r9]
 800cb80:	f003 0306 	and.w	r3, r3, #6
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	bf08      	it	eq
 800cb88:	1aad      	subeq	r5, r5, r2
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	6922      	ldr	r2, [r4, #16]
 800cb8e:	bf0c      	ite	eq
 800cb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb94:	2500      	movne	r5, #0
 800cb96:	4293      	cmp	r3, r2
 800cb98:	bfc4      	itt	gt
 800cb9a:	1a9b      	subgt	r3, r3, r2
 800cb9c:	18ed      	addgt	r5, r5, r3
 800cb9e:	f04f 0900 	mov.w	r9, #0
 800cba2:	341a      	adds	r4, #26
 800cba4:	454d      	cmp	r5, r9
 800cba6:	d11a      	bne.n	800cbde <_printf_common+0xd6>
 800cba8:	2000      	movs	r0, #0
 800cbaa:	e008      	b.n	800cbbe <_printf_common+0xb6>
 800cbac:	2301      	movs	r3, #1
 800cbae:	4652      	mov	r2, sl
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	47c0      	blx	r8
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d103      	bne.n	800cbc2 <_printf_common+0xba>
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc2:	3501      	adds	r5, #1
 800cbc4:	e7c3      	b.n	800cb4e <_printf_common+0x46>
 800cbc6:	18e1      	adds	r1, r4, r3
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	2030      	movs	r0, #48	; 0x30
 800cbcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbd0:	4422      	add	r2, r4
 800cbd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbda:	3302      	adds	r3, #2
 800cbdc:	e7c5      	b.n	800cb6a <_printf_common+0x62>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	47c0      	blx	r8
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d0e6      	beq.n	800cbba <_printf_common+0xb2>
 800cbec:	f109 0901 	add.w	r9, r9, #1
 800cbf0:	e7d8      	b.n	800cba4 <_printf_common+0x9c>
	...

0800cbf4 <_printf_i>:
 800cbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	7e09      	ldrb	r1, [r1, #24]
 800cc00:	b085      	sub	sp, #20
 800cc02:	296e      	cmp	r1, #110	; 0x6e
 800cc04:	4617      	mov	r7, r2
 800cc06:	4606      	mov	r6, r0
 800cc08:	4698      	mov	r8, r3
 800cc0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc0c:	f000 80b3 	beq.w	800cd76 <_printf_i+0x182>
 800cc10:	d822      	bhi.n	800cc58 <_printf_i+0x64>
 800cc12:	2963      	cmp	r1, #99	; 0x63
 800cc14:	d036      	beq.n	800cc84 <_printf_i+0x90>
 800cc16:	d80a      	bhi.n	800cc2e <_printf_i+0x3a>
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	f000 80b9 	beq.w	800cd90 <_printf_i+0x19c>
 800cc1e:	2958      	cmp	r1, #88	; 0x58
 800cc20:	f000 8083 	beq.w	800cd2a <_printf_i+0x136>
 800cc24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc2c:	e032      	b.n	800cc94 <_printf_i+0xa0>
 800cc2e:	2964      	cmp	r1, #100	; 0x64
 800cc30:	d001      	beq.n	800cc36 <_printf_i+0x42>
 800cc32:	2969      	cmp	r1, #105	; 0x69
 800cc34:	d1f6      	bne.n	800cc24 <_printf_i+0x30>
 800cc36:	6820      	ldr	r0, [r4, #0]
 800cc38:	6813      	ldr	r3, [r2, #0]
 800cc3a:	0605      	lsls	r5, r0, #24
 800cc3c:	f103 0104 	add.w	r1, r3, #4
 800cc40:	d52a      	bpl.n	800cc98 <_printf_i+0xa4>
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6011      	str	r1, [r2, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	da03      	bge.n	800cc52 <_printf_i+0x5e>
 800cc4a:	222d      	movs	r2, #45	; 0x2d
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc52:	486f      	ldr	r0, [pc, #444]	; (800ce10 <_printf_i+0x21c>)
 800cc54:	220a      	movs	r2, #10
 800cc56:	e039      	b.n	800cccc <_printf_i+0xd8>
 800cc58:	2973      	cmp	r1, #115	; 0x73
 800cc5a:	f000 809d 	beq.w	800cd98 <_printf_i+0x1a4>
 800cc5e:	d808      	bhi.n	800cc72 <_printf_i+0x7e>
 800cc60:	296f      	cmp	r1, #111	; 0x6f
 800cc62:	d020      	beq.n	800cca6 <_printf_i+0xb2>
 800cc64:	2970      	cmp	r1, #112	; 0x70
 800cc66:	d1dd      	bne.n	800cc24 <_printf_i+0x30>
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	f043 0320 	orr.w	r3, r3, #32
 800cc6e:	6023      	str	r3, [r4, #0]
 800cc70:	e003      	b.n	800cc7a <_printf_i+0x86>
 800cc72:	2975      	cmp	r1, #117	; 0x75
 800cc74:	d017      	beq.n	800cca6 <_printf_i+0xb2>
 800cc76:	2978      	cmp	r1, #120	; 0x78
 800cc78:	d1d4      	bne.n	800cc24 <_printf_i+0x30>
 800cc7a:	2378      	movs	r3, #120	; 0x78
 800cc7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc80:	4864      	ldr	r0, [pc, #400]	; (800ce14 <_printf_i+0x220>)
 800cc82:	e055      	b.n	800cd30 <_printf_i+0x13c>
 800cc84:	6813      	ldr	r3, [r2, #0]
 800cc86:	1d19      	adds	r1, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6011      	str	r1, [r2, #0]
 800cc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc94:	2301      	movs	r3, #1
 800cc96:	e08c      	b.n	800cdb2 <_printf_i+0x1be>
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6011      	str	r1, [r2, #0]
 800cc9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cca0:	bf18      	it	ne
 800cca2:	b21b      	sxthne	r3, r3
 800cca4:	e7cf      	b.n	800cc46 <_printf_i+0x52>
 800cca6:	6813      	ldr	r3, [r2, #0]
 800cca8:	6825      	ldr	r5, [r4, #0]
 800ccaa:	1d18      	adds	r0, r3, #4
 800ccac:	6010      	str	r0, [r2, #0]
 800ccae:	0628      	lsls	r0, r5, #24
 800ccb0:	d501      	bpl.n	800ccb6 <_printf_i+0xc2>
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	e002      	b.n	800ccbc <_printf_i+0xc8>
 800ccb6:	0668      	lsls	r0, r5, #25
 800ccb8:	d5fb      	bpl.n	800ccb2 <_printf_i+0xbe>
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	4854      	ldr	r0, [pc, #336]	; (800ce10 <_printf_i+0x21c>)
 800ccbe:	296f      	cmp	r1, #111	; 0x6f
 800ccc0:	bf14      	ite	ne
 800ccc2:	220a      	movne	r2, #10
 800ccc4:	2208      	moveq	r2, #8
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cccc:	6865      	ldr	r5, [r4, #4]
 800ccce:	60a5      	str	r5, [r4, #8]
 800ccd0:	2d00      	cmp	r5, #0
 800ccd2:	f2c0 8095 	blt.w	800ce00 <_printf_i+0x20c>
 800ccd6:	6821      	ldr	r1, [r4, #0]
 800ccd8:	f021 0104 	bic.w	r1, r1, #4
 800ccdc:	6021      	str	r1, [r4, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d13d      	bne.n	800cd5e <_printf_i+0x16a>
 800cce2:	2d00      	cmp	r5, #0
 800cce4:	f040 808e 	bne.w	800ce04 <_printf_i+0x210>
 800cce8:	4665      	mov	r5, ip
 800ccea:	2a08      	cmp	r2, #8
 800ccec:	d10b      	bne.n	800cd06 <_printf_i+0x112>
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	07db      	lsls	r3, r3, #31
 800ccf2:	d508      	bpl.n	800cd06 <_printf_i+0x112>
 800ccf4:	6923      	ldr	r3, [r4, #16]
 800ccf6:	6862      	ldr	r2, [r4, #4]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	bfde      	ittt	le
 800ccfc:	2330      	movle	r3, #48	; 0x30
 800ccfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd02:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd06:	ebac 0305 	sub.w	r3, ip, r5
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	f8cd 8000 	str.w	r8, [sp]
 800cd10:	463b      	mov	r3, r7
 800cd12:	aa03      	add	r2, sp, #12
 800cd14:	4621      	mov	r1, r4
 800cd16:	4630      	mov	r0, r6
 800cd18:	f7ff fef6 	bl	800cb08 <_printf_common>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d14d      	bne.n	800cdbc <_printf_i+0x1c8>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	b005      	add	sp, #20
 800cd26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd2a:	4839      	ldr	r0, [pc, #228]	; (800ce10 <_printf_i+0x21c>)
 800cd2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd30:	6813      	ldr	r3, [r2, #0]
 800cd32:	6821      	ldr	r1, [r4, #0]
 800cd34:	1d1d      	adds	r5, r3, #4
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6015      	str	r5, [r2, #0]
 800cd3a:	060a      	lsls	r2, r1, #24
 800cd3c:	d50b      	bpl.n	800cd56 <_printf_i+0x162>
 800cd3e:	07ca      	lsls	r2, r1, #31
 800cd40:	bf44      	itt	mi
 800cd42:	f041 0120 	orrmi.w	r1, r1, #32
 800cd46:	6021      	strmi	r1, [r4, #0]
 800cd48:	b91b      	cbnz	r3, 800cd52 <_printf_i+0x15e>
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	f022 0220 	bic.w	r2, r2, #32
 800cd50:	6022      	str	r2, [r4, #0]
 800cd52:	2210      	movs	r2, #16
 800cd54:	e7b7      	b.n	800ccc6 <_printf_i+0xd2>
 800cd56:	064d      	lsls	r5, r1, #25
 800cd58:	bf48      	it	mi
 800cd5a:	b29b      	uxthmi	r3, r3
 800cd5c:	e7ef      	b.n	800cd3e <_printf_i+0x14a>
 800cd5e:	4665      	mov	r5, ip
 800cd60:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd64:	fb02 3311 	mls	r3, r2, r1, r3
 800cd68:	5cc3      	ldrb	r3, [r0, r3]
 800cd6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd6e:	460b      	mov	r3, r1
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d1f5      	bne.n	800cd60 <_printf_i+0x16c>
 800cd74:	e7b9      	b.n	800ccea <_printf_i+0xf6>
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	6961      	ldr	r1, [r4, #20]
 800cd7c:	1d18      	adds	r0, r3, #4
 800cd7e:	6010      	str	r0, [r2, #0]
 800cd80:	0628      	lsls	r0, r5, #24
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	d501      	bpl.n	800cd8a <_printf_i+0x196>
 800cd86:	6019      	str	r1, [r3, #0]
 800cd88:	e002      	b.n	800cd90 <_printf_i+0x19c>
 800cd8a:	066a      	lsls	r2, r5, #25
 800cd8c:	d5fb      	bpl.n	800cd86 <_printf_i+0x192>
 800cd8e:	8019      	strh	r1, [r3, #0]
 800cd90:	2300      	movs	r3, #0
 800cd92:	6123      	str	r3, [r4, #16]
 800cd94:	4665      	mov	r5, ip
 800cd96:	e7b9      	b.n	800cd0c <_printf_i+0x118>
 800cd98:	6813      	ldr	r3, [r2, #0]
 800cd9a:	1d19      	adds	r1, r3, #4
 800cd9c:	6011      	str	r1, [r2, #0]
 800cd9e:	681d      	ldr	r5, [r3, #0]
 800cda0:	6862      	ldr	r2, [r4, #4]
 800cda2:	2100      	movs	r1, #0
 800cda4:	4628      	mov	r0, r5
 800cda6:	f7f3 fa43 	bl	8000230 <memchr>
 800cdaa:	b108      	cbz	r0, 800cdb0 <_printf_i+0x1bc>
 800cdac:	1b40      	subs	r0, r0, r5
 800cdae:	6060      	str	r0, [r4, #4]
 800cdb0:	6863      	ldr	r3, [r4, #4]
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdba:	e7a7      	b.n	800cd0c <_printf_i+0x118>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d0aa      	beq.n	800cd20 <_printf_i+0x12c>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	079b      	lsls	r3, r3, #30
 800cdce:	d413      	bmi.n	800cdf8 <_printf_i+0x204>
 800cdd0:	68e0      	ldr	r0, [r4, #12]
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	4298      	cmp	r0, r3
 800cdd6:	bfb8      	it	lt
 800cdd8:	4618      	movlt	r0, r3
 800cdda:	e7a3      	b.n	800cd24 <_printf_i+0x130>
 800cddc:	2301      	movs	r3, #1
 800cdde:	464a      	mov	r2, r9
 800cde0:	4639      	mov	r1, r7
 800cde2:	4630      	mov	r0, r6
 800cde4:	47c0      	blx	r8
 800cde6:	3001      	adds	r0, #1
 800cde8:	d09a      	beq.n	800cd20 <_printf_i+0x12c>
 800cdea:	3501      	adds	r5, #1
 800cdec:	68e3      	ldr	r3, [r4, #12]
 800cdee:	9a03      	ldr	r2, [sp, #12]
 800cdf0:	1a9b      	subs	r3, r3, r2
 800cdf2:	42ab      	cmp	r3, r5
 800cdf4:	dcf2      	bgt.n	800cddc <_printf_i+0x1e8>
 800cdf6:	e7eb      	b.n	800cdd0 <_printf_i+0x1dc>
 800cdf8:	2500      	movs	r5, #0
 800cdfa:	f104 0919 	add.w	r9, r4, #25
 800cdfe:	e7f5      	b.n	800cdec <_printf_i+0x1f8>
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1ac      	bne.n	800cd5e <_printf_i+0x16a>
 800ce04:	7803      	ldrb	r3, [r0, #0]
 800ce06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce0e:	e76c      	b.n	800ccea <_printf_i+0xf6>
 800ce10:	0800ede2 	.word	0x0800ede2
 800ce14:	0800edf3 	.word	0x0800edf3

0800ce18 <iprintf>:
 800ce18:	b40f      	push	{r0, r1, r2, r3}
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	; (800ce44 <iprintf+0x2c>)
 800ce1c:	b513      	push	{r0, r1, r4, lr}
 800ce1e:	681c      	ldr	r4, [r3, #0]
 800ce20:	b124      	cbz	r4, 800ce2c <iprintf+0x14>
 800ce22:	69a3      	ldr	r3, [r4, #24]
 800ce24:	b913      	cbnz	r3, 800ce2c <iprintf+0x14>
 800ce26:	4620      	mov	r0, r4
 800ce28:	f001 f87a 	bl	800df20 <__sinit>
 800ce2c:	ab05      	add	r3, sp, #20
 800ce2e:	9a04      	ldr	r2, [sp, #16]
 800ce30:	68a1      	ldr	r1, [r4, #8]
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	4620      	mov	r0, r4
 800ce36:	f001 fd33 	bl	800e8a0 <_vfiprintf_r>
 800ce3a:	b002      	add	sp, #8
 800ce3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce40:	b004      	add	sp, #16
 800ce42:	4770      	bx	lr
 800ce44:	20000068 	.word	0x20000068

0800ce48 <putchar>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <putchar+0x24>)
 800ce4c:	681c      	ldr	r4, [r3, #0]
 800ce4e:	4605      	mov	r5, r0
 800ce50:	b124      	cbz	r4, 800ce5c <putchar+0x14>
 800ce52:	69a3      	ldr	r3, [r4, #24]
 800ce54:	b913      	cbnz	r3, 800ce5c <putchar+0x14>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f001 f862 	bl	800df20 <__sinit>
 800ce5c:	68a2      	ldr	r2, [r4, #8]
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4620      	mov	r0, r4
 800ce62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce66:	f001 be31 	b.w	800eacc <_putc_r>
 800ce6a:	bf00      	nop
 800ce6c:	20000068 	.word	0x20000068

0800ce70 <_puts_r>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	460e      	mov	r6, r1
 800ce74:	4605      	mov	r5, r0
 800ce76:	b118      	cbz	r0, 800ce80 <_puts_r+0x10>
 800ce78:	6983      	ldr	r3, [r0, #24]
 800ce7a:	b90b      	cbnz	r3, 800ce80 <_puts_r+0x10>
 800ce7c:	f001 f850 	bl	800df20 <__sinit>
 800ce80:	69ab      	ldr	r3, [r5, #24]
 800ce82:	68ac      	ldr	r4, [r5, #8]
 800ce84:	b913      	cbnz	r3, 800ce8c <_puts_r+0x1c>
 800ce86:	4628      	mov	r0, r5
 800ce88:	f001 f84a 	bl	800df20 <__sinit>
 800ce8c:	4b23      	ldr	r3, [pc, #140]	; (800cf1c <_puts_r+0xac>)
 800ce8e:	429c      	cmp	r4, r3
 800ce90:	d117      	bne.n	800cec2 <_puts_r+0x52>
 800ce92:	686c      	ldr	r4, [r5, #4]
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	071b      	lsls	r3, r3, #28
 800ce98:	d51d      	bpl.n	800ced6 <_puts_r+0x66>
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	b1db      	cbz	r3, 800ced6 <_puts_r+0x66>
 800ce9e:	3e01      	subs	r6, #1
 800cea0:	68a3      	ldr	r3, [r4, #8]
 800cea2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cea6:	3b01      	subs	r3, #1
 800cea8:	60a3      	str	r3, [r4, #8]
 800ceaa:	b9e9      	cbnz	r1, 800cee8 <_puts_r+0x78>
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	da2e      	bge.n	800cf0e <_puts_r+0x9e>
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	210a      	movs	r1, #10
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f000 f83f 	bl	800cf38 <__swbuf_r>
 800ceba:	3001      	adds	r0, #1
 800cebc:	d011      	beq.n	800cee2 <_puts_r+0x72>
 800cebe:	200a      	movs	r0, #10
 800cec0:	e011      	b.n	800cee6 <_puts_r+0x76>
 800cec2:	4b17      	ldr	r3, [pc, #92]	; (800cf20 <_puts_r+0xb0>)
 800cec4:	429c      	cmp	r4, r3
 800cec6:	d101      	bne.n	800cecc <_puts_r+0x5c>
 800cec8:	68ac      	ldr	r4, [r5, #8]
 800ceca:	e7e3      	b.n	800ce94 <_puts_r+0x24>
 800cecc:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <_puts_r+0xb4>)
 800cece:	429c      	cmp	r4, r3
 800ced0:	bf08      	it	eq
 800ced2:	68ec      	ldreq	r4, [r5, #12]
 800ced4:	e7de      	b.n	800ce94 <_puts_r+0x24>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4628      	mov	r0, r5
 800ceda:	f000 f87f 	bl	800cfdc <__swsetup_r>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d0dd      	beq.n	800ce9e <_puts_r+0x2e>
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da04      	bge.n	800cef6 <_puts_r+0x86>
 800ceec:	69a2      	ldr	r2, [r4, #24]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	dc06      	bgt.n	800cf00 <_puts_r+0x90>
 800cef2:	290a      	cmp	r1, #10
 800cef4:	d004      	beq.n	800cf00 <_puts_r+0x90>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	6022      	str	r2, [r4, #0]
 800cefc:	7019      	strb	r1, [r3, #0]
 800cefe:	e7cf      	b.n	800cea0 <_puts_r+0x30>
 800cf00:	4622      	mov	r2, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	f000 f818 	bl	800cf38 <__swbuf_r>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d1c9      	bne.n	800cea0 <_puts_r+0x30>
 800cf0c:	e7e9      	b.n	800cee2 <_puts_r+0x72>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	200a      	movs	r0, #10
 800cf12:	1c5a      	adds	r2, r3, #1
 800cf14:	6022      	str	r2, [r4, #0]
 800cf16:	7018      	strb	r0, [r3, #0]
 800cf18:	e7e5      	b.n	800cee6 <_puts_r+0x76>
 800cf1a:	bf00      	nop
 800cf1c:	0800ee34 	.word	0x0800ee34
 800cf20:	0800ee54 	.word	0x0800ee54
 800cf24:	0800ee14 	.word	0x0800ee14

0800cf28 <puts>:
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <puts+0xc>)
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f7ff bf9f 	b.w	800ce70 <_puts_r>
 800cf32:	bf00      	nop
 800cf34:	20000068 	.word	0x20000068

0800cf38 <__swbuf_r>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	460e      	mov	r6, r1
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4605      	mov	r5, r0
 800cf40:	b118      	cbz	r0, 800cf4a <__swbuf_r+0x12>
 800cf42:	6983      	ldr	r3, [r0, #24]
 800cf44:	b90b      	cbnz	r3, 800cf4a <__swbuf_r+0x12>
 800cf46:	f000 ffeb 	bl	800df20 <__sinit>
 800cf4a:	4b21      	ldr	r3, [pc, #132]	; (800cfd0 <__swbuf_r+0x98>)
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	d12a      	bne.n	800cfa6 <__swbuf_r+0x6e>
 800cf50:	686c      	ldr	r4, [r5, #4]
 800cf52:	69a3      	ldr	r3, [r4, #24]
 800cf54:	60a3      	str	r3, [r4, #8]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	071a      	lsls	r2, r3, #28
 800cf5a:	d52e      	bpl.n	800cfba <__swbuf_r+0x82>
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	b363      	cbz	r3, 800cfba <__swbuf_r+0x82>
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	6820      	ldr	r0, [r4, #0]
 800cf64:	1ac0      	subs	r0, r0, r3
 800cf66:	6963      	ldr	r3, [r4, #20]
 800cf68:	b2f6      	uxtb	r6, r6
 800cf6a:	4283      	cmp	r3, r0
 800cf6c:	4637      	mov	r7, r6
 800cf6e:	dc04      	bgt.n	800cf7a <__swbuf_r+0x42>
 800cf70:	4621      	mov	r1, r4
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 ff6a 	bl	800de4c <_fflush_r>
 800cf78:	bb28      	cbnz	r0, 800cfc6 <__swbuf_r+0x8e>
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	60a3      	str	r3, [r4, #8]
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	6022      	str	r2, [r4, #0]
 800cf86:	701e      	strb	r6, [r3, #0]
 800cf88:	6963      	ldr	r3, [r4, #20]
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	4283      	cmp	r3, r0
 800cf8e:	d004      	beq.n	800cf9a <__swbuf_r+0x62>
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	07db      	lsls	r3, r3, #31
 800cf94:	d519      	bpl.n	800cfca <__swbuf_r+0x92>
 800cf96:	2e0a      	cmp	r6, #10
 800cf98:	d117      	bne.n	800cfca <__swbuf_r+0x92>
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 ff55 	bl	800de4c <_fflush_r>
 800cfa2:	b190      	cbz	r0, 800cfca <__swbuf_r+0x92>
 800cfa4:	e00f      	b.n	800cfc6 <__swbuf_r+0x8e>
 800cfa6:	4b0b      	ldr	r3, [pc, #44]	; (800cfd4 <__swbuf_r+0x9c>)
 800cfa8:	429c      	cmp	r4, r3
 800cfaa:	d101      	bne.n	800cfb0 <__swbuf_r+0x78>
 800cfac:	68ac      	ldr	r4, [r5, #8]
 800cfae:	e7d0      	b.n	800cf52 <__swbuf_r+0x1a>
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <__swbuf_r+0xa0>)
 800cfb2:	429c      	cmp	r4, r3
 800cfb4:	bf08      	it	eq
 800cfb6:	68ec      	ldreq	r4, [r5, #12]
 800cfb8:	e7cb      	b.n	800cf52 <__swbuf_r+0x1a>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 f80d 	bl	800cfdc <__swsetup_r>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d0cc      	beq.n	800cf60 <__swbuf_r+0x28>
 800cfc6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfca:	4638      	mov	r0, r7
 800cfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	0800ee34 	.word	0x0800ee34
 800cfd4:	0800ee54 	.word	0x0800ee54
 800cfd8:	0800ee14 	.word	0x0800ee14

0800cfdc <__swsetup_r>:
 800cfdc:	4b32      	ldr	r3, [pc, #200]	; (800d0a8 <__swsetup_r+0xcc>)
 800cfde:	b570      	push	{r4, r5, r6, lr}
 800cfe0:	681d      	ldr	r5, [r3, #0]
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	b125      	cbz	r5, 800cff2 <__swsetup_r+0x16>
 800cfe8:	69ab      	ldr	r3, [r5, #24]
 800cfea:	b913      	cbnz	r3, 800cff2 <__swsetup_r+0x16>
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 ff97 	bl	800df20 <__sinit>
 800cff2:	4b2e      	ldr	r3, [pc, #184]	; (800d0ac <__swsetup_r+0xd0>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	d10f      	bne.n	800d018 <__swsetup_r+0x3c>
 800cff8:	686c      	ldr	r4, [r5, #4]
 800cffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cffe:	b29a      	uxth	r2, r3
 800d000:	0715      	lsls	r5, r2, #28
 800d002:	d42c      	bmi.n	800d05e <__swsetup_r+0x82>
 800d004:	06d0      	lsls	r0, r2, #27
 800d006:	d411      	bmi.n	800d02c <__swsetup_r+0x50>
 800d008:	2209      	movs	r2, #9
 800d00a:	6032      	str	r2, [r6, #0]
 800d00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	f04f 30ff 	mov.w	r0, #4294967295
 800d016:	e03e      	b.n	800d096 <__swsetup_r+0xba>
 800d018:	4b25      	ldr	r3, [pc, #148]	; (800d0b0 <__swsetup_r+0xd4>)
 800d01a:	429c      	cmp	r4, r3
 800d01c:	d101      	bne.n	800d022 <__swsetup_r+0x46>
 800d01e:	68ac      	ldr	r4, [r5, #8]
 800d020:	e7eb      	b.n	800cffa <__swsetup_r+0x1e>
 800d022:	4b24      	ldr	r3, [pc, #144]	; (800d0b4 <__swsetup_r+0xd8>)
 800d024:	429c      	cmp	r4, r3
 800d026:	bf08      	it	eq
 800d028:	68ec      	ldreq	r4, [r5, #12]
 800d02a:	e7e6      	b.n	800cffa <__swsetup_r+0x1e>
 800d02c:	0751      	lsls	r1, r2, #29
 800d02e:	d512      	bpl.n	800d056 <__swsetup_r+0x7a>
 800d030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d032:	b141      	cbz	r1, 800d046 <__swsetup_r+0x6a>
 800d034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d038:	4299      	cmp	r1, r3
 800d03a:	d002      	beq.n	800d042 <__swsetup_r+0x66>
 800d03c:	4630      	mov	r0, r6
 800d03e:	f001 fb5d 	bl	800e6fc <_free_r>
 800d042:	2300      	movs	r3, #0
 800d044:	6363      	str	r3, [r4, #52]	; 0x34
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	2300      	movs	r3, #0
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	6923      	ldr	r3, [r4, #16]
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f043 0308 	orr.w	r3, r3, #8
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	6923      	ldr	r3, [r4, #16]
 800d060:	b94b      	cbnz	r3, 800d076 <__swsetup_r+0x9a>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d06c:	d003      	beq.n	800d076 <__swsetup_r+0x9a>
 800d06e:	4621      	mov	r1, r4
 800d070:	4630      	mov	r0, r6
 800d072:	f001 f811 	bl	800e098 <__smakebuf_r>
 800d076:	89a2      	ldrh	r2, [r4, #12]
 800d078:	f012 0301 	ands.w	r3, r2, #1
 800d07c:	d00c      	beq.n	800d098 <__swsetup_r+0xbc>
 800d07e:	2300      	movs	r3, #0
 800d080:	60a3      	str	r3, [r4, #8]
 800d082:	6963      	ldr	r3, [r4, #20]
 800d084:	425b      	negs	r3, r3
 800d086:	61a3      	str	r3, [r4, #24]
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	b953      	cbnz	r3, 800d0a2 <__swsetup_r+0xc6>
 800d08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d090:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d094:	d1ba      	bne.n	800d00c <__swsetup_r+0x30>
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	0792      	lsls	r2, r2, #30
 800d09a:	bf58      	it	pl
 800d09c:	6963      	ldrpl	r3, [r4, #20]
 800d09e:	60a3      	str	r3, [r4, #8]
 800d0a0:	e7f2      	b.n	800d088 <__swsetup_r+0xac>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e7f7      	b.n	800d096 <__swsetup_r+0xba>
 800d0a6:	bf00      	nop
 800d0a8:	20000068 	.word	0x20000068
 800d0ac:	0800ee34 	.word	0x0800ee34
 800d0b0:	0800ee54 	.word	0x0800ee54
 800d0b4:	0800ee14 	.word	0x0800ee14

0800d0b8 <quorem>:
 800d0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	6903      	ldr	r3, [r0, #16]
 800d0be:	690c      	ldr	r4, [r1, #16]
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	4680      	mov	r8, r0
 800d0c4:	f2c0 8082 	blt.w	800d1cc <quorem+0x114>
 800d0c8:	3c01      	subs	r4, #1
 800d0ca:	f101 0714 	add.w	r7, r1, #20
 800d0ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d0d2:	f100 0614 	add.w	r6, r0, #20
 800d0d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d0da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d0de:	eb06 030c 	add.w	r3, r6, ip
 800d0e2:	3501      	adds	r5, #1
 800d0e4:	eb07 090c 	add.w	r9, r7, ip
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	fbb0 f5f5 	udiv	r5, r0, r5
 800d0ee:	b395      	cbz	r5, 800d156 <quorem+0x9e>
 800d0f0:	f04f 0a00 	mov.w	sl, #0
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	46b6      	mov	lr, r6
 800d0f8:	46d3      	mov	fp, sl
 800d0fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0fe:	b293      	uxth	r3, r2
 800d100:	fb05 a303 	mla	r3, r5, r3, sl
 800d104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d108:	b29b      	uxth	r3, r3
 800d10a:	ebab 0303 	sub.w	r3, fp, r3
 800d10e:	0c12      	lsrs	r2, r2, #16
 800d110:	f8de b000 	ldr.w	fp, [lr]
 800d114:	fb05 a202 	mla	r2, r5, r2, sl
 800d118:	fa13 f38b 	uxtah	r3, r3, fp
 800d11c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d120:	fa1f fb82 	uxth.w	fp, r2
 800d124:	f8de 2000 	ldr.w	r2, [lr]
 800d128:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d12c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d130:	b29b      	uxth	r3, r3
 800d132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d136:	4581      	cmp	r9, r0
 800d138:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d13c:	f84e 3b04 	str.w	r3, [lr], #4
 800d140:	d2db      	bcs.n	800d0fa <quorem+0x42>
 800d142:	f856 300c 	ldr.w	r3, [r6, ip]
 800d146:	b933      	cbnz	r3, 800d156 <quorem+0x9e>
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	3b04      	subs	r3, #4
 800d14c:	429e      	cmp	r6, r3
 800d14e:	461a      	mov	r2, r3
 800d150:	d330      	bcc.n	800d1b4 <quorem+0xfc>
 800d152:	f8c8 4010 	str.w	r4, [r8, #16]
 800d156:	4640      	mov	r0, r8
 800d158:	f001 f9fc 	bl	800e554 <__mcmp>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	db25      	blt.n	800d1ac <quorem+0xf4>
 800d160:	3501      	adds	r5, #1
 800d162:	4630      	mov	r0, r6
 800d164:	f04f 0c00 	mov.w	ip, #0
 800d168:	f857 2b04 	ldr.w	r2, [r7], #4
 800d16c:	f8d0 e000 	ldr.w	lr, [r0]
 800d170:	b293      	uxth	r3, r2
 800d172:	ebac 0303 	sub.w	r3, ip, r3
 800d176:	0c12      	lsrs	r2, r2, #16
 800d178:	fa13 f38e 	uxtah	r3, r3, lr
 800d17c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d184:	b29b      	uxth	r3, r3
 800d186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d18a:	45b9      	cmp	r9, r7
 800d18c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d190:	f840 3b04 	str.w	r3, [r0], #4
 800d194:	d2e8      	bcs.n	800d168 <quorem+0xb0>
 800d196:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d19a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d19e:	b92a      	cbnz	r2, 800d1ac <quorem+0xf4>
 800d1a0:	3b04      	subs	r3, #4
 800d1a2:	429e      	cmp	r6, r3
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	d30b      	bcc.n	800d1c0 <quorem+0x108>
 800d1a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	b003      	add	sp, #12
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b4:	6812      	ldr	r2, [r2, #0]
 800d1b6:	3b04      	subs	r3, #4
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	d1ca      	bne.n	800d152 <quorem+0x9a>
 800d1bc:	3c01      	subs	r4, #1
 800d1be:	e7c5      	b.n	800d14c <quorem+0x94>
 800d1c0:	6812      	ldr	r2, [r2, #0]
 800d1c2:	3b04      	subs	r3, #4
 800d1c4:	2a00      	cmp	r2, #0
 800d1c6:	d1ef      	bne.n	800d1a8 <quorem+0xf0>
 800d1c8:	3c01      	subs	r4, #1
 800d1ca:	e7ea      	b.n	800d1a2 <quorem+0xea>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e7ee      	b.n	800d1ae <quorem+0xf6>

0800d1d0 <_dtoa_r>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	ec57 6b10 	vmov	r6, r7, d0
 800d1d8:	b097      	sub	sp, #92	; 0x5c
 800d1da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1dc:	9106      	str	r1, [sp, #24]
 800d1de:	4604      	mov	r4, r0
 800d1e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1e2:	9312      	str	r3, [sp, #72]	; 0x48
 800d1e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1e8:	e9cd 6700 	strd	r6, r7, [sp]
 800d1ec:	b93d      	cbnz	r5, 800d1fe <_dtoa_r+0x2e>
 800d1ee:	2010      	movs	r0, #16
 800d1f0:	f000 ff92 	bl	800e118 <malloc>
 800d1f4:	6260      	str	r0, [r4, #36]	; 0x24
 800d1f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1fa:	6005      	str	r5, [r0, #0]
 800d1fc:	60c5      	str	r5, [r0, #12]
 800d1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d200:	6819      	ldr	r1, [r3, #0]
 800d202:	b151      	cbz	r1, 800d21a <_dtoa_r+0x4a>
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	604a      	str	r2, [r1, #4]
 800d208:	2301      	movs	r3, #1
 800d20a:	4093      	lsls	r3, r2
 800d20c:	608b      	str	r3, [r1, #8]
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 ffbe 	bl	800e190 <_Bfree>
 800d214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	1e3b      	subs	r3, r7, #0
 800d21c:	bfbb      	ittet	lt
 800d21e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d222:	9301      	strlt	r3, [sp, #4]
 800d224:	2300      	movge	r3, #0
 800d226:	2201      	movlt	r2, #1
 800d228:	bfac      	ite	ge
 800d22a:	f8c8 3000 	strge.w	r3, [r8]
 800d22e:	f8c8 2000 	strlt.w	r2, [r8]
 800d232:	4baf      	ldr	r3, [pc, #700]	; (800d4f0 <_dtoa_r+0x320>)
 800d234:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d238:	ea33 0308 	bics.w	r3, r3, r8
 800d23c:	d114      	bne.n	800d268 <_dtoa_r+0x98>
 800d23e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d240:	f242 730f 	movw	r3, #9999	; 0x270f
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	b923      	cbnz	r3, 800d254 <_dtoa_r+0x84>
 800d24a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d24e:	2800      	cmp	r0, #0
 800d250:	f000 8542 	beq.w	800dcd8 <_dtoa_r+0xb08>
 800d254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d256:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d504 <_dtoa_r+0x334>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 8544 	beq.w	800dce8 <_dtoa_r+0xb18>
 800d260:	f10b 0303 	add.w	r3, fp, #3
 800d264:	f000 bd3e 	b.w	800dce4 <_dtoa_r+0xb14>
 800d268:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	4630      	mov	r0, r6
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 800d278:	4681      	mov	r9, r0
 800d27a:	b168      	cbz	r0, 800d298 <_dtoa_r+0xc8>
 800d27c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d27e:	2301      	movs	r3, #1
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8524 	beq.w	800dcd2 <_dtoa_r+0xb02>
 800d28a:	4b9a      	ldr	r3, [pc, #616]	; (800d4f4 <_dtoa_r+0x324>)
 800d28c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d28e:	f103 3bff 	add.w	fp, r3, #4294967295
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	f000 bd28 	b.w	800dce8 <_dtoa_r+0xb18>
 800d298:	aa14      	add	r2, sp, #80	; 0x50
 800d29a:	a915      	add	r1, sp, #84	; 0x54
 800d29c:	ec47 6b10 	vmov	d0, r6, r7
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 f9ce 	bl	800e642 <__d2b>
 800d2a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d2aa:	9004      	str	r0, [sp, #16]
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	d07c      	beq.n	800d3aa <_dtoa_r+0x1da>
 800d2b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d2b8:	46b2      	mov	sl, r6
 800d2ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d2be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	4b8b      	ldr	r3, [pc, #556]	; (800d4f8 <_dtoa_r+0x328>)
 800d2ca:	4650      	mov	r0, sl
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	f7f3 f803 	bl	80002d8 <__aeabi_dsub>
 800d2d2:	a381      	add	r3, pc, #516	; (adr r3, 800d4d8 <_dtoa_r+0x308>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f3 f9b6 	bl	8000648 <__aeabi_dmul>
 800d2dc:	a380      	add	r3, pc, #512	; (adr r3, 800d4e0 <_dtoa_r+0x310>)
 800d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e2:	f7f2 fffb 	bl	80002dc <__adddf3>
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	460f      	mov	r7, r1
 800d2ec:	f7f3 f942 	bl	8000574 <__aeabi_i2d>
 800d2f0:	a37d      	add	r3, pc, #500	; (adr r3, 800d4e8 <_dtoa_r+0x318>)
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	f7f3 f9a7 	bl	8000648 <__aeabi_dmul>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4630      	mov	r0, r6
 800d300:	4639      	mov	r1, r7
 800d302:	f7f2 ffeb 	bl	80002dc <__adddf3>
 800d306:	4606      	mov	r6, r0
 800d308:	460f      	mov	r7, r1
 800d30a:	f7f3 fc4d 	bl	8000ba8 <__aeabi_d2iz>
 800d30e:	2200      	movs	r2, #0
 800d310:	4682      	mov	sl, r0
 800d312:	2300      	movs	r3, #0
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f3 fc08 	bl	8000b2c <__aeabi_dcmplt>
 800d31c:	b148      	cbz	r0, 800d332 <_dtoa_r+0x162>
 800d31e:	4650      	mov	r0, sl
 800d320:	f7f3 f928 	bl	8000574 <__aeabi_i2d>
 800d324:	4632      	mov	r2, r6
 800d326:	463b      	mov	r3, r7
 800d328:	f7f3 fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 800d32c:	b908      	cbnz	r0, 800d332 <_dtoa_r+0x162>
 800d32e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d332:	f1ba 0f16 	cmp.w	sl, #22
 800d336:	d859      	bhi.n	800d3ec <_dtoa_r+0x21c>
 800d338:	4970      	ldr	r1, [pc, #448]	; (800d4fc <_dtoa_r+0x32c>)
 800d33a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d346:	f7f3 fc0f 	bl	8000b68 <__aeabi_dcmpgt>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d050      	beq.n	800d3f0 <_dtoa_r+0x220>
 800d34e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d352:	2300      	movs	r3, #0
 800d354:	930f      	str	r3, [sp, #60]	; 0x3c
 800d356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d358:	1b5d      	subs	r5, r3, r5
 800d35a:	f1b5 0801 	subs.w	r8, r5, #1
 800d35e:	bf49      	itett	mi
 800d360:	f1c5 0301 	rsbmi	r3, r5, #1
 800d364:	2300      	movpl	r3, #0
 800d366:	9305      	strmi	r3, [sp, #20]
 800d368:	f04f 0800 	movmi.w	r8, #0
 800d36c:	bf58      	it	pl
 800d36e:	9305      	strpl	r3, [sp, #20]
 800d370:	f1ba 0f00 	cmp.w	sl, #0
 800d374:	db3e      	blt.n	800d3f4 <_dtoa_r+0x224>
 800d376:	2300      	movs	r3, #0
 800d378:	44d0      	add	r8, sl
 800d37a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	9b06      	ldr	r3, [sp, #24]
 800d382:	2b09      	cmp	r3, #9
 800d384:	f200 8090 	bhi.w	800d4a8 <_dtoa_r+0x2d8>
 800d388:	2b05      	cmp	r3, #5
 800d38a:	bfc4      	itt	gt
 800d38c:	3b04      	subgt	r3, #4
 800d38e:	9306      	strgt	r3, [sp, #24]
 800d390:	9b06      	ldr	r3, [sp, #24]
 800d392:	f1a3 0302 	sub.w	r3, r3, #2
 800d396:	bfcc      	ite	gt
 800d398:	2500      	movgt	r5, #0
 800d39a:	2501      	movle	r5, #1
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	f200 808f 	bhi.w	800d4c0 <_dtoa_r+0x2f0>
 800d3a2:	e8df f003 	tbb	[pc, r3]
 800d3a6:	7f7d      	.short	0x7f7d
 800d3a8:	7131      	.short	0x7131
 800d3aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d3ae:	441d      	add	r5, r3
 800d3b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d3b4:	2820      	cmp	r0, #32
 800d3b6:	dd13      	ble.n	800d3e0 <_dtoa_r+0x210>
 800d3b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d3bc:	9b00      	ldr	r3, [sp, #0]
 800d3be:	fa08 f800 	lsl.w	r8, r8, r0
 800d3c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d3c6:	fa23 f000 	lsr.w	r0, r3, r0
 800d3ca:	ea48 0000 	orr.w	r0, r8, r0
 800d3ce:	f7f3 f8c1 	bl	8000554 <__aeabi_ui2d>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4682      	mov	sl, r0
 800d3d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d3da:	3d01      	subs	r5, #1
 800d3dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3de:	e772      	b.n	800d2c6 <_dtoa_r+0xf6>
 800d3e0:	9b00      	ldr	r3, [sp, #0]
 800d3e2:	f1c0 0020 	rsb	r0, r0, #32
 800d3e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ea:	e7f0      	b.n	800d3ce <_dtoa_r+0x1fe>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e7b1      	b.n	800d354 <_dtoa_r+0x184>
 800d3f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d3f2:	e7b0      	b.n	800d356 <_dtoa_r+0x186>
 800d3f4:	9b05      	ldr	r3, [sp, #20]
 800d3f6:	eba3 030a 	sub.w	r3, r3, sl
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	f1ca 0300 	rsb	r3, sl, #0
 800d400:	9307      	str	r3, [sp, #28]
 800d402:	2300      	movs	r3, #0
 800d404:	930e      	str	r3, [sp, #56]	; 0x38
 800d406:	e7bb      	b.n	800d380 <_dtoa_r+0x1b0>
 800d408:	2301      	movs	r3, #1
 800d40a:	930a      	str	r3, [sp, #40]	; 0x28
 800d40c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d40e:	2b00      	cmp	r3, #0
 800d410:	dd59      	ble.n	800d4c6 <_dtoa_r+0x2f6>
 800d412:	9302      	str	r3, [sp, #8]
 800d414:	4699      	mov	r9, r3
 800d416:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d418:	2200      	movs	r2, #0
 800d41a:	6072      	str	r2, [r6, #4]
 800d41c:	2204      	movs	r2, #4
 800d41e:	f102 0014 	add.w	r0, r2, #20
 800d422:	4298      	cmp	r0, r3
 800d424:	6871      	ldr	r1, [r6, #4]
 800d426:	d953      	bls.n	800d4d0 <_dtoa_r+0x300>
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 fe7d 	bl	800e128 <_Balloc>
 800d42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	f1b9 0f0e 	cmp.w	r9, #14
 800d436:	f8d3 b000 	ldr.w	fp, [r3]
 800d43a:	f200 80e6 	bhi.w	800d60a <_dtoa_r+0x43a>
 800d43e:	2d00      	cmp	r5, #0
 800d440:	f000 80e3 	beq.w	800d60a <_dtoa_r+0x43a>
 800d444:	ed9d 7b00 	vldr	d7, [sp]
 800d448:	f1ba 0f00 	cmp.w	sl, #0
 800d44c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d450:	dd74      	ble.n	800d53c <_dtoa_r+0x36c>
 800d452:	4a2a      	ldr	r2, [pc, #168]	; (800d4fc <_dtoa_r+0x32c>)
 800d454:	f00a 030f 	and.w	r3, sl, #15
 800d458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d45c:	ed93 7b00 	vldr	d7, [r3]
 800d460:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d464:	06f0      	lsls	r0, r6, #27
 800d466:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d46a:	d565      	bpl.n	800d538 <_dtoa_r+0x368>
 800d46c:	4b24      	ldr	r3, [pc, #144]	; (800d500 <_dtoa_r+0x330>)
 800d46e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d472:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d476:	f7f3 fa11 	bl	800089c <__aeabi_ddiv>
 800d47a:	e9cd 0100 	strd	r0, r1, [sp]
 800d47e:	f006 060f 	and.w	r6, r6, #15
 800d482:	2503      	movs	r5, #3
 800d484:	4f1e      	ldr	r7, [pc, #120]	; (800d500 <_dtoa_r+0x330>)
 800d486:	e04c      	b.n	800d522 <_dtoa_r+0x352>
 800d488:	2301      	movs	r3, #1
 800d48a:	930a      	str	r3, [sp, #40]	; 0x28
 800d48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48e:	4453      	add	r3, sl
 800d490:	f103 0901 	add.w	r9, r3, #1
 800d494:	9302      	str	r3, [sp, #8]
 800d496:	464b      	mov	r3, r9
 800d498:	2b01      	cmp	r3, #1
 800d49a:	bfb8      	it	lt
 800d49c:	2301      	movlt	r3, #1
 800d49e:	e7ba      	b.n	800d416 <_dtoa_r+0x246>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e7b2      	b.n	800d40a <_dtoa_r+0x23a>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e7f0      	b.n	800d48a <_dtoa_r+0x2ba>
 800d4a8:	2501      	movs	r5, #1
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	9306      	str	r3, [sp, #24]
 800d4ae:	950a      	str	r5, [sp, #40]	; 0x28
 800d4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	4699      	mov	r9, r3
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	2312      	movs	r3, #18
 800d4bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800d4be:	e7aa      	b.n	800d416 <_dtoa_r+0x246>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d4c4:	e7f4      	b.n	800d4b0 <_dtoa_r+0x2e0>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	9302      	str	r3, [sp, #8]
 800d4ca:	4699      	mov	r9, r3
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	e7f5      	b.n	800d4bc <_dtoa_r+0x2ec>
 800d4d0:	3101      	adds	r1, #1
 800d4d2:	6071      	str	r1, [r6, #4]
 800d4d4:	0052      	lsls	r2, r2, #1
 800d4d6:	e7a2      	b.n	800d41e <_dtoa_r+0x24e>
 800d4d8:	636f4361 	.word	0x636f4361
 800d4dc:	3fd287a7 	.word	0x3fd287a7
 800d4e0:	8b60c8b3 	.word	0x8b60c8b3
 800d4e4:	3fc68a28 	.word	0x3fc68a28
 800d4e8:	509f79fb 	.word	0x509f79fb
 800d4ec:	3fd34413 	.word	0x3fd34413
 800d4f0:	7ff00000 	.word	0x7ff00000
 800d4f4:	0800ede1 	.word	0x0800ede1
 800d4f8:	3ff80000 	.word	0x3ff80000
 800d4fc:	0800eea0 	.word	0x0800eea0
 800d500:	0800ee78 	.word	0x0800ee78
 800d504:	0800ee0d 	.word	0x0800ee0d
 800d508:	07f1      	lsls	r1, r6, #31
 800d50a:	d508      	bpl.n	800d51e <_dtoa_r+0x34e>
 800d50c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d514:	f7f3 f898 	bl	8000648 <__aeabi_dmul>
 800d518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d51c:	3501      	adds	r5, #1
 800d51e:	1076      	asrs	r6, r6, #1
 800d520:	3708      	adds	r7, #8
 800d522:	2e00      	cmp	r6, #0
 800d524:	d1f0      	bne.n	800d508 <_dtoa_r+0x338>
 800d526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d52a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d52e:	f7f3 f9b5 	bl	800089c <__aeabi_ddiv>
 800d532:	e9cd 0100 	strd	r0, r1, [sp]
 800d536:	e01a      	b.n	800d56e <_dtoa_r+0x39e>
 800d538:	2502      	movs	r5, #2
 800d53a:	e7a3      	b.n	800d484 <_dtoa_r+0x2b4>
 800d53c:	f000 80a0 	beq.w	800d680 <_dtoa_r+0x4b0>
 800d540:	f1ca 0600 	rsb	r6, sl, #0
 800d544:	4b9f      	ldr	r3, [pc, #636]	; (800d7c4 <_dtoa_r+0x5f4>)
 800d546:	4fa0      	ldr	r7, [pc, #640]	; (800d7c8 <_dtoa_r+0x5f8>)
 800d548:	f006 020f 	and.w	r2, r6, #15
 800d54c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d558:	f7f3 f876 	bl	8000648 <__aeabi_dmul>
 800d55c:	e9cd 0100 	strd	r0, r1, [sp]
 800d560:	1136      	asrs	r6, r6, #4
 800d562:	2300      	movs	r3, #0
 800d564:	2502      	movs	r5, #2
 800d566:	2e00      	cmp	r6, #0
 800d568:	d17f      	bne.n	800d66a <_dtoa_r+0x49a>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e1      	bne.n	800d532 <_dtoa_r+0x362>
 800d56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 8087 	beq.w	800d684 <_dtoa_r+0x4b4>
 800d576:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d57a:	2200      	movs	r2, #0
 800d57c:	4b93      	ldr	r3, [pc, #588]	; (800d7cc <_dtoa_r+0x5fc>)
 800d57e:	4630      	mov	r0, r6
 800d580:	4639      	mov	r1, r7
 800d582:	f7f3 fad3 	bl	8000b2c <__aeabi_dcmplt>
 800d586:	2800      	cmp	r0, #0
 800d588:	d07c      	beq.n	800d684 <_dtoa_r+0x4b4>
 800d58a:	f1b9 0f00 	cmp.w	r9, #0
 800d58e:	d079      	beq.n	800d684 <_dtoa_r+0x4b4>
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	dd35      	ble.n	800d602 <_dtoa_r+0x432>
 800d596:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d59a:	9308      	str	r3, [sp, #32]
 800d59c:	4639      	mov	r1, r7
 800d59e:	2200      	movs	r2, #0
 800d5a0:	4b8b      	ldr	r3, [pc, #556]	; (800d7d0 <_dtoa_r+0x600>)
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7f3 f850 	bl	8000648 <__aeabi_dmul>
 800d5a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ac:	9f02      	ldr	r7, [sp, #8]
 800d5ae:	3501      	adds	r5, #1
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f7f2 ffdf 	bl	8000574 <__aeabi_i2d>
 800d5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ba:	f7f3 f845 	bl	8000648 <__aeabi_dmul>
 800d5be:	2200      	movs	r2, #0
 800d5c0:	4b84      	ldr	r3, [pc, #528]	; (800d7d4 <_dtoa_r+0x604>)
 800d5c2:	f7f2 fe8b 	bl	80002dc <__adddf3>
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	d15d      	bne.n	800d68c <_dtoa_r+0x4bc>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	4b81      	ldr	r3, [pc, #516]	; (800d7d8 <_dtoa_r+0x608>)
 800d5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5d8:	f7f2 fe7e 	bl	80002d8 <__aeabi_dsub>
 800d5dc:	462a      	mov	r2, r5
 800d5de:	4633      	mov	r3, r6
 800d5e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d5e4:	f7f3 fac0 	bl	8000b68 <__aeabi_dcmpgt>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	f040 8288 	bne.w	800dafe <_dtoa_r+0x92e>
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5f8:	f7f3 fa98 	bl	8000b2c <__aeabi_dcmplt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 827c 	bne.w	800dafa <_dtoa_r+0x92a>
 800d602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d606:	e9cd 2300 	strd	r2, r3, [sp]
 800d60a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f2c0 8150 	blt.w	800d8b2 <_dtoa_r+0x6e2>
 800d612:	f1ba 0f0e 	cmp.w	sl, #14
 800d616:	f300 814c 	bgt.w	800d8b2 <_dtoa_r+0x6e2>
 800d61a:	4b6a      	ldr	r3, [pc, #424]	; (800d7c4 <_dtoa_r+0x5f4>)
 800d61c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d620:	ed93 7b00 	vldr	d7, [r3]
 800d624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d626:	2b00      	cmp	r3, #0
 800d628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d62c:	f280 80d8 	bge.w	800d7e0 <_dtoa_r+0x610>
 800d630:	f1b9 0f00 	cmp.w	r9, #0
 800d634:	f300 80d4 	bgt.w	800d7e0 <_dtoa_r+0x610>
 800d638:	f040 825e 	bne.w	800daf8 <_dtoa_r+0x928>
 800d63c:	2200      	movs	r2, #0
 800d63e:	4b66      	ldr	r3, [pc, #408]	; (800d7d8 <_dtoa_r+0x608>)
 800d640:	ec51 0b17 	vmov	r0, r1, d7
 800d644:	f7f3 f800 	bl	8000648 <__aeabi_dmul>
 800d648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64c:	f7f3 fa82 	bl	8000b54 <__aeabi_dcmpge>
 800d650:	464f      	mov	r7, r9
 800d652:	464e      	mov	r6, r9
 800d654:	2800      	cmp	r0, #0
 800d656:	f040 8234 	bne.w	800dac2 <_dtoa_r+0x8f2>
 800d65a:	2331      	movs	r3, #49	; 0x31
 800d65c:	f10b 0501 	add.w	r5, fp, #1
 800d660:	f88b 3000 	strb.w	r3, [fp]
 800d664:	f10a 0a01 	add.w	sl, sl, #1
 800d668:	e22f      	b.n	800daca <_dtoa_r+0x8fa>
 800d66a:	07f2      	lsls	r2, r6, #31
 800d66c:	d505      	bpl.n	800d67a <_dtoa_r+0x4aa>
 800d66e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d672:	f7f2 ffe9 	bl	8000648 <__aeabi_dmul>
 800d676:	3501      	adds	r5, #1
 800d678:	2301      	movs	r3, #1
 800d67a:	1076      	asrs	r6, r6, #1
 800d67c:	3708      	adds	r7, #8
 800d67e:	e772      	b.n	800d566 <_dtoa_r+0x396>
 800d680:	2502      	movs	r5, #2
 800d682:	e774      	b.n	800d56e <_dtoa_r+0x39e>
 800d684:	f8cd a020 	str.w	sl, [sp, #32]
 800d688:	464f      	mov	r7, r9
 800d68a:	e791      	b.n	800d5b0 <_dtoa_r+0x3e0>
 800d68c:	4b4d      	ldr	r3, [pc, #308]	; (800d7c4 <_dtoa_r+0x5f4>)
 800d68e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d692:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d047      	beq.n	800d72c <_dtoa_r+0x55c>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	494e      	ldr	r1, [pc, #312]	; (800d7dc <_dtoa_r+0x60c>)
 800d6a4:	f7f3 f8fa 	bl	800089c <__aeabi_ddiv>
 800d6a8:	462a      	mov	r2, r5
 800d6aa:	4633      	mov	r3, r6
 800d6ac:	f7f2 fe14 	bl	80002d8 <__aeabi_dsub>
 800d6b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6b4:	465d      	mov	r5, fp
 800d6b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6ba:	f7f3 fa75 	bl	8000ba8 <__aeabi_d2iz>
 800d6be:	4606      	mov	r6, r0
 800d6c0:	f7f2 ff58 	bl	8000574 <__aeabi_i2d>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6cc:	f7f2 fe04 	bl	80002d8 <__aeabi_dsub>
 800d6d0:	3630      	adds	r6, #48	; 0x30
 800d6d2:	f805 6b01 	strb.w	r6, [r5], #1
 800d6d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6da:	e9cd 0100 	strd	r0, r1, [sp]
 800d6de:	f7f3 fa25 	bl	8000b2c <__aeabi_dcmplt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d163      	bne.n	800d7ae <_dtoa_r+0x5de>
 800d6e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	4937      	ldr	r1, [pc, #220]	; (800d7cc <_dtoa_r+0x5fc>)
 800d6ee:	f7f2 fdf3 	bl	80002d8 <__aeabi_dsub>
 800d6f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6f6:	f7f3 fa19 	bl	8000b2c <__aeabi_dcmplt>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	f040 80b7 	bne.w	800d86e <_dtoa_r+0x69e>
 800d700:	eba5 030b 	sub.w	r3, r5, fp
 800d704:	429f      	cmp	r7, r3
 800d706:	f77f af7c 	ble.w	800d602 <_dtoa_r+0x432>
 800d70a:	2200      	movs	r2, #0
 800d70c:	4b30      	ldr	r3, [pc, #192]	; (800d7d0 <_dtoa_r+0x600>)
 800d70e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d712:	f7f2 ff99 	bl	8000648 <__aeabi_dmul>
 800d716:	2200      	movs	r2, #0
 800d718:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d71c:	4b2c      	ldr	r3, [pc, #176]	; (800d7d0 <_dtoa_r+0x600>)
 800d71e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d722:	f7f2 ff91 	bl	8000648 <__aeabi_dmul>
 800d726:	e9cd 0100 	strd	r0, r1, [sp]
 800d72a:	e7c4      	b.n	800d6b6 <_dtoa_r+0x4e6>
 800d72c:	462a      	mov	r2, r5
 800d72e:	4633      	mov	r3, r6
 800d730:	f7f2 ff8a 	bl	8000648 <__aeabi_dmul>
 800d734:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d738:	eb0b 0507 	add.w	r5, fp, r7
 800d73c:	465e      	mov	r6, fp
 800d73e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d742:	f7f3 fa31 	bl	8000ba8 <__aeabi_d2iz>
 800d746:	4607      	mov	r7, r0
 800d748:	f7f2 ff14 	bl	8000574 <__aeabi_i2d>
 800d74c:	3730      	adds	r7, #48	; 0x30
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d756:	f7f2 fdbf 	bl	80002d8 <__aeabi_dsub>
 800d75a:	f806 7b01 	strb.w	r7, [r6], #1
 800d75e:	42ae      	cmp	r6, r5
 800d760:	e9cd 0100 	strd	r0, r1, [sp]
 800d764:	f04f 0200 	mov.w	r2, #0
 800d768:	d126      	bne.n	800d7b8 <_dtoa_r+0x5e8>
 800d76a:	4b1c      	ldr	r3, [pc, #112]	; (800d7dc <_dtoa_r+0x60c>)
 800d76c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d770:	f7f2 fdb4 	bl	80002dc <__adddf3>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d77c:	f7f3 f9f4 	bl	8000b68 <__aeabi_dcmpgt>
 800d780:	2800      	cmp	r0, #0
 800d782:	d174      	bne.n	800d86e <_dtoa_r+0x69e>
 800d784:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d788:	2000      	movs	r0, #0
 800d78a:	4914      	ldr	r1, [pc, #80]	; (800d7dc <_dtoa_r+0x60c>)
 800d78c:	f7f2 fda4 	bl	80002d8 <__aeabi_dsub>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d798:	f7f3 f9c8 	bl	8000b2c <__aeabi_dcmplt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f43f af30 	beq.w	800d602 <_dtoa_r+0x432>
 800d7a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7a6:	2b30      	cmp	r3, #48	; 0x30
 800d7a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d7ac:	d002      	beq.n	800d7b4 <_dtoa_r+0x5e4>
 800d7ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d7b2:	e04a      	b.n	800d84a <_dtoa_r+0x67a>
 800d7b4:	4615      	mov	r5, r2
 800d7b6:	e7f4      	b.n	800d7a2 <_dtoa_r+0x5d2>
 800d7b8:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <_dtoa_r+0x600>)
 800d7ba:	f7f2 ff45 	bl	8000648 <__aeabi_dmul>
 800d7be:	e9cd 0100 	strd	r0, r1, [sp]
 800d7c2:	e7bc      	b.n	800d73e <_dtoa_r+0x56e>
 800d7c4:	0800eea0 	.word	0x0800eea0
 800d7c8:	0800ee78 	.word	0x0800ee78
 800d7cc:	3ff00000 	.word	0x3ff00000
 800d7d0:	40240000 	.word	0x40240000
 800d7d4:	401c0000 	.word	0x401c0000
 800d7d8:	40140000 	.word	0x40140000
 800d7dc:	3fe00000 	.word	0x3fe00000
 800d7e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d7e4:	465d      	mov	r5, fp
 800d7e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	f7f3 f855 	bl	800089c <__aeabi_ddiv>
 800d7f2:	f7f3 f9d9 	bl	8000ba8 <__aeabi_d2iz>
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	f7f2 febc 	bl	8000574 <__aeabi_i2d>
 800d7fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d800:	f7f2 ff22 	bl	8000648 <__aeabi_dmul>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4630      	mov	r0, r6
 800d80a:	4639      	mov	r1, r7
 800d80c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d810:	f7f2 fd62 	bl	80002d8 <__aeabi_dsub>
 800d814:	f805 6b01 	strb.w	r6, [r5], #1
 800d818:	eba5 060b 	sub.w	r6, r5, fp
 800d81c:	45b1      	cmp	r9, r6
 800d81e:	4602      	mov	r2, r0
 800d820:	460b      	mov	r3, r1
 800d822:	d139      	bne.n	800d898 <_dtoa_r+0x6c8>
 800d824:	f7f2 fd5a 	bl	80002dc <__adddf3>
 800d828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d82c:	4606      	mov	r6, r0
 800d82e:	460f      	mov	r7, r1
 800d830:	f7f3 f99a 	bl	8000b68 <__aeabi_dcmpgt>
 800d834:	b9c8      	cbnz	r0, 800d86a <_dtoa_r+0x69a>
 800d836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f3 f96b 	bl	8000b18 <__aeabi_dcmpeq>
 800d842:	b110      	cbz	r0, 800d84a <_dtoa_r+0x67a>
 800d844:	f018 0f01 	tst.w	r8, #1
 800d848:	d10f      	bne.n	800d86a <_dtoa_r+0x69a>
 800d84a:	9904      	ldr	r1, [sp, #16]
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fc9f 	bl	800e190 <_Bfree>
 800d852:	2300      	movs	r3, #0
 800d854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d856:	702b      	strb	r3, [r5, #0]
 800d858:	f10a 0301 	add.w	r3, sl, #1
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 8241 	beq.w	800dce8 <_dtoa_r+0xb18>
 800d866:	601d      	str	r5, [r3, #0]
 800d868:	e23e      	b.n	800dce8 <_dtoa_r+0xb18>
 800d86a:	f8cd a020 	str.w	sl, [sp, #32]
 800d86e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d872:	2a39      	cmp	r2, #57	; 0x39
 800d874:	f105 33ff 	add.w	r3, r5, #4294967295
 800d878:	d108      	bne.n	800d88c <_dtoa_r+0x6bc>
 800d87a:	459b      	cmp	fp, r3
 800d87c:	d10a      	bne.n	800d894 <_dtoa_r+0x6c4>
 800d87e:	9b08      	ldr	r3, [sp, #32]
 800d880:	3301      	adds	r3, #1
 800d882:	9308      	str	r3, [sp, #32]
 800d884:	2330      	movs	r3, #48	; 0x30
 800d886:	f88b 3000 	strb.w	r3, [fp]
 800d88a:	465b      	mov	r3, fp
 800d88c:	781a      	ldrb	r2, [r3, #0]
 800d88e:	3201      	adds	r2, #1
 800d890:	701a      	strb	r2, [r3, #0]
 800d892:	e78c      	b.n	800d7ae <_dtoa_r+0x5de>
 800d894:	461d      	mov	r5, r3
 800d896:	e7ea      	b.n	800d86e <_dtoa_r+0x69e>
 800d898:	2200      	movs	r2, #0
 800d89a:	4b9b      	ldr	r3, [pc, #620]	; (800db08 <_dtoa_r+0x938>)
 800d89c:	f7f2 fed4 	bl	8000648 <__aeabi_dmul>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	460f      	mov	r7, r1
 800d8a8:	f7f3 f936 	bl	8000b18 <__aeabi_dcmpeq>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d09a      	beq.n	800d7e6 <_dtoa_r+0x616>
 800d8b0:	e7cb      	b.n	800d84a <_dtoa_r+0x67a>
 800d8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	f000 808b 	beq.w	800d9d0 <_dtoa_r+0x800>
 800d8ba:	9a06      	ldr	r2, [sp, #24]
 800d8bc:	2a01      	cmp	r2, #1
 800d8be:	dc6e      	bgt.n	800d99e <_dtoa_r+0x7ce>
 800d8c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8c2:	2a00      	cmp	r2, #0
 800d8c4:	d067      	beq.n	800d996 <_dtoa_r+0x7c6>
 800d8c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8ca:	9f07      	ldr	r7, [sp, #28]
 800d8cc:	9d05      	ldr	r5, [sp, #20]
 800d8ce:	9a05      	ldr	r2, [sp, #20]
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	441a      	add	r2, r3
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	9205      	str	r2, [sp, #20]
 800d8d8:	4498      	add	r8, r3
 800d8da:	f000 fcf9 	bl	800e2d0 <__i2b>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	dd0c      	ble.n	800d8fe <_dtoa_r+0x72e>
 800d8e4:	f1b8 0f00 	cmp.w	r8, #0
 800d8e8:	dd09      	ble.n	800d8fe <_dtoa_r+0x72e>
 800d8ea:	4545      	cmp	r5, r8
 800d8ec:	9a05      	ldr	r2, [sp, #20]
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	bfa8      	it	ge
 800d8f2:	4643      	movge	r3, r8
 800d8f4:	1ad2      	subs	r2, r2, r3
 800d8f6:	9205      	str	r2, [sp, #20]
 800d8f8:	1aed      	subs	r5, r5, r3
 800d8fa:	eba8 0803 	sub.w	r8, r8, r3
 800d8fe:	9b07      	ldr	r3, [sp, #28]
 800d900:	b1eb      	cbz	r3, 800d93e <_dtoa_r+0x76e>
 800d902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	d067      	beq.n	800d9d8 <_dtoa_r+0x808>
 800d908:	b18f      	cbz	r7, 800d92e <_dtoa_r+0x75e>
 800d90a:	4631      	mov	r1, r6
 800d90c:	463a      	mov	r2, r7
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 fd7e 	bl	800e410 <__pow5mult>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	4601      	mov	r1, r0
 800d918:	4606      	mov	r6, r0
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 fce1 	bl	800e2e2 <__multiply>
 800d920:	9904      	ldr	r1, [sp, #16]
 800d922:	9008      	str	r0, [sp, #32]
 800d924:	4620      	mov	r0, r4
 800d926:	f000 fc33 	bl	800e190 <_Bfree>
 800d92a:	9b08      	ldr	r3, [sp, #32]
 800d92c:	9304      	str	r3, [sp, #16]
 800d92e:	9b07      	ldr	r3, [sp, #28]
 800d930:	1bda      	subs	r2, r3, r7
 800d932:	d004      	beq.n	800d93e <_dtoa_r+0x76e>
 800d934:	9904      	ldr	r1, [sp, #16]
 800d936:	4620      	mov	r0, r4
 800d938:	f000 fd6a 	bl	800e410 <__pow5mult>
 800d93c:	9004      	str	r0, [sp, #16]
 800d93e:	2101      	movs	r1, #1
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fcc5 	bl	800e2d0 <__i2b>
 800d946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d948:	4607      	mov	r7, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f000 81d0 	beq.w	800dcf0 <_dtoa_r+0xb20>
 800d950:	461a      	mov	r2, r3
 800d952:	4601      	mov	r1, r0
 800d954:	4620      	mov	r0, r4
 800d956:	f000 fd5b 	bl	800e410 <__pow5mult>
 800d95a:	9b06      	ldr	r3, [sp, #24]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	4607      	mov	r7, r0
 800d960:	dc40      	bgt.n	800d9e4 <_dtoa_r+0x814>
 800d962:	9b00      	ldr	r3, [sp, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d139      	bne.n	800d9dc <_dtoa_r+0x80c>
 800d968:	9b01      	ldr	r3, [sp, #4]
 800d96a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d136      	bne.n	800d9e0 <_dtoa_r+0x810>
 800d972:	9b01      	ldr	r3, [sp, #4]
 800d974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d978:	0d1b      	lsrs	r3, r3, #20
 800d97a:	051b      	lsls	r3, r3, #20
 800d97c:	b12b      	cbz	r3, 800d98a <_dtoa_r+0x7ba>
 800d97e:	9b05      	ldr	r3, [sp, #20]
 800d980:	3301      	adds	r3, #1
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	f108 0801 	add.w	r8, r8, #1
 800d988:	2301      	movs	r3, #1
 800d98a:	9307      	str	r3, [sp, #28]
 800d98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d12a      	bne.n	800d9e8 <_dtoa_r+0x818>
 800d992:	2001      	movs	r0, #1
 800d994:	e030      	b.n	800d9f8 <_dtoa_r+0x828>
 800d996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d998:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d99c:	e795      	b.n	800d8ca <_dtoa_r+0x6fa>
 800d99e:	9b07      	ldr	r3, [sp, #28]
 800d9a0:	f109 37ff 	add.w	r7, r9, #4294967295
 800d9a4:	42bb      	cmp	r3, r7
 800d9a6:	bfbf      	itttt	lt
 800d9a8:	9b07      	ldrlt	r3, [sp, #28]
 800d9aa:	9707      	strlt	r7, [sp, #28]
 800d9ac:	1afa      	sublt	r2, r7, r3
 800d9ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d9b0:	bfbb      	ittet	lt
 800d9b2:	189b      	addlt	r3, r3, r2
 800d9b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d9b6:	1bdf      	subge	r7, r3, r7
 800d9b8:	2700      	movlt	r7, #0
 800d9ba:	f1b9 0f00 	cmp.w	r9, #0
 800d9be:	bfb5      	itete	lt
 800d9c0:	9b05      	ldrlt	r3, [sp, #20]
 800d9c2:	9d05      	ldrge	r5, [sp, #20]
 800d9c4:	eba3 0509 	sublt.w	r5, r3, r9
 800d9c8:	464b      	movge	r3, r9
 800d9ca:	bfb8      	it	lt
 800d9cc:	2300      	movlt	r3, #0
 800d9ce:	e77e      	b.n	800d8ce <_dtoa_r+0x6fe>
 800d9d0:	9f07      	ldr	r7, [sp, #28]
 800d9d2:	9d05      	ldr	r5, [sp, #20]
 800d9d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d9d6:	e783      	b.n	800d8e0 <_dtoa_r+0x710>
 800d9d8:	9a07      	ldr	r2, [sp, #28]
 800d9da:	e7ab      	b.n	800d934 <_dtoa_r+0x764>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e7d4      	b.n	800d98a <_dtoa_r+0x7ba>
 800d9e0:	9b00      	ldr	r3, [sp, #0]
 800d9e2:	e7d2      	b.n	800d98a <_dtoa_r+0x7ba>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d9ee:	6918      	ldr	r0, [r3, #16]
 800d9f0:	f000 fc20 	bl	800e234 <__hi0bits>
 800d9f4:	f1c0 0020 	rsb	r0, r0, #32
 800d9f8:	4440      	add	r0, r8
 800d9fa:	f010 001f 	ands.w	r0, r0, #31
 800d9fe:	d047      	beq.n	800da90 <_dtoa_r+0x8c0>
 800da00:	f1c0 0320 	rsb	r3, r0, #32
 800da04:	2b04      	cmp	r3, #4
 800da06:	dd3b      	ble.n	800da80 <_dtoa_r+0x8b0>
 800da08:	9b05      	ldr	r3, [sp, #20]
 800da0a:	f1c0 001c 	rsb	r0, r0, #28
 800da0e:	4403      	add	r3, r0
 800da10:	9305      	str	r3, [sp, #20]
 800da12:	4405      	add	r5, r0
 800da14:	4480      	add	r8, r0
 800da16:	9b05      	ldr	r3, [sp, #20]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	dd05      	ble.n	800da28 <_dtoa_r+0x858>
 800da1c:	461a      	mov	r2, r3
 800da1e:	9904      	ldr	r1, [sp, #16]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fd43 	bl	800e4ac <__lshift>
 800da26:	9004      	str	r0, [sp, #16]
 800da28:	f1b8 0f00 	cmp.w	r8, #0
 800da2c:	dd05      	ble.n	800da3a <_dtoa_r+0x86a>
 800da2e:	4639      	mov	r1, r7
 800da30:	4642      	mov	r2, r8
 800da32:	4620      	mov	r0, r4
 800da34:	f000 fd3a 	bl	800e4ac <__lshift>
 800da38:	4607      	mov	r7, r0
 800da3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da3c:	b353      	cbz	r3, 800da94 <_dtoa_r+0x8c4>
 800da3e:	4639      	mov	r1, r7
 800da40:	9804      	ldr	r0, [sp, #16]
 800da42:	f000 fd87 	bl	800e554 <__mcmp>
 800da46:	2800      	cmp	r0, #0
 800da48:	da24      	bge.n	800da94 <_dtoa_r+0x8c4>
 800da4a:	2300      	movs	r3, #0
 800da4c:	220a      	movs	r2, #10
 800da4e:	9904      	ldr	r1, [sp, #16]
 800da50:	4620      	mov	r0, r4
 800da52:	f000 fbb4 	bl	800e1be <__multadd>
 800da56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da58:	9004      	str	r0, [sp, #16]
 800da5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f000 814d 	beq.w	800dcfe <_dtoa_r+0xb2e>
 800da64:	2300      	movs	r3, #0
 800da66:	4631      	mov	r1, r6
 800da68:	220a      	movs	r2, #10
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fba7 	bl	800e1be <__multadd>
 800da70:	9b02      	ldr	r3, [sp, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	4606      	mov	r6, r0
 800da76:	dc4f      	bgt.n	800db18 <_dtoa_r+0x948>
 800da78:	9b06      	ldr	r3, [sp, #24]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	dd4c      	ble.n	800db18 <_dtoa_r+0x948>
 800da7e:	e011      	b.n	800daa4 <_dtoa_r+0x8d4>
 800da80:	d0c9      	beq.n	800da16 <_dtoa_r+0x846>
 800da82:	9a05      	ldr	r2, [sp, #20]
 800da84:	331c      	adds	r3, #28
 800da86:	441a      	add	r2, r3
 800da88:	9205      	str	r2, [sp, #20]
 800da8a:	441d      	add	r5, r3
 800da8c:	4498      	add	r8, r3
 800da8e:	e7c2      	b.n	800da16 <_dtoa_r+0x846>
 800da90:	4603      	mov	r3, r0
 800da92:	e7f6      	b.n	800da82 <_dtoa_r+0x8b2>
 800da94:	f1b9 0f00 	cmp.w	r9, #0
 800da98:	dc38      	bgt.n	800db0c <_dtoa_r+0x93c>
 800da9a:	9b06      	ldr	r3, [sp, #24]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	dd35      	ble.n	800db0c <_dtoa_r+0x93c>
 800daa0:	f8cd 9008 	str.w	r9, [sp, #8]
 800daa4:	9b02      	ldr	r3, [sp, #8]
 800daa6:	b963      	cbnz	r3, 800dac2 <_dtoa_r+0x8f2>
 800daa8:	4639      	mov	r1, r7
 800daaa:	2205      	movs	r2, #5
 800daac:	4620      	mov	r0, r4
 800daae:	f000 fb86 	bl	800e1be <__multadd>
 800dab2:	4601      	mov	r1, r0
 800dab4:	4607      	mov	r7, r0
 800dab6:	9804      	ldr	r0, [sp, #16]
 800dab8:	f000 fd4c 	bl	800e554 <__mcmp>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f73f adcc 	bgt.w	800d65a <_dtoa_r+0x48a>
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	465d      	mov	r5, fp
 800dac6:	ea6f 0a03 	mvn.w	sl, r3
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	4639      	mov	r1, r7
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 fb5d 	bl	800e190 <_Bfree>
 800dad6:	2e00      	cmp	r6, #0
 800dad8:	f43f aeb7 	beq.w	800d84a <_dtoa_r+0x67a>
 800dadc:	f1b9 0f00 	cmp.w	r9, #0
 800dae0:	d005      	beq.n	800daee <_dtoa_r+0x91e>
 800dae2:	45b1      	cmp	r9, r6
 800dae4:	d003      	beq.n	800daee <_dtoa_r+0x91e>
 800dae6:	4649      	mov	r1, r9
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fb51 	bl	800e190 <_Bfree>
 800daee:	4631      	mov	r1, r6
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fb4d 	bl	800e190 <_Bfree>
 800daf6:	e6a8      	b.n	800d84a <_dtoa_r+0x67a>
 800daf8:	2700      	movs	r7, #0
 800dafa:	463e      	mov	r6, r7
 800dafc:	e7e1      	b.n	800dac2 <_dtoa_r+0x8f2>
 800dafe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db02:	463e      	mov	r6, r7
 800db04:	e5a9      	b.n	800d65a <_dtoa_r+0x48a>
 800db06:	bf00      	nop
 800db08:	40240000 	.word	0x40240000
 800db0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 80fa 	beq.w	800dd0c <_dtoa_r+0xb3c>
 800db18:	2d00      	cmp	r5, #0
 800db1a:	dd05      	ble.n	800db28 <_dtoa_r+0x958>
 800db1c:	4631      	mov	r1, r6
 800db1e:	462a      	mov	r2, r5
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fcc3 	bl	800e4ac <__lshift>
 800db26:	4606      	mov	r6, r0
 800db28:	9b07      	ldr	r3, [sp, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d04c      	beq.n	800dbc8 <_dtoa_r+0x9f8>
 800db2e:	6871      	ldr	r1, [r6, #4]
 800db30:	4620      	mov	r0, r4
 800db32:	f000 faf9 	bl	800e128 <_Balloc>
 800db36:	6932      	ldr	r2, [r6, #16]
 800db38:	3202      	adds	r2, #2
 800db3a:	4605      	mov	r5, r0
 800db3c:	0092      	lsls	r2, r2, #2
 800db3e:	f106 010c 	add.w	r1, r6, #12
 800db42:	300c      	adds	r0, #12
 800db44:	f7fe fcf8 	bl	800c538 <memcpy>
 800db48:	2201      	movs	r2, #1
 800db4a:	4629      	mov	r1, r5
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 fcad 	bl	800e4ac <__lshift>
 800db52:	9b00      	ldr	r3, [sp, #0]
 800db54:	f8cd b014 	str.w	fp, [sp, #20]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	46b1      	mov	r9, r6
 800db5e:	9307      	str	r3, [sp, #28]
 800db60:	4606      	mov	r6, r0
 800db62:	4639      	mov	r1, r7
 800db64:	9804      	ldr	r0, [sp, #16]
 800db66:	f7ff faa7 	bl	800d0b8 <quorem>
 800db6a:	4649      	mov	r1, r9
 800db6c:	4605      	mov	r5, r0
 800db6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db72:	9804      	ldr	r0, [sp, #16]
 800db74:	f000 fcee 	bl	800e554 <__mcmp>
 800db78:	4632      	mov	r2, r6
 800db7a:	9000      	str	r0, [sp, #0]
 800db7c:	4639      	mov	r1, r7
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 fd02 	bl	800e588 <__mdiff>
 800db84:	68c3      	ldr	r3, [r0, #12]
 800db86:	4602      	mov	r2, r0
 800db88:	bb03      	cbnz	r3, 800dbcc <_dtoa_r+0x9fc>
 800db8a:	4601      	mov	r1, r0
 800db8c:	9008      	str	r0, [sp, #32]
 800db8e:	9804      	ldr	r0, [sp, #16]
 800db90:	f000 fce0 	bl	800e554 <__mcmp>
 800db94:	9a08      	ldr	r2, [sp, #32]
 800db96:	4603      	mov	r3, r0
 800db98:	4611      	mov	r1, r2
 800db9a:	4620      	mov	r0, r4
 800db9c:	9308      	str	r3, [sp, #32]
 800db9e:	f000 faf7 	bl	800e190 <_Bfree>
 800dba2:	9b08      	ldr	r3, [sp, #32]
 800dba4:	b9a3      	cbnz	r3, 800dbd0 <_dtoa_r+0xa00>
 800dba6:	9a06      	ldr	r2, [sp, #24]
 800dba8:	b992      	cbnz	r2, 800dbd0 <_dtoa_r+0xa00>
 800dbaa:	9a07      	ldr	r2, [sp, #28]
 800dbac:	b982      	cbnz	r2, 800dbd0 <_dtoa_r+0xa00>
 800dbae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dbb2:	d029      	beq.n	800dc08 <_dtoa_r+0xa38>
 800dbb4:	9b00      	ldr	r3, [sp, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	dd01      	ble.n	800dbbe <_dtoa_r+0x9ee>
 800dbba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dbbe:	9b05      	ldr	r3, [sp, #20]
 800dbc0:	1c5d      	adds	r5, r3, #1
 800dbc2:	f883 8000 	strb.w	r8, [r3]
 800dbc6:	e782      	b.n	800dace <_dtoa_r+0x8fe>
 800dbc8:	4630      	mov	r0, r6
 800dbca:	e7c2      	b.n	800db52 <_dtoa_r+0x982>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e7e3      	b.n	800db98 <_dtoa_r+0x9c8>
 800dbd0:	9a00      	ldr	r2, [sp, #0]
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	db04      	blt.n	800dbe0 <_dtoa_r+0xa10>
 800dbd6:	d125      	bne.n	800dc24 <_dtoa_r+0xa54>
 800dbd8:	9a06      	ldr	r2, [sp, #24]
 800dbda:	bb1a      	cbnz	r2, 800dc24 <_dtoa_r+0xa54>
 800dbdc:	9a07      	ldr	r2, [sp, #28]
 800dbde:	bb0a      	cbnz	r2, 800dc24 <_dtoa_r+0xa54>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	ddec      	ble.n	800dbbe <_dtoa_r+0x9ee>
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	9904      	ldr	r1, [sp, #16]
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 fc5f 	bl	800e4ac <__lshift>
 800dbee:	4639      	mov	r1, r7
 800dbf0:	9004      	str	r0, [sp, #16]
 800dbf2:	f000 fcaf 	bl	800e554 <__mcmp>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	dc03      	bgt.n	800dc02 <_dtoa_r+0xa32>
 800dbfa:	d1e0      	bne.n	800dbbe <_dtoa_r+0x9ee>
 800dbfc:	f018 0f01 	tst.w	r8, #1
 800dc00:	d0dd      	beq.n	800dbbe <_dtoa_r+0x9ee>
 800dc02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc06:	d1d8      	bne.n	800dbba <_dtoa_r+0x9ea>
 800dc08:	9b05      	ldr	r3, [sp, #20]
 800dc0a:	9a05      	ldr	r2, [sp, #20]
 800dc0c:	1c5d      	adds	r5, r3, #1
 800dc0e:	2339      	movs	r3, #57	; 0x39
 800dc10:	7013      	strb	r3, [r2, #0]
 800dc12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc16:	2b39      	cmp	r3, #57	; 0x39
 800dc18:	f105 32ff 	add.w	r2, r5, #4294967295
 800dc1c:	d04f      	beq.n	800dcbe <_dtoa_r+0xaee>
 800dc1e:	3301      	adds	r3, #1
 800dc20:	7013      	strb	r3, [r2, #0]
 800dc22:	e754      	b.n	800dace <_dtoa_r+0x8fe>
 800dc24:	9a05      	ldr	r2, [sp, #20]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f102 0501 	add.w	r5, r2, #1
 800dc2c:	dd06      	ble.n	800dc3c <_dtoa_r+0xa6c>
 800dc2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc32:	d0e9      	beq.n	800dc08 <_dtoa_r+0xa38>
 800dc34:	f108 0801 	add.w	r8, r8, #1
 800dc38:	9b05      	ldr	r3, [sp, #20]
 800dc3a:	e7c2      	b.n	800dbc2 <_dtoa_r+0x9f2>
 800dc3c:	9a02      	ldr	r2, [sp, #8]
 800dc3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dc42:	eba5 030b 	sub.w	r3, r5, fp
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d021      	beq.n	800dc8e <_dtoa_r+0xabe>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	220a      	movs	r2, #10
 800dc4e:	9904      	ldr	r1, [sp, #16]
 800dc50:	4620      	mov	r0, r4
 800dc52:	f000 fab4 	bl	800e1be <__multadd>
 800dc56:	45b1      	cmp	r9, r6
 800dc58:	9004      	str	r0, [sp, #16]
 800dc5a:	f04f 0300 	mov.w	r3, #0
 800dc5e:	f04f 020a 	mov.w	r2, #10
 800dc62:	4649      	mov	r1, r9
 800dc64:	4620      	mov	r0, r4
 800dc66:	d105      	bne.n	800dc74 <_dtoa_r+0xaa4>
 800dc68:	f000 faa9 	bl	800e1be <__multadd>
 800dc6c:	4681      	mov	r9, r0
 800dc6e:	4606      	mov	r6, r0
 800dc70:	9505      	str	r5, [sp, #20]
 800dc72:	e776      	b.n	800db62 <_dtoa_r+0x992>
 800dc74:	f000 faa3 	bl	800e1be <__multadd>
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4681      	mov	r9, r0
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	220a      	movs	r2, #10
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 fa9c 	bl	800e1be <__multadd>
 800dc86:	4606      	mov	r6, r0
 800dc88:	e7f2      	b.n	800dc70 <_dtoa_r+0xaa0>
 800dc8a:	f04f 0900 	mov.w	r9, #0
 800dc8e:	2201      	movs	r2, #1
 800dc90:	9904      	ldr	r1, [sp, #16]
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fc0a 	bl	800e4ac <__lshift>
 800dc98:	4639      	mov	r1, r7
 800dc9a:	9004      	str	r0, [sp, #16]
 800dc9c:	f000 fc5a 	bl	800e554 <__mcmp>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	dcb6      	bgt.n	800dc12 <_dtoa_r+0xa42>
 800dca4:	d102      	bne.n	800dcac <_dtoa_r+0xadc>
 800dca6:	f018 0f01 	tst.w	r8, #1
 800dcaa:	d1b2      	bne.n	800dc12 <_dtoa_r+0xa42>
 800dcac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcb0:	2b30      	cmp	r3, #48	; 0x30
 800dcb2:	f105 32ff 	add.w	r2, r5, #4294967295
 800dcb6:	f47f af0a 	bne.w	800dace <_dtoa_r+0x8fe>
 800dcba:	4615      	mov	r5, r2
 800dcbc:	e7f6      	b.n	800dcac <_dtoa_r+0xadc>
 800dcbe:	4593      	cmp	fp, r2
 800dcc0:	d105      	bne.n	800dcce <_dtoa_r+0xafe>
 800dcc2:	2331      	movs	r3, #49	; 0x31
 800dcc4:	f10a 0a01 	add.w	sl, sl, #1
 800dcc8:	f88b 3000 	strb.w	r3, [fp]
 800dccc:	e6ff      	b.n	800dace <_dtoa_r+0x8fe>
 800dcce:	4615      	mov	r5, r2
 800dcd0:	e79f      	b.n	800dc12 <_dtoa_r+0xa42>
 800dcd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dd38 <_dtoa_r+0xb68>
 800dcd6:	e007      	b.n	800dce8 <_dtoa_r+0xb18>
 800dcd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcda:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dd3c <_dtoa_r+0xb6c>
 800dcde:	b11b      	cbz	r3, 800dce8 <_dtoa_r+0xb18>
 800dce0:	f10b 0308 	add.w	r3, fp, #8
 800dce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dce6:	6013      	str	r3, [r2, #0]
 800dce8:	4658      	mov	r0, fp
 800dcea:	b017      	add	sp, #92	; 0x5c
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	9b06      	ldr	r3, [sp, #24]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	f77f ae35 	ble.w	800d962 <_dtoa_r+0x792>
 800dcf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcfa:	9307      	str	r3, [sp, #28]
 800dcfc:	e649      	b.n	800d992 <_dtoa_r+0x7c2>
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	dc03      	bgt.n	800dd0c <_dtoa_r+0xb3c>
 800dd04:	9b06      	ldr	r3, [sp, #24]
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	f73f aecc 	bgt.w	800daa4 <_dtoa_r+0x8d4>
 800dd0c:	465d      	mov	r5, fp
 800dd0e:	4639      	mov	r1, r7
 800dd10:	9804      	ldr	r0, [sp, #16]
 800dd12:	f7ff f9d1 	bl	800d0b8 <quorem>
 800dd16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd1a:	f805 8b01 	strb.w	r8, [r5], #1
 800dd1e:	9a02      	ldr	r2, [sp, #8]
 800dd20:	eba5 030b 	sub.w	r3, r5, fp
 800dd24:	429a      	cmp	r2, r3
 800dd26:	ddb0      	ble.n	800dc8a <_dtoa_r+0xaba>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	220a      	movs	r2, #10
 800dd2c:	9904      	ldr	r1, [sp, #16]
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f000 fa45 	bl	800e1be <__multadd>
 800dd34:	9004      	str	r0, [sp, #16]
 800dd36:	e7ea      	b.n	800dd0e <_dtoa_r+0xb3e>
 800dd38:	0800ede0 	.word	0x0800ede0
 800dd3c:	0800ee04 	.word	0x0800ee04

0800dd40 <__sflush_r>:
 800dd40:	898a      	ldrh	r2, [r1, #12]
 800dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	4605      	mov	r5, r0
 800dd48:	0710      	lsls	r0, r2, #28
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	d458      	bmi.n	800de00 <__sflush_r+0xc0>
 800dd4e:	684b      	ldr	r3, [r1, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	dc05      	bgt.n	800dd60 <__sflush_r+0x20>
 800dd54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dc02      	bgt.n	800dd60 <__sflush_r+0x20>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d0f9      	beq.n	800dd5a <__sflush_r+0x1a>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd6c:	682f      	ldr	r7, [r5, #0]
 800dd6e:	6a21      	ldr	r1, [r4, #32]
 800dd70:	602b      	str	r3, [r5, #0]
 800dd72:	d032      	beq.n	800ddda <__sflush_r+0x9a>
 800dd74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	075a      	lsls	r2, r3, #29
 800dd7a:	d505      	bpl.n	800dd88 <__sflush_r+0x48>
 800dd7c:	6863      	ldr	r3, [r4, #4]
 800dd7e:	1ac0      	subs	r0, r0, r3
 800dd80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd82:	b10b      	cbz	r3, 800dd88 <__sflush_r+0x48>
 800dd84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd86:	1ac0      	subs	r0, r0, r3
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd8e:	6a21      	ldr	r1, [r4, #32]
 800dd90:	4628      	mov	r0, r5
 800dd92:	47b0      	blx	r6
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	d106      	bne.n	800dda8 <__sflush_r+0x68>
 800dd9a:	6829      	ldr	r1, [r5, #0]
 800dd9c:	291d      	cmp	r1, #29
 800dd9e:	d848      	bhi.n	800de32 <__sflush_r+0xf2>
 800dda0:	4a29      	ldr	r2, [pc, #164]	; (800de48 <__sflush_r+0x108>)
 800dda2:	40ca      	lsrs	r2, r1
 800dda4:	07d6      	lsls	r6, r2, #31
 800dda6:	d544      	bpl.n	800de32 <__sflush_r+0xf2>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	6062      	str	r2, [r4, #4]
 800ddac:	04d9      	lsls	r1, r3, #19
 800ddae:	6922      	ldr	r2, [r4, #16]
 800ddb0:	6022      	str	r2, [r4, #0]
 800ddb2:	d504      	bpl.n	800ddbe <__sflush_r+0x7e>
 800ddb4:	1c42      	adds	r2, r0, #1
 800ddb6:	d101      	bne.n	800ddbc <__sflush_r+0x7c>
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	b903      	cbnz	r3, 800ddbe <__sflush_r+0x7e>
 800ddbc:	6560      	str	r0, [r4, #84]	; 0x54
 800ddbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc0:	602f      	str	r7, [r5, #0]
 800ddc2:	2900      	cmp	r1, #0
 800ddc4:	d0c9      	beq.n	800dd5a <__sflush_r+0x1a>
 800ddc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddca:	4299      	cmp	r1, r3
 800ddcc:	d002      	beq.n	800ddd4 <__sflush_r+0x94>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 fc94 	bl	800e6fc <_free_r>
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	6360      	str	r0, [r4, #52]	; 0x34
 800ddd8:	e7c0      	b.n	800dd5c <__sflush_r+0x1c>
 800ddda:	2301      	movs	r3, #1
 800dddc:	4628      	mov	r0, r5
 800ddde:	47b0      	blx	r6
 800dde0:	1c41      	adds	r1, r0, #1
 800dde2:	d1c8      	bne.n	800dd76 <__sflush_r+0x36>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d0c5      	beq.n	800dd76 <__sflush_r+0x36>
 800ddea:	2b1d      	cmp	r3, #29
 800ddec:	d001      	beq.n	800ddf2 <__sflush_r+0xb2>
 800ddee:	2b16      	cmp	r3, #22
 800ddf0:	d101      	bne.n	800ddf6 <__sflush_r+0xb6>
 800ddf2:	602f      	str	r7, [r5, #0]
 800ddf4:	e7b1      	b.n	800dd5a <__sflush_r+0x1a>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	e7ad      	b.n	800dd5c <__sflush_r+0x1c>
 800de00:	690f      	ldr	r7, [r1, #16]
 800de02:	2f00      	cmp	r7, #0
 800de04:	d0a9      	beq.n	800dd5a <__sflush_r+0x1a>
 800de06:	0793      	lsls	r3, r2, #30
 800de08:	680e      	ldr	r6, [r1, #0]
 800de0a:	bf08      	it	eq
 800de0c:	694b      	ldreq	r3, [r1, #20]
 800de0e:	600f      	str	r7, [r1, #0]
 800de10:	bf18      	it	ne
 800de12:	2300      	movne	r3, #0
 800de14:	eba6 0807 	sub.w	r8, r6, r7
 800de18:	608b      	str	r3, [r1, #8]
 800de1a:	f1b8 0f00 	cmp.w	r8, #0
 800de1e:	dd9c      	ble.n	800dd5a <__sflush_r+0x1a>
 800de20:	4643      	mov	r3, r8
 800de22:	463a      	mov	r2, r7
 800de24:	6a21      	ldr	r1, [r4, #32]
 800de26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de28:	4628      	mov	r0, r5
 800de2a:	47b0      	blx	r6
 800de2c:	2800      	cmp	r0, #0
 800de2e:	dc06      	bgt.n	800de3e <__sflush_r+0xfe>
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	e78e      	b.n	800dd5c <__sflush_r+0x1c>
 800de3e:	4407      	add	r7, r0
 800de40:	eba8 0800 	sub.w	r8, r8, r0
 800de44:	e7e9      	b.n	800de1a <__sflush_r+0xda>
 800de46:	bf00      	nop
 800de48:	20400001 	.word	0x20400001

0800de4c <_fflush_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	690b      	ldr	r3, [r1, #16]
 800de50:	4605      	mov	r5, r0
 800de52:	460c      	mov	r4, r1
 800de54:	b1db      	cbz	r3, 800de8e <_fflush_r+0x42>
 800de56:	b118      	cbz	r0, 800de60 <_fflush_r+0x14>
 800de58:	6983      	ldr	r3, [r0, #24]
 800de5a:	b90b      	cbnz	r3, 800de60 <_fflush_r+0x14>
 800de5c:	f000 f860 	bl	800df20 <__sinit>
 800de60:	4b0c      	ldr	r3, [pc, #48]	; (800de94 <_fflush_r+0x48>)
 800de62:	429c      	cmp	r4, r3
 800de64:	d109      	bne.n	800de7a <_fflush_r+0x2e>
 800de66:	686c      	ldr	r4, [r5, #4]
 800de68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de6c:	b17b      	cbz	r3, 800de8e <_fflush_r+0x42>
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de76:	f7ff bf63 	b.w	800dd40 <__sflush_r>
 800de7a:	4b07      	ldr	r3, [pc, #28]	; (800de98 <_fflush_r+0x4c>)
 800de7c:	429c      	cmp	r4, r3
 800de7e:	d101      	bne.n	800de84 <_fflush_r+0x38>
 800de80:	68ac      	ldr	r4, [r5, #8]
 800de82:	e7f1      	b.n	800de68 <_fflush_r+0x1c>
 800de84:	4b05      	ldr	r3, [pc, #20]	; (800de9c <_fflush_r+0x50>)
 800de86:	429c      	cmp	r4, r3
 800de88:	bf08      	it	eq
 800de8a:	68ec      	ldreq	r4, [r5, #12]
 800de8c:	e7ec      	b.n	800de68 <_fflush_r+0x1c>
 800de8e:	2000      	movs	r0, #0
 800de90:	bd38      	pop	{r3, r4, r5, pc}
 800de92:	bf00      	nop
 800de94:	0800ee34 	.word	0x0800ee34
 800de98:	0800ee54 	.word	0x0800ee54
 800de9c:	0800ee14 	.word	0x0800ee14

0800dea0 <std>:
 800dea0:	2300      	movs	r3, #0
 800dea2:	b510      	push	{r4, lr}
 800dea4:	4604      	mov	r4, r0
 800dea6:	e9c0 3300 	strd	r3, r3, [r0]
 800deaa:	6083      	str	r3, [r0, #8]
 800deac:	8181      	strh	r1, [r0, #12]
 800deae:	6643      	str	r3, [r0, #100]	; 0x64
 800deb0:	81c2      	strh	r2, [r0, #14]
 800deb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800deb6:	6183      	str	r3, [r0, #24]
 800deb8:	4619      	mov	r1, r3
 800deba:	2208      	movs	r2, #8
 800debc:	305c      	adds	r0, #92	; 0x5c
 800debe:	f7fe fb46 	bl	800c54e <memset>
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <std+0x38>)
 800dec4:	6263      	str	r3, [r4, #36]	; 0x24
 800dec6:	4b05      	ldr	r3, [pc, #20]	; (800dedc <std+0x3c>)
 800dec8:	62a3      	str	r3, [r4, #40]	; 0x28
 800deca:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <std+0x40>)
 800decc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dece:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <std+0x44>)
 800ded0:	6224      	str	r4, [r4, #32]
 800ded2:	6323      	str	r3, [r4, #48]	; 0x30
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	bf00      	nop
 800ded8:	0800eb59 	.word	0x0800eb59
 800dedc:	0800eb7b 	.word	0x0800eb7b
 800dee0:	0800ebb3 	.word	0x0800ebb3
 800dee4:	0800ebd7 	.word	0x0800ebd7

0800dee8 <_cleanup_r>:
 800dee8:	4901      	ldr	r1, [pc, #4]	; (800def0 <_cleanup_r+0x8>)
 800deea:	f000 b885 	b.w	800dff8 <_fwalk_reent>
 800deee:	bf00      	nop
 800def0:	0800de4d 	.word	0x0800de4d

0800def4 <__sfmoreglue>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	1e4a      	subs	r2, r1, #1
 800def8:	2568      	movs	r5, #104	; 0x68
 800defa:	4355      	muls	r5, r2
 800defc:	460e      	mov	r6, r1
 800defe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df02:	f000 fc49 	bl	800e798 <_malloc_r>
 800df06:	4604      	mov	r4, r0
 800df08:	b140      	cbz	r0, 800df1c <__sfmoreglue+0x28>
 800df0a:	2100      	movs	r1, #0
 800df0c:	e9c0 1600 	strd	r1, r6, [r0]
 800df10:	300c      	adds	r0, #12
 800df12:	60a0      	str	r0, [r4, #8]
 800df14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df18:	f7fe fb19 	bl	800c54e <memset>
 800df1c:	4620      	mov	r0, r4
 800df1e:	bd70      	pop	{r4, r5, r6, pc}

0800df20 <__sinit>:
 800df20:	6983      	ldr	r3, [r0, #24]
 800df22:	b510      	push	{r4, lr}
 800df24:	4604      	mov	r4, r0
 800df26:	bb33      	cbnz	r3, 800df76 <__sinit+0x56>
 800df28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800df2c:	6503      	str	r3, [r0, #80]	; 0x50
 800df2e:	4b12      	ldr	r3, [pc, #72]	; (800df78 <__sinit+0x58>)
 800df30:	4a12      	ldr	r2, [pc, #72]	; (800df7c <__sinit+0x5c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6282      	str	r2, [r0, #40]	; 0x28
 800df36:	4298      	cmp	r0, r3
 800df38:	bf04      	itt	eq
 800df3a:	2301      	moveq	r3, #1
 800df3c:	6183      	streq	r3, [r0, #24]
 800df3e:	f000 f81f 	bl	800df80 <__sfp>
 800df42:	6060      	str	r0, [r4, #4]
 800df44:	4620      	mov	r0, r4
 800df46:	f000 f81b 	bl	800df80 <__sfp>
 800df4a:	60a0      	str	r0, [r4, #8]
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 f817 	bl	800df80 <__sfp>
 800df52:	2200      	movs	r2, #0
 800df54:	60e0      	str	r0, [r4, #12]
 800df56:	2104      	movs	r1, #4
 800df58:	6860      	ldr	r0, [r4, #4]
 800df5a:	f7ff ffa1 	bl	800dea0 <std>
 800df5e:	2201      	movs	r2, #1
 800df60:	2109      	movs	r1, #9
 800df62:	68a0      	ldr	r0, [r4, #8]
 800df64:	f7ff ff9c 	bl	800dea0 <std>
 800df68:	2202      	movs	r2, #2
 800df6a:	2112      	movs	r1, #18
 800df6c:	68e0      	ldr	r0, [r4, #12]
 800df6e:	f7ff ff97 	bl	800dea0 <std>
 800df72:	2301      	movs	r3, #1
 800df74:	61a3      	str	r3, [r4, #24]
 800df76:	bd10      	pop	{r4, pc}
 800df78:	0800edcc 	.word	0x0800edcc
 800df7c:	0800dee9 	.word	0x0800dee9

0800df80 <__sfp>:
 800df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df82:	4b1b      	ldr	r3, [pc, #108]	; (800dff0 <__sfp+0x70>)
 800df84:	681e      	ldr	r6, [r3, #0]
 800df86:	69b3      	ldr	r3, [r6, #24]
 800df88:	4607      	mov	r7, r0
 800df8a:	b913      	cbnz	r3, 800df92 <__sfp+0x12>
 800df8c:	4630      	mov	r0, r6
 800df8e:	f7ff ffc7 	bl	800df20 <__sinit>
 800df92:	3648      	adds	r6, #72	; 0x48
 800df94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df98:	3b01      	subs	r3, #1
 800df9a:	d503      	bpl.n	800dfa4 <__sfp+0x24>
 800df9c:	6833      	ldr	r3, [r6, #0]
 800df9e:	b133      	cbz	r3, 800dfae <__sfp+0x2e>
 800dfa0:	6836      	ldr	r6, [r6, #0]
 800dfa2:	e7f7      	b.n	800df94 <__sfp+0x14>
 800dfa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfa8:	b16d      	cbz	r5, 800dfc6 <__sfp+0x46>
 800dfaa:	3468      	adds	r4, #104	; 0x68
 800dfac:	e7f4      	b.n	800df98 <__sfp+0x18>
 800dfae:	2104      	movs	r1, #4
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	f7ff ff9f 	bl	800def4 <__sfmoreglue>
 800dfb6:	6030      	str	r0, [r6, #0]
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1f1      	bne.n	800dfa0 <__sfp+0x20>
 800dfbc:	230c      	movs	r3, #12
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc6:	4b0b      	ldr	r3, [pc, #44]	; (800dff4 <__sfp+0x74>)
 800dfc8:	6665      	str	r5, [r4, #100]	; 0x64
 800dfca:	e9c4 5500 	strd	r5, r5, [r4]
 800dfce:	60a5      	str	r5, [r4, #8]
 800dfd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dfd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dfd8:	2208      	movs	r2, #8
 800dfda:	4629      	mov	r1, r5
 800dfdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfe0:	f7fe fab5 	bl	800c54e <memset>
 800dfe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfec:	e7e9      	b.n	800dfc2 <__sfp+0x42>
 800dfee:	bf00      	nop
 800dff0:	0800edcc 	.word	0x0800edcc
 800dff4:	ffff0001 	.word	0xffff0001

0800dff8 <_fwalk_reent>:
 800dff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e004:	2600      	movs	r6, #0
 800e006:	b914      	cbnz	r4, 800e00e <_fwalk_reent+0x16>
 800e008:	4630      	mov	r0, r6
 800e00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e012:	3f01      	subs	r7, #1
 800e014:	d501      	bpl.n	800e01a <_fwalk_reent+0x22>
 800e016:	6824      	ldr	r4, [r4, #0]
 800e018:	e7f5      	b.n	800e006 <_fwalk_reent+0xe>
 800e01a:	89ab      	ldrh	r3, [r5, #12]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d907      	bls.n	800e030 <_fwalk_reent+0x38>
 800e020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e024:	3301      	adds	r3, #1
 800e026:	d003      	beq.n	800e030 <_fwalk_reent+0x38>
 800e028:	4629      	mov	r1, r5
 800e02a:	4640      	mov	r0, r8
 800e02c:	47c8      	blx	r9
 800e02e:	4306      	orrs	r6, r0
 800e030:	3568      	adds	r5, #104	; 0x68
 800e032:	e7ee      	b.n	800e012 <_fwalk_reent+0x1a>

0800e034 <_localeconv_r>:
 800e034:	4b04      	ldr	r3, [pc, #16]	; (800e048 <_localeconv_r+0x14>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	6a18      	ldr	r0, [r3, #32]
 800e03a:	4b04      	ldr	r3, [pc, #16]	; (800e04c <_localeconv_r+0x18>)
 800e03c:	2800      	cmp	r0, #0
 800e03e:	bf08      	it	eq
 800e040:	4618      	moveq	r0, r3
 800e042:	30f0      	adds	r0, #240	; 0xf0
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20000068 	.word	0x20000068
 800e04c:	200000cc 	.word	0x200000cc

0800e050 <__swhatbuf_r>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	460e      	mov	r6, r1
 800e054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e058:	2900      	cmp	r1, #0
 800e05a:	b096      	sub	sp, #88	; 0x58
 800e05c:	4614      	mov	r4, r2
 800e05e:	461d      	mov	r5, r3
 800e060:	da07      	bge.n	800e072 <__swhatbuf_r+0x22>
 800e062:	2300      	movs	r3, #0
 800e064:	602b      	str	r3, [r5, #0]
 800e066:	89b3      	ldrh	r3, [r6, #12]
 800e068:	061a      	lsls	r2, r3, #24
 800e06a:	d410      	bmi.n	800e08e <__swhatbuf_r+0x3e>
 800e06c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e070:	e00e      	b.n	800e090 <__swhatbuf_r+0x40>
 800e072:	466a      	mov	r2, sp
 800e074:	f000 fdd6 	bl	800ec24 <_fstat_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	dbf2      	blt.n	800e062 <__swhatbuf_r+0x12>
 800e07c:	9a01      	ldr	r2, [sp, #4]
 800e07e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e086:	425a      	negs	r2, r3
 800e088:	415a      	adcs	r2, r3
 800e08a:	602a      	str	r2, [r5, #0]
 800e08c:	e7ee      	b.n	800e06c <__swhatbuf_r+0x1c>
 800e08e:	2340      	movs	r3, #64	; 0x40
 800e090:	2000      	movs	r0, #0
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	b016      	add	sp, #88	; 0x58
 800e096:	bd70      	pop	{r4, r5, r6, pc}

0800e098 <__smakebuf_r>:
 800e098:	898b      	ldrh	r3, [r1, #12]
 800e09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e09c:	079d      	lsls	r5, r3, #30
 800e09e:	4606      	mov	r6, r0
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	d507      	bpl.n	800e0b4 <__smakebuf_r+0x1c>
 800e0a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	6123      	str	r3, [r4, #16]
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	6163      	str	r3, [r4, #20]
 800e0b0:	b002      	add	sp, #8
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	ab01      	add	r3, sp, #4
 800e0b6:	466a      	mov	r2, sp
 800e0b8:	f7ff ffca 	bl	800e050 <__swhatbuf_r>
 800e0bc:	9900      	ldr	r1, [sp, #0]
 800e0be:	4605      	mov	r5, r0
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f000 fb69 	bl	800e798 <_malloc_r>
 800e0c6:	b948      	cbnz	r0, 800e0dc <__smakebuf_r+0x44>
 800e0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0cc:	059a      	lsls	r2, r3, #22
 800e0ce:	d4ef      	bmi.n	800e0b0 <__smakebuf_r+0x18>
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	f043 0302 	orr.w	r3, r3, #2
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	e7e3      	b.n	800e0a4 <__smakebuf_r+0xc>
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <__smakebuf_r+0x7c>)
 800e0de:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	6020      	str	r0, [r4, #0]
 800e0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e8:	81a3      	strh	r3, [r4, #12]
 800e0ea:	9b00      	ldr	r3, [sp, #0]
 800e0ec:	6163      	str	r3, [r4, #20]
 800e0ee:	9b01      	ldr	r3, [sp, #4]
 800e0f0:	6120      	str	r0, [r4, #16]
 800e0f2:	b15b      	cbz	r3, 800e10c <__smakebuf_r+0x74>
 800e0f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 fda5 	bl	800ec48 <_isatty_r>
 800e0fe:	b128      	cbz	r0, 800e10c <__smakebuf_r+0x74>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	431d      	orrs	r5, r3
 800e110:	81a5      	strh	r5, [r4, #12]
 800e112:	e7cd      	b.n	800e0b0 <__smakebuf_r+0x18>
 800e114:	0800dee9 	.word	0x0800dee9

0800e118 <malloc>:
 800e118:	4b02      	ldr	r3, [pc, #8]	; (800e124 <malloc+0xc>)
 800e11a:	4601      	mov	r1, r0
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	f000 bb3b 	b.w	800e798 <_malloc_r>
 800e122:	bf00      	nop
 800e124:	20000068 	.word	0x20000068

0800e128 <_Balloc>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e12c:	4604      	mov	r4, r0
 800e12e:	460e      	mov	r6, r1
 800e130:	b93d      	cbnz	r5, 800e142 <_Balloc+0x1a>
 800e132:	2010      	movs	r0, #16
 800e134:	f7ff fff0 	bl	800e118 <malloc>
 800e138:	6260      	str	r0, [r4, #36]	; 0x24
 800e13a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e13e:	6005      	str	r5, [r0, #0]
 800e140:	60c5      	str	r5, [r0, #12]
 800e142:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e144:	68eb      	ldr	r3, [r5, #12]
 800e146:	b183      	cbz	r3, 800e16a <_Balloc+0x42>
 800e148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e150:	b9b8      	cbnz	r0, 800e182 <_Balloc+0x5a>
 800e152:	2101      	movs	r1, #1
 800e154:	fa01 f506 	lsl.w	r5, r1, r6
 800e158:	1d6a      	adds	r2, r5, #5
 800e15a:	0092      	lsls	r2, r2, #2
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 fabf 	bl	800e6e0 <_calloc_r>
 800e162:	b160      	cbz	r0, 800e17e <_Balloc+0x56>
 800e164:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e168:	e00e      	b.n	800e188 <_Balloc+0x60>
 800e16a:	2221      	movs	r2, #33	; 0x21
 800e16c:	2104      	movs	r1, #4
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fab6 	bl	800e6e0 <_calloc_r>
 800e174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e176:	60e8      	str	r0, [r5, #12]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e4      	bne.n	800e148 <_Balloc+0x20>
 800e17e:	2000      	movs	r0, #0
 800e180:	bd70      	pop	{r4, r5, r6, pc}
 800e182:	6802      	ldr	r2, [r0, #0]
 800e184:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e188:	2300      	movs	r3, #0
 800e18a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e18e:	e7f7      	b.n	800e180 <_Balloc+0x58>

0800e190 <_Bfree>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e194:	4606      	mov	r6, r0
 800e196:	460d      	mov	r5, r1
 800e198:	b93c      	cbnz	r4, 800e1aa <_Bfree+0x1a>
 800e19a:	2010      	movs	r0, #16
 800e19c:	f7ff ffbc 	bl	800e118 <malloc>
 800e1a0:	6270      	str	r0, [r6, #36]	; 0x24
 800e1a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1a6:	6004      	str	r4, [r0, #0]
 800e1a8:	60c4      	str	r4, [r0, #12]
 800e1aa:	b13d      	cbz	r5, 800e1bc <_Bfree+0x2c>
 800e1ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e1ae:	686a      	ldr	r2, [r5, #4]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1b6:	6029      	str	r1, [r5, #0]
 800e1b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e1bc:	bd70      	pop	{r4, r5, r6, pc}

0800e1be <__multadd>:
 800e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	690d      	ldr	r5, [r1, #16]
 800e1c4:	461f      	mov	r7, r3
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	f101 0c14 	add.w	ip, r1, #20
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8dc 0000 	ldr.w	r0, [ip]
 800e1d4:	b281      	uxth	r1, r0
 800e1d6:	fb02 7101 	mla	r1, r2, r1, r7
 800e1da:	0c0f      	lsrs	r7, r1, #16
 800e1dc:	0c00      	lsrs	r0, r0, #16
 800e1de:	fb02 7000 	mla	r0, r2, r0, r7
 800e1e2:	b289      	uxth	r1, r1
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e1ea:	429d      	cmp	r5, r3
 800e1ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e1f0:	f84c 1b04 	str.w	r1, [ip], #4
 800e1f4:	dcec      	bgt.n	800e1d0 <__multadd+0x12>
 800e1f6:	b1d7      	cbz	r7, 800e22e <__multadd+0x70>
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	42ab      	cmp	r3, r5
 800e1fc:	dc12      	bgt.n	800e224 <__multadd+0x66>
 800e1fe:	6861      	ldr	r1, [r4, #4]
 800e200:	4630      	mov	r0, r6
 800e202:	3101      	adds	r1, #1
 800e204:	f7ff ff90 	bl	800e128 <_Balloc>
 800e208:	6922      	ldr	r2, [r4, #16]
 800e20a:	3202      	adds	r2, #2
 800e20c:	f104 010c 	add.w	r1, r4, #12
 800e210:	4680      	mov	r8, r0
 800e212:	0092      	lsls	r2, r2, #2
 800e214:	300c      	adds	r0, #12
 800e216:	f7fe f98f 	bl	800c538 <memcpy>
 800e21a:	4621      	mov	r1, r4
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff ffb7 	bl	800e190 <_Bfree>
 800e222:	4644      	mov	r4, r8
 800e224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e228:	3501      	adds	r5, #1
 800e22a:	615f      	str	r7, [r3, #20]
 800e22c:	6125      	str	r5, [r4, #16]
 800e22e:	4620      	mov	r0, r4
 800e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e234 <__hi0bits>:
 800e234:	0c02      	lsrs	r2, r0, #16
 800e236:	0412      	lsls	r2, r2, #16
 800e238:	4603      	mov	r3, r0
 800e23a:	b9b2      	cbnz	r2, 800e26a <__hi0bits+0x36>
 800e23c:	0403      	lsls	r3, r0, #16
 800e23e:	2010      	movs	r0, #16
 800e240:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e244:	bf04      	itt	eq
 800e246:	021b      	lsleq	r3, r3, #8
 800e248:	3008      	addeq	r0, #8
 800e24a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e24e:	bf04      	itt	eq
 800e250:	011b      	lsleq	r3, r3, #4
 800e252:	3004      	addeq	r0, #4
 800e254:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e258:	bf04      	itt	eq
 800e25a:	009b      	lsleq	r3, r3, #2
 800e25c:	3002      	addeq	r0, #2
 800e25e:	2b00      	cmp	r3, #0
 800e260:	db06      	blt.n	800e270 <__hi0bits+0x3c>
 800e262:	005b      	lsls	r3, r3, #1
 800e264:	d503      	bpl.n	800e26e <__hi0bits+0x3a>
 800e266:	3001      	adds	r0, #1
 800e268:	4770      	bx	lr
 800e26a:	2000      	movs	r0, #0
 800e26c:	e7e8      	b.n	800e240 <__hi0bits+0xc>
 800e26e:	2020      	movs	r0, #32
 800e270:	4770      	bx	lr

0800e272 <__lo0bits>:
 800e272:	6803      	ldr	r3, [r0, #0]
 800e274:	f013 0207 	ands.w	r2, r3, #7
 800e278:	4601      	mov	r1, r0
 800e27a:	d00b      	beq.n	800e294 <__lo0bits+0x22>
 800e27c:	07da      	lsls	r2, r3, #31
 800e27e:	d423      	bmi.n	800e2c8 <__lo0bits+0x56>
 800e280:	0798      	lsls	r0, r3, #30
 800e282:	bf49      	itett	mi
 800e284:	085b      	lsrmi	r3, r3, #1
 800e286:	089b      	lsrpl	r3, r3, #2
 800e288:	2001      	movmi	r0, #1
 800e28a:	600b      	strmi	r3, [r1, #0]
 800e28c:	bf5c      	itt	pl
 800e28e:	600b      	strpl	r3, [r1, #0]
 800e290:	2002      	movpl	r0, #2
 800e292:	4770      	bx	lr
 800e294:	b298      	uxth	r0, r3
 800e296:	b9a8      	cbnz	r0, 800e2c4 <__lo0bits+0x52>
 800e298:	0c1b      	lsrs	r3, r3, #16
 800e29a:	2010      	movs	r0, #16
 800e29c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e2a0:	bf04      	itt	eq
 800e2a2:	0a1b      	lsreq	r3, r3, #8
 800e2a4:	3008      	addeq	r0, #8
 800e2a6:	071a      	lsls	r2, r3, #28
 800e2a8:	bf04      	itt	eq
 800e2aa:	091b      	lsreq	r3, r3, #4
 800e2ac:	3004      	addeq	r0, #4
 800e2ae:	079a      	lsls	r2, r3, #30
 800e2b0:	bf04      	itt	eq
 800e2b2:	089b      	lsreq	r3, r3, #2
 800e2b4:	3002      	addeq	r0, #2
 800e2b6:	07da      	lsls	r2, r3, #31
 800e2b8:	d402      	bmi.n	800e2c0 <__lo0bits+0x4e>
 800e2ba:	085b      	lsrs	r3, r3, #1
 800e2bc:	d006      	beq.n	800e2cc <__lo0bits+0x5a>
 800e2be:	3001      	adds	r0, #1
 800e2c0:	600b      	str	r3, [r1, #0]
 800e2c2:	4770      	bx	lr
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	e7e9      	b.n	800e29c <__lo0bits+0x2a>
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	4770      	bx	lr
 800e2cc:	2020      	movs	r0, #32
 800e2ce:	4770      	bx	lr

0800e2d0 <__i2b>:
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	f7ff ff27 	bl	800e128 <_Balloc>
 800e2da:	2201      	movs	r2, #1
 800e2dc:	6144      	str	r4, [r0, #20]
 800e2de:	6102      	str	r2, [r0, #16]
 800e2e0:	bd10      	pop	{r4, pc}

0800e2e2 <__multiply>:
 800e2e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e6:	4614      	mov	r4, r2
 800e2e8:	690a      	ldr	r2, [r1, #16]
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	bfb8      	it	lt
 800e2f0:	460b      	movlt	r3, r1
 800e2f2:	4688      	mov	r8, r1
 800e2f4:	bfbc      	itt	lt
 800e2f6:	46a0      	movlt	r8, r4
 800e2f8:	461c      	movlt	r4, r3
 800e2fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e2fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e302:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e306:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e30a:	eb07 0609 	add.w	r6, r7, r9
 800e30e:	42b3      	cmp	r3, r6
 800e310:	bfb8      	it	lt
 800e312:	3101      	addlt	r1, #1
 800e314:	f7ff ff08 	bl	800e128 <_Balloc>
 800e318:	f100 0514 	add.w	r5, r0, #20
 800e31c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e320:	462b      	mov	r3, r5
 800e322:	2200      	movs	r2, #0
 800e324:	4573      	cmp	r3, lr
 800e326:	d316      	bcc.n	800e356 <__multiply+0x74>
 800e328:	f104 0214 	add.w	r2, r4, #20
 800e32c:	f108 0114 	add.w	r1, r8, #20
 800e330:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e334:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	9201      	str	r2, [sp, #4]
 800e33e:	4293      	cmp	r3, r2
 800e340:	d80c      	bhi.n	800e35c <__multiply+0x7a>
 800e342:	2e00      	cmp	r6, #0
 800e344:	dd03      	ble.n	800e34e <__multiply+0x6c>
 800e346:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d05d      	beq.n	800e40a <__multiply+0x128>
 800e34e:	6106      	str	r6, [r0, #16]
 800e350:	b003      	add	sp, #12
 800e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e356:	f843 2b04 	str.w	r2, [r3], #4
 800e35a:	e7e3      	b.n	800e324 <__multiply+0x42>
 800e35c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e360:	f1bb 0f00 	cmp.w	fp, #0
 800e364:	d023      	beq.n	800e3ae <__multiply+0xcc>
 800e366:	4689      	mov	r9, r1
 800e368:	46ac      	mov	ip, r5
 800e36a:	f04f 0800 	mov.w	r8, #0
 800e36e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e372:	f8dc a000 	ldr.w	sl, [ip]
 800e376:	b2a3      	uxth	r3, r4
 800e378:	fa1f fa8a 	uxth.w	sl, sl
 800e37c:	fb0b a303 	mla	r3, fp, r3, sl
 800e380:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e384:	f8dc 4000 	ldr.w	r4, [ip]
 800e388:	4443      	add	r3, r8
 800e38a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e38e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e392:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e396:	46e2      	mov	sl, ip
 800e398:	b29b      	uxth	r3, r3
 800e39a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e39e:	454f      	cmp	r7, r9
 800e3a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3a4:	f84a 3b04 	str.w	r3, [sl], #4
 800e3a8:	d82b      	bhi.n	800e402 <__multiply+0x120>
 800e3aa:	f8cc 8004 	str.w	r8, [ip, #4]
 800e3ae:	9b01      	ldr	r3, [sp, #4]
 800e3b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e3b4:	3204      	adds	r2, #4
 800e3b6:	f1ba 0f00 	cmp.w	sl, #0
 800e3ba:	d020      	beq.n	800e3fe <__multiply+0x11c>
 800e3bc:	682b      	ldr	r3, [r5, #0]
 800e3be:	4689      	mov	r9, r1
 800e3c0:	46a8      	mov	r8, r5
 800e3c2:	f04f 0b00 	mov.w	fp, #0
 800e3c6:	f8b9 c000 	ldrh.w	ip, [r9]
 800e3ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e3ce:	fb0a 440c 	mla	r4, sl, ip, r4
 800e3d2:	445c      	add	r4, fp
 800e3d4:	46c4      	mov	ip, r8
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3dc:	f84c 3b04 	str.w	r3, [ip], #4
 800e3e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e3e8:	0c1b      	lsrs	r3, r3, #16
 800e3ea:	fb0a b303 	mla	r3, sl, r3, fp
 800e3ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e3f2:	454f      	cmp	r7, r9
 800e3f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e3f8:	d805      	bhi.n	800e406 <__multiply+0x124>
 800e3fa:	f8c8 3004 	str.w	r3, [r8, #4]
 800e3fe:	3504      	adds	r5, #4
 800e400:	e79b      	b.n	800e33a <__multiply+0x58>
 800e402:	46d4      	mov	ip, sl
 800e404:	e7b3      	b.n	800e36e <__multiply+0x8c>
 800e406:	46e0      	mov	r8, ip
 800e408:	e7dd      	b.n	800e3c6 <__multiply+0xe4>
 800e40a:	3e01      	subs	r6, #1
 800e40c:	e799      	b.n	800e342 <__multiply+0x60>
	...

0800e410 <__pow5mult>:
 800e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e414:	4615      	mov	r5, r2
 800e416:	f012 0203 	ands.w	r2, r2, #3
 800e41a:	4606      	mov	r6, r0
 800e41c:	460f      	mov	r7, r1
 800e41e:	d007      	beq.n	800e430 <__pow5mult+0x20>
 800e420:	3a01      	subs	r2, #1
 800e422:	4c21      	ldr	r4, [pc, #132]	; (800e4a8 <__pow5mult+0x98>)
 800e424:	2300      	movs	r3, #0
 800e426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e42a:	f7ff fec8 	bl	800e1be <__multadd>
 800e42e:	4607      	mov	r7, r0
 800e430:	10ad      	asrs	r5, r5, #2
 800e432:	d035      	beq.n	800e4a0 <__pow5mult+0x90>
 800e434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e436:	b93c      	cbnz	r4, 800e448 <__pow5mult+0x38>
 800e438:	2010      	movs	r0, #16
 800e43a:	f7ff fe6d 	bl	800e118 <malloc>
 800e43e:	6270      	str	r0, [r6, #36]	; 0x24
 800e440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e444:	6004      	str	r4, [r0, #0]
 800e446:	60c4      	str	r4, [r0, #12]
 800e448:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e44c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e450:	b94c      	cbnz	r4, 800e466 <__pow5mult+0x56>
 800e452:	f240 2171 	movw	r1, #625	; 0x271
 800e456:	4630      	mov	r0, r6
 800e458:	f7ff ff3a 	bl	800e2d0 <__i2b>
 800e45c:	2300      	movs	r3, #0
 800e45e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e462:	4604      	mov	r4, r0
 800e464:	6003      	str	r3, [r0, #0]
 800e466:	f04f 0800 	mov.w	r8, #0
 800e46a:	07eb      	lsls	r3, r5, #31
 800e46c:	d50a      	bpl.n	800e484 <__pow5mult+0x74>
 800e46e:	4639      	mov	r1, r7
 800e470:	4622      	mov	r2, r4
 800e472:	4630      	mov	r0, r6
 800e474:	f7ff ff35 	bl	800e2e2 <__multiply>
 800e478:	4639      	mov	r1, r7
 800e47a:	4681      	mov	r9, r0
 800e47c:	4630      	mov	r0, r6
 800e47e:	f7ff fe87 	bl	800e190 <_Bfree>
 800e482:	464f      	mov	r7, r9
 800e484:	106d      	asrs	r5, r5, #1
 800e486:	d00b      	beq.n	800e4a0 <__pow5mult+0x90>
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	b938      	cbnz	r0, 800e49c <__pow5mult+0x8c>
 800e48c:	4622      	mov	r2, r4
 800e48e:	4621      	mov	r1, r4
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff ff26 	bl	800e2e2 <__multiply>
 800e496:	6020      	str	r0, [r4, #0]
 800e498:	f8c0 8000 	str.w	r8, [r0]
 800e49c:	4604      	mov	r4, r0
 800e49e:	e7e4      	b.n	800e46a <__pow5mult+0x5a>
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a6:	bf00      	nop
 800e4a8:	0800ef68 	.word	0x0800ef68

0800e4ac <__lshift>:
 800e4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	6849      	ldr	r1, [r1, #4]
 800e4ba:	eb0a 0903 	add.w	r9, sl, r3
 800e4be:	68a3      	ldr	r3, [r4, #8]
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	4616      	mov	r6, r2
 800e4c4:	f109 0501 	add.w	r5, r9, #1
 800e4c8:	42ab      	cmp	r3, r5
 800e4ca:	db32      	blt.n	800e532 <__lshift+0x86>
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	f7ff fe2b 	bl	800e128 <_Balloc>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	f100 0114 	add.w	r1, r0, #20
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4553      	cmp	r3, sl
 800e4de:	db2b      	blt.n	800e538 <__lshift+0x8c>
 800e4e0:	6920      	ldr	r0, [r4, #16]
 800e4e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4e6:	f104 0314 	add.w	r3, r4, #20
 800e4ea:	f016 021f 	ands.w	r2, r6, #31
 800e4ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4f6:	d025      	beq.n	800e544 <__lshift+0x98>
 800e4f8:	f1c2 0e20 	rsb	lr, r2, #32
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	681e      	ldr	r6, [r3, #0]
 800e500:	468a      	mov	sl, r1
 800e502:	4096      	lsls	r6, r2
 800e504:	4330      	orrs	r0, r6
 800e506:	f84a 0b04 	str.w	r0, [sl], #4
 800e50a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e50e:	459c      	cmp	ip, r3
 800e510:	fa20 f00e 	lsr.w	r0, r0, lr
 800e514:	d814      	bhi.n	800e540 <__lshift+0x94>
 800e516:	6048      	str	r0, [r1, #4]
 800e518:	b108      	cbz	r0, 800e51e <__lshift+0x72>
 800e51a:	f109 0502 	add.w	r5, r9, #2
 800e51e:	3d01      	subs	r5, #1
 800e520:	4638      	mov	r0, r7
 800e522:	f8c8 5010 	str.w	r5, [r8, #16]
 800e526:	4621      	mov	r1, r4
 800e528:	f7ff fe32 	bl	800e190 <_Bfree>
 800e52c:	4640      	mov	r0, r8
 800e52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e532:	3101      	adds	r1, #1
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	e7c7      	b.n	800e4c8 <__lshift+0x1c>
 800e538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e53c:	3301      	adds	r3, #1
 800e53e:	e7cd      	b.n	800e4dc <__lshift+0x30>
 800e540:	4651      	mov	r1, sl
 800e542:	e7dc      	b.n	800e4fe <__lshift+0x52>
 800e544:	3904      	subs	r1, #4
 800e546:	f853 2b04 	ldr.w	r2, [r3], #4
 800e54a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e54e:	459c      	cmp	ip, r3
 800e550:	d8f9      	bhi.n	800e546 <__lshift+0x9a>
 800e552:	e7e4      	b.n	800e51e <__lshift+0x72>

0800e554 <__mcmp>:
 800e554:	6903      	ldr	r3, [r0, #16]
 800e556:	690a      	ldr	r2, [r1, #16]
 800e558:	1a9b      	subs	r3, r3, r2
 800e55a:	b530      	push	{r4, r5, lr}
 800e55c:	d10c      	bne.n	800e578 <__mcmp+0x24>
 800e55e:	0092      	lsls	r2, r2, #2
 800e560:	3014      	adds	r0, #20
 800e562:	3114      	adds	r1, #20
 800e564:	1884      	adds	r4, r0, r2
 800e566:	4411      	add	r1, r2
 800e568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e56c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e570:	4295      	cmp	r5, r2
 800e572:	d003      	beq.n	800e57c <__mcmp+0x28>
 800e574:	d305      	bcc.n	800e582 <__mcmp+0x2e>
 800e576:	2301      	movs	r3, #1
 800e578:	4618      	mov	r0, r3
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	42a0      	cmp	r0, r4
 800e57e:	d3f3      	bcc.n	800e568 <__mcmp+0x14>
 800e580:	e7fa      	b.n	800e578 <__mcmp+0x24>
 800e582:	f04f 33ff 	mov.w	r3, #4294967295
 800e586:	e7f7      	b.n	800e578 <__mcmp+0x24>

0800e588 <__mdiff>:
 800e588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e58c:	460d      	mov	r5, r1
 800e58e:	4607      	mov	r7, r0
 800e590:	4611      	mov	r1, r2
 800e592:	4628      	mov	r0, r5
 800e594:	4614      	mov	r4, r2
 800e596:	f7ff ffdd 	bl	800e554 <__mcmp>
 800e59a:	1e06      	subs	r6, r0, #0
 800e59c:	d108      	bne.n	800e5b0 <__mdiff+0x28>
 800e59e:	4631      	mov	r1, r6
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f7ff fdc1 	bl	800e128 <_Balloc>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b0:	bfa4      	itt	ge
 800e5b2:	4623      	movge	r3, r4
 800e5b4:	462c      	movge	r4, r5
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	6861      	ldr	r1, [r4, #4]
 800e5ba:	bfa6      	itte	ge
 800e5bc:	461d      	movge	r5, r3
 800e5be:	2600      	movge	r6, #0
 800e5c0:	2601      	movlt	r6, #1
 800e5c2:	f7ff fdb1 	bl	800e128 <_Balloc>
 800e5c6:	692b      	ldr	r3, [r5, #16]
 800e5c8:	60c6      	str	r6, [r0, #12]
 800e5ca:	6926      	ldr	r6, [r4, #16]
 800e5cc:	f105 0914 	add.w	r9, r5, #20
 800e5d0:	f104 0214 	add.w	r2, r4, #20
 800e5d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e5d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e5dc:	f100 0514 	add.w	r5, r0, #20
 800e5e0:	f04f 0e00 	mov.w	lr, #0
 800e5e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e5e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e5ec:	fa1e f18a 	uxtah	r1, lr, sl
 800e5f0:	b2a3      	uxth	r3, r4
 800e5f2:	1ac9      	subs	r1, r1, r3
 800e5f4:	0c23      	lsrs	r3, r4, #16
 800e5f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e5fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e5fe:	b289      	uxth	r1, r1
 800e600:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e604:	45c8      	cmp	r8, r9
 800e606:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e60a:	4694      	mov	ip, r2
 800e60c:	f845 3b04 	str.w	r3, [r5], #4
 800e610:	d8e8      	bhi.n	800e5e4 <__mdiff+0x5c>
 800e612:	45bc      	cmp	ip, r7
 800e614:	d304      	bcc.n	800e620 <__mdiff+0x98>
 800e616:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e61a:	b183      	cbz	r3, 800e63e <__mdiff+0xb6>
 800e61c:	6106      	str	r6, [r0, #16]
 800e61e:	e7c5      	b.n	800e5ac <__mdiff+0x24>
 800e620:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e624:	fa1e f381 	uxtah	r3, lr, r1
 800e628:	141a      	asrs	r2, r3, #16
 800e62a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e62e:	b29b      	uxth	r3, r3
 800e630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e634:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e638:	f845 3b04 	str.w	r3, [r5], #4
 800e63c:	e7e9      	b.n	800e612 <__mdiff+0x8a>
 800e63e:	3e01      	subs	r6, #1
 800e640:	e7e9      	b.n	800e616 <__mdiff+0x8e>

0800e642 <__d2b>:
 800e642:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e646:	460e      	mov	r6, r1
 800e648:	2101      	movs	r1, #1
 800e64a:	ec59 8b10 	vmov	r8, r9, d0
 800e64e:	4615      	mov	r5, r2
 800e650:	f7ff fd6a 	bl	800e128 <_Balloc>
 800e654:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e658:	4607      	mov	r7, r0
 800e65a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e65e:	bb34      	cbnz	r4, 800e6ae <__d2b+0x6c>
 800e660:	9301      	str	r3, [sp, #4]
 800e662:	f1b8 0300 	subs.w	r3, r8, #0
 800e666:	d027      	beq.n	800e6b8 <__d2b+0x76>
 800e668:	a802      	add	r0, sp, #8
 800e66a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e66e:	f7ff fe00 	bl	800e272 <__lo0bits>
 800e672:	9900      	ldr	r1, [sp, #0]
 800e674:	b1f0      	cbz	r0, 800e6b4 <__d2b+0x72>
 800e676:	9a01      	ldr	r2, [sp, #4]
 800e678:	f1c0 0320 	rsb	r3, r0, #32
 800e67c:	fa02 f303 	lsl.w	r3, r2, r3
 800e680:	430b      	orrs	r3, r1
 800e682:	40c2      	lsrs	r2, r0
 800e684:	617b      	str	r3, [r7, #20]
 800e686:	9201      	str	r2, [sp, #4]
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	61bb      	str	r3, [r7, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	bf14      	ite	ne
 800e690:	2102      	movne	r1, #2
 800e692:	2101      	moveq	r1, #1
 800e694:	6139      	str	r1, [r7, #16]
 800e696:	b1c4      	cbz	r4, 800e6ca <__d2b+0x88>
 800e698:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e69c:	4404      	add	r4, r0
 800e69e:	6034      	str	r4, [r6, #0]
 800e6a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6a4:	6028      	str	r0, [r5, #0]
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	b003      	add	sp, #12
 800e6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6b2:	e7d5      	b.n	800e660 <__d2b+0x1e>
 800e6b4:	6179      	str	r1, [r7, #20]
 800e6b6:	e7e7      	b.n	800e688 <__d2b+0x46>
 800e6b8:	a801      	add	r0, sp, #4
 800e6ba:	f7ff fdda 	bl	800e272 <__lo0bits>
 800e6be:	9b01      	ldr	r3, [sp, #4]
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	6139      	str	r1, [r7, #16]
 800e6c6:	3020      	adds	r0, #32
 800e6c8:	e7e5      	b.n	800e696 <__d2b+0x54>
 800e6ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e6ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6d2:	6030      	str	r0, [r6, #0]
 800e6d4:	6918      	ldr	r0, [r3, #16]
 800e6d6:	f7ff fdad 	bl	800e234 <__hi0bits>
 800e6da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e6de:	e7e1      	b.n	800e6a4 <__d2b+0x62>

0800e6e0 <_calloc_r>:
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	fb02 f401 	mul.w	r4, r2, r1
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	f000 f856 	bl	800e798 <_malloc_r>
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	b118      	cbz	r0, 800e6f8 <_calloc_r+0x18>
 800e6f0:	4622      	mov	r2, r4
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	f7fd ff2b 	bl	800c54e <memset>
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}

0800e6fc <_free_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4605      	mov	r5, r0
 800e700:	2900      	cmp	r1, #0
 800e702:	d045      	beq.n	800e790 <_free_r+0x94>
 800e704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e708:	1f0c      	subs	r4, r1, #4
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	bfb8      	it	lt
 800e70e:	18e4      	addlt	r4, r4, r3
 800e710:	f000 face 	bl	800ecb0 <__malloc_lock>
 800e714:	4a1f      	ldr	r2, [pc, #124]	; (800e794 <_free_r+0x98>)
 800e716:	6813      	ldr	r3, [r2, #0]
 800e718:	4610      	mov	r0, r2
 800e71a:	b933      	cbnz	r3, 800e72a <_free_r+0x2e>
 800e71c:	6063      	str	r3, [r4, #4]
 800e71e:	6014      	str	r4, [r2, #0]
 800e720:	4628      	mov	r0, r5
 800e722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e726:	f000 bac4 	b.w	800ecb2 <__malloc_unlock>
 800e72a:	42a3      	cmp	r3, r4
 800e72c:	d90c      	bls.n	800e748 <_free_r+0x4c>
 800e72e:	6821      	ldr	r1, [r4, #0]
 800e730:	1862      	adds	r2, r4, r1
 800e732:	4293      	cmp	r3, r2
 800e734:	bf04      	itt	eq
 800e736:	681a      	ldreq	r2, [r3, #0]
 800e738:	685b      	ldreq	r3, [r3, #4]
 800e73a:	6063      	str	r3, [r4, #4]
 800e73c:	bf04      	itt	eq
 800e73e:	1852      	addeq	r2, r2, r1
 800e740:	6022      	streq	r2, [r4, #0]
 800e742:	6004      	str	r4, [r0, #0]
 800e744:	e7ec      	b.n	800e720 <_free_r+0x24>
 800e746:	4613      	mov	r3, r2
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	b10a      	cbz	r2, 800e750 <_free_r+0x54>
 800e74c:	42a2      	cmp	r2, r4
 800e74e:	d9fa      	bls.n	800e746 <_free_r+0x4a>
 800e750:	6819      	ldr	r1, [r3, #0]
 800e752:	1858      	adds	r0, r3, r1
 800e754:	42a0      	cmp	r0, r4
 800e756:	d10b      	bne.n	800e770 <_free_r+0x74>
 800e758:	6820      	ldr	r0, [r4, #0]
 800e75a:	4401      	add	r1, r0
 800e75c:	1858      	adds	r0, r3, r1
 800e75e:	4282      	cmp	r2, r0
 800e760:	6019      	str	r1, [r3, #0]
 800e762:	d1dd      	bne.n	800e720 <_free_r+0x24>
 800e764:	6810      	ldr	r0, [r2, #0]
 800e766:	6852      	ldr	r2, [r2, #4]
 800e768:	605a      	str	r2, [r3, #4]
 800e76a:	4401      	add	r1, r0
 800e76c:	6019      	str	r1, [r3, #0]
 800e76e:	e7d7      	b.n	800e720 <_free_r+0x24>
 800e770:	d902      	bls.n	800e778 <_free_r+0x7c>
 800e772:	230c      	movs	r3, #12
 800e774:	602b      	str	r3, [r5, #0]
 800e776:	e7d3      	b.n	800e720 <_free_r+0x24>
 800e778:	6820      	ldr	r0, [r4, #0]
 800e77a:	1821      	adds	r1, r4, r0
 800e77c:	428a      	cmp	r2, r1
 800e77e:	bf04      	itt	eq
 800e780:	6811      	ldreq	r1, [r2, #0]
 800e782:	6852      	ldreq	r2, [r2, #4]
 800e784:	6062      	str	r2, [r4, #4]
 800e786:	bf04      	itt	eq
 800e788:	1809      	addeq	r1, r1, r0
 800e78a:	6021      	streq	r1, [r4, #0]
 800e78c:	605c      	str	r4, [r3, #4]
 800e78e:	e7c7      	b.n	800e720 <_free_r+0x24>
 800e790:	bd38      	pop	{r3, r4, r5, pc}
 800e792:	bf00      	nop
 800e794:	200006a4 	.word	0x200006a4

0800e798 <_malloc_r>:
 800e798:	b570      	push	{r4, r5, r6, lr}
 800e79a:	1ccd      	adds	r5, r1, #3
 800e79c:	f025 0503 	bic.w	r5, r5, #3
 800e7a0:	3508      	adds	r5, #8
 800e7a2:	2d0c      	cmp	r5, #12
 800e7a4:	bf38      	it	cc
 800e7a6:	250c      	movcc	r5, #12
 800e7a8:	2d00      	cmp	r5, #0
 800e7aa:	4606      	mov	r6, r0
 800e7ac:	db01      	blt.n	800e7b2 <_malloc_r+0x1a>
 800e7ae:	42a9      	cmp	r1, r5
 800e7b0:	d903      	bls.n	800e7ba <_malloc_r+0x22>
 800e7b2:	230c      	movs	r3, #12
 800e7b4:	6033      	str	r3, [r6, #0]
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ba:	f000 fa79 	bl	800ecb0 <__malloc_lock>
 800e7be:	4a21      	ldr	r2, [pc, #132]	; (800e844 <_malloc_r+0xac>)
 800e7c0:	6814      	ldr	r4, [r2, #0]
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	b991      	cbnz	r1, 800e7ec <_malloc_r+0x54>
 800e7c6:	4c20      	ldr	r4, [pc, #128]	; (800e848 <_malloc_r+0xb0>)
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	b91b      	cbnz	r3, 800e7d4 <_malloc_r+0x3c>
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f000 f9b3 	bl	800eb38 <_sbrk_r>
 800e7d2:	6020      	str	r0, [r4, #0]
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f000 f9ae 	bl	800eb38 <_sbrk_r>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d124      	bne.n	800e82a <_malloc_r+0x92>
 800e7e0:	230c      	movs	r3, #12
 800e7e2:	6033      	str	r3, [r6, #0]
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f000 fa64 	bl	800ecb2 <__malloc_unlock>
 800e7ea:	e7e4      	b.n	800e7b6 <_malloc_r+0x1e>
 800e7ec:	680b      	ldr	r3, [r1, #0]
 800e7ee:	1b5b      	subs	r3, r3, r5
 800e7f0:	d418      	bmi.n	800e824 <_malloc_r+0x8c>
 800e7f2:	2b0b      	cmp	r3, #11
 800e7f4:	d90f      	bls.n	800e816 <_malloc_r+0x7e>
 800e7f6:	600b      	str	r3, [r1, #0]
 800e7f8:	50cd      	str	r5, [r1, r3]
 800e7fa:	18cc      	adds	r4, r1, r3
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f000 fa58 	bl	800ecb2 <__malloc_unlock>
 800e802:	f104 000b 	add.w	r0, r4, #11
 800e806:	1d23      	adds	r3, r4, #4
 800e808:	f020 0007 	bic.w	r0, r0, #7
 800e80c:	1ac3      	subs	r3, r0, r3
 800e80e:	d0d3      	beq.n	800e7b8 <_malloc_r+0x20>
 800e810:	425a      	negs	r2, r3
 800e812:	50e2      	str	r2, [r4, r3]
 800e814:	e7d0      	b.n	800e7b8 <_malloc_r+0x20>
 800e816:	428c      	cmp	r4, r1
 800e818:	684b      	ldr	r3, [r1, #4]
 800e81a:	bf16      	itet	ne
 800e81c:	6063      	strne	r3, [r4, #4]
 800e81e:	6013      	streq	r3, [r2, #0]
 800e820:	460c      	movne	r4, r1
 800e822:	e7eb      	b.n	800e7fc <_malloc_r+0x64>
 800e824:	460c      	mov	r4, r1
 800e826:	6849      	ldr	r1, [r1, #4]
 800e828:	e7cc      	b.n	800e7c4 <_malloc_r+0x2c>
 800e82a:	1cc4      	adds	r4, r0, #3
 800e82c:	f024 0403 	bic.w	r4, r4, #3
 800e830:	42a0      	cmp	r0, r4
 800e832:	d005      	beq.n	800e840 <_malloc_r+0xa8>
 800e834:	1a21      	subs	r1, r4, r0
 800e836:	4630      	mov	r0, r6
 800e838:	f000 f97e 	bl	800eb38 <_sbrk_r>
 800e83c:	3001      	adds	r0, #1
 800e83e:	d0cf      	beq.n	800e7e0 <_malloc_r+0x48>
 800e840:	6025      	str	r5, [r4, #0]
 800e842:	e7db      	b.n	800e7fc <_malloc_r+0x64>
 800e844:	200006a4 	.word	0x200006a4
 800e848:	200006a8 	.word	0x200006a8

0800e84c <__sfputc_r>:
 800e84c:	6893      	ldr	r3, [r2, #8]
 800e84e:	3b01      	subs	r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	b410      	push	{r4}
 800e854:	6093      	str	r3, [r2, #8]
 800e856:	da08      	bge.n	800e86a <__sfputc_r+0x1e>
 800e858:	6994      	ldr	r4, [r2, #24]
 800e85a:	42a3      	cmp	r3, r4
 800e85c:	db01      	blt.n	800e862 <__sfputc_r+0x16>
 800e85e:	290a      	cmp	r1, #10
 800e860:	d103      	bne.n	800e86a <__sfputc_r+0x1e>
 800e862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e866:	f7fe bb67 	b.w	800cf38 <__swbuf_r>
 800e86a:	6813      	ldr	r3, [r2, #0]
 800e86c:	1c58      	adds	r0, r3, #1
 800e86e:	6010      	str	r0, [r2, #0]
 800e870:	7019      	strb	r1, [r3, #0]
 800e872:	4608      	mov	r0, r1
 800e874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <__sfputs_r>:
 800e87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87c:	4606      	mov	r6, r0
 800e87e:	460f      	mov	r7, r1
 800e880:	4614      	mov	r4, r2
 800e882:	18d5      	adds	r5, r2, r3
 800e884:	42ac      	cmp	r4, r5
 800e886:	d101      	bne.n	800e88c <__sfputs_r+0x12>
 800e888:	2000      	movs	r0, #0
 800e88a:	e007      	b.n	800e89c <__sfputs_r+0x22>
 800e88c:	463a      	mov	r2, r7
 800e88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e892:	4630      	mov	r0, r6
 800e894:	f7ff ffda 	bl	800e84c <__sfputc_r>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d1f3      	bne.n	800e884 <__sfputs_r+0xa>
 800e89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8a0 <_vfiprintf_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	b09d      	sub	sp, #116	; 0x74
 800e8a8:	4617      	mov	r7, r2
 800e8aa:	461d      	mov	r5, r3
 800e8ac:	4606      	mov	r6, r0
 800e8ae:	b118      	cbz	r0, 800e8b8 <_vfiprintf_r+0x18>
 800e8b0:	6983      	ldr	r3, [r0, #24]
 800e8b2:	b90b      	cbnz	r3, 800e8b8 <_vfiprintf_r+0x18>
 800e8b4:	f7ff fb34 	bl	800df20 <__sinit>
 800e8b8:	4b7c      	ldr	r3, [pc, #496]	; (800eaac <_vfiprintf_r+0x20c>)
 800e8ba:	429c      	cmp	r4, r3
 800e8bc:	d158      	bne.n	800e970 <_vfiprintf_r+0xd0>
 800e8be:	6874      	ldr	r4, [r6, #4]
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	0718      	lsls	r0, r3, #28
 800e8c4:	d55e      	bpl.n	800e984 <_vfiprintf_r+0xe4>
 800e8c6:	6923      	ldr	r3, [r4, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d05b      	beq.n	800e984 <_vfiprintf_r+0xe4>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d0:	2320      	movs	r3, #32
 800e8d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8d6:	2330      	movs	r3, #48	; 0x30
 800e8d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8dc:	9503      	str	r5, [sp, #12]
 800e8de:	f04f 0b01 	mov.w	fp, #1
 800e8e2:	46b8      	mov	r8, r7
 800e8e4:	4645      	mov	r5, r8
 800e8e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8ea:	b10b      	cbz	r3, 800e8f0 <_vfiprintf_r+0x50>
 800e8ec:	2b25      	cmp	r3, #37	; 0x25
 800e8ee:	d154      	bne.n	800e99a <_vfiprintf_r+0xfa>
 800e8f0:	ebb8 0a07 	subs.w	sl, r8, r7
 800e8f4:	d00b      	beq.n	800e90e <_vfiprintf_r+0x6e>
 800e8f6:	4653      	mov	r3, sl
 800e8f8:	463a      	mov	r2, r7
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff ffbc 	bl	800e87a <__sfputs_r>
 800e902:	3001      	adds	r0, #1
 800e904:	f000 80c2 	beq.w	800ea8c <_vfiprintf_r+0x1ec>
 800e908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e90a:	4453      	add	r3, sl
 800e90c:	9309      	str	r3, [sp, #36]	; 0x24
 800e90e:	f898 3000 	ldrb.w	r3, [r8]
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 80ba 	beq.w	800ea8c <_vfiprintf_r+0x1ec>
 800e918:	2300      	movs	r3, #0
 800e91a:	f04f 32ff 	mov.w	r2, #4294967295
 800e91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e922:	9304      	str	r3, [sp, #16]
 800e924:	9307      	str	r3, [sp, #28]
 800e926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e92a:	931a      	str	r3, [sp, #104]	; 0x68
 800e92c:	46a8      	mov	r8, r5
 800e92e:	2205      	movs	r2, #5
 800e930:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e934:	485e      	ldr	r0, [pc, #376]	; (800eab0 <_vfiprintf_r+0x210>)
 800e936:	f7f1 fc7b 	bl	8000230 <memchr>
 800e93a:	9b04      	ldr	r3, [sp, #16]
 800e93c:	bb78      	cbnz	r0, 800e99e <_vfiprintf_r+0xfe>
 800e93e:	06d9      	lsls	r1, r3, #27
 800e940:	bf44      	itt	mi
 800e942:	2220      	movmi	r2, #32
 800e944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e948:	071a      	lsls	r2, r3, #28
 800e94a:	bf44      	itt	mi
 800e94c:	222b      	movmi	r2, #43	; 0x2b
 800e94e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e952:	782a      	ldrb	r2, [r5, #0]
 800e954:	2a2a      	cmp	r2, #42	; 0x2a
 800e956:	d02a      	beq.n	800e9ae <_vfiprintf_r+0x10e>
 800e958:	9a07      	ldr	r2, [sp, #28]
 800e95a:	46a8      	mov	r8, r5
 800e95c:	2000      	movs	r0, #0
 800e95e:	250a      	movs	r5, #10
 800e960:	4641      	mov	r1, r8
 800e962:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e966:	3b30      	subs	r3, #48	; 0x30
 800e968:	2b09      	cmp	r3, #9
 800e96a:	d969      	bls.n	800ea40 <_vfiprintf_r+0x1a0>
 800e96c:	b360      	cbz	r0, 800e9c8 <_vfiprintf_r+0x128>
 800e96e:	e024      	b.n	800e9ba <_vfiprintf_r+0x11a>
 800e970:	4b50      	ldr	r3, [pc, #320]	; (800eab4 <_vfiprintf_r+0x214>)
 800e972:	429c      	cmp	r4, r3
 800e974:	d101      	bne.n	800e97a <_vfiprintf_r+0xda>
 800e976:	68b4      	ldr	r4, [r6, #8]
 800e978:	e7a2      	b.n	800e8c0 <_vfiprintf_r+0x20>
 800e97a:	4b4f      	ldr	r3, [pc, #316]	; (800eab8 <_vfiprintf_r+0x218>)
 800e97c:	429c      	cmp	r4, r3
 800e97e:	bf08      	it	eq
 800e980:	68f4      	ldreq	r4, [r6, #12]
 800e982:	e79d      	b.n	800e8c0 <_vfiprintf_r+0x20>
 800e984:	4621      	mov	r1, r4
 800e986:	4630      	mov	r0, r6
 800e988:	f7fe fb28 	bl	800cfdc <__swsetup_r>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d09d      	beq.n	800e8cc <_vfiprintf_r+0x2c>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b01d      	add	sp, #116	; 0x74
 800e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99a:	46a8      	mov	r8, r5
 800e99c:	e7a2      	b.n	800e8e4 <_vfiprintf_r+0x44>
 800e99e:	4a44      	ldr	r2, [pc, #272]	; (800eab0 <_vfiprintf_r+0x210>)
 800e9a0:	1a80      	subs	r0, r0, r2
 800e9a2:	fa0b f000 	lsl.w	r0, fp, r0
 800e9a6:	4318      	orrs	r0, r3
 800e9a8:	9004      	str	r0, [sp, #16]
 800e9aa:	4645      	mov	r5, r8
 800e9ac:	e7be      	b.n	800e92c <_vfiprintf_r+0x8c>
 800e9ae:	9a03      	ldr	r2, [sp, #12]
 800e9b0:	1d11      	adds	r1, r2, #4
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	9103      	str	r1, [sp, #12]
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	db01      	blt.n	800e9be <_vfiprintf_r+0x11e>
 800e9ba:	9207      	str	r2, [sp, #28]
 800e9bc:	e004      	b.n	800e9c8 <_vfiprintf_r+0x128>
 800e9be:	4252      	negs	r2, r2
 800e9c0:	f043 0302 	orr.w	r3, r3, #2
 800e9c4:	9207      	str	r2, [sp, #28]
 800e9c6:	9304      	str	r3, [sp, #16]
 800e9c8:	f898 3000 	ldrb.w	r3, [r8]
 800e9cc:	2b2e      	cmp	r3, #46	; 0x2e
 800e9ce:	d10e      	bne.n	800e9ee <_vfiprintf_r+0x14e>
 800e9d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e9d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9d6:	d138      	bne.n	800ea4a <_vfiprintf_r+0x1aa>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d1a      	adds	r2, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9203      	str	r2, [sp, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfb8      	it	lt
 800e9e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9e8:	f108 0802 	add.w	r8, r8, #2
 800e9ec:	9305      	str	r3, [sp, #20]
 800e9ee:	4d33      	ldr	r5, [pc, #204]	; (800eabc <_vfiprintf_r+0x21c>)
 800e9f0:	f898 1000 	ldrb.w	r1, [r8]
 800e9f4:	2203      	movs	r2, #3
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f7f1 fc1a 	bl	8000230 <memchr>
 800e9fc:	b140      	cbz	r0, 800ea10 <_vfiprintf_r+0x170>
 800e9fe:	2340      	movs	r3, #64	; 0x40
 800ea00:	1b40      	subs	r0, r0, r5
 800ea02:	fa03 f000 	lsl.w	r0, r3, r0
 800ea06:	9b04      	ldr	r3, [sp, #16]
 800ea08:	4303      	orrs	r3, r0
 800ea0a:	f108 0801 	add.w	r8, r8, #1
 800ea0e:	9304      	str	r3, [sp, #16]
 800ea10:	f898 1000 	ldrb.w	r1, [r8]
 800ea14:	482a      	ldr	r0, [pc, #168]	; (800eac0 <_vfiprintf_r+0x220>)
 800ea16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea1a:	2206      	movs	r2, #6
 800ea1c:	f108 0701 	add.w	r7, r8, #1
 800ea20:	f7f1 fc06 	bl	8000230 <memchr>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d037      	beq.n	800ea98 <_vfiprintf_r+0x1f8>
 800ea28:	4b26      	ldr	r3, [pc, #152]	; (800eac4 <_vfiprintf_r+0x224>)
 800ea2a:	bb1b      	cbnz	r3, 800ea74 <_vfiprintf_r+0x1d4>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	3307      	adds	r3, #7
 800ea30:	f023 0307 	bic.w	r3, r3, #7
 800ea34:	3308      	adds	r3, #8
 800ea36:	9303      	str	r3, [sp, #12]
 800ea38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea3a:	444b      	add	r3, r9
 800ea3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea3e:	e750      	b.n	800e8e2 <_vfiprintf_r+0x42>
 800ea40:	fb05 3202 	mla	r2, r5, r2, r3
 800ea44:	2001      	movs	r0, #1
 800ea46:	4688      	mov	r8, r1
 800ea48:	e78a      	b.n	800e960 <_vfiprintf_r+0xc0>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	f108 0801 	add.w	r8, r8, #1
 800ea50:	9305      	str	r3, [sp, #20]
 800ea52:	4619      	mov	r1, r3
 800ea54:	250a      	movs	r5, #10
 800ea56:	4640      	mov	r0, r8
 800ea58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea5c:	3a30      	subs	r2, #48	; 0x30
 800ea5e:	2a09      	cmp	r2, #9
 800ea60:	d903      	bls.n	800ea6a <_vfiprintf_r+0x1ca>
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0c3      	beq.n	800e9ee <_vfiprintf_r+0x14e>
 800ea66:	9105      	str	r1, [sp, #20]
 800ea68:	e7c1      	b.n	800e9ee <_vfiprintf_r+0x14e>
 800ea6a:	fb05 2101 	mla	r1, r5, r1, r2
 800ea6e:	2301      	movs	r3, #1
 800ea70:	4680      	mov	r8, r0
 800ea72:	e7f0      	b.n	800ea56 <_vfiprintf_r+0x1b6>
 800ea74:	ab03      	add	r3, sp, #12
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	4622      	mov	r2, r4
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <_vfiprintf_r+0x228>)
 800ea7c:	a904      	add	r1, sp, #16
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7fd fe02 	bl	800c688 <_printf_float>
 800ea84:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ea88:	4681      	mov	r9, r0
 800ea8a:	d1d5      	bne.n	800ea38 <_vfiprintf_r+0x198>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	065b      	lsls	r3, r3, #25
 800ea90:	f53f af7e 	bmi.w	800e990 <_vfiprintf_r+0xf0>
 800ea94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea96:	e77d      	b.n	800e994 <_vfiprintf_r+0xf4>
 800ea98:	ab03      	add	r3, sp, #12
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <_vfiprintf_r+0x228>)
 800eaa0:	a904      	add	r1, sp, #16
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f7fe f8a6 	bl	800cbf4 <_printf_i>
 800eaa8:	e7ec      	b.n	800ea84 <_vfiprintf_r+0x1e4>
 800eaaa:	bf00      	nop
 800eaac:	0800ee34 	.word	0x0800ee34
 800eab0:	0800ef74 	.word	0x0800ef74
 800eab4:	0800ee54 	.word	0x0800ee54
 800eab8:	0800ee14 	.word	0x0800ee14
 800eabc:	0800ef7a 	.word	0x0800ef7a
 800eac0:	0800ef7e 	.word	0x0800ef7e
 800eac4:	0800c689 	.word	0x0800c689
 800eac8:	0800e87b 	.word	0x0800e87b

0800eacc <_putc_r>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	460d      	mov	r5, r1
 800ead0:	4614      	mov	r4, r2
 800ead2:	4606      	mov	r6, r0
 800ead4:	b118      	cbz	r0, 800eade <_putc_r+0x12>
 800ead6:	6983      	ldr	r3, [r0, #24]
 800ead8:	b90b      	cbnz	r3, 800eade <_putc_r+0x12>
 800eada:	f7ff fa21 	bl	800df20 <__sinit>
 800eade:	4b13      	ldr	r3, [pc, #76]	; (800eb2c <_putc_r+0x60>)
 800eae0:	429c      	cmp	r4, r3
 800eae2:	d112      	bne.n	800eb0a <_putc_r+0x3e>
 800eae4:	6874      	ldr	r4, [r6, #4]
 800eae6:	68a3      	ldr	r3, [r4, #8]
 800eae8:	3b01      	subs	r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	60a3      	str	r3, [r4, #8]
 800eaee:	da16      	bge.n	800eb1e <_putc_r+0x52>
 800eaf0:	69a2      	ldr	r2, [r4, #24]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	db02      	blt.n	800eafc <_putc_r+0x30>
 800eaf6:	b2eb      	uxtb	r3, r5
 800eaf8:	2b0a      	cmp	r3, #10
 800eafa:	d110      	bne.n	800eb1e <_putc_r+0x52>
 800eafc:	4622      	mov	r2, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	4630      	mov	r0, r6
 800eb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb06:	f7fe ba17 	b.w	800cf38 <__swbuf_r>
 800eb0a:	4b09      	ldr	r3, [pc, #36]	; (800eb30 <_putc_r+0x64>)
 800eb0c:	429c      	cmp	r4, r3
 800eb0e:	d101      	bne.n	800eb14 <_putc_r+0x48>
 800eb10:	68b4      	ldr	r4, [r6, #8]
 800eb12:	e7e8      	b.n	800eae6 <_putc_r+0x1a>
 800eb14:	4b07      	ldr	r3, [pc, #28]	; (800eb34 <_putc_r+0x68>)
 800eb16:	429c      	cmp	r4, r3
 800eb18:	bf08      	it	eq
 800eb1a:	68f4      	ldreq	r4, [r6, #12]
 800eb1c:	e7e3      	b.n	800eae6 <_putc_r+0x1a>
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	6022      	str	r2, [r4, #0]
 800eb24:	701d      	strb	r5, [r3, #0]
 800eb26:	b2e8      	uxtb	r0, r5
 800eb28:	bd70      	pop	{r4, r5, r6, pc}
 800eb2a:	bf00      	nop
 800eb2c:	0800ee34 	.word	0x0800ee34
 800eb30:	0800ee54 	.word	0x0800ee54
 800eb34:	0800ee14 	.word	0x0800ee14

0800eb38 <_sbrk_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4c06      	ldr	r4, [pc, #24]	; (800eb54 <_sbrk_r+0x1c>)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4605      	mov	r5, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	6023      	str	r3, [r4, #0]
 800eb44:	f7fc ff32 	bl	800b9ac <_sbrk>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d102      	bne.n	800eb52 <_sbrk_r+0x1a>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	b103      	cbz	r3, 800eb52 <_sbrk_r+0x1a>
 800eb50:	602b      	str	r3, [r5, #0]
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	20031c5c 	.word	0x20031c5c

0800eb58 <__sread>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb60:	f000 f8a8 	bl	800ecb4 <_read_r>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	bfab      	itete	ge
 800eb68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb6a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb6c:	181b      	addge	r3, r3, r0
 800eb6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb72:	bfac      	ite	ge
 800eb74:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb76:	81a3      	strhlt	r3, [r4, #12]
 800eb78:	bd10      	pop	{r4, pc}

0800eb7a <__swrite>:
 800eb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7e:	461f      	mov	r7, r3
 800eb80:	898b      	ldrh	r3, [r1, #12]
 800eb82:	05db      	lsls	r3, r3, #23
 800eb84:	4605      	mov	r5, r0
 800eb86:	460c      	mov	r4, r1
 800eb88:	4616      	mov	r6, r2
 800eb8a:	d505      	bpl.n	800eb98 <__swrite+0x1e>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb94:	f000 f868 	bl	800ec68 <_lseek_r>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eba2:	81a3      	strh	r3, [r4, #12]
 800eba4:	4632      	mov	r2, r6
 800eba6:	463b      	mov	r3, r7
 800eba8:	4628      	mov	r0, r5
 800ebaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebae:	f000 b817 	b.w	800ebe0 <_write_r>

0800ebb2 <__sseek>:
 800ebb2:	b510      	push	{r4, lr}
 800ebb4:	460c      	mov	r4, r1
 800ebb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebba:	f000 f855 	bl	800ec68 <_lseek_r>
 800ebbe:	1c43      	adds	r3, r0, #1
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	bf15      	itete	ne
 800ebc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebce:	81a3      	strheq	r3, [r4, #12]
 800ebd0:	bf18      	it	ne
 800ebd2:	81a3      	strhne	r3, [r4, #12]
 800ebd4:	bd10      	pop	{r4, pc}

0800ebd6 <__sclose>:
 800ebd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebda:	f000 b813 	b.w	800ec04 <_close_r>
	...

0800ebe0 <_write_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	4c07      	ldr	r4, [pc, #28]	; (800ec00 <_write_r+0x20>)
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	4608      	mov	r0, r1
 800ebe8:	4611      	mov	r1, r2
 800ebea:	2200      	movs	r2, #0
 800ebec:	6022      	str	r2, [r4, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	f7fc fe97 	bl	800b922 <_write>
 800ebf4:	1c43      	adds	r3, r0, #1
 800ebf6:	d102      	bne.n	800ebfe <_write_r+0x1e>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	b103      	cbz	r3, 800ebfe <_write_r+0x1e>
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	20031c5c 	.word	0x20031c5c

0800ec04 <_close_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4c06      	ldr	r4, [pc, #24]	; (800ec20 <_close_r+0x1c>)
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	f7fc fe98 	bl	800b944 <_close>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_close_r+0x1a>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_close_r+0x1a>
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	20031c5c 	.word	0x20031c5c

0800ec24 <_fstat_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4c07      	ldr	r4, [pc, #28]	; (800ec44 <_fstat_r+0x20>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	6023      	str	r3, [r4, #0]
 800ec32:	f7fc fe93 	bl	800b95c <_fstat>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d102      	bne.n	800ec40 <_fstat_r+0x1c>
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	b103      	cbz	r3, 800ec40 <_fstat_r+0x1c>
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	20031c5c 	.word	0x20031c5c

0800ec48 <_isatty_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4c06      	ldr	r4, [pc, #24]	; (800ec64 <_isatty_r+0x1c>)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4605      	mov	r5, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	6023      	str	r3, [r4, #0]
 800ec54:	f7fc fe92 	bl	800b97c <_isatty>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_isatty_r+0x1a>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_isatty_r+0x1a>
 800ec60:	602b      	str	r3, [r5, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	20031c5c 	.word	0x20031c5c

0800ec68 <_lseek_r>:
 800ec68:	b538      	push	{r3, r4, r5, lr}
 800ec6a:	4c07      	ldr	r4, [pc, #28]	; (800ec88 <_lseek_r+0x20>)
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	4608      	mov	r0, r1
 800ec70:	4611      	mov	r1, r2
 800ec72:	2200      	movs	r2, #0
 800ec74:	6022      	str	r2, [r4, #0]
 800ec76:	461a      	mov	r2, r3
 800ec78:	f7fc fe8b 	bl	800b992 <_lseek>
 800ec7c:	1c43      	adds	r3, r0, #1
 800ec7e:	d102      	bne.n	800ec86 <_lseek_r+0x1e>
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	b103      	cbz	r3, 800ec86 <_lseek_r+0x1e>
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	bd38      	pop	{r3, r4, r5, pc}
 800ec88:	20031c5c 	.word	0x20031c5c

0800ec8c <__ascii_mbtowc>:
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	b901      	cbnz	r1, 800ec92 <__ascii_mbtowc+0x6>
 800ec90:	a901      	add	r1, sp, #4
 800ec92:	b142      	cbz	r2, 800eca6 <__ascii_mbtowc+0x1a>
 800ec94:	b14b      	cbz	r3, 800ecaa <__ascii_mbtowc+0x1e>
 800ec96:	7813      	ldrb	r3, [r2, #0]
 800ec98:	600b      	str	r3, [r1, #0]
 800ec9a:	7812      	ldrb	r2, [r2, #0]
 800ec9c:	1c10      	adds	r0, r2, #0
 800ec9e:	bf18      	it	ne
 800eca0:	2001      	movne	r0, #1
 800eca2:	b002      	add	sp, #8
 800eca4:	4770      	bx	lr
 800eca6:	4610      	mov	r0, r2
 800eca8:	e7fb      	b.n	800eca2 <__ascii_mbtowc+0x16>
 800ecaa:	f06f 0001 	mvn.w	r0, #1
 800ecae:	e7f8      	b.n	800eca2 <__ascii_mbtowc+0x16>

0800ecb0 <__malloc_lock>:
 800ecb0:	4770      	bx	lr

0800ecb2 <__malloc_unlock>:
 800ecb2:	4770      	bx	lr

0800ecb4 <_read_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	4c07      	ldr	r4, [pc, #28]	; (800ecd4 <_read_r+0x20>)
 800ecb8:	4605      	mov	r5, r0
 800ecba:	4608      	mov	r0, r1
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6022      	str	r2, [r4, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f7fc fe10 	bl	800b8e8 <_read>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d102      	bne.n	800ecd2 <_read_r+0x1e>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	b103      	cbz	r3, 800ecd2 <_read_r+0x1e>
 800ecd0:	602b      	str	r3, [r5, #0]
 800ecd2:	bd38      	pop	{r3, r4, r5, pc}
 800ecd4:	20031c5c 	.word	0x20031c5c

0800ecd8 <__ascii_wctomb>:
 800ecd8:	b149      	cbz	r1, 800ecee <__ascii_wctomb+0x16>
 800ecda:	2aff      	cmp	r2, #255	; 0xff
 800ecdc:	bf85      	ittet	hi
 800ecde:	238a      	movhi	r3, #138	; 0x8a
 800ece0:	6003      	strhi	r3, [r0, #0]
 800ece2:	700a      	strbls	r2, [r1, #0]
 800ece4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ece8:	bf98      	it	ls
 800ecea:	2001      	movls	r0, #1
 800ecec:	4770      	bx	lr
 800ecee:	4608      	mov	r0, r1
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <_init>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	bf00      	nop
 800ecf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfa:	bc08      	pop	{r3}
 800ecfc:	469e      	mov	lr, r3
 800ecfe:	4770      	bx	lr

0800ed00 <_fini>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	bf00      	nop
 800ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed06:	bc08      	pop	{r3}
 800ed08:	469e      	mov	lr, r3
 800ed0a:	4770      	bx	lr
