
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800f7c0  0800f7c0  0001f7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb60  0800fb60  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb60  0800fb60  0001fb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb68  0800fb68  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb68  0800fb68  0001fb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb6c  0800fb6c  0001fb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800fb70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00032254  20000220  0800fd90  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20032474  0800fd90  00022474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002408a  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000446b  00000000  00000000  000442da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  00048748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  00049ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026600  00000000  00000000  0004b068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000153e9  00000000  00000000  00071668  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4152  00000000  00000000  00086a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015aba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  0015ac20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f7a4 	.word	0x0800f7a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800f7a4 	.word	0x0800f7a4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 fd29 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f00b f934 	bl	800c238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd41 	bl	8001a82 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 fd09 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	200006d8 	.word	0x200006d8

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200006d8 	.word	0x200006d8

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e033      	b.n	800113e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f006 fd92 	bl	8007c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001106:	f023 0302 	bic.w	r3, r3, #2
 800110a:	f043 0202 	orr.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fa32 	bl	800157c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
 800112e:	e001      	b.n	8001134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start_DMA+0x1e>
 8001162:	2302      	movs	r3, #2
 8001164:	e0b1      	b.n	80012ca <HAL_ADC_Start_DMA+0x182>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d018      	beq.n	80011ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_ADC_Start_DMA+0x18c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_ADC_Start_DMA+0x190>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9a      	lsrs	r2, r3, #18
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8085 	bne.w	80012c8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f023 0206 	bic.w	r2, r3, #6
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
 800120a:	e002      	b.n	8001212 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_ADC_Start_DMA+0x194>)
 800121c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <HAL_ADC_Start_DMA+0x198>)
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_ADC_Start_DMA+0x19c>)
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_ADC_Start_DMA+0x1a0>)
 8001234:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800124e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	334c      	adds	r3, #76	; 0x4c
 800126a:	4619      	mov	r1, r3
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f000 fcc2 	bl	8001bf8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11c      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e013      	b.n	80012c8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_ADC_Start_DMA+0x1a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10e      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	40012300 	.word	0x40012300
 80012e0:	08001775 	.word	0x08001775
 80012e4:	0800182f 	.word	0x0800182f
 80012e8:	0800184b 	.word	0x0800184b
 80012ec:	40012000 	.word	0x40012000

080012f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e113      	b.n	800155c <HAL_ADC_ConfigChannel+0x244>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d925      	bls.n	8001390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	3b1e      	subs	r3, #30
 800135a:	2207      	movs	r2, #7
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68d9      	ldr	r1, [r3, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4403      	add	r3, r0
 8001382:	3b1e      	subs	r3, #30
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2207      	movs	r2, #7
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	409a      	lsls	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d824      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
 8001426:	e04c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b23      	subs	r3, #35	; 0x23
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	; 0x23
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
 8001478:	e023      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	; 0x41
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	; 0x41
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ADC_ConfigChannel+0x250>)
 80014c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10f      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_ADC_ConfigChannel+0x1f4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b11      	cmp	r3, #17
 800150a:	d122      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d111      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_ADC_ConfigChannel+0x25c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_ADC_ConfigChannel+0x260>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	10000012 	.word	0x10000012
 8001574:	20000008 	.word	0x20000008
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <ADC_Init+0x1f0>)
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	4a58      	ldr	r2, [pc, #352]	; (8001770 <ADC_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00f      	b.n	800167a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0202 	bic.w	r2, r2, #2
 8001688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	005a      	lsls	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	035a      	lsls	r2, r3, #13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e007      	b.n	80016f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	051a      	lsls	r2, r3, #20
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	029a      	lsls	r2, r3, #10
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13c      	bne.n	8001808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12b      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d127      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d119      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0220 	bic.w	r2, r2, #32
 80017da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f006 fa93 	bl	8007d2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001806:	e00e      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fd75 	bl	8001304 <HAL_ADC_ErrorCallback>
}
 800181a:	e004      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fd57 	bl	80012f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f043 0204 	orr.w	r2, r3, #4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fd4a 	bl	8001304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fadc 	bl	8001064 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e099      	b.n	8001bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fac3 	bl	8001064 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d908      	bls.n	8001afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e078      	b.n	8001bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e8      	bne.n	8001ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_DMA_Init+0x158>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d117      	bne.n	8001bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fa77 	bl	8002094 <DMA_CheckFifoParam>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa2e 	bl	8002028 <DMA_CalcBaseAndBitshift>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	e010803f 	.word	0xe010803f

08001bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Start_IT+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e048      	b.n	8001cb0 <HAL_DMA_Start_IT+0xb8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d137      	bne.n	8001ca2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f9c0 	bl	8001fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0216 	orr.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0208 	orr.w	r2, r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e005      	b.n	8001cae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_DMA_IRQHandler+0x258>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <HAL_DMA_IRQHandler+0x25c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2208      	movs	r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2201      	movs	r2, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2210      	movs	r2, #16
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2210      	movs	r2, #16
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e01f      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0208 	bic.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 808e 	beq.w	8001f56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8086 	beq.w	8001f56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2220      	movs	r2, #32
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d136      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07d      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
        }
        return;
 8001ece:	e078      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01c      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d030      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e02b      	b.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d027      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
 8001f0e:	e022      	b.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
 8001f10:	20000008 	.word	0x20000008
 8001f14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0210 	bic.w	r2, r2, #16
 8001f34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d032      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d022      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d307      	bcc.n	8001f9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f2      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x2ca>
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fc2:	bf00      	nop
    }
  }
}
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d108      	bne.n	800200c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800200a:	e007      	b.n	800201c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3b10      	subs	r3, #16
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <DMA_CalcBaseAndBitshift+0x64>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <DMA_CalcBaseAndBitshift+0x68>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d909      	bls.n	800206a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
 8002068:	e007      	b.n	800207a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	aaaaaaab 	.word	0xaaaaaaab
 8002090:	0800f884 	.word	0x0800f884

08002094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11f      	bne.n	80020ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d855      	bhi.n	8002160 <DMA_CheckFifoParam+0xcc>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x28>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020df 	.word	0x080020df
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d045      	beq.n	8002164 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020dc:	e042      	b.n	8002164 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e6:	d13f      	bne.n	8002168 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e03c      	b.n	8002168 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d121      	bne.n	800213c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d836      	bhi.n	800216c <DMA_CheckFifoParam+0xd8>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x70>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002115 	.word	0x08002115
 8002108:	0800211b 	.word	0x0800211b
 800210c:	08002115 	.word	0x08002115
 8002110:	0800212d 	.word	0x0800212d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      break;
 8002118:	e02f      	b.n	800217a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212a:	e021      	b.n	8002170 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002134:	d11e      	bne.n	8002174 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213a:	e01b      	b.n	8002174 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <DMA_CheckFifoParam+0xb4>
 8002142:	2b03      	cmp	r3, #3
 8002144:	d003      	beq.n	800214e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002146:	e018      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e015      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00e      	beq.n	8002178 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e00b      	b.n	8002178 <DMA_CheckFifoParam+0xe4>
      break;
 8002160:	bf00      	nop
 8002162:	e00a      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002164:	bf00      	nop
 8002166:	e008      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002168:	bf00      	nop
 800216a:	e006      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 800216c:	bf00      	nop
 800216e:	e004      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002170:	bf00      	nop
 8002172:	e002      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;   
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002178:	bf00      	nop
    }
  } 
  
  return status; 
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_FLASH_Program+0xa0>)
 800219c:	7e1b      	ldrb	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_FLASH_Program+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e03b      	b.n	800221e <HAL_FLASH_Program+0x96>
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_FLASH_Program+0xa0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b0:	f000 f870 	bl	8002294 <FLASH_WaitForLastOperation>
 80021b4:	4603      	mov	r3, r0
 80021b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d12b      	bne.n	8002216 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021c4:	783b      	ldrb	r3, [r7, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f000 f917 	bl	80023fc <FLASH_Program_Byte>
 80021ce:	e016      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	f000 f8ea 	bl	80023b4 <FLASH_Program_HalfWord>
 80021e0:	e00d      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d105      	bne.n	80021f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	68b8      	ldr	r0, [r7, #8]
 80021ee:	f000 f8bf 	bl	8002370 <FLASH_Program_Word>
 80021f2:	e004      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f8:	68b8      	ldr	r0, [r7, #8]
 80021fa:	f000 f88b 	bl	8002314 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002202:	f000 f847 	bl	8002294 <FLASH_WaitForLastOperation>
 8002206:	4603      	mov	r3, r0
 8002208:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_FLASH_Program+0xa4>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_FLASH_Program+0xa4>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_FLASH_Program+0xa0>)
 8002218:	2200      	movs	r2, #0
 800221a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200006dc 	.word	0x200006dc
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0b      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_FLASH_Unlock+0x3c>)
 8002246:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_FLASH_Unlock+0x40>)
 800224c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da01      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800225a:	79fb      	ldrb	r3, [r7, #7]
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023c00 	.word	0x40023c00
 800226c:	45670123 	.word	0x45670123
 8002270:	cdef89ab 	.word	0xcdef89ab

08002274 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002282:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40023c00 	.word	0x40023c00

08002294 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <FLASH_WaitForLastOperation+0x78>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022a6:	f7fe fedd 	bl	8001064 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022ac:	e010      	b.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d00c      	beq.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <FLASH_WaitForLastOperation+0x38>
 80022bc:	f7fe fed2 	bl	8001064 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d201      	bcs.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e019      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022fa:	f000 f8a1 	bl	8002440 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
  
}  
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200006dc 	.word	0x200006dc
 8002310:	40023c00 	.word	0x40023c00

08002314 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 8002332:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002336:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <FLASH_Program_DoubleWord+0x58>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800234a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	0013      	movs	r3, r2
 8002358:	2400      	movs	r4, #0
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	3204      	adds	r2, #4
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bc90      	pop	{r4, r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <FLASH_Program_Word+0x40>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <FLASH_Program_Word+0x40>)
 800238c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002390:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	801a      	strh	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <FLASH_Program_Byte+0x40>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <FLASH_Program_Byte+0x40>)
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <FLASH_Program_Byte+0x40>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <FLASH_Program_Byte+0x40>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 800245a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800245e:	2210      	movs	r2, #16
 8002460:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	4a24      	ldr	r2, [pc, #144]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002478:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800247c:	2220      	movs	r2, #32
 800247e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 8002496:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024da:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <FLASH_SetErrorCode+0xc8>)
 80024f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <FLASH_SetErrorCode+0xc4>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	60da      	str	r2, [r3, #12]
  }
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40023c00 	.word	0x40023c00
 8002508:	200006dc 	.word	0x200006dc

0800250c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 8002520:	7e1b      	ldrb	r3, [r3, #24]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_FLASHEx_Erase+0x1e>
 8002526:	2302      	movs	r3, #2
 8002528:	e058      	b.n	80025dc <HAL_FLASHEx_Erase+0xd0>
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 800252c:	2201      	movs	r2, #1
 800252e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002534:	f7ff feae 	bl	8002294 <FLASH_WaitForLastOperation>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d148      	bne.n	80025d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d115      	bne.n	800257e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f844 	bl	80025ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002568:	f7ff fe94 	bl	8002294 <FLASH_WaitForLastOperation>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6113      	str	r3, [r2, #16]
 800257c:	e028      	b.n	80025d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e01c      	b.n	80025c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	68b8      	ldr	r0, [r7, #8]
 8002590:	f000 f850 	bl	8002634 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002598:	f7ff fe7c 	bl	8002294 <FLASH_WaitForLastOperation>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_FLASHEx_Erase+0xdc>)
 80025a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80025aa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	601a      	str	r2, [r3, #0]
          break;
 80025b8:	e00a      	b.n	80025d0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3301      	adds	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4413      	add	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3da      	bcc.n	8002586 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80025d0:	f000 f878 	bl	80026c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_FLASHEx_Erase+0xd8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	761a      	strb	r2, [r3, #24]

  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200006dc 	.word	0x200006dc
 80025e8:	40023c00 	.word	0x40023c00

080025ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <FLASH_MassErase+0x44>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <FLASH_MassErase+0x44>)
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <FLASH_MassErase+0x44>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <FLASH_MassErase+0x44>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <FLASH_MassErase+0x44>)
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	4313      	orrs	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <FLASH_MassErase+0x44>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6113      	str	r3, [r2, #16]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e010      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d103      	bne.n	800265e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e009      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d103      	bne.n	800266c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e002      	b.n	8002672 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800266c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	490f      	ldr	r1, [pc, #60]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002690:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002694:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4313      	orrs	r3, r2
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <FLASH_Erase_Sector+0x8c>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6113      	str	r3, [r2, #16]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <FLASH_FlushCaches+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <FLASH_FlushCaches+0x88>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <FLASH_FlushCaches+0x88>)
 80026da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <FLASH_FlushCaches+0x88>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <FLASH_FlushCaches+0x88>)
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <FLASH_FlushCaches+0x88>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <FLASH_FlushCaches+0x88>)
 80026f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <FLASH_FlushCaches+0x88>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <FLASH_FlushCaches+0x88>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <FLASH_FlushCaches+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <FLASH_FlushCaches+0x88>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <FLASH_FlushCaches+0x88>)
 8002716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800271a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <FLASH_FlushCaches+0x88>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <FLASH_FlushCaches+0x88>)
 8002722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <FLASH_FlushCaches+0x88>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <FLASH_FlushCaches+0x88>)
 800272e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002732:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <FLASH_FlushCaches+0x88>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <FLASH_FlushCaches+0x88>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	6013      	str	r3, [r2, #0]
  }
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e165      	b.n	8002a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8154 	bne.w	8002a32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x4a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b12      	cmp	r3, #18
 8002798:	d123      	bne.n	80027e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d00b      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282a:	2b11      	cmp	r3, #17
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b12      	cmp	r3, #18
 8002834:	d130      	bne.n	8002898 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0201 	and.w	r2, r3, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80ae 	beq.w	8002a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b59      	ldr	r3, [pc, #356]	; (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x300>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x304>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x308>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_GPIO_Init+0x310>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x20a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x206>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x202>
 800294e:	2306      	movs	r3, #6
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002952:	2307      	movs	r3, #7
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_GPIO_Init+0x300>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_GPIO_Init+0x320>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ae:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae96 	bls.w	800276c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3724      	adds	r7, #36	; 0x24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	401a      	ands	r2, r3
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d104      	bne.n	8002afa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ca      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b6      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494c      	ldr	r1, [pc, #304]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e065      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4933      	ldr	r1, [pc, #204]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fa32 	bl	8001064 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fa2e 	bl	8001064 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04d      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e030      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4915      	ldr	r1, [pc, #84]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f81d 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe f994 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800f88c 	.word	0x0800f88c
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x32>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80b4 	bne.w	8002e64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b3      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b0      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04a      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	ea03 0501 	and.w	r5, r3, r1
 8002d34:	ea04 0602 	and.w	r6, r4, r2
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	0154      	lsls	r4, r2, #5
 8002d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4622      	mov	r2, r4
 8002d50:	1b49      	subs	r1, r1, r5
 8002d52:	eb62 0206 	sbc.w	r2, r2, r6
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0194      	lsls	r4, r2, #6
 8002d60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d64:	018b      	lsls	r3, r1, #6
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	eb64 0402 	sbc.w	r4, r4, r2
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	00e2      	lsls	r2, r4, #3
 8002d76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4614      	mov	r4, r2
 8002d80:	195b      	adds	r3, r3, r5
 8002d82:	eb44 0406 	adc.w	r4, r4, r6
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	02a2      	lsls	r2, r4, #10
 8002d90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d94:	0299      	lsls	r1, r3, #10
 8002d96:	460b      	mov	r3, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd ff76 	bl	8000c98 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e049      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea03 0501 	and.w	r5, r3, r1
 8002dca:	ea04 0602 	and.w	r6, r4, r2
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	0154      	lsls	r4, r2, #5
 8002ddc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de0:	014b      	lsls	r3, r1, #5
 8002de2:	4619      	mov	r1, r3
 8002de4:	4622      	mov	r2, r4
 8002de6:	1b49      	subs	r1, r1, r5
 8002de8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	0194      	lsls	r4, r2, #6
 8002df6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	eb64 0402 	sbc.w	r4, r4, r2
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e10:	00d9      	lsls	r1, r3, #3
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	195b      	adds	r3, r3, r5
 8002e18:	eb44 0406 	adc.w	r4, r4, r6
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	02a2      	lsls	r2, r4, #10
 8002e26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e2a:	0299      	lsls	r1, r3, #10
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd ff2b 	bl	8000c98 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e66:	60bb      	str	r3, [r7, #8]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400

08002e7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d075      	beq.n	8002f80 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e94:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea0:	4b9f      	ldr	r3, [pc, #636]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d112      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x102>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d157      	bne.n	8002f7e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e20b      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x6e>
 8002edc:	4b90      	ldr	r3, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8f      	ldr	r2, [pc, #572]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e01d      	b.n	8002f26 <HAL_RCC_OscConfig+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x92>
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a89      	ldr	r2, [pc, #548]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a86      	ldr	r2, [pc, #536]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0xaa>
 8002f0e:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a83      	ldr	r2, [pc, #524]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f899 	bl	8001064 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f36:	f7fe f895 	bl	8001064 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1d0      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0xba>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe f885 	bl	8001064 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f881 	bl	8001064 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1bc      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f70:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0xe2>
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d063      	beq.n	8003054 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d11c      	bne.n	8002fde <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x14c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e190      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4952      	ldr	r1, [pc, #328]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fdc:	e03a      	b.n	8003054 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_OscConfig+0x2a8>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f83a 	bl	8001064 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe f836 	bl	8001064 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e171      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	493f      	ldr	r1, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
 8003026:	e015      	b.n	8003054 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x2a8>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe f819 	bl	8001064 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe f815 	bl	8001064 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e150      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d030      	beq.n	80030c2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d016      	beq.n	8003096 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_OscConfig+0x2ac>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fff9 	bl	8001064 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fd fff5 	bl	8001064 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e130      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1fa>
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fd ffe2 	bl	8001064 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fd ffde 	bl	8001064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e119      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 809f 	beq.w	800320e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x2a4>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d120      	bne.n	800314e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a06      	ldr	r2, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x2b0>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7fd ffa4 	bl	8001064 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e010      	b.n	8003142 <HAL_RCC_OscConfig+0x2c6>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
 8003128:	42470e80 	.word	0x42470e80
 800312c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fd ff98 	bl	8001064 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0d3      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x2e8>
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a67      	ldr	r2, [pc, #412]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e01c      	b.n	800319e <HAL_RCC_OscConfig+0x322>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x30a>
 800316c:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e00b      	b.n	800319e <HAL_RCC_OscConfig+0x322>
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d015      	beq.n	80031d2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fd ff5d 	bl	8001064 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fd ff59 	bl	8001064 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e092      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ee      	beq.n	80031ae <HAL_RCC_OscConfig+0x332>
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fd ff47 	bl	8001064 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fd ff43 	bl	8001064 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e07c      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d068      	beq.n	80032e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d145      	bne.n	80032b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd ff18 	bl	8001064 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd ff14 	bl	8001064 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04f      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	491d      	ldr	r1, [pc, #116]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fd fee9 	bl	8001064 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fee5 	bl	8001064 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e020      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x41a>
 80032b4:	e018      	b.n	80032e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x480>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fed2 	bl	8001064 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fece 	bl	8001064 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e009      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_OscConfig+0x47c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x448>
 80032e2:	e001      	b.n	80032e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40007000 	.word	0x40007000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470060 	.word	0x42470060

08003300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e056      	b.n	80033c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f008 fef5 	bl	800c11c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0104 	and.w	r1, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033d6:	2301      	movs	r3, #1
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x26>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e18a      	b.n	8003704 <HAL_SPI_TransmitReceive+0x33c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f6:	f7fd fe35 	bl	8001064 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003414:	2b01      	cmp	r3, #1
 8003416:	d00f      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x70>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341e:	d107      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x68>
 8003428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800342c:	2b04      	cmp	r3, #4
 800342e:	d003      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003430:	2302      	movs	r3, #2
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003436:	e15b      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_SPI_TransmitReceive+0x82>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_TransmitReceive+0x82>
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003450:	e14e      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2205      	movs	r2, #5
 8003462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	887a      	ldrh	r2, [r7, #2]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d007      	beq.n	80034ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c2:	d178      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x10a>
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d166      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f6:	e053      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d11b      	bne.n	800353e <HAL_SPI_TransmitReceive+0x176>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <HAL_SPI_TransmitReceive+0x176>
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d113      	bne.n	800353e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d119      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x1b8>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	b292      	uxth	r2, r2
 8003562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800357c:	2301      	movs	r3, #1
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003580:	f7fd fd70 	bl	8001064 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358c:	429a      	cmp	r2, r3
 800358e:	d807      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d003      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800359e:	e0a7      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1a6      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x130>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1a1      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x130>
 80035b4:	e07c      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x1fc>
 80035be:	8b7b      	ldrh	r3, [r7, #26]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d16b      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ea:	e057      	b.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d11c      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d114      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x2ae>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003676:	f7fd fcf5 	bl	8001064 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_TransmitReceive+0x2c6>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d102      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x2cc>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800369a:	e029      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1a2      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x224>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d19d      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f893 	bl	80037e0 <SPI_EndRxTxTransaction>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036cc:	e010      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e000      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80036ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003704:	4618      	mov	r0, r3
 8003706:	3730      	adds	r7, #48	; 0x30
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371c:	e04c      	b.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d048      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003726:	f7fd fc9d 	bl	8001064 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d902      	bls.n	800373c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d13d      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800374a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003754:	d111      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375e:	d004      	beq.n	800376a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d107      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d10f      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00f      	b.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1a3      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <SPI_EndRxTxTransaction+0x7c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <SPI_EndRxTxTransaction+0x80>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0d5b      	lsrs	r3, r3, #21
 80037f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380a:	d112      	bne.n	8003832 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff78 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3b01      	subs	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d0f2      	beq.n	8003832 <SPI_EndRxTxTransaction+0x52>
 800384c:	e000      	b.n	8003850 <SPI_EndRxTxTransaction+0x70>
        break;
 800384e:	bf00      	nop
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000008 	.word	0x20000008
 8003860:	165e9f81 	.word	0x165e9f81

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e01d      	b.n	80038b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f008 ff2e 	bl	800c6ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 faee 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e01d      	b.n	8003950 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f008 fea9 	bl	800c680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f000 fa9f 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fcda 	bl	8004324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_TIM_PWM_Start+0x74>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_PWM_Start+0x2c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIM_PWM_Start+0x78>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_TIM_PWM_Start+0x30>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_TIM_PWM_Start+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d007      	beq.n	80039c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40010400 	.word	0x40010400

080039d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fc9c 	bl	8004324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_TIM_PWM_Stop+0xa8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_PWM_Stop+0x2c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_TIM_PWM_Stop+0xac>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_TIM_PWM_Stop+0x30>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_PWM_Stop+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	f240 4344 	movw	r3, #1092	; 0x444
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0x66>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_TIM_PWM_Stop+0x96>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	f240 4344 	movw	r3, #1092	; 0x444
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_PWM_Stop+0x96>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9be 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9b0 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9c1 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f994 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f986 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f997 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f96a 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f95c 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f96d 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0210 	mvn.w	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f940 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f932 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f943 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f90c 	bl	8003e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fbec 	bl	800440c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f908 	bl	8003e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fbb6 	bl	80043f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0b4      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f95c 	bl	8003fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e062      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f9ac 	bl	80040a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fa01 	bl	8004190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e021      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa55 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e000      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d027      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d023      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a24      	ldr	r2, [pc, #144]	; (8003fbc <TIM_Base_SetConfig+0x138>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40010400 	.word	0x40010400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40001800 	.word	0x40001800
 8003fbc:	40001c00 	.word	0x40001c00
 8003fc0:	40002000 	.word	0x40002000

08003fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a20      	ldr	r2, [pc, #128]	; (800409c <TIM_OC1_SetConfig+0xd8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_OC1_SetConfig+0x64>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <TIM_OC1_SetConfig+0xdc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10c      	bne.n	8004042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0308 	bic.w	r3, r3, #8
 800402e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC1_SetConfig+0xd8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC1_SetConfig+0x8e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <TIM_OC1_SetConfig+0xdc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0210 	bic.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0320 	bic.w	r3, r3, #32
 80040ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a22      	ldr	r2, [pc, #136]	; (8004188 <TIM_OC2_SetConfig+0xe4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC2_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a21      	ldr	r2, [pc, #132]	; (800418c <TIM_OC2_SetConfig+0xe8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d10d      	bne.n	8004128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <TIM_OC2_SetConfig+0xe4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC2_SetConfig+0x94>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	; (800418c <TIM_OC2_SetConfig+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d113      	bne.n	8004160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <TIM_OC3_SetConfig+0xe0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC3_SetConfig+0x66>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a20      	ldr	r2, [pc, #128]	; (8004274 <TIM_OC3_SetConfig+0xe4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10d      	bne.n	8004212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC3_SetConfig+0xe0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC3_SetConfig+0x92>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_OC3_SetConfig+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d113      	bne.n	800424a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40010000 	.word	0x40010000
 8004274:	40010400 	.word	0x40010400

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <TIM_OC4_SetConfig+0xa4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC4_SetConfig+0x68>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <TIM_OC4_SetConfig+0xa8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2201      	movs	r2, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004382:	2302      	movs	r3, #2
 8004384:	e032      	b.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <_DoInit+0x8c>)
 8004428:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <_DoInit+0x90>)
 800443a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <_DoInit+0x94>)
 8004440:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004448:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <_DoInit+0x90>)
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <_DoInit+0x98>)
 8004466:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2210      	movs	r2, #16
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3307      	adds	r3, #7
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <_DoInit+0x9c>)
 8004486:	6810      	ldr	r0, [r2, #0]
 8004488:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <_DoInit+0xa0>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	6018      	str	r0, [r3, #0]
 8004492:	8891      	ldrh	r1, [r2, #4]
 8004494:	7992      	ldrb	r2, [r2, #6]
 8004496:	8099      	strh	r1, [r3, #4]
 8004498:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	719a      	strb	r2, [r3, #6]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200006fc 	.word	0x200006fc
 80044b0:	0800f7c0 	.word	0x0800f7c0
 80044b4:	2000023c 	.word	0x2000023c
 80044b8:	2000063c 	.word	0x2000063c
 80044bc:	0800f7cc 	.word	0x0800f7cc
 80044c0:	0800f7d0 	.word	0x0800f7d0

080044c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d905      	bls.n	80044f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e007      	b.n	8004504 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	6939      	ldr	r1, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1acb      	subs	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3b01      	subs	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4293      	cmp	r3, r2
 8004510:	bf28      	it	cs
 8004512:	4613      	movcs	r3, r2
 8004514:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4293      	cmp	r3, r2
 800451c:	bf28      	it	cs
 800451e:	4613      	movcs	r3, r2
 8004520:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f008 fd58 	bl	800cfe4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	d101      	bne.n	8004562 <_WriteBlocking+0x9e>
      WrOff = 0u;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1b5      	bne.n	80044da <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800456e:	69bb      	ldr	r3, [r7, #24]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d90e      	bls.n	80045ba <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f008 fd1b 	bl	800cfe4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80045b8:	e01a      	b.n	80045f0 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f008 fd0a 	bl	800cfe4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6858      	ldr	r0, [r3, #4]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4413      	add	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4619      	mov	r1, r3
 80045e6:	f008 fcfd 	bl	800cfe4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	60da      	str	r2, [r3, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d808      	bhi.n	8004626 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	3b01      	subs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <SEGGER_RTT_WriteNoLock+0x98>)
 800465e:	4413      	add	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d017      	beq.n	800469a <SEGGER_RTT_WriteNoLock+0x5a>
 800466a:	2b01      	cmp	r3, #1
 800466c:	d302      	bcc.n	8004674 <SEGGER_RTT_WriteNoLock+0x34>
 800466e:	2b02      	cmp	r3, #2
 8004670:	d023      	beq.n	80046ba <SEGGER_RTT_WriteNoLock+0x7a>
 8004672:	e029      	b.n	80046c8 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff ffbf 	bl	80045f8 <_GetAvailWriteSpace>
 800467a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004688:	e021      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff ff70 	bl	8004578 <_WriteNoCheck>
    break;
 8004698:	e019      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ffac 	bl	80045f8 <_GetAvailWriteSpace>
 80046a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf28      	it	cs
 80046aa:	4613      	movcs	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff ff60 	bl	8004578 <_WriteNoCheck>
    break;
 80046b8:	e009      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff ff00 	bl	80044c4 <_WriteBlocking>
 80046c4:	61f8      	str	r0, [r7, #28]
    break;
 80046c6:	e002      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
    break;
 80046cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046ce:	69fb      	ldr	r3, [r7, #28]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200006fc 	.word	0x200006fc

080046dc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <SEGGER_RTT_Write+0x44>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <SEGGER_RTT_Write+0x18>
 80046f0:	f7ff fe96 	bl	8004420 <_DoInit>
  SEGGER_RTT_LOCK();
 80046f4:	f3ef 8311 	mrs	r3, BASEPRI
 80046f8:	f04f 0120 	mov.w	r1, #32
 80046fc:	f381 8811 	msr	BASEPRI, r1
 8004700:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff9a 	bl	8004640 <SEGGER_RTT_WriteNoLock>
 800470c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8004714:	693b      	ldr	r3, [r7, #16]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200006fc 	.word	0x200006fc

08004724 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004732:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800473a:	f7ff fe71 	bl	8004420 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800473e:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4293      	cmp	r3, r2
 8004748:	d24c      	bcs.n	80047e4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800474a:	f3ef 8311 	mrs	r3, BASEPRI
 800474e:	f04f 0120 	mov.w	r1, #32
 8004752:	f381 8811 	msr	BASEPRI, r1
 8004756:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d032      	beq.n	80047c4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800475e:	4925      	ldr	r1, [pc, #148]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004772:	4920      	ldr	r1, [pc, #128]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3304      	adds	r3, #4
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004788:	491a      	ldr	r1, [pc, #104]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	3320      	adds	r3, #32
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800479c:	4915      	ldr	r1, [pc, #84]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	3328      	adds	r3, #40	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80047b0:	4910      	ldr	r1, [pc, #64]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
 80047be:	3324      	adds	r3, #36	; 0x24
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	332c      	adds	r3, #44	; 0x2c
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e002      	b.n	80047ea <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200006fc 	.word	0x200006fc

080047f8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  _DoInit();
 80047fc:	f7ff fe10 	bl	8004420 <_DoInit>
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}

08004804 <queue_pop>:
	uint16_t queue[QUEUE_SIZE];
	uint16_t head; //先頭位置
	uint16_t tail; //末尾位置
} queue_t;

void queue_pop(queue_t *q, uint8_t *x, uint8_t *y) {
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	uint16_t box;
	box = q->queue[q->head];
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800481e:	82fb      	strh	r3, [r7, #22]
	q->head++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004826:	3301      	adds	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	if (q->head == QUEUE_SIZE) {
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004836:	2bff      	cmp	r3, #255	; 0xff
 8004838:	d103      	bne.n	8004842 <queue_pop+0x3e>
		q->head = 0;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	}
	*y = (uint8_t) box / 16;
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	b2da      	uxtb	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	701a      	strb	r2, [r3, #0]
	*x = (uint8_t) box % 16;
 800484e:	8afb      	ldrh	r3, [r7, #22]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	701a      	strb	r2, [r3, #0]
//	//myprintf("pop,x:%d,y:%d\n",*x,*y);
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <queue_push>:

void queue_push(queue_t *q, uint8_t x, uint8_t y) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
 8004874:	4613      	mov	r3, r2
 8004876:	70bb      	strb	r3, [r7, #2]
	uint16_t box;
	box = (uint16_t) (y * 16 + x);
 8004878:	78bb      	ldrb	r3, [r7, #2]
 800487a:	b29b      	uxth	r3, r3
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	b29a      	uxth	r2, r3
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	b29b      	uxth	r3, r3
 8004884:	4413      	add	r3, r2
 8004886:	81fb      	strh	r3, [r7, #14]
	q->queue[q->tail] = box;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800488e:	4619      	mov	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	89fa      	ldrh	r2, [r7, #14]
 8004894:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	q->tail++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800489e:	3301      	adds	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	if (q->tail == QUEUE_SIZE) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80048ae:	2bff      	cmp	r3, #255	; 0xff
 80048b0:	d103      	bne.n	80048ba <queue_push+0x52>
		q->tail = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
//	//myprintf("pop,x:%d,y:%d\n",x,y);
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <adachi_map>:

void adachi_map(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata) {
 80048c8:	b082      	sub	sp, #8
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	4622      	mov	r2, r4
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	1dbb      	adds	r3, r7, #6
 80048e4:	4602      	mov	r2, r0
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	1d7b      	adds	r3, r7, #5
 80048ea:	460a      	mov	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
	uint16_t step;
	queue_t q;
//	uint8_t test = 0;

//	moter_flag = 1;
	q.head = 0;
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8004902:	2300      	movs	r3, #0
 8004904:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8004908:	e01f      	b.n	800494a <adachi_map+0x82>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 800490a:	2300      	movs	r3, #0
 800490c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 8004910:	e011      	b.n	8004936 <adachi_map+0x6e>
			step_map[x_adachi][y_adachi] = 0xffff;
 8004912:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004916:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800491a:	4611      	mov	r1, r2
 800491c:	4ad0      	ldr	r2, [pc, #832]	; (8004c60 <adachi_map+0x398>)
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	440b      	add	r3, r1
 8004922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 800492a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800492e:	3301      	adds	r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 8004936:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d9e9      	bls.n	8004912 <adachi_map+0x4a>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 800493e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800494a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d9db      	bls.n	800490a <adachi_map+0x42>
		}
	}

	if (goal_scale == 1) {
 8004952:	1d7b      	adds	r3, r7, #5
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d11e      	bne.n	8004998 <adachi_map+0xd0>
		step_map[goal_x][goal_y] = 0;
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	49bf      	ldr	r1, [pc, #764]	; (8004c60 <adachi_map+0x398>)
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	4413      	add	r3, r2
 8004968:	2200      	movs	r2, #0
 800496a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 800496e:	1dfb      	adds	r3, r7, #7
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004984:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004988:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff69 	bl	8004868 <queue_push>
 8004996:	e1ac      	b.n	8004cf2 <adachi_map+0x42a>
	} else if (goal_scale == 4) {
 8004998:	1d7b      	adds	r3, r7, #5
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	f040 8085 	bne.w	8004aac <adachi_map+0x1e4>
		step_map[goal_x][goal_y] = 0;
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	1dbb      	adds	r3, r7, #6
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	49ad      	ldr	r1, [pc, #692]	; (8004c60 <adachi_map+0x398>)
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 80049be:	1dbb      	adds	r3, r7, #6
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 80049cc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80049d0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff45 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	499d      	ldr	r1, [pc, #628]	; (8004c60 <adachi_map+0x398>)
 80049ea:	0112      	lsls	r2, r2, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 80049f4:	1dfb      	adds	r3, r7, #7
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004a00:	1dbb      	adds	r3, r7, #6
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a0e:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a12:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff ff24 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 8004a20:	1dfb      	adds	r3, r7, #7
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	498d      	ldr	r1, [pc, #564]	; (8004c60 <adachi_map+0x398>)
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	2200      	movs	r2, #0
 8004a32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8004a3e:	1dbb      	adds	r3, r7, #6
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a50:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a54:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff03 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	497c      	ldr	r1, [pc, #496]	; (8004c60 <adachi_map+0x398>)
 8004a70:	0112      	lsls	r2, r2, #4
 8004a72:	4413      	add	r3, r2
 8004a74:	2200      	movs	r2, #0
 8004a76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8004a86:	1dbb      	adds	r3, r7, #6
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004a98:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004a9c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fedf 	bl	8004868 <queue_push>
 8004aaa:	e122      	b.n	8004cf2 <adachi_map+0x42a>
	} else if (goal_scale == 100) {
 8004aac:	1d7b      	adds	r3, r7, #5
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b64      	cmp	r3, #100	; 0x64
 8004ab2:	d144      	bne.n	8004b3e <adachi_map+0x276>
		step_map[goal_x][goal_y] = 0;
 8004ab4:	1dfb      	adds	r3, r7, #7
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	1dbb      	adds	r3, r7, #6
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4968      	ldr	r1, [pc, #416]	; (8004c60 <adachi_map+0x398>)
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	4413      	add	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004ad0:	1dbb      	adds	r3, r7, #6
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004ade:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004ae2:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff febc 	bl	8004868 <queue_push>
		if (goal_y < 15) {
 8004af0:	1dbb      	adds	r3, r7, #6
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b0e      	cmp	r3, #14
 8004af6:	f200 80fc 	bhi.w	8004cf2 <adachi_map+0x42a>
			step_map[goal_x][goal_y + 1] = 0;
 8004afa:	1dfb      	adds	r3, r7, #7
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	1dbb      	adds	r3, r7, #6
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4956      	ldr	r1, [pc, #344]	; (8004c60 <adachi_map+0x398>)
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y + 1;
 8004b18:	1dbb      	adds	r3, r7, #6
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004b2a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004b2e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fe96 	bl	8004868 <queue_push>
 8004b3c:	e0d9      	b.n	8004cf2 <adachi_map+0x42a>
		}
	} else if (goal_scale == 101) {
 8004b3e:	1d7b      	adds	r3, r7, #5
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b65      	cmp	r3, #101	; 0x65
 8004b44:	d144      	bne.n	8004bd0 <adachi_map+0x308>
		step_map[goal_x][goal_y] = 0;
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	4944      	ldr	r1, [pc, #272]	; (8004c60 <adachi_map+0x398>)
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	4413      	add	r3, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004b62:	1dbb      	adds	r3, r7, #6
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004b70:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004b74:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fe73 	bl	8004868 <queue_push>
		if (goal_x > 0) {
 8004b82:	1dfb      	adds	r3, r7, #7
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80b3 	beq.w	8004cf2 <adachi_map+0x42a>
			step_map[goal_x - 1][goal_y] = 0;
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	4932      	ldr	r1, [pc, #200]	; (8004c60 <adachi_map+0x398>)
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	4413      	add	r3, r2
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x - 1;
 8004ba2:	1dfb      	adds	r3, r7, #7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y;
 8004bae:	1dbb      	adds	r3, r7, #6
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004bbc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004bc0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004bc4:	f107 0308 	add.w	r3, r7, #8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fe4d 	bl	8004868 <queue_push>
 8004bce:	e090      	b.n	8004cf2 <adachi_map+0x42a>
		}
	} else if (goal_scale == 102) {
 8004bd0:	1d7b      	adds	r3, r7, #5
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b66      	cmp	r3, #102	; 0x66
 8004bd6:	d145      	bne.n	8004c64 <adachi_map+0x39c>
		step_map[goal_x][goal_y] = 0;
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	1dbb      	adds	r3, r7, #6
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	491f      	ldr	r1, [pc, #124]	; (8004c60 <adachi_map+0x398>)
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004bf4:	1dbb      	adds	r3, r7, #6
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004c02:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c06:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe2a 	bl	8004868 <queue_push>
		if (goal_y > 0) {
 8004c14:	1dbb      	adds	r3, r7, #6
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06a      	beq.n	8004cf2 <adachi_map+0x42a>
			step_map[goal_x][goal_y - 1] = 0;
 8004c1c:	1dfb      	adds	r3, r7, #7
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	1dbb      	adds	r3, r7, #6
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <adachi_map+0x398>)
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 8004c32:	1dfb      	adds	r3, r7, #7
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y - 1;
 8004c3a:	1dbb      	adds	r3, r7, #6
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004c4c:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c50:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fe05 	bl	8004868 <queue_push>
 8004c5e:	e048      	b.n	8004cf2 <adachi_map+0x42a>
 8004c60:	20000b8c 	.word	0x20000b8c
		}
	} else if (goal_scale == 103) {
 8004c64:	1d7b      	adds	r3, r7, #5
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b67      	cmp	r3, #103	; 0x67
 8004c6a:	d142      	bne.n	8004cf2 <adachi_map+0x42a>
		step_map[goal_x][goal_y] = 0;
 8004c6c:	1dfb      	adds	r3, r7, #7
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	1dbb      	adds	r3, r7, #6
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	49a3      	ldr	r1, [pc, #652]	; (8004f04 <adachi_map+0x63c>)
 8004c76:	0112      	lsls	r2, r2, #4
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8004c88:	1dbb      	adds	r3, r7, #6
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8004c96:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004c9a:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fde0 	bl	8004868 <queue_push>
		if (goal_x < 15) {
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b0e      	cmp	r3, #14
 8004cae:	d820      	bhi.n	8004cf2 <adachi_map+0x42a>
			step_map[goal_x + 1][goal_y] = 0;
 8004cb0:	1dfb      	adds	r3, r7, #7
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	4992      	ldr	r1, [pc, #584]	; (8004f04 <adachi_map+0x63c>)
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	4413      	add	r3, r2
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x + 1;
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			y_adachi = goal_y;
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			step = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			queue_push(&q, x_adachi, y_adachi);
 8004ce0:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004ce4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fdbb 	bl	8004868 <queue_push>
		}
	}

	do {
		flag = 0;
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <adachi_map+0x640>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
		queue_pop(&q, &x_adachi, &y_adachi);
 8004cf8:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8004cfc:	f207 210d 	addw	r1, r7, #525	; 0x20d
 8004d00:	f107 0308 	add.w	r3, r7, #8
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fd7d 	bl	8004804 <queue_pop>

		step = step_map[x_adachi][y_adachi];
 8004d0a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d0e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004d12:	4611      	mov	r1, r2
 8004d14:	4a7b      	ldr	r2, [pc, #492]	; (8004f04 <adachi_map+0x63c>)
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	440b      	add	r3, r1
 8004d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

		if ((getWall(x_adachi, y_adachi, North, &walldata) == 0)
 8004d22:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d26:	4618      	mov	r0, r3
 8004d28:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004d32:	2200      	movs	r2, #0
 8004d34:	f008 f88c 	bl	800ce50 <getWall>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d179      	bne.n	8004e32 <adachi_map+0x56a>
				&& (step_map[x_adachi][y_adachi + 1] > step + 1)
 8004d3e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d42:	461a      	mov	r2, r3
 8004d44:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d48:	3301      	adds	r3, #1
 8004d4a:	496e      	ldr	r1, [pc, #440]	; (8004f04 <adachi_map+0x63c>)
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	dd68      	ble.n	8004e32 <adachi_map+0x56a>
				&& ((y_adachi + 1) < 16)) {
 8004d60:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d64:	3301      	adds	r3, #1
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	dc63      	bgt.n	8004e32 <adachi_map+0x56a>
			if (((step_map[x_adachi][y_adachi - 1] == step - 1)
 8004d6a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d74:	3b01      	subs	r3, #1
 8004d76:	4963      	ldr	r1, [pc, #396]	; (8004f04 <adachi_map+0x63c>)
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d80:	461a      	mov	r2, r3
 8004d82:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004d86:	3b01      	subs	r3, #1
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d010      	beq.n	8004dae <adachi_map+0x4e6>
					|| (step_map[x_adachi][y_adachi - 1] == step - 2))
 8004d8c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004d90:	461a      	mov	r2, r3
 8004d92:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	495a      	ldr	r1, [pc, #360]	; (8004f04 <adachi_map+0x63c>)
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004da8:	3b02      	subs	r3, #2
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d123      	bne.n	8004df6 <adachi_map+0x52e>
					&& (y_adachi - 1) >= 0
 8004dae:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004db2:	3b01      	subs	r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db1e      	blt.n	8004df6 <adachi_map+0x52e>
					&& getWall(x_adachi, y_adachi, South, &walldata) == 0) {
 8004db8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f008 f841 	bl	800ce50 <getWall>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d110      	bne.n	8004df6 <adachi_map+0x52e>
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8004dd4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dd8:	461c      	mov	r4, r3
 8004dda:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004dde:	3301      	adds	r3, #1
 8004de0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004de4:	3201      	adds	r2, #1
 8004de6:	b290      	uxth	r0, r2
 8004de8:	4946      	ldr	r1, [pc, #280]	; (8004f04 <adachi_map+0x63c>)
 8004dea:	0122      	lsls	r2, r4, #4
 8004dec:	4413      	add	r3, r2
 8004dee:	4602      	mov	r2, r0
 8004df0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8004df4:	e00f      	b.n	8004e16 <adachi_map+0x54e>
			} else {
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8004df6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e00:	3301      	adds	r3, #1
 8004e02:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004e06:	3201      	adds	r2, #1
 8004e08:	b290      	uxth	r0, r2
 8004e0a:	493e      	ldr	r1, [pc, #248]	; (8004f04 <adachi_map+0x63c>)
 8004e0c:	0122      	lsls	r2, r4, #4
 8004e0e:	4413      	add	r3, r2
 8004e10:	4602      	mov	r2, r0
 8004e12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi + 1);
 8004e16:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8004e1a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fd1e 	bl	8004868 <queue_push>
			flag = 10;
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <adachi_map+0x640>)
 8004e2e:	220a      	movs	r2, #10
 8004e30:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata) == 0)
 8004e32:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e36:	4618      	mov	r0, r3
 8004e38:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004e42:	2201      	movs	r2, #1
 8004e44:	f008 f804 	bl	800ce50 <getWall>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d17b      	bne.n	8004f46 <adachi_map+0x67e>
				&& (step_map[x_adachi - 1][y_adachi] > step + 1)
 8004e4e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <adachi_map+0x63c>)
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	440b      	add	r3, r1
 8004e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dd6a      	ble.n	8004f46 <adachi_map+0x67e>
				&& ((x_adachi - 1) >= 0)) {
 8004e70:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e74:	3b01      	subs	r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db65      	blt.n	8004f46 <adachi_map+0x67e>
			if (((step_map[x_adachi + 1][y_adachi] == step - 1)
 8004e7a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004e84:	4611      	mov	r1, r2
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <adachi_map+0x63c>)
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004e96:	3b01      	subs	r3, #1
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d010      	beq.n	8004ebe <adachi_map+0x5f6>
					|| (step_map[x_adachi + 1][y_adachi] == step - 2))
 8004e9c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <adachi_map+0x63c>)
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	440b      	add	r3, r1
 8004eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004eb8:	3b02      	subs	r3, #2
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d126      	bne.n	8004f0c <adachi_map+0x644>
					&& (x_adachi + 1) < 16
 8004ebe:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	dc21      	bgt.n	8004f0c <adachi_map+0x644>
					&& getWall(x_adachi, y_adachi, East, &walldata) == 0) {
 8004ec8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f007 ffb9 	bl	800ce50 <getWall>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d113      	bne.n	8004f0c <adachi_map+0x644>
				step_map[x_adachi - 1][y_adachi] = step + 1;
 8004ee4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	b291      	uxth	r1, r2
 8004ef8:	4a02      	ldr	r2, [pc, #8]	; (8004f04 <adachi_map+0x63c>)
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	4403      	add	r3, r0
 8004efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004f02:	e012      	b.n	8004f2a <adachi_map+0x662>
 8004f04:	20000b8c 	.word	0x20000b8c
 8004f08:	20019548 	.word	0x20019548
			} else {
				step_map[x_adachi - 1][y_adachi] = step + 1;
 8004f0c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004f16:	4610      	mov	r0, r2
 8004f18:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004f1c:	3201      	adds	r2, #1
 8004f1e:	b291      	uxth	r1, r2
 8004f20:	4a99      	ldr	r2, [pc, #612]	; (8005188 <adachi_map+0x8c0>)
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4403      	add	r3, r0
 8004f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			queue_push(&q, x_adachi - 1, y_adachi);
 8004f2a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b2d9      	uxtb	r1, r3
 8004f32:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fc94 	bl	8004868 <queue_push>
			flag = 10;
 8004f40:	4b92      	ldr	r3, [pc, #584]	; (800518c <adachi_map+0x8c4>)
 8004f42:	220a      	movs	r2, #10
 8004f44:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata) == 0)
 8004f46:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f50:	4619      	mov	r1, r3
 8004f52:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004f56:	2202      	movs	r2, #2
 8004f58:	f007 ff7a 	bl	800ce50 <getWall>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d179      	bne.n	8005056 <adachi_map+0x78e>
				&& (step_map[x_adachi][y_adachi - 1] > step + 1)
 8004f62:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f66:	461a      	mov	r2, r3
 8004f68:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4986      	ldr	r1, [pc, #536]	; (8005188 <adachi_map+0x8c0>)
 8004f70:	0112      	lsls	r2, r2, #4
 8004f72:	4413      	add	r3, r2
 8004f74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004f7e:	3301      	adds	r3, #1
 8004f80:	429a      	cmp	r2, r3
 8004f82:	dd68      	ble.n	8005056 <adachi_map+0x78e>
				&& ((y_adachi - 1) >= 0)) {
 8004f84:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db63      	blt.n	8005056 <adachi_map+0x78e>
			if (((step_map[x_adachi][y_adachi + 1] == step - 1)
 8004f8e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004f92:	461a      	mov	r2, r3
 8004f94:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004f98:	3301      	adds	r3, #1
 8004f9a:	497b      	ldr	r1, [pc, #492]	; (8005188 <adachi_map+0x8c0>)
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004faa:	3b01      	subs	r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d010      	beq.n	8004fd2 <adachi_map+0x70a>
					|| (step_map[x_adachi][y_adachi + 1] == step - 2))
 8004fb0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4972      	ldr	r1, [pc, #456]	; (8005188 <adachi_map+0x8c0>)
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d123      	bne.n	800501a <adachi_map+0x752>
					&& (y_adachi + 1) < 16
 8004fd2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	dc1e      	bgt.n	800501a <adachi_map+0x752>
					&& getWall(x_adachi, y_adachi, North, &walldata) == 0) {
 8004fdc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8004fec:	2200      	movs	r2, #0
 8004fee:	f007 ff2f 	bl	800ce50 <getWall>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <adachi_map+0x752>
				step_map[x_adachi][y_adachi - 1] = step + 1;
 8004ff8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005002:	3b01      	subs	r3, #1
 8005004:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005008:	3201      	adds	r2, #1
 800500a:	b290      	uxth	r0, r2
 800500c:	495e      	ldr	r1, [pc, #376]	; (8005188 <adachi_map+0x8c0>)
 800500e:	0122      	lsls	r2, r4, #4
 8005010:	4413      	add	r3, r2
 8005012:	4602      	mov	r2, r0
 8005014:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005018:	e00f      	b.n	800503a <adachi_map+0x772>
			} else {
				step_map[x_adachi][y_adachi - 1] = step + 1;
 800501a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800501e:	461c      	mov	r4, r3
 8005020:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005024:	3b01      	subs	r3, #1
 8005026:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800502a:	3201      	adds	r2, #1
 800502c:	b290      	uxth	r0, r2
 800502e:	4956      	ldr	r1, [pc, #344]	; (8005188 <adachi_map+0x8c0>)
 8005030:	0122      	lsls	r2, r4, #4
 8005032:	4413      	add	r3, r2
 8005034:	4602      	mov	r2, r0
 8005036:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi - 1);
 800503a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800503e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005042:	3b01      	subs	r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fc0c 	bl	8004868 <queue_push>
			flag = 10;
 8005050:	4b4e      	ldr	r3, [pc, #312]	; (800518c <adachi_map+0x8c4>)
 8005052:	220a      	movs	r2, #10
 8005054:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata) == 0)
 8005056:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800505a:	4618      	mov	r0, r3
 800505c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005060:	4619      	mov	r1, r3
 8005062:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005066:	2203      	movs	r2, #3
 8005068:	f007 fef2 	bl	800ce50 <getWall>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d177      	bne.n	8005162 <adachi_map+0x89a>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 8005072:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005076:	3301      	adds	r3, #1
 8005078:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800507c:	4611      	mov	r1, r2
 800507e:	4a42      	ldr	r2, [pc, #264]	; (8005188 <adachi_map+0x8c0>)
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	440b      	add	r3, r1
 8005084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005088:	461a      	mov	r2, r3
 800508a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800508e:	3301      	adds	r3, #1
 8005090:	429a      	cmp	r2, r3
 8005092:	dd66      	ble.n	8005162 <adachi_map+0x89a>
				&& ((x_adachi + 1) < 16)) {
 8005094:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005098:	3301      	adds	r3, #1
 800509a:	2b0f      	cmp	r3, #15
 800509c:	dc61      	bgt.n	8005162 <adachi_map+0x89a>
			if (((step_map[x_adachi - 1][y_adachi] == step - 1)
 800509e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80050a8:	4611      	mov	r1, r2
 80050aa:	4a37      	ldr	r2, [pc, #220]	; (8005188 <adachi_map+0x8c0>)
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	440b      	add	r3, r1
 80050b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80050ba:	3b01      	subs	r3, #1
 80050bc:	429a      	cmp	r2, r3
 80050be:	d010      	beq.n	80050e2 <adachi_map+0x81a>
					|| (step_map[x_adachi - 1][y_adachi] == step - 2))
 80050c0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80050ca:	4611      	mov	r1, r2
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <adachi_map+0x8c0>)
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	440b      	add	r3, r1
 80050d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80050dc:	3b02      	subs	r3, #2
 80050de:	429a      	cmp	r2, r3
 80050e0:	d122      	bne.n	8005128 <adachi_map+0x860>
					&& (x_adachi - 1) >= 0
 80050e2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050e6:	3b01      	subs	r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db1d      	blt.n	8005128 <adachi_map+0x860>
					&& getWall(x_adachi, y_adachi, West, &walldata) == 0) {
 80050ec:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80050f0:	4618      	mov	r0, r3
 80050f2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80050f6:	4619      	mov	r1, r3
 80050f8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80050fc:	2201      	movs	r2, #1
 80050fe:	f007 fea7 	bl	800ce50 <getWall>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <adachi_map+0x860>
				step_map[x_adachi + 1][y_adachi] = step + 1;
 8005108:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800510c:	3301      	adds	r3, #1
 800510e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005112:	4610      	mov	r0, r2
 8005114:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005118:	3201      	adds	r2, #1
 800511a:	b291      	uxth	r1, r2
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <adachi_map+0x8c0>)
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4403      	add	r3, r0
 8005122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005126:	e00e      	b.n	8005146 <adachi_map+0x87e>
			} else {
				step_map[x_adachi + 1][y_adachi] = step + 1;
 8005128:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800512c:	3301      	adds	r3, #1
 800512e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005132:	4610      	mov	r0, r2
 8005134:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005138:	3201      	adds	r2, #1
 800513a:	b291      	uxth	r1, r2
 800513c:	4a12      	ldr	r2, [pc, #72]	; (8005188 <adachi_map+0x8c0>)
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4403      	add	r3, r0
 8005142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			queue_push(&q, x_adachi + 1, y_adachi);
 8005146:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800514a:	3301      	adds	r3, #1
 800514c:	b2d9      	uxtb	r1, r3
 800514e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fb86 	bl	8004868 <queue_push>
			flag = 10;
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <adachi_map+0x8c4>)
 800515e:	220a      	movs	r2, #10
 8005160:	701a      	strb	r2, [r3, #0]
		}
//		//myprintf("fast	%d,%d,%d,%d\n", x_adachi, y_adachi, q.head, q.tail);
	} while (q.tail != q.head);
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8005172:	429a      	cmp	r2, r3
 8005174:	f47f adbd 	bne.w	8004cf2 <adachi_map+0x42a>
}
 8005178:	bf00      	nop
 800517a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005184:	b002      	add	sp, #8
 8005186:	4770      	bx	lr
 8005188:	20000b8c 	.word	0x20000b8c
 800518c:	20019548 	.word	0x20019548

08005190 <adachi_map_straight>:

void adachi_map_straight(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata) {
 8005190:	b082      	sub	sp, #8
 8005192:	b590      	push	{r4, r7, lr}
 8005194:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8005198:	af00      	add	r7, sp, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	4622      	mov	r2, r4
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	1dbb      	adds	r3, r7, #6
 80051ac:	4602      	mov	r2, r0
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	1d7b      	adds	r3, r7, #5
 80051b2:	460a      	mov	r2, r1
 80051b4:	701a      	strb	r2, [r3, #0]
	uint16_t step;
	queue_t q;
//	uint8_t test = 0;

//	moter_flag = 1;
	q.head = 0;
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80051d0:	e01f      	b.n	8005212 <adachi_map_straight+0x82>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 80051d8:	e011      	b.n	80051fe <adachi_map_straight+0x6e>
			step_map[x_adachi][y_adachi] = 999;
 80051da:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80051de:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80051e2:	4611      	mov	r1, r2
 80051e4:	4aa4      	ldr	r2, [pc, #656]	; (8005478 <adachi_map_straight+0x2e8>)
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	440b      	add	r3, r1
 80051ea:	f240 31e7 	movw	r1, #999	; 0x3e7
 80051ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 80051f2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 80051fe:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005202:	2b0f      	cmp	r3, #15
 8005204:	d9e9      	bls.n	80051da <adachi_map_straight+0x4a>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8005206:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800520a:	3301      	adds	r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8005212:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d9db      	bls.n	80051d2 <adachi_map_straight+0x42>
		}
	}

	if (goal_scale == 1) {
 800521a:	1d7b      	adds	r3, r7, #5
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11e      	bne.n	8005260 <adachi_map_straight+0xd0>
		step_map[goal_x][goal_y] = 0;
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4993      	ldr	r1, [pc, #588]	; (8005478 <adachi_map_straight+0x2e8>)
 800522c:	0112      	lsls	r2, r2, #4
 800522e:	4413      	add	r3, r2
 8005230:	2200      	movs	r2, #0
 8005232:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 800524c:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005250:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fb05 	bl	8004868 <queue_push>
 800525e:	e088      	b.n	8005372 <adachi_map_straight+0x1e2>
	} else if (goal_scale == 4) {
 8005260:	1d7b      	adds	r3, r7, #5
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	f040 8084 	bne.w	8005372 <adachi_map_straight+0x1e2>
		step_map[goal_x][goal_y] = 0;
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	1dbb      	adds	r3, r7, #6
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	4981      	ldr	r1, [pc, #516]	; (8005478 <adachi_map_straight+0x2e8>)
 8005274:	0112      	lsls	r2, r2, #4
 8005276:	4413      	add	r3, r2
 8005278:	2200      	movs	r2, #0
 800527a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005294:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005298:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fae1 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 80052a6:	1dfb      	adds	r3, r7, #7
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	1dbb      	adds	r3, r7, #6
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4971      	ldr	r1, [pc, #452]	; (8005478 <adachi_map_straight+0x2e8>)
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 80052bc:	1dfb      	adds	r3, r7, #7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y;
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 80052d6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80052da:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fac0 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	1dbb      	adds	r3, r7, #6
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	4961      	ldr	r1, [pc, #388]	; (8005478 <adachi_map_straight+0x2e8>)
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 80052fe:	1dfb      	adds	r3, r7, #7
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 8005306:	1dbb      	adds	r3, r7, #6
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005318:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800531c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fa9f 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 800532a:	1dfb      	adds	r3, r7, #7
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4950      	ldr	r1, [pc, #320]	; (8005478 <adachi_map_straight+0x2e8>)
 8005338:	0112      	lsls	r2, r2, #4
 800533a:	4413      	add	r3, r2
 800533c:	2200      	movs	r2, #0
 800533e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		y_adachi = goal_y + 1;
 800534e:	1dbb      	adds	r3, r7, #6
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
		step = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		queue_push(&q, x_adachi, y_adachi);
 8005360:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8005364:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa7b 	bl	8004868 <queue_push>
	}
	do {
		flag = 0;
 8005372:	4b42      	ldr	r3, [pc, #264]	; (800547c <adachi_map_straight+0x2ec>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
		queue_pop(&q, &x_adachi, &y_adachi);
 8005378:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800537c:	f207 210d 	addw	r1, r7, #525	; 0x20d
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fa3d 	bl	8004804 <queue_pop>
//		while (step + 3 < step_map[x_adachi][y_adachi]) {
//			queue_push(&q, x_adachi, y_adachi);
//			queue_pop(&q, &x_adachi, &y_adachi);
//		}

		step = step_map[x_adachi][y_adachi];
 800538a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800538e:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005392:	4611      	mov	r1, r2
 8005394:	4a38      	ldr	r2, [pc, #224]	; (8005478 <adachi_map_straight+0x2e8>)
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	440b      	add	r3, r1
 800539a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

//////

		if ((getWall(x_adachi, y_adachi, North, &walldata) == 0)
 80053a2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053a6:	4618      	mov	r0, r3
 80053a8:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053ac:	4619      	mov	r1, r3
 80053ae:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80053b2:	2200      	movs	r2, #0
 80053b4:	f007 fd4c 	bl	800ce50 <getWall>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d17e      	bne.n	80054bc <adachi_map_straight+0x32c>
				&& (step_map[x_adachi][y_adachi + 1] > step + 1)
 80053be:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053c2:	461a      	mov	r2, r3
 80053c4:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053c8:	3301      	adds	r3, #1
 80053ca:	492b      	ldr	r1, [pc, #172]	; (8005478 <adachi_map_straight+0x2e8>)
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	4413      	add	r3, r2
 80053d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80053da:	3301      	adds	r3, #1
 80053dc:	429a      	cmp	r2, r3
 80053de:	dd6d      	ble.n	80054bc <adachi_map_straight+0x32c>
				&& ((y_adachi + 1) < 16)) {
 80053e0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053e4:	3301      	adds	r3, #1
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	dc68      	bgt.n	80054bc <adachi_map_straight+0x32c>
			if (((step_map[x_adachi][y_adachi - 1] == step - 1)
 80053ea:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80053ee:	461a      	mov	r2, r3
 80053f0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80053f4:	3b01      	subs	r3, #1
 80053f6:	4920      	ldr	r1, [pc, #128]	; (8005478 <adachi_map_straight+0x2e8>)
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005400:	461a      	mov	r2, r3
 8005402:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005406:	3b01      	subs	r3, #1
 8005408:	429a      	cmp	r2, r3
 800540a:	d010      	beq.n	800542e <adachi_map_straight+0x29e>
					|| (step_map[x_adachi][y_adachi - 1] == step - 2))
 800540c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005410:	461a      	mov	r2, r3
 8005412:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005416:	3b01      	subs	r3, #1
 8005418:	4917      	ldr	r1, [pc, #92]	; (8005478 <adachi_map_straight+0x2e8>)
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	4413      	add	r3, r2
 800541e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005422:	461a      	mov	r2, r3
 8005424:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005428:	3b02      	subs	r3, #2
 800542a:	429a      	cmp	r2, r3
 800542c:	d128      	bne.n	8005480 <adachi_map_straight+0x2f0>
					&& (y_adachi - 1) >= 0
 800542e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005432:	3b01      	subs	r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	db23      	blt.n	8005480 <adachi_map_straight+0x2f0>
					&& getWall(x_adachi, y_adachi, South, &walldata) == 0) {
 8005438:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800543c:	4618      	mov	r0, r3
 800543e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005442:	4619      	mov	r1, r3
 8005444:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005448:	2202      	movs	r2, #2
 800544a:	f007 fd01 	bl	800ce50 <getWall>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d115      	bne.n	8005480 <adachi_map_straight+0x2f0>
				step_map[x_adachi][y_adachi + 1] = step + 1;
 8005454:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005458:	461c      	mov	r4, r3
 800545a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800545e:	3301      	adds	r3, #1
 8005460:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005464:	3201      	adds	r2, #1
 8005466:	b290      	uxth	r0, r2
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <adachi_map_straight+0x2e8>)
 800546a:	0122      	lsls	r2, r4, #4
 800546c:	4413      	add	r3, r2
 800546e:	4602      	mov	r2, r0
 8005470:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005474:	e014      	b.n	80054a0 <adachi_map_straight+0x310>
 8005476:	bf00      	nop
 8005478:	20000b8c 	.word	0x20000b8c
 800547c:	20019548 	.word	0x20019548
			} else {
				step_map[x_adachi][y_adachi + 1] = step + 2;
 8005480:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005484:	461c      	mov	r4, r3
 8005486:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800548a:	3301      	adds	r3, #1
 800548c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8005490:	3202      	adds	r2, #2
 8005492:	b290      	uxth	r0, r2
 8005494:	49dd      	ldr	r1, [pc, #884]	; (800580c <adachi_map_straight+0x67c>)
 8005496:	0122      	lsls	r2, r4, #4
 8005498:	4413      	add	r3, r2
 800549a:	4602      	mov	r2, r0
 800549c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi + 1);
 80054a0:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80054a4:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80054a8:	3301      	adds	r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f9d9 	bl	8004868 <queue_push>
			flag = 10;
 80054b6:	4bd6      	ldr	r3, [pc, #856]	; (8005810 <adachi_map_straight+0x680>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata) == 0)
 80054bc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054c0:	4618      	mov	r0, r3
 80054c2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80054c6:	4619      	mov	r1, r3
 80054c8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80054cc:	2201      	movs	r2, #1
 80054ce:	f007 fcbf 	bl	800ce50 <getWall>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d177      	bne.n	80055c8 <adachi_map_straight+0x438>
				&& (step_map[x_adachi - 1][y_adachi] > step + 1)
 80054d8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054dc:	3b01      	subs	r3, #1
 80054de:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80054e2:	4611      	mov	r1, r2
 80054e4:	4ac9      	ldr	r2, [pc, #804]	; (800580c <adachi_map_straight+0x67c>)
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	440b      	add	r3, r1
 80054ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80054f4:	3301      	adds	r3, #1
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dd66      	ble.n	80055c8 <adachi_map_straight+0x438>
				&& ((x_adachi - 1) >= 0)) {
 80054fa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80054fe:	3b01      	subs	r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	db61      	blt.n	80055c8 <adachi_map_straight+0x438>
			if (((step_map[x_adachi + 1][y_adachi] == step - 1)
 8005504:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005508:	3301      	adds	r3, #1
 800550a:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800550e:	4611      	mov	r1, r2
 8005510:	4abe      	ldr	r2, [pc, #760]	; (800580c <adachi_map_straight+0x67c>)
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	440b      	add	r3, r1
 8005516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551a:	461a      	mov	r2, r3
 800551c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005520:	3b01      	subs	r3, #1
 8005522:	429a      	cmp	r2, r3
 8005524:	d010      	beq.n	8005548 <adachi_map_straight+0x3b8>
					|| (step_map[x_adachi + 1][y_adachi] == step - 2))
 8005526:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800552a:	3301      	adds	r3, #1
 800552c:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005530:	4611      	mov	r1, r2
 8005532:	4ab6      	ldr	r2, [pc, #728]	; (800580c <adachi_map_straight+0x67c>)
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	440b      	add	r3, r1
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005542:	3b02      	subs	r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d122      	bne.n	800558e <adachi_map_straight+0x3fe>
					&& (x_adachi + 1) < 16
 8005548:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800554c:	3301      	adds	r3, #1
 800554e:	2b0f      	cmp	r3, #15
 8005550:	dc1d      	bgt.n	800558e <adachi_map_straight+0x3fe>
					&& getWall(x_adachi, y_adachi, East, &walldata) == 0) {
 8005552:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005556:	4618      	mov	r0, r3
 8005558:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800555c:	4619      	mov	r1, r3
 800555e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005562:	2203      	movs	r2, #3
 8005564:	f007 fc74 	bl	800ce50 <getWall>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <adachi_map_straight+0x3fe>
				step_map[x_adachi - 1][y_adachi] = step + 1;
 800556e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005572:	3b01      	subs	r3, #1
 8005574:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005578:	4610      	mov	r0, r2
 800557a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800557e:	3201      	adds	r2, #1
 8005580:	b291      	uxth	r1, r2
 8005582:	4aa2      	ldr	r2, [pc, #648]	; (800580c <adachi_map_straight+0x67c>)
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4403      	add	r3, r0
 8005588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800558c:	e00e      	b.n	80055ac <adachi_map_straight+0x41c>
			} else {
				step_map[x_adachi - 1][y_adachi] = step + 2;
 800558e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005592:	3b01      	subs	r3, #1
 8005594:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005598:	4610      	mov	r0, r2
 800559a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800559e:	3202      	adds	r2, #2
 80055a0:	b291      	uxth	r1, r2
 80055a2:	4a9a      	ldr	r2, [pc, #616]	; (800580c <adachi_map_straight+0x67c>)
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	4403      	add	r3, r0
 80055a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			queue_push(&q, x_adachi - 1, y_adachi);
 80055ac:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2d9      	uxtb	r1, r3
 80055b4:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff f953 	bl	8004868 <queue_push>
			flag = 10;
 80055c2:	4b93      	ldr	r3, [pc, #588]	; (8005810 <adachi_map_straight+0x680>)
 80055c4:	220a      	movs	r2, #10
 80055c6:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata) == 0)
 80055c8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055cc:	4618      	mov	r0, r3
 80055ce:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80055d2:	4619      	mov	r1, r3
 80055d4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80055d8:	2202      	movs	r2, #2
 80055da:	f007 fc39 	bl	800ce50 <getWall>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d179      	bne.n	80056d8 <adachi_map_straight+0x548>
				&& (step_map[x_adachi][y_adachi - 1] > step + 1)
 80055e4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80055e8:	461a      	mov	r2, r3
 80055ea:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80055ee:	3b01      	subs	r3, #1
 80055f0:	4986      	ldr	r1, [pc, #536]	; (800580c <adachi_map_straight+0x67c>)
 80055f2:	0112      	lsls	r2, r2, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005600:	3301      	adds	r3, #1
 8005602:	429a      	cmp	r2, r3
 8005604:	dd68      	ble.n	80056d8 <adachi_map_straight+0x548>
				&& ((y_adachi - 1) >= 0)) {
 8005606:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800560a:	3b01      	subs	r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	db63      	blt.n	80056d8 <adachi_map_straight+0x548>
			if (((step_map[x_adachi][y_adachi + 1] == step - 1)
 8005610:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005614:	461a      	mov	r2, r3
 8005616:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800561a:	3301      	adds	r3, #1
 800561c:	497b      	ldr	r1, [pc, #492]	; (800580c <adachi_map_straight+0x67c>)
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	4413      	add	r3, r2
 8005622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005626:	461a      	mov	r2, r3
 8005628:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800562c:	3b01      	subs	r3, #1
 800562e:	429a      	cmp	r2, r3
 8005630:	d010      	beq.n	8005654 <adachi_map_straight+0x4c4>
					|| (step_map[x_adachi][y_adachi + 1] == step - 2))
 8005632:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005636:	461a      	mov	r2, r3
 8005638:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800563c:	3301      	adds	r3, #1
 800563e:	4973      	ldr	r1, [pc, #460]	; (800580c <adachi_map_straight+0x67c>)
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	4413      	add	r3, r2
 8005644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005648:	461a      	mov	r2, r3
 800564a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800564e:	3b02      	subs	r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d123      	bne.n	800569c <adachi_map_straight+0x50c>
					&& (y_adachi + 1) < 16
 8005654:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005658:	3301      	adds	r3, #1
 800565a:	2b0f      	cmp	r3, #15
 800565c:	dc1e      	bgt.n	800569c <adachi_map_straight+0x50c>
					&& getWall(x_adachi, y_adachi, North, &walldata) == 0) {
 800565e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005662:	4618      	mov	r0, r3
 8005664:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005668:	4619      	mov	r1, r3
 800566a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800566e:	2200      	movs	r2, #0
 8005670:	f007 fbee 	bl	800ce50 <getWall>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d110      	bne.n	800569c <adachi_map_straight+0x50c>
				step_map[x_adachi][y_adachi - 1] = step + 1;
 800567a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800567e:	461c      	mov	r4, r3
 8005680:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005684:	3b01      	subs	r3, #1
 8005686:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800568a:	3201      	adds	r2, #1
 800568c:	b290      	uxth	r0, r2
 800568e:	495f      	ldr	r1, [pc, #380]	; (800580c <adachi_map_straight+0x67c>)
 8005690:	0122      	lsls	r2, r4, #4
 8005692:	4413      	add	r3, r2
 8005694:	4602      	mov	r2, r0
 8005696:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800569a:	e00f      	b.n	80056bc <adachi_map_straight+0x52c>
			} else {
				step_map[x_adachi][y_adachi - 1] = step + 2;
 800569c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056a0:	461c      	mov	r4, r3
 80056a2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80056ac:	3202      	adds	r2, #2
 80056ae:	b290      	uxth	r0, r2
 80056b0:	4956      	ldr	r1, [pc, #344]	; (800580c <adachi_map_straight+0x67c>)
 80056b2:	0122      	lsls	r2, r4, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	4602      	mov	r2, r0
 80056b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			queue_push(&q, x_adachi, y_adachi - 1);
 80056bc:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80056c0:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff f8cb 	bl	8004868 <queue_push>
			flag = 10;
 80056d2:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <adachi_map_straight+0x680>)
 80056d4:	220a      	movs	r2, #10
 80056d6:	701a      	strb	r2, [r3, #0]
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata) == 0)
 80056d8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056dc:	4618      	mov	r0, r3
 80056de:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80056e2:	4619      	mov	r1, r3
 80056e4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80056e8:	2203      	movs	r2, #3
 80056ea:	f007 fbb1 	bl	800ce50 <getWall>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d177      	bne.n	80057e4 <adachi_map_straight+0x654>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 80056f4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80056f8:	3301      	adds	r3, #1
 80056fa:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80056fe:	4611      	mov	r1, r2
 8005700:	4a42      	ldr	r2, [pc, #264]	; (800580c <adachi_map_straight+0x67c>)
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	440b      	add	r3, r1
 8005706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570a:	461a      	mov	r2, r3
 800570c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8005710:	3301      	adds	r3, #1
 8005712:	429a      	cmp	r2, r3
 8005714:	dd66      	ble.n	80057e4 <adachi_map_straight+0x654>
				&& ((x_adachi + 1) < 16)) {
 8005716:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800571a:	3301      	adds	r3, #1
 800571c:	2b0f      	cmp	r3, #15
 800571e:	dc61      	bgt.n	80057e4 <adachi_map_straight+0x654>
			if (((step_map[x_adachi - 1][y_adachi] == step - 1)
 8005720:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005724:	3b01      	subs	r3, #1
 8005726:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800572a:	4611      	mov	r1, r2
 800572c:	4a37      	ldr	r2, [pc, #220]	; (800580c <adachi_map_straight+0x67c>)
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	440b      	add	r3, r1
 8005732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005736:	461a      	mov	r2, r3
 8005738:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800573c:	3b01      	subs	r3, #1
 800573e:	429a      	cmp	r2, r3
 8005740:	d010      	beq.n	8005764 <adachi_map_straight+0x5d4>
					|| (step_map[x_adachi - 1][y_adachi] == step - 2))
 8005742:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005746:	3b01      	subs	r3, #1
 8005748:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 800574c:	4611      	mov	r1, r2
 800574e:	4a2f      	ldr	r2, [pc, #188]	; (800580c <adachi_map_straight+0x67c>)
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	440b      	add	r3, r1
 8005754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005758:	461a      	mov	r2, r3
 800575a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800575e:	3b02      	subs	r3, #2
 8005760:	429a      	cmp	r2, r3
 8005762:	d122      	bne.n	80057aa <adachi_map_straight+0x61a>
					&& (x_adachi - 1) >= 0
 8005764:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005768:	3b01      	subs	r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	db1d      	blt.n	80057aa <adachi_map_straight+0x61a>
					&& getWall(x_adachi, y_adachi, West, &walldata) == 0) {
 800576e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8005772:	4618      	mov	r0, r3
 8005774:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8005778:	4619      	mov	r1, r3
 800577a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800577e:	2201      	movs	r2, #1
 8005780:	f007 fb66 	bl	800ce50 <getWall>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <adachi_map_straight+0x61a>
				step_map[x_adachi + 1][y_adachi] = step + 1;
 800578a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800578e:	3301      	adds	r3, #1
 8005790:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8005794:	4610      	mov	r0, r2
 8005796:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800579a:	3201      	adds	r2, #1
 800579c:	b291      	uxth	r1, r2
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <adachi_map_straight+0x67c>)
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	4403      	add	r3, r0
 80057a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80057a8:	e00e      	b.n	80057c8 <adachi_map_straight+0x638>
			} else {
				step_map[x_adachi + 1][y_adachi] = step + 2;
 80057aa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80057ae:	3301      	adds	r3, #1
 80057b0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80057b4:	4610      	mov	r0, r2
 80057b6:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80057ba:	3202      	adds	r2, #2
 80057bc:	b291      	uxth	r1, r2
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <adachi_map_straight+0x67c>)
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	4403      	add	r3, r0
 80057c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			queue_push(&q, x_adachi + 1, y_adachi);
 80057c8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2d9      	uxtb	r1, r3
 80057d0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff f845 	bl	8004868 <queue_push>
			flag = 10;
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <adachi_map_straight+0x680>)
 80057e0:	220a      	movs	r2, #10
 80057e2:	701a      	strb	r2, [r3, #0]
		}
//		//myprintf("fast	%d,%d,%d,%d\n", x_adachi, y_adachi, q.head, q.tail);
	} while (q.tail != q.head);
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 80057ec:	f107 0308 	add.w	r3, r7, #8
 80057f0:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f47f adbc 	bne.w	8005372 <adachi_map_straight+0x1e2>
}
 80057fa:	bf00      	nop
 80057fc:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005806:	b002      	add	sp, #8
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000b8c 	.word	0x20000b8c
 8005810:	20019548 	.word	0x20019548

08005814 <adachi_search_run>:

void adachi_search_run(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		float accel, float vel, uint8_t slalom_flag, uint8_t straight_flag) {
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	b096      	sub	sp, #88	; 0x58
 800581a:	af10      	add	r7, sp, #64	; 0x40
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	ed87 0a02 	vstr	s0, [r7, #8]
 8005826:	edc7 0a01 	vstr	s1, [r7, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	4623      	mov	r3, r4
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	4603      	mov	r3, r0
 8005832:	73bb      	strb	r3, [r7, #14]
 8005834:	460b      	mov	r3, r1
 8005836:	737b      	strb	r3, [r7, #13]
 8005838:	4613      	mov	r3, r2
 800583a:	733b      	strb	r3, [r7, #12]
	uint8_t flag; //flag 0:前,1:左折2:Uターン(けつあて)3:右折4:Uターン
	go_entrance(accel, vel);
 800583c:	edd7 0a01 	vldr	s1, [r7, #4]
 8005840:	ed97 0a02 	vldr	s0, [r7, #8]
 8005844:	f003 fec2 	bl	80095cc <go_entrance>
	coordinate();
 8005848:	f006 fbc2 	bl	800bfd0 <coordinate>
	addWall();
 800584c:	f007 f990 	bl	800cb70 <addWall>
	moter_flag = 1;
 8005850:	4bb4      	ldr	r3, [pc, #720]	; (8005b24 <adachi_search_run+0x310>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
	while (failsafe_flag == 0) {
 8005856:	e15a      	b.n	8005b0e <adachi_search_run+0x2fa>
		if (step_map[x.now][y.now] == 0xffff) {
 8005858:	4bb3      	ldr	r3, [pc, #716]	; (8005b28 <adachi_search_run+0x314>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	4bb3      	ldr	r3, [pc, #716]	; (8005b2c <adachi_search_run+0x318>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	4ab2      	ldr	r2, [pc, #712]	; (8005b30 <adachi_search_run+0x31c>)
 8005866:	0103      	lsls	r3, r0, #4
 8005868:	440b      	add	r3, r1
 800586a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005872:	4293      	cmp	r3, r2
 8005874:	d109      	bne.n	800588a <adachi_search_run+0x76>
			stop90(accel, vel);
 8005876:	edd7 0a01 	vldr	s1, [r7, #4]
 800587a:	ed97 0a02 	vldr	s0, [r7, #8]
 800587e:	f004 faeb 	bl	8009e58 <stop90>
			failsafe_flag = 1;
 8005882:	4bac      	ldr	r3, [pc, #688]	; (8005b34 <adachi_search_run+0x320>)
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
			break;
 8005888:	e146      	b.n	8005b18 <adachi_search_run+0x304>
		}
		if (straight_flag == 1) {
 800588a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800588e:	2b01      	cmp	r3, #1
 8005890:	d120      	bne.n	80058d4 <adachi_search_run+0xc0>
			adachi_map_straight(goal_x, goal_y, goal_scale, walldata.real);
 8005892:	4ba9      	ldr	r3, [pc, #676]	; (8005b38 <adachi_search_run+0x324>)
 8005894:	f897 900d 	ldrb.w	r9, [r7, #13]
 8005898:	f897 800e 	ldrb.w	r8, [r7, #14]
 800589c:	f897 e00f 	ldrb.w	lr, [r7, #15]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	f04f 0a00 	mov.w	sl, #0
 80058a6:	4692      	mov	sl, r2
 80058a8:	1d1c      	adds	r4, r3, #4
 80058aa:	466e      	mov	r6, sp
 80058ac:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80058b0:	4635      	mov	r5, r6
 80058b2:	4623      	mov	r3, r4
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058be:	3410      	adds	r4, #16
 80058c0:	3610      	adds	r6, #16
 80058c2:	4564      	cmp	r4, ip
 80058c4:	d1f4      	bne.n	80058b0 <adachi_search_run+0x9c>
 80058c6:	4653      	mov	r3, sl
 80058c8:	464a      	mov	r2, r9
 80058ca:	4641      	mov	r1, r8
 80058cc:	4670      	mov	r0, lr
 80058ce:	f7ff fc5f 	bl	8005190 <adachi_map_straight>
 80058d2:	e01f      	b.n	8005914 <adachi_search_run+0x100>
		} else {
			adachi_map(goal_x, goal_y, goal_scale, walldata.real);
 80058d4:	4b98      	ldr	r3, [pc, #608]	; (8005b38 <adachi_search_run+0x324>)
 80058d6:	f897 900d 	ldrb.w	r9, [r7, #13]
 80058da:	f897 800e 	ldrb.w	r8, [r7, #14]
 80058de:	f897 e00f 	ldrb.w	lr, [r7, #15]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	f04f 0a00 	mov.w	sl, #0
 80058e8:	4692      	mov	sl, r2
 80058ea:	1d1c      	adds	r4, r3, #4
 80058ec:	466e      	mov	r6, sp
 80058ee:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80058f2:	4635      	mov	r5, r6
 80058f4:	4623      	mov	r3, r4
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005900:	3410      	adds	r4, #16
 8005902:	3610      	adds	r6, #16
 8005904:	4564      	cmp	r4, ip
 8005906:	d1f4      	bne.n	80058f2 <adachi_search_run+0xde>
 8005908:	4653      	mov	r3, sl
 800590a:	464a      	mov	r2, r9
 800590c:	4641      	mov	r1, r8
 800590e:	4670      	mov	r0, lr
 8005910:	f7fe ffda 	bl	80048c8 <adachi_map>
		}

		if ((goal_scale == 1) && ((x.now == goal_x && y.now == goal_y))) {
 8005914:	7b7b      	ldrb	r3, [r7, #13]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d14b      	bne.n	80059b2 <adachi_search_run+0x19e>
 800591a:	4b83      	ldr	r3, [pc, #524]	; (8005b28 <adachi_search_run+0x314>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	429a      	cmp	r2, r3
 8005922:	d146      	bne.n	80059b2 <adachi_search_run+0x19e>
 8005924:	4b81      	ldr	r3, [pc, #516]	; (8005b2c <adachi_search_run+0x318>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	7bba      	ldrb	r2, [r7, #14]
 800592a:	429a      	cmp	r2, r3
 800592c:	d141      	bne.n	80059b2 <adachi_search_run+0x19e>
			if (getWall(goal_x, goal_y, direction, &walldata.real)) {
 800592e:	7bf8      	ldrb	r0, [r7, #15]
 8005930:	7bb9      	ldrb	r1, [r7, #14]
 8005932:	4b82      	ldr	r3, [pc, #520]	; (8005b3c <adachi_search_run+0x328>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	4b7f      	ldr	r3, [pc, #508]	; (8005b38 <adachi_search_run+0x324>)
 800593a:	f007 fa89 	bl	800ce50 <getWall>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02f      	beq.n	80059a4 <adachi_search_run+0x190>
				set_straight(45.0, accel, vel, vel, 0.0);
 8005944:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8005b40 <adachi_search_run+0x32c>
 8005948:	edd7 1a01 	vldr	s3, [r7, #4]
 800594c:	ed97 1a01 	vldr	s2, [r7, #4]
 8005950:	edd7 0a02 	vldr	s1, [r7, #8]
 8005954:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8005b44 <adachi_search_run+0x330>
 8005958:	f005 f8ba 	bl	800aad0 <set_straight>
				wait_straight();
 800595c:	f005 f9ac 	bl	800acb8 <wait_straight>
				HAL_Delay(50);
 8005960:	2032      	movs	r0, #50	; 0x32
 8005962:	f7fb fb8b 	bl	800107c <HAL_Delay>
				set_rotation(180.0, nomal_rotation.accel,
 8005966:	4b78      	ldr	r3, [pc, #480]	; (8005b48 <adachi_search_run+0x334>)
 8005968:	edd3 7a03 	vldr	s15, [r3, #12]
 800596c:	4b76      	ldr	r3, [pc, #472]	; (8005b48 <adachi_search_run+0x334>)
 800596e:	ed93 7a00 	vldr	s14, [r3]
 8005972:	eddf 1a73 	vldr	s3, [pc, #460]	; 8005b40 <adachi_search_run+0x32c>
 8005976:	eeb0 1a47 	vmov.f32	s2, s14
 800597a:	eef0 0a67 	vmov.f32	s1, s15
 800597e:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8005b4c <adachi_search_run+0x338>
 8005982:	f005 f8df 	bl	800ab44 <set_rotation>
						nomal_rotation.vel_search, 0.0);
				wait_rotation();
 8005986:	f005 f9d7 	bl	800ad38 <wait_rotation>
				HAL_Delay(50);
 800598a:	2032      	movs	r0, #50	; 0x32
 800598c:	f7fb fb76 	bl	800107c <HAL_Delay>
				back_100();
 8005990:	f004 f878 	bl	8009a84 <back_100>
				HAL_Delay(50);
 8005994:	2032      	movs	r0, #50	; 0x32
 8005996:	f7fb fb71 	bl	800107c <HAL_Delay>
				rotation_deviation.cumulative = 0.0;
 800599a:	4b6d      	ldr	r3, [pc, #436]	; (8005b50 <adachi_search_run+0x33c>)
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	605a      	str	r2, [r3, #4]
			} else {
				non_ketuate_goal(accel, vel);
			}
			break;
 80059a2:	e0b9      	b.n	8005b18 <adachi_search_run+0x304>
				non_ketuate_goal(accel, vel);
 80059a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80059a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80059ac:	f004 f8da 	bl	8009b64 <non_ketuate_goal>
			break;
 80059b0:	e0b2      	b.n	8005b18 <adachi_search_run+0x304>
		}
		if ((goal_scale == 4)
 80059b2:	7b7b      	ldrb	r3, [r7, #13]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d13e      	bne.n	8005a36 <adachi_search_run+0x222>
				&& ((x.now == goal_x && y.now == goal_y)
 80059b8:	4b5b      	ldr	r3, [pc, #364]	; (8005b28 <adachi_search_run+0x314>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d104      	bne.n	80059cc <adachi_search_run+0x1b8>
 80059c2:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <adachi_search_run+0x318>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	7bba      	ldrb	r2, [r7, #14]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d025      	beq.n	8005a18 <adachi_search_run+0x204>
						|| (x.now == goal_x + 1 && y.now == goal_y)
 80059cc:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <adachi_search_run+0x314>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	3301      	adds	r3, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d104      	bne.n	80059e4 <adachi_search_run+0x1d0>
 80059da:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <adachi_search_run+0x318>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	7bba      	ldrb	r2, [r7, #14]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d019      	beq.n	8005a18 <adachi_search_run+0x204>
						|| (x.now == goal_x && y.now == goal_y + 1)
 80059e4:	4b50      	ldr	r3, [pc, #320]	; (8005b28 <adachi_search_run+0x314>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d106      	bne.n	80059fc <adachi_search_run+0x1e8>
 80059ee:	4b4f      	ldr	r3, [pc, #316]	; (8005b2c <adachi_search_run+0x318>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	3301      	adds	r3, #1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d00d      	beq.n	8005a18 <adachi_search_run+0x204>
						|| (x.now == goal_x + 1 && y.now == goal_y + 1))) {
 80059fc:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <adachi_search_run+0x314>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	3301      	adds	r3, #1
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d115      	bne.n	8005a36 <adachi_search_run+0x222>
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <adachi_search_run+0x318>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	3301      	adds	r3, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d10e      	bne.n	8005a36 <adachi_search_run+0x222>
			set_straight(135.0, accel, vel, vel, 0.0);
 8005a18:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8005b40 <adachi_search_run+0x32c>
 8005a1c:	edd7 1a01 	vldr	s3, [r7, #4]
 8005a20:	ed97 1a01 	vldr	s2, [r7, #4]
 8005a24:	edd7 0a02 	vldr	s1, [r7, #8]
 8005a28:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8005b54 <adachi_search_run+0x340>
 8005a2c:	f005 f850 	bl	800aad0 <set_straight>
			wait_straight();
 8005a30:	f005 f942 	bl	800acb8 <wait_straight>
//				set_straight(-50.0, 500, 150, 0.0, 0.0);
//				wall_control_flag = 0;
//				wait_straight();
//				HAL_Delay(50);
//			}
			break;
 8005a34:	e070      	b.n	8005b18 <adachi_search_run+0x304>
		}
		flag = how_to_move(direction, (int8_t) x.now, (int8_t) y.now,
 8005a36:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <adachi_search_run+0x328>)
 8005a38:	f893 e000 	ldrb.w	lr, [r3]
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <adachi_search_run+0x314>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	fa4f f883 	sxtb.w	r8, r3
 8005a44:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <adachi_search_run+0x318>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	fa4f f983 	sxtb.w	r9, r3
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <adachi_search_run+0x324>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	f04f 0a00 	mov.w	sl, #0
 8005a54:	4692      	mov	sl, r2
 8005a56:	1d1c      	adds	r4, r3, #4
 8005a58:	466e      	mov	r6, sp
 8005a5a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8005a5e:	4635      	mov	r5, r6
 8005a60:	4623      	mov	r3, r4
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a6c:	3410      	adds	r4, #16
 8005a6e:	3610      	adds	r6, #16
 8005a70:	4564      	cmp	r4, ip
 8005a72:	d1f4      	bne.n	8005a5e <adachi_search_run+0x24a>
 8005a74:	4653      	mov	r3, sl
 8005a76:	464a      	mov	r2, r9
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4670      	mov	r0, lr
 8005a7c:	f000 f86c 	bl	8005b58 <how_to_move>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]
				walldata.real);
		if (flag == 0) {
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <adachi_search_run+0x282>
			pass_180(accel, vel);
 8005a8a:	edd7 0a01 	vldr	s1, [r7, #4]
 8005a8e:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a92:	f003 fea3 	bl	80097dc <pass_180>
		}
		if (flag == 1) {
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10f      	bne.n	8005abc <adachi_search_run+0x2a8>
			if (slalom_flag == 0) {
 8005a9c:	7b3b      	ldrb	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <adachi_search_run+0x29c>
				turn_left(accel, vel);
 8005aa2:	edd7 0a01 	vldr	s1, [r7, #4]
 8005aa6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005aaa:	f003 fdb7 	bl	800961c <turn_left>
 8005aae:	e005      	b.n	8005abc <adachi_search_run+0x2a8>
			} else {
//				if (vel == 600.0) {
//					slalom_left90_600(accel, nomal_run.vel_search,
//							nomal_rotation.accel, nomal_rotation.vel_search);
//				} else {
				slalom_left90(accel, vel);
 8005ab0:	edd7 0a01 	vldr	s1, [r7, #4]
 8005ab4:	ed97 0a02 	vldr	s0, [r7, #8]
 8005ab8:	f004 f88e 	bl	8009bd8 <slalom_left90>
//				}
			}
		}
		if (flag == 2) {
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d105      	bne.n	8005ace <adachi_search_run+0x2ba>
//			ketuate_right(accel, vel);
			ketuate(accel, vel);
 8005ac2:	edd7 0a01 	vldr	s1, [r7, #4]
 8005ac6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005aca:	f003 ff73 	bl	80099b4 <ketuate>
		}
		if (flag == 3) {
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d10f      	bne.n	8005af4 <adachi_search_run+0x2e0>
			if (slalom_flag == 0) {
 8005ad4:	7b3b      	ldrb	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <adachi_search_run+0x2d4>
				turn_right(accel, vel);
 8005ada:	edd7 0a01 	vldr	s1, [r7, #4]
 8005ade:	ed97 0a02 	vldr	s0, [r7, #8]
 8005ae2:	f003 fe0b 	bl	80096fc <turn_right>
 8005ae6:	e005      	b.n	8005af4 <adachi_search_run+0x2e0>
			} else {
//				if (vel == 600.0) {
//					slalom_right90_600(accel, nomal_run.vel_search,
//							nomal_rotation.accel, nomal_rotation.vel_search);
//				} else {
				slalom_right90(accel, vel);
 8005ae8:	edd7 0a01 	vldr	s1, [r7, #4]
 8005aec:	ed97 0a02 	vldr	s0, [r7, #8]
 8005af0:	f004 f914 	bl	8009d1c <slalom_right90>
//				}
			}
		}

		if (flag == 4) {
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d105      	bne.n	8005b06 <adachi_search_run+0x2f2>
			turn_180(accel, vel);
 8005afa:	edd7 0a01 	vldr	s1, [r7, #4]
 8005afe:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b02:	f003 feab 	bl	800985c <turn_180>
		}
		coordinate();
 8005b06:	f006 fa63 	bl	800bfd0 <coordinate>
		addWall();
 8005b0a:	f007 f831 	bl	800cb70 <addWall>
	while (failsafe_flag == 0) {
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <adachi_search_run+0x320>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f43f aea0 	beq.w	8005858 <adachi_search_run+0x44>
	}
}
 8005b18:	bf00      	nop
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b22:	bf00      	nop
 8005b24:	2000066a 	.word	0x2000066a
 8005b28:	20000b88 	.word	0x20000b88
 8005b2c:	20019858 	.word	0x20019858
 8005b30:	20000b8c 	.word	0x20000b8c
 8005b34:	2000065c 	.word	0x2000065c
 8005b38:	200009bc 	.word	0x200009bc
 8005b3c:	20000650 	.word	0x20000650
 8005b40:	00000000 	.word	0x00000000
 8005b44:	42340000 	.word	0x42340000
 8005b48:	20000038 	.word	0x20000038
 8005b4c:	43340000 	.word	0x43340000
 8005b50:	2001981c 	.word	0x2001981c
 8005b54:	43070000 	.word	0x43070000

08005b58 <how_to_move>:

uint8_t how_to_move(uint8_t direction, int8_t x, int8_t y,
		singlewalldata_t walldata) {
 8005b58:	b082      	sub	sp, #8
 8005b5a:	b590      	push	{r4, r7, lr}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	460b      	mov	r3, r1
 8005b68:	71bb      	strb	r3, [r7, #6]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	717b      	strb	r3, [r7, #5]
	uint8_t flag, i;
	int8_t a, b;
	uint16_t step;
	if (direction == North) {
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <how_to_move+0x2a>
		i = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73bb      	strb	r3, [r7, #14]
		a = 1;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	737b      	strb	r3, [r7, #13]
		b = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	733b      	strb	r3, [r7, #12]
 8005b80:	e01c      	b.n	8005bbc <how_to_move+0x64>
	} else if (direction == West) {
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <how_to_move+0x3e>
		i = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	737b      	strb	r3, [r7, #13]
		b = 1;
 8005b90:	2301      	movs	r3, #1
 8005b92:	733b      	strb	r3, [r7, #12]
 8005b94:	e012      	b.n	8005bbc <how_to_move+0x64>
	} else if (direction == South) {
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d106      	bne.n	8005baa <how_to_move+0x52>
		i = 2;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	73bb      	strb	r3, [r7, #14]
		a = -1;
 8005ba0:	23ff      	movs	r3, #255	; 0xff
 8005ba2:	737b      	strb	r3, [r7, #13]
		b = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	733b      	strb	r3, [r7, #12]
 8005ba8:	e008      	b.n	8005bbc <how_to_move+0x64>
	} else if (direction == East) {
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d105      	bne.n	8005bbc <how_to_move+0x64>
		i = 3;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	737b      	strb	r3, [r7, #13]
		b = -1;
 8005bb8:	23ff      	movs	r3, #255	; 0xff
 8005bba:	733b      	strb	r3, [r7, #12]
	}
	if ((y - a >= 0) && (x + b < 16)) {
 8005bbc:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005bc0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	db53      	blt.n	8005c72 <how_to_move+0x11a>
 8005bca:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005bce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	dc4c      	bgt.n	8005c72 <how_to_move+0x11a>
		if ((getWall(x, y, (North + i) % 4, &walldata) == 1)
 8005bd8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005bdc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	f003 0203 	and.w	r2, r3, #3
 8005be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bea:	f007 f931 	bl	800ce50 <getWall>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d12c      	bne.n	8005c4e <how_to_move+0xf6>
				&& (getWall(x, y, (East + i) % 4, &walldata) == 1)
 8005bf4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005bf8:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	3303      	adds	r3, #3
 8005c00:	4259      	negs	r1, r3
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	f001 0303 	and.w	r3, r1, #3
 8005c0a:	bf58      	it	pl
 8005c0c:	425a      	negpl	r2, r3
 8005c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c12:	4621      	mov	r1, r4
 8005c14:	f007 f91c 	bl	800ce50 <getWall>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d117      	bne.n	8005c4e <how_to_move+0xf6>
				&& (getWall(x, y, (West + i) % 4, &walldata) == 1)) {
 8005c1e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005c22:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4259      	negs	r1, r3
 8005c2c:	f003 0203 	and.w	r2, r3, #3
 8005c30:	f001 0303 	and.w	r3, r1, #3
 8005c34:	bf58      	it	pl
 8005c36:	425a      	negpl	r2, r3
 8005c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f007 f907 	bl	800ce50 <getWall>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <how_to_move+0xf6>
			flag = 2;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	73fb      	strb	r3, [r7, #15]
 8005c4c:	e001      	b.n	8005c52 <how_to_move+0xfa>
		} else {
			flag = 4;
 8005c4e:	2304      	movs	r3, #4
 8005c50:	73fb      	strb	r3, [r7, #15]
		}
		step = step_map[x + b][y - a];
 8005c52:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005c56:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005c60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005c64:	1acb      	subs	r3, r1, r3
 8005c66:	496e      	ldr	r1, [pc, #440]	; (8005e20 <how_to_move+0x2c8>)
 8005c68:	0112      	lsls	r2, r2, #4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005c70:	817b      	strh	r3, [r7, #10]
	}
	if ((x - a >= 0) && (y - b >= 0)
 8005c72:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005c76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db3f      	blt.n	8005d00 <how_to_move+0x1a8>
 8005c80:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005c84:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db38      	blt.n	8005d00 <how_to_move+0x1a8>
			&& (getWall(x, y, (West + i) % 4, &walldata) == 0)) {
 8005c8e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005c92:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4259      	negs	r1, r3
 8005c9c:	f003 0203 	and.w	r2, r3, #3
 8005ca0:	f001 0303 	and.w	r3, r1, #3
 8005ca4:	bf58      	it	pl
 8005ca6:	425a      	negpl	r2, r3
 8005ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cac:	4621      	mov	r1, r4
 8005cae:	f007 f8cf 	bl	800ce50 <getWall>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d123      	bne.n	8005d00 <how_to_move+0x1a8>
		if (step_map[x - a][y - b] <= step) {
 8005cb8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005cbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005cc6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005cca:	1acb      	subs	r3, r1, r3
 8005ccc:	4954      	ldr	r1, [pc, #336]	; (8005e20 <how_to_move+0x2c8>)
 8005cce:	0112      	lsls	r2, r2, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005cd6:	897a      	ldrh	r2, [r7, #10]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d311      	bcc.n	8005d00 <how_to_move+0x1a8>
			flag = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - a][y - b];
 8005ce0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005ce4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005ce8:	1ad2      	subs	r2, r2, r3
 8005cea:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005cee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005cf2:	1acb      	subs	r3, r1, r3
 8005cf4:	494a      	ldr	r1, [pc, #296]	; (8005e20 <how_to_move+0x2c8>)
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005cfe:	817b      	strh	r3, [r7, #10]
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 8005d00:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d08:	4413      	add	r3, r2
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	dc3f      	bgt.n	8005d8e <how_to_move+0x236>
 8005d0e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005d12:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	dc38      	bgt.n	8005d8e <how_to_move+0x236>
			&& (getWall(x, y, (East + i) % 4, &walldata) == 0)) {
 8005d1c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005d20:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	3303      	adds	r3, #3
 8005d28:	4259      	negs	r1, r3
 8005d2a:	f003 0203 	and.w	r2, r3, #3
 8005d2e:	f001 0303 	and.w	r3, r1, #3
 8005d32:	bf58      	it	pl
 8005d34:	425a      	negpl	r2, r3
 8005d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	f007 f888 	bl	800ce50 <getWall>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d123      	bne.n	8005d8e <how_to_move+0x236>
		if (step_map[x + a][y + b] <= step) {
 8005d46:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d4e:	441a      	add	r2, r3
 8005d50:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d54:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d58:	440b      	add	r3, r1
 8005d5a:	4931      	ldr	r1, [pc, #196]	; (8005e20 <how_to_move+0x2c8>)
 8005d5c:	0112      	lsls	r2, r2, #4
 8005d5e:	4413      	add	r3, r2
 8005d60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d64:	897a      	ldrh	r2, [r7, #10]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d311      	bcc.n	8005d8e <how_to_move+0x236>
			flag = 3;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	73fb      	strb	r3, [r7, #15]
			step = step_map[x + a][y + b];
 8005d6e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005d72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d76:	441a      	add	r2, r3
 8005d78:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005d80:	440b      	add	r3, r1
 8005d82:	4927      	ldr	r1, [pc, #156]	; (8005e20 <how_to_move+0x2c8>)
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	4413      	add	r3, r2
 8005d88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d8c:	817b      	strh	r3, [r7, #10]
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 8005d8e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005d92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d96:	4413      	add	r3, r2
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	dc38      	bgt.n	8005e0e <how_to_move+0x2b6>
 8005d9c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005da0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	db31      	blt.n	8005e0e <how_to_move+0x2b6>
			&& (getWall(x, y, (North + i) % 4, &walldata) == 0)) {
 8005daa:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005dae:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	f003 0203 	and.w	r2, r3, #3
 8005db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dbc:	f007 f848 	bl	800ce50 <getWall>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d123      	bne.n	8005e0e <how_to_move+0x2b6>
		if (step_map[x - b][y + a] <= step) {
 8005dc6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005dca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005dd4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005dd8:	440b      	add	r3, r1
 8005dda:	4911      	ldr	r1, [pc, #68]	; (8005e20 <how_to_move+0x2c8>)
 8005ddc:	0112      	lsls	r2, r2, #4
 8005dde:	4413      	add	r3, r2
 8005de0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005de4:	897a      	ldrh	r2, [r7, #10]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d311      	bcc.n	8005e0e <how_to_move+0x2b6>
			flag = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - b][y + a];
 8005dee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005df2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005df6:	1ad2      	subs	r2, r2, r3
 8005df8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005dfc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e00:	440b      	add	r3, r1
 8005e02:	4907      	ldr	r1, [pc, #28]	; (8005e20 <how_to_move+0x2c8>)
 8005e04:	0112      	lsls	r2, r2, #4
 8005e06:	4413      	add	r3, r2
 8005e08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e0c:	817b      	strh	r3, [r7, #10]
		}
	}
	return flag;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005e1a:	b002      	add	sp, #8
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000b8c 	.word	0x20000b8c

08005e24 <how_to_move_search_known>:
		coordinate();
		addWall();
	}
}

uint8_t how_to_move_search_known(uint8_t direction, int8_t x, int8_t y) {
 8005e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	b094      	sub	sp, #80	; 0x50
 8005e2a:	af10      	add	r7, sp, #64	; 0x40
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	71fb      	strb	r3, [r7, #7]
 8005e30:	460b      	mov	r3, r1
 8005e32:	71bb      	strb	r3, [r7, #6]
 8005e34:	4613      	mov	r3, r2
 8005e36:	717b      	strb	r3, [r7, #5]
	uint8_t flag, i, known_straight = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	737b      	strb	r3, [r7, #13]
	int8_t a, b;
	uint16_t step;
	if (direction == North) {
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <how_to_move_search_known+0x2c>
		i = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73bb      	strb	r3, [r7, #14]
		a = 1;
 8005e46:	2301      	movs	r3, #1
 8005e48:	733b      	strb	r3, [r7, #12]
		b = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	72fb      	strb	r3, [r7, #11]
 8005e4e:	e01c      	b.n	8005e8a <how_to_move_search_known+0x66>
	} else if (direction == West) {
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d106      	bne.n	8005e64 <how_to_move_search_known+0x40>
		i = 1;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	733b      	strb	r3, [r7, #12]
		b = 1;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
 8005e62:	e012      	b.n	8005e8a <how_to_move_search_known+0x66>
	} else if (direction == South) {
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d106      	bne.n	8005e78 <how_to_move_search_known+0x54>
		i = 2;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	73bb      	strb	r3, [r7, #14]
		a = -1;
 8005e6e:	23ff      	movs	r3, #255	; 0xff
 8005e70:	733b      	strb	r3, [r7, #12]
		b = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	72fb      	strb	r3, [r7, #11]
 8005e76:	e008      	b.n	8005e8a <how_to_move_search_known+0x66>
	} else if (direction == East) {
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d105      	bne.n	8005e8a <how_to_move_search_known+0x66>
		i = 3;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	73bb      	strb	r3, [r7, #14]
		a = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	733b      	strb	r3, [r7, #12]
		b = -1;
 8005e86:	23ff      	movs	r3, #255	; 0xff
 8005e88:	72fb      	strb	r3, [r7, #11]
	}
	if ((y - a >= 0) && (x + b < 16)) {
 8005e8a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005e8e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	db50      	blt.n	8005f3a <how_to_move_search_known+0x116>
 8005e98:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005e9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	dc49      	bgt.n	8005f3a <how_to_move_search_known+0x116>
		if ((getWall(x, y, (North + i) % 4, &walldata.real) == 1)
 8005ea6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005eaa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	f003 0203 	and.w	r2, r3, #3
 8005eb4:	4bc8      	ldr	r3, [pc, #800]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8005eb6:	f006 ffcb 	bl	800ce50 <getWall>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d12a      	bne.n	8005f16 <how_to_move_search_known+0xf2>
				&& (getWall(x, y, (East + i) % 4, &walldata.real) == 1)
 8005ec0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005ec4:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	3303      	adds	r3, #3
 8005ecc:	4259      	negs	r1, r3
 8005ece:	f003 0203 	and.w	r2, r3, #3
 8005ed2:	f001 0303 	and.w	r3, r1, #3
 8005ed6:	bf58      	it	pl
 8005ed8:	425a      	negpl	r2, r3
 8005eda:	4bbf      	ldr	r3, [pc, #764]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8005edc:	4621      	mov	r1, r4
 8005ede:	f006 ffb7 	bl	800ce50 <getWall>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d116      	bne.n	8005f16 <how_to_move_search_known+0xf2>
				&& (getWall(x, y, (West + i) % 4, &walldata.real) == 1)) {
 8005ee8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005eec:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4259      	negs	r1, r3
 8005ef6:	f003 0203 	and.w	r2, r3, #3
 8005efa:	f001 0303 	and.w	r3, r1, #3
 8005efe:	bf58      	it	pl
 8005f00:	425a      	negpl	r2, r3
 8005f02:	4bb5      	ldr	r3, [pc, #724]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8005f04:	4621      	mov	r1, r4
 8005f06:	f006 ffa3 	bl	800ce50 <getWall>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d102      	bne.n	8005f16 <how_to_move_search_known+0xf2>
			flag = 2;
 8005f10:	2302      	movs	r3, #2
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e001      	b.n	8005f1a <how_to_move_search_known+0xf6>
		} else {
			flag = 4;
 8005f16:	2304      	movs	r3, #4
 8005f18:	73fb      	strb	r3, [r7, #15]
		}
		step = step_map[x + b][y - a];
 8005f1a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005f1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f22:	441a      	add	r2, r3
 8005f24:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005f28:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005f2c:	1acb      	subs	r3, r1, r3
 8005f2e:	49ab      	ldr	r1, [pc, #684]	; (80061dc <how_to_move_search_known+0x3b8>)
 8005f30:	0112      	lsls	r2, r2, #4
 8005f32:	4413      	add	r3, r2
 8005f34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005f38:	813b      	strh	r3, [r7, #8]
	}
	if ((x - a >= 0) && (y - b >= 0)
 8005f3a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005f3e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db3e      	blt.n	8005fc6 <how_to_move_search_known+0x1a2>
 8005f48:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005f4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db37      	blt.n	8005fc6 <how_to_move_search_known+0x1a2>
			&& (getWall(x, y, (West + i) % 4, &walldata.real) == 0)) {
 8005f56:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005f5a:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4259      	negs	r1, r3
 8005f64:	f003 0203 	and.w	r2, r3, #3
 8005f68:	f001 0303 	and.w	r3, r1, #3
 8005f6c:	bf58      	it	pl
 8005f6e:	425a      	negpl	r2, r3
 8005f70:	4b99      	ldr	r3, [pc, #612]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8005f72:	4621      	mov	r1, r4
 8005f74:	f006 ff6c 	bl	800ce50 <getWall>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d123      	bne.n	8005fc6 <how_to_move_search_known+0x1a2>
		if (step_map[x - a][y - b] <= step) {
 8005f7e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005f82:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005f8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f90:	1acb      	subs	r3, r1, r3
 8005f92:	4992      	ldr	r1, [pc, #584]	; (80061dc <how_to_move_search_known+0x3b8>)
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	4413      	add	r3, r2
 8005f98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005f9c:	893a      	ldrh	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d311      	bcc.n	8005fc6 <how_to_move_search_known+0x1a2>
			flag = 1;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - a][y - b];
 8005fa6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005faa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005fb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005fb8:	1acb      	subs	r3, r1, r3
 8005fba:	4988      	ldr	r1, [pc, #544]	; (80061dc <how_to_move_search_known+0x3b8>)
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005fc4:	813b      	strh	r3, [r7, #8]
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 8005fc6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005fca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	dc3e      	bgt.n	8006052 <how_to_move_search_known+0x22e>
 8005fd4:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005fd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005fdc:	4413      	add	r3, r2
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	dc37      	bgt.n	8006052 <how_to_move_search_known+0x22e>
			&& (getWall(x, y, (East + i) % 4, &walldata.real) == 0)) {
 8005fe2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8005fe6:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	3303      	adds	r3, #3
 8005fee:	4259      	negs	r1, r3
 8005ff0:	f003 0203 	and.w	r2, r3, #3
 8005ff4:	f001 0303 	and.w	r3, r1, #3
 8005ff8:	bf58      	it	pl
 8005ffa:	425a      	negpl	r2, r3
 8005ffc:	4b76      	ldr	r3, [pc, #472]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8005ffe:	4621      	mov	r1, r4
 8006000:	f006 ff26 	bl	800ce50 <getWall>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d123      	bne.n	8006052 <how_to_move_search_known+0x22e>
		if (step_map[x + a][y + b] <= step) {
 800600a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800600e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006012:	441a      	add	r2, r3
 8006014:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8006018:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800601c:	440b      	add	r3, r1
 800601e:	496f      	ldr	r1, [pc, #444]	; (80061dc <how_to_move_search_known+0x3b8>)
 8006020:	0112      	lsls	r2, r2, #4
 8006022:	4413      	add	r3, r2
 8006024:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006028:	893a      	ldrh	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d311      	bcc.n	8006052 <how_to_move_search_known+0x22e>
			flag = 3;
 800602e:	2303      	movs	r3, #3
 8006030:	73fb      	strb	r3, [r7, #15]
			step = step_map[x + a][y + b];
 8006032:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8006036:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800603a:	441a      	add	r2, r3
 800603c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8006040:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006044:	440b      	add	r3, r1
 8006046:	4965      	ldr	r1, [pc, #404]	; (80061dc <how_to_move_search_known+0x3b8>)
 8006048:	0112      	lsls	r2, r2, #4
 800604a:	4413      	add	r3, r2
 800604c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006050:	813b      	strh	r3, [r7, #8]
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 8006052:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8006056:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	2b0f      	cmp	r3, #15
 800605e:	dc37      	bgt.n	80060d0 <how_to_move_search_known+0x2ac>
 8006060:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8006064:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	db30      	blt.n	80060d0 <how_to_move_search_known+0x2ac>
			&& (getWall(x, y, (North + i) % 4, &walldata.real) == 0)) {
 800606e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8006072:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	f003 0203 	and.w	r2, r3, #3
 800607c:	4b56      	ldr	r3, [pc, #344]	; (80061d8 <how_to_move_search_known+0x3b4>)
 800607e:	f006 fee7 	bl	800ce50 <getWall>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d123      	bne.n	80060d0 <how_to_move_search_known+0x2ac>
		if (step_map[x - b][y + a] <= step) {
 8006088:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800608c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8006096:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800609a:	440b      	add	r3, r1
 800609c:	494f      	ldr	r1, [pc, #316]	; (80061dc <how_to_move_search_known+0x3b8>)
 800609e:	0112      	lsls	r2, r2, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80060a6:	893a      	ldrh	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d311      	bcc.n	80060d0 <how_to_move_search_known+0x2ac>
			flag = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
			step = step_map[x - b][y + a];
 80060b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80060b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80060be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80060c2:	440b      	add	r3, r1
 80060c4:	4945      	ldr	r1, [pc, #276]	; (80061dc <how_to_move_search_known+0x3b8>)
 80060c6:	0112      	lsls	r2, r2, #4
 80060c8:	4413      	add	r3, r2
 80060ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80060ce:	813b      	strh	r3, [r7, #8]
		}
	}
	if (flag == 0
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d179      	bne.n	80061ca <how_to_move_search_known+0x3a6>
			&& (getWall(x, y, ((North + i) % 4), &walldata.adachi) == 0)) {
 80060d6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80060da:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	f003 0203 	and.w	r2, r3, #3
 80060e4:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <how_to_move_search_known+0x3bc>)
 80060e6:	f006 feb3 	bl	800ce50 <getWall>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d16c      	bne.n	80061ca <how_to_move_search_known+0x3a6>
		do {
			known_straight++;
 80060f0:	7b7b      	ldrb	r3, [r7, #13]
 80060f2:	3301      	adds	r3, #1
 80060f4:	737b      	strb	r3, [r7, #13]
			if (direction == North && y < 15) {
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <how_to_move_search_known+0x2ee>
 80060fc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006100:	2b0e      	cmp	r3, #14
 8006102:	dc06      	bgt.n	8006112 <how_to_move_search_known+0x2ee>
				y++;
 8006104:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	3301      	adds	r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	717b      	strb	r3, [r7, #5]
 8006110:	e028      	b.n	8006164 <how_to_move_search_known+0x340>
			} else if (direction == West && x > 0) {
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d10a      	bne.n	800612e <how_to_move_search_known+0x30a>
 8006118:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd06      	ble.n	800612e <how_to_move_search_known+0x30a>
				x--;
 8006120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b2db      	uxtb	r3, r3
 800612a:	71bb      	strb	r3, [r7, #6]
 800612c:	e01a      	b.n	8006164 <how_to_move_search_known+0x340>
			} else if (direction == South && y > 0) {
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d10a      	bne.n	800614a <how_to_move_search_known+0x326>
 8006134:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd06      	ble.n	800614a <how_to_move_search_known+0x326>
				y--;
 800613c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	717b      	strb	r3, [r7, #5]
 8006148:	e00c      	b.n	8006164 <how_to_move_search_known+0x340>
			} else if (direction == East && x < 15) {
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d139      	bne.n	80061c4 <how_to_move_search_known+0x3a0>
 8006150:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006154:	2b0e      	cmp	r3, #14
 8006156:	dc35      	bgt.n	80061c4 <how_to_move_search_known+0x3a0>
				x++;
 8006158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	3301      	adds	r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	71bb      	strb	r3, [r7, #6]
			} else {
				break;
			}
		} while (((getWall(x, y, ((North + i) % 4), &walldata.adachi) == 0)
 8006164:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8006168:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	f003 0203 	and.w	r2, r3, #3
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <how_to_move_search_known+0x3bc>)
 8006174:	f006 fe6c 	bl	800ce50 <getWall>
 8006178:	4603      	mov	r3, r0
				&& (how_to_move(direction, x, y, walldata.real) == 0)));
 800617a:	2b00      	cmp	r3, #0
 800617c:	d122      	bne.n	80061c4 <how_to_move_search_known+0x3a0>
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <how_to_move_search_known+0x3b4>)
 8006180:	f997 9005 	ldrsb.w	r9, [r7, #5]
 8006184:	f997 8006 	ldrsb.w	r8, [r7, #6]
 8006188:	f897 e007 	ldrb.w	lr, [r7, #7]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	f04f 0a00 	mov.w	sl, #0
 8006192:	4692      	mov	sl, r2
 8006194:	1d1c      	adds	r4, r3, #4
 8006196:	466e      	mov	r6, sp
 8006198:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800619c:	4635      	mov	r5, r6
 800619e:	4623      	mov	r3, r4
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061aa:	3410      	adds	r4, #16
 80061ac:	3610      	adds	r6, #16
 80061ae:	4564      	cmp	r4, ip
 80061b0:	d1f4      	bne.n	800619c <how_to_move_search_known+0x378>
 80061b2:	4653      	mov	r3, sl
 80061b4:	464a      	mov	r2, r9
 80061b6:	4641      	mov	r1, r8
 80061b8:	4670      	mov	r0, lr
 80061ba:	f7ff fccd 	bl	8005b58 <how_to_move>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d095      	beq.n	80060f0 <how_to_move_search_known+0x2cc>
		flag = known_straight + 10;
 80061c4:	7b7b      	ldrb	r3, [r7, #13]
 80061c6:	330a      	adds	r3, #10
 80061c8:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	bf00      	nop
 80061d8:	200009bc 	.word	0x200009bc
 80061dc:	20000b8c 	.word	0x20000b8c
 80061e0:	20000a44 	.word	0x20000a44

080061e4 <search_run_special>:

void search_run_special(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale) {
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
 80061ee:	460b      	mov	r3, r1
 80061f0:	71bb      	strb	r3, [r7, #6]
 80061f2:	4613      	mov	r3, r2
 80061f4:	717b      	strb	r3, [r7, #5]
	uint16_t Next_XY_16bit;
	uint8_t x_local, y_local, wall_direction, Next_XY_8bit;

	if (goal_scale == 4) {
 80061f6:	797b      	ldrb	r3, [r7, #5]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d127      	bne.n	800624c <search_run_special+0x68>
		x.now = goal_x;
 80061fc:	4a70      	ldr	r2, [pc, #448]	; (80063c0 <search_run_special+0x1dc>)
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	7013      	strb	r3, [r2, #0]
		y.now = goal_y;
 8006202:	4a70      	ldr	r2, [pc, #448]	; (80063c4 <search_run_special+0x1e0>)
 8006204:	79bb      	ldrb	r3, [r7, #6]
 8006206:	7013      	strb	r3, [r2, #0]
		add_East_wall(&walldata.checked);
 8006208:	486f      	ldr	r0, [pc, #444]	; (80063c8 <search_run_special+0x1e4>)
 800620a:	f006 fb63 	bl	800c8d4 <add_East_wall>
		add_North_wall(&walldata.checked);
 800620e:	486e      	ldr	r0, [pc, #440]	; (80063c8 <search_run_special+0x1e4>)
 8006210:	f006 fb8a 	bl	800c928 <add_North_wall>
		pull_East_wall(&walldata.adachi);
 8006214:	486d      	ldr	r0, [pc, #436]	; (80063cc <search_run_special+0x1e8>)
 8006216:	f006 fc01 	bl	800ca1c <pull_East_wall>
		pull_North_wall(&walldata.adachi);
 800621a:	486c      	ldr	r0, [pc, #432]	; (80063cc <search_run_special+0x1e8>)
 800621c:	f006 fc2c 	bl	800ca78 <pull_North_wall>
		x.now = goal_x + 1;
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	3301      	adds	r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4b66      	ldr	r3, [pc, #408]	; (80063c0 <search_run_special+0x1dc>)
 8006228:	701a      	strb	r2, [r3, #0]
		y.now = goal_y + 1;
 800622a:	79bb      	ldrb	r3, [r7, #6]
 800622c:	3301      	adds	r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	4b64      	ldr	r3, [pc, #400]	; (80063c4 <search_run_special+0x1e0>)
 8006232:	701a      	strb	r2, [r3, #0]
		add_West_wall(&walldata.checked);
 8006234:	4864      	ldr	r0, [pc, #400]	; (80063c8 <search_run_special+0x1e4>)
 8006236:	f006 faff 	bl	800c838 <add_West_wall>
		add_South_wall(&walldata.checked);
 800623a:	4863      	ldr	r0, [pc, #396]	; (80063c8 <search_run_special+0x1e4>)
 800623c:	f006 fb26 	bl	800c88c <add_South_wall>
		pull_West_wall(&walldata.adachi);
 8006240:	4862      	ldr	r0, [pc, #392]	; (80063cc <search_run_special+0x1e8>)
 8006242:	f006 fb95 	bl	800c970 <pull_West_wall>
		pull_South_wall(&walldata.adachi);
 8006246:	4861      	ldr	r0, [pc, #388]	; (80063cc <search_run_special+0x1e8>)
 8006248:	f006 fbbe 	bl	800c9c8 <pull_South_wall>
	}

	x.now = 0;
 800624c:	4b5c      	ldr	r3, [pc, #368]	; (80063c0 <search_run_special+0x1dc>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8006252:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <search_run_special+0x1e0>)
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
	direction = 0;
 8006258:	4b5d      	ldr	r3, [pc, #372]	; (80063d0 <search_run_special+0x1ec>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
	special_goal_flag = 0;
 800625e:	4b5d      	ldr	r3, [pc, #372]	; (80063d4 <search_run_special+0x1f0>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
	add_wall_flag = 1;
 8006264:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <search_run_special+0x1f4>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
	u_turn_counter = 0;
 800626a:	4b5c      	ldr	r3, [pc, #368]	; (80063dc <search_run_special+0x1f8>)
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8006270:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <search_run_special+0x1fc>)
 8006272:	edd3 7a03 	vldr	s15, [r3, #12]
 8006276:	4b5a      	ldr	r3, [pc, #360]	; (80063e0 <search_run_special+0x1fc>)
 8006278:	ed93 7a00 	vldr	s14, [r3]
 800627c:	eef0 0a47 	vmov.f32	s1, s14
 8006280:	eeb0 0a67 	vmov.f32	s0, s15
 8006284:	f003 f9a2 	bl	80095cc <go_entrance>
	coordinate();
 8006288:	f005 fea2 	bl	800bfd0 <coordinate>
	addWall();
 800628c:	f006 fc70 	bl	800cb70 <addWall>
	while (failsafe_flag == 0) {
 8006290:	e03b      	b.n	800630a <search_run_special+0x126>
//		set_buzzer(0, D_4, 600);
//		adachi_map(goal_x, goal_y, goal_scale, walldata.real); //歩数マップ展開
		Next_XY_16bit = make_temporary_goal_XY(goal_x, goal_y, goal_scale); //見たい壁の位置からゴールを算出
 8006292:	797a      	ldrb	r2, [r7, #5]
 8006294:	79b9      	ldrb	r1, [r7, #6]
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f8a5 	bl	80063e8 <make_temporary_goal_XY>
 800629e:	4603      	mov	r3, r0
 80062a0:	81fb      	strh	r3, [r7, #14]
		if (Next_XY_16bit == 0xffff) {
 80062a2:	89fb      	ldrh	r3, [r7, #14]
 80062a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d033      	beq.n	8006314 <search_run_special+0x130>
//			speaker_on( C_4, 6.0, 500);
			break;
		}
		wall_direction = check_flag(Next_XY_16bit);
 80062ac:	89fb      	ldrh	r3, [r7, #14]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fd5c 	bl	8006d6c <check_flag>
 80062b4:	4603      	mov	r3, r0
 80062b6:	737b      	strb	r3, [r7, #13]
		Next_XY_8bit = (uint8_t) (Next_XY_16bit & 0x00ff);
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	733b      	strb	r3, [r7, #12]
		y_local = Next_XY_8bit / 16;
 80062bc:	7b3b      	ldrb	r3, [r7, #12]
 80062be:	091b      	lsrs	r3, r3, #4
 80062c0:	72fb      	strb	r3, [r7, #11]
		x_local = Next_XY_8bit % 16;
 80062c2:	7b3b      	ldrb	r3, [r7, #12]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	72bb      	strb	r3, [r7, #10]

		if (wall_direction == 10) {
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	2b0a      	cmp	r3, #10
 80062ce:	d102      	bne.n	80062d6 <search_run_special+0xf2>
//			speaker_on( C_4, 6.0, 500);
			failsafe_flag = 1;
 80062d0:	4b44      	ldr	r3, [pc, #272]	; (80063e4 <search_run_special+0x200>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	701a      	strb	r2, [r3, #0]
		}

		adachi_special_move(x_local, y_local, wall_direction, nomal_run.accel,
 80062d6:	4b42      	ldr	r3, [pc, #264]	; (80063e0 <search_run_special+0x1fc>)
 80062d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80062dc:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <search_run_special+0x1fc>)
 80062de:	ed93 7a00 	vldr	s14, [r3]
 80062e2:	79bb      	ldrb	r3, [r7, #6]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	4413      	add	r3, r2
 80062ec:	b2dc      	uxtb	r4, r3
 80062ee:	7b7a      	ldrb	r2, [r7, #13]
 80062f0:	7af9      	ldrb	r1, [r7, #11]
 80062f2:	7ab8      	ldrb	r0, [r7, #10]
 80062f4:	89fb      	ldrh	r3, [r7, #14]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	797b      	ldrb	r3, [r7, #5]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4623      	mov	r3, r4
 80062fe:	eef0 0a47 	vmov.f32	s1, s14
 8006302:	eeb0 0a67 	vmov.f32	s0, s15
 8006306:	f000 fabf 	bl	8006888 <adachi_special_move>
	while (failsafe_flag == 0) {
 800630a:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <search_run_special+0x200>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0bf      	beq.n	8006292 <search_run_special+0xae>
 8006312:	e000      	b.n	8006316 <search_run_special+0x132>
			break;
 8006314:	bf00      	nop
				nomal_run.vel_search, (goal_y * 16 + goal_x), goal_scale,
				Next_XY_16bit); //見たい壁に対する位置と壁の絶対方角を入力

	}

	u_turn_counter = 100;
 8006316:	4b31      	ldr	r3, [pc, #196]	; (80063dc <search_run_special+0x1f8>)
 8006318:	2264      	movs	r2, #100	; 0x64
 800631a:	701a      	strb	r2, [r3, #0]
	if (special_goal_flag == 0) {
 800631c:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <search_run_special+0x1f0>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11a      	bne.n	800635a <search_run_special+0x176>
//		speaker_on( C_5, 6.0, 700);
		adachi_special_move(goal_x, goal_y, goal_scale, nomal_run.accel,
 8006324:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <search_run_special+0x1fc>)
 8006326:	edd3 7a03 	vldr	s15, [r3, #12]
 800632a:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <search_run_special+0x1fc>)
 800632c:	ed93 7a00 	vldr	s14, [r3]
 8006330:	79bb      	ldrb	r3, [r7, #6]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	b2da      	uxtb	r2, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	4413      	add	r3, r2
 800633a:	b2dc      	uxtb	r4, r3
 800633c:	797a      	ldrb	r2, [r7, #5]
 800633e:	79b9      	ldrb	r1, [r7, #6]
 8006340:	79f8      	ldrb	r0, [r7, #7]
 8006342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	797b      	ldrb	r3, [r7, #5]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4623      	mov	r3, r4
 800634e:	eef0 0a47 	vmov.f32	s1, s14
 8006352:	eeb0 0a67 	vmov.f32	s0, s15
 8006356:	f000 fa97 	bl	8006888 <adachi_special_move>
				nomal_run.vel_search, (goal_y * 16 + goal_x), goal_scale,
				0xffff);
	}
	if (goal_scale == 1) {
 800635a:	797b      	ldrb	r3, [r7, #5]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10f      	bne.n	8006380 <search_run_special+0x19c>
		go_entrance(nomal_run.accel, nomal_run.vel_search);
 8006360:	4b1f      	ldr	r3, [pc, #124]	; (80063e0 <search_run_special+0x1fc>)
 8006362:	edd3 7a03 	vldr	s15, [r3, #12]
 8006366:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <search_run_special+0x1fc>)
 8006368:	ed93 7a00 	vldr	s14, [r3]
 800636c:	eef0 0a47 	vmov.f32	s1, s14
 8006370:	eeb0 0a67 	vmov.f32	s0, s15
 8006374:	f003 f92a 	bl	80095cc <go_entrance>
		coordinate();
 8006378:	f005 fe2a 	bl	800bfd0 <coordinate>
		addWall();
 800637c:	f006 fbf8 	bl	800cb70 <addWall>
	}
//	speaker_on( C_7, 6.0, 1000);
//	u_turn_counter = 5;
	adachi_special_move(0, 0, 255, nomal_run.accel, nomal_run.vel_search,
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <search_run_special+0x1fc>)
 8006382:	edd3 7a03 	vldr	s15, [r3, #12]
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <search_run_special+0x1fc>)
 8006388:	ed93 7a00 	vldr	s14, [r3]
 800638c:	79bb      	ldrb	r3, [r7, #6]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	b2da      	uxtb	r2, r3
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	4413      	add	r3, r2
 8006396:	b2da      	uxtb	r2, r3
 8006398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	797b      	ldrb	r3, [r7, #5]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	eef0 0a47 	vmov.f32	s1, s14
 80063a8:	eeb0 0a67 	vmov.f32	s0, s15
 80063ac:	22ff      	movs	r2, #255	; 0xff
 80063ae:	2100      	movs	r1, #0
 80063b0:	2000      	movs	r0, #0
 80063b2:	f000 fa69 	bl	8006888 <adachi_special_move>
			(goal_y * 16 + goal_x), goal_scale, 0xffff);

}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000b88 	.word	0x20000b88
 80063c4:	20019858 	.word	0x20019858
 80063c8:	20000a00 	.word	0x20000a00
 80063cc:	20000a44 	.word	0x20000a44
 80063d0:	20000650 	.word	0x20000650
 80063d4:	20000686 	.word	0x20000686
 80063d8:	2000000c 	.word	0x2000000c
 80063dc:	20000687 	.word	0x20000687
 80063e0:	20000028 	.word	0x20000028
 80063e4:	2000065c 	.word	0x2000065c

080063e8 <make_temporary_goal_XY>:

uint16_t make_temporary_goal_XY(uint8_t ture_goal_x, uint8_t ture_goal_y,
		uint8_t goal_scale) {
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	b094      	sub	sp, #80	; 0x50
 80063ee:	af10      	add	r7, sp, #64	; 0x40
 80063f0:	4603      	mov	r3, r0
 80063f2:	71fb      	strb	r3, [r7, #7]
 80063f4:	460b      	mov	r3, r1
 80063f6:	71bb      	strb	r3, [r7, #6]
 80063f8:	4613      	mov	r3, r2
 80063fa:	717b      	strb	r3, [r7, #5]
	uint8_t flag = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]
	uint8_t x_local = 0, y_local = 0, local_direction = 0; //常にスタート座標からゴールへの道を探す
 8006400:	2300      	movs	r3, #0
 8006402:	73bb      	strb	r3, [r7, #14]
 8006404:	2300      	movs	r3, #0
 8006406:	737b      	strb	r3, [r7, #13]
 8006408:	2300      	movs	r3, #0
 800640a:	733b      	strb	r3, [r7, #12]
	uint16_t Next_XY = 0, shift = 1;
 800640c:	2300      	movs	r3, #0
 800640e:	817b      	strh	r3, [r7, #10]
 8006410:	2301      	movs	r3, #1
 8006412:	813b      	strh	r3, [r7, #8]

	adachi_map(ture_goal_x, ture_goal_y, goal_scale, walldata.real); //歩数マップ展開
 8006414:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <make_temporary_goal_XY+0x200>)
 8006416:	f897 9005 	ldrb.w	r9, [r7, #5]
 800641a:	f897 8006 	ldrb.w	r8, [r7, #6]
 800641e:	f897 e007 	ldrb.w	lr, [r7, #7]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	f04f 0a00 	mov.w	sl, #0
 8006428:	4692      	mov	sl, r2
 800642a:	1d1c      	adds	r4, r3, #4
 800642c:	466e      	mov	r6, sp
 800642e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006432:	4635      	mov	r5, r6
 8006434:	4623      	mov	r3, r4
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006440:	3410      	adds	r4, #16
 8006442:	3610      	adds	r6, #16
 8006444:	4564      	cmp	r4, ip
 8006446:	d1f4      	bne.n	8006432 <make_temporary_goal_XY+0x4a>
 8006448:	4653      	mov	r3, sl
 800644a:	464a      	mov	r2, r9
 800644c:	4641      	mov	r1, r8
 800644e:	4670      	mov	r0, lr
 8006450:	f7fe fa3a 	bl	80048c8 <adachi_map>

	while (failsafe_flag == 0) {
 8006454:	e09b      	b.n	800658e <make_temporary_goal_XY+0x1a6>
		flag = how_to_move_special(x_local, y_local, local_direction);
 8006456:	7b3a      	ldrb	r2, [r7, #12]
 8006458:	7b79      	ldrb	r1, [r7, #13]
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f8cb 	bl	80065f8 <how_to_move_special>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
		printf("flag:%d.x:%d,y:%d,dire:%d\n", flag, x_local, y_local,
 8006466:	7bf9      	ldrb	r1, [r7, #15]
 8006468:	7bba      	ldrb	r2, [r7, #14]
 800646a:	7b78      	ldrb	r0, [r7, #13]
 800646c:	7b3b      	ldrb	r3, [r7, #12]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	4603      	mov	r3, r0
 8006472:	485e      	ldr	r0, [pc, #376]	; (80065ec <make_temporary_goal_XY+0x204>)
 8006474:	f007 fa26 	bl	800d8c4 <iprintf>
				local_direction);

		if (flag > 9) { //相対方角から絶対方角に変換
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b09      	cmp	r3, #9
 800647c:	d90e      	bls.n	800649c <make_temporary_goal_XY+0xb4>
			flag -= 10;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	3b0a      	subs	r3, #10
 8006482:	73fb      	strb	r3, [r7, #15]
			flag += local_direction;
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	7b3b      	ldrb	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	73fb      	strb	r3, [r7, #15]
			flag %= 4;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	73fb      	strb	r3, [r7, #15]
			flag += 10;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	330a      	adds	r3, #10
 8006498:	73fb      	strb	r3, [r7, #15]
//			speaker_on( C_4, 6.0, 500);
			break;
 800649a:	e07d      	b.n	8006598 <make_temporary_goal_XY+0x1b0>
		}
		if (flag == 1) {
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d103      	bne.n	80064aa <make_temporary_goal_XY+0xc2>
			local_direction++;
 80064a2:	7b3b      	ldrb	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	733b      	strb	r3, [r7, #12]
 80064a8:	e00c      	b.n	80064c4 <make_temporary_goal_XY+0xdc>
		} else if (flag == 2) {
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d103      	bne.n	80064b8 <make_temporary_goal_XY+0xd0>
			local_direction += 2;
 80064b0:	7b3b      	ldrb	r3, [r7, #12]
 80064b2:	3302      	adds	r3, #2
 80064b4:	733b      	strb	r3, [r7, #12]
 80064b6:	e005      	b.n	80064c4 <make_temporary_goal_XY+0xdc>
		} else if (flag == 3) {
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d102      	bne.n	80064c4 <make_temporary_goal_XY+0xdc>
			local_direction += 3;
 80064be:	7b3b      	ldrb	r3, [r7, #12]
 80064c0:	3303      	adds	r3, #3
 80064c2:	733b      	strb	r3, [r7, #12]
		}
		if (local_direction > 3) {
 80064c4:	7b3b      	ldrb	r3, [r7, #12]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d902      	bls.n	80064d0 <make_temporary_goal_XY+0xe8>
			local_direction -= 4;
 80064ca:	7b3b      	ldrb	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	733b      	strb	r3, [r7, #12]
		}

		if (local_direction == North && y_local < 15) {
 80064d0:	7b3b      	ldrb	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <make_temporary_goal_XY+0xfc>
 80064d6:	7b7b      	ldrb	r3, [r7, #13]
 80064d8:	2b0e      	cmp	r3, #14
 80064da:	d803      	bhi.n	80064e4 <make_temporary_goal_XY+0xfc>
			y_local++;
 80064dc:	7b7b      	ldrb	r3, [r7, #13]
 80064de:	3301      	adds	r3, #1
 80064e0:	737b      	strb	r3, [r7, #13]
 80064e2:	e01c      	b.n	800651e <make_temporary_goal_XY+0x136>
		} else if (local_direction == West && x_local > 0) {
 80064e4:	7b3b      	ldrb	r3, [r7, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d106      	bne.n	80064f8 <make_temporary_goal_XY+0x110>
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <make_temporary_goal_XY+0x110>
			x_local--;
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	73bb      	strb	r3, [r7, #14]
 80064f6:	e012      	b.n	800651e <make_temporary_goal_XY+0x136>
		} else if (local_direction == South && y_local > 0) {
 80064f8:	7b3b      	ldrb	r3, [r7, #12]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d106      	bne.n	800650c <make_temporary_goal_XY+0x124>
 80064fe:	7b7b      	ldrb	r3, [r7, #13]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <make_temporary_goal_XY+0x124>
			y_local--;
 8006504:	7b7b      	ldrb	r3, [r7, #13]
 8006506:	3b01      	subs	r3, #1
 8006508:	737b      	strb	r3, [r7, #13]
 800650a:	e008      	b.n	800651e <make_temporary_goal_XY+0x136>
		} else if (local_direction == East && x_local < 15) {
 800650c:	7b3b      	ldrb	r3, [r7, #12]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d105      	bne.n	800651e <make_temporary_goal_XY+0x136>
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b0e      	cmp	r3, #14
 8006516:	d802      	bhi.n	800651e <make_temporary_goal_XY+0x136>
			x_local++;
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	3301      	adds	r3, #1
 800651c:	73bb      	strb	r3, [r7, #14]
		}

		if ((goal_scale == 1)
 800651e:	797b      	ldrb	r3, [r7, #5]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d10a      	bne.n	800653a <make_temporary_goal_XY+0x152>
				&& ((x_local == ture_goal_x && y_local == ture_goal_y))) { //経路内に未知壁なし
 8006524:	7bba      	ldrb	r2, [r7, #14]
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	429a      	cmp	r2, r3
 800652a:	d106      	bne.n	800653a <make_temporary_goal_XY+0x152>
 800652c:	7b7a      	ldrb	r2, [r7, #13]
 800652e:	79bb      	ldrb	r3, [r7, #6]
 8006530:	429a      	cmp	r2, r3
 8006532:	d102      	bne.n	800653a <make_temporary_goal_XY+0x152>
			shift = 255;
 8006534:	23ff      	movs	r3, #255	; 0xff
 8006536:	813b      	strh	r3, [r7, #8]
			break;
 8006538:	e02e      	b.n	8006598 <make_temporary_goal_XY+0x1b0>
		}
		if ((goal_scale == 4)
 800653a:	797b      	ldrb	r3, [r7, #5]
 800653c:	2b04      	cmp	r3, #4
 800653e:	d126      	bne.n	800658e <make_temporary_goal_XY+0x1a6>
				&& ((x_local == ture_goal_x && y_local == ture_goal_y)
 8006540:	7bba      	ldrb	r2, [r7, #14]
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	429a      	cmp	r2, r3
 8006546:	d103      	bne.n	8006550 <make_temporary_goal_XY+0x168>
 8006548:	7b7a      	ldrb	r2, [r7, #13]
 800654a:	79bb      	ldrb	r3, [r7, #6]
 800654c:	429a      	cmp	r2, r3
 800654e:	d01b      	beq.n	8006588 <make_temporary_goal_XY+0x1a0>
						|| (x_local == ture_goal_x + 1 && y_local == ture_goal_y)
 8006550:	7bba      	ldrb	r2, [r7, #14]
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	3301      	adds	r3, #1
 8006556:	429a      	cmp	r2, r3
 8006558:	d103      	bne.n	8006562 <make_temporary_goal_XY+0x17a>
 800655a:	7b7a      	ldrb	r2, [r7, #13]
 800655c:	79bb      	ldrb	r3, [r7, #6]
 800655e:	429a      	cmp	r2, r3
 8006560:	d012      	beq.n	8006588 <make_temporary_goal_XY+0x1a0>
						|| (x_local == ture_goal_x && y_local == ture_goal_y + 1)
 8006562:	7bba      	ldrb	r2, [r7, #14]
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	429a      	cmp	r2, r3
 8006568:	d104      	bne.n	8006574 <make_temporary_goal_XY+0x18c>
 800656a:	7b7a      	ldrb	r2, [r7, #13]
 800656c:	79bb      	ldrb	r3, [r7, #6]
 800656e:	3301      	adds	r3, #1
 8006570:	429a      	cmp	r2, r3
 8006572:	d009      	beq.n	8006588 <make_temporary_goal_XY+0x1a0>
						|| (x_local == ture_goal_x + 1
 8006574:	7bba      	ldrb	r2, [r7, #14]
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	3301      	adds	r3, #1
 800657a:	429a      	cmp	r2, r3
 800657c:	d107      	bne.n	800658e <make_temporary_goal_XY+0x1a6>
								&& y_local == ture_goal_y + 1))) { //経路内に未知壁なし
 800657e:	7b7a      	ldrb	r2, [r7, #13]
 8006580:	79bb      	ldrb	r3, [r7, #6]
 8006582:	3301      	adds	r3, #1
 8006584:	429a      	cmp	r2, r3
 8006586:	d102      	bne.n	800658e <make_temporary_goal_XY+0x1a6>
			shift = 255;
 8006588:	23ff      	movs	r3, #255	; 0xff
 800658a:	813b      	strh	r3, [r7, #8]
			break;
 800658c:	e004      	b.n	8006598 <make_temporary_goal_XY+0x1b0>
	while (failsafe_flag == 0) {
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <make_temporary_goal_XY+0x208>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f43f af5f 	beq.w	8006456 <make_temporary_goal_XY+0x6e>
		}
	}

	if (shift == 1) { //まだ探索が必要
 8006598:	893b      	ldrh	r3, [r7, #8]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d112      	bne.n	80065c4 <make_temporary_goal_XY+0x1dc>
		Next_XY = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	817b      	strh	r3, [r7, #10]
		Next_XY = (uint16_t) (16 * y_local + x_local);
 80065a2:	7b7b      	ldrb	r3, [r7, #13]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4413      	add	r3, r2
 80065b0:	817b      	strh	r3, [r7, #10]
		shift = shift << flag;
 80065b2:	893a      	ldrh	r2, [r7, #8]
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	813b      	strh	r3, [r7, #8]
		Next_XY = Next_XY | shift;
 80065bc:	897a      	ldrh	r2, [r7, #10]
 80065be:	893b      	ldrh	r3, [r7, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	817b      	strh	r3, [r7, #10]
	}

	if (shift == 255) { //経路内に未知壁なし
 80065c4:	893b      	ldrh	r3, [r7, #8]
 80065c6:	2bff      	cmp	r3, #255	; 0xff
 80065c8:	d102      	bne.n	80065d0 <make_temporary_goal_XY+0x1e8>
		Next_XY = 0xffff;
 80065ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ce:	817b      	strh	r3, [r7, #10]
	}
	printf("%d\n", Next_XY);
 80065d0:	897b      	ldrh	r3, [r7, #10]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4807      	ldr	r0, [pc, #28]	; (80065f4 <make_temporary_goal_XY+0x20c>)
 80065d6:	f007 f975 	bl	800d8c4 <iprintf>
	return Next_XY; //一時的なゴール座標を返す
 80065da:	897b      	ldrh	r3, [r7, #10]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	bf00      	nop
 80065e8:	200009bc 	.word	0x200009bc
 80065ec:	0800f7d8 	.word	0x0800f7d8
 80065f0:	2000065c 	.word	0x2000065c
 80065f4:	0800f7f4 	.word	0x0800f7f4

080065f8 <how_to_move_special>:

uint8_t how_to_move_special(uint8_t x, uint8_t y, uint8_t direction) {
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
 8006602:	460b      	mov	r3, r1
 8006604:	71bb      	strb	r3, [r7, #6]
 8006606:	4613      	mov	r3, r2
 8006608:	717b      	strb	r3, [r7, #5]
	uint16_t step;
	int8_t a, b;
	uint8_t flag = 111, i;
 800660a:	236f      	movs	r3, #111	; 0x6f
 800660c:	72fb      	strb	r3, [r7, #11]
	if (direction == North) {
 800660e:	797b      	ldrb	r3, [r7, #5]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <how_to_move_special+0x2a>
		i = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	72bb      	strb	r3, [r7, #10]
		a = 1;
 8006618:	2301      	movs	r3, #1
 800661a:	737b      	strb	r3, [r7, #13]
		b = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	733b      	strb	r3, [r7, #12]
 8006620:	e01c      	b.n	800665c <how_to_move_special+0x64>
	} else if (direction == West) {
 8006622:	797b      	ldrb	r3, [r7, #5]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d106      	bne.n	8006636 <how_to_move_special+0x3e>
		i = 1;
 8006628:	2301      	movs	r3, #1
 800662a:	72bb      	strb	r3, [r7, #10]
		a = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	737b      	strb	r3, [r7, #13]
		b = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	733b      	strb	r3, [r7, #12]
 8006634:	e012      	b.n	800665c <how_to_move_special+0x64>
	} else if (direction == South) {
 8006636:	797b      	ldrb	r3, [r7, #5]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d106      	bne.n	800664a <how_to_move_special+0x52>
		i = 2;
 800663c:	2302      	movs	r3, #2
 800663e:	72bb      	strb	r3, [r7, #10]
		a = -1;
 8006640:	23ff      	movs	r3, #255	; 0xff
 8006642:	737b      	strb	r3, [r7, #13]
		b = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	733b      	strb	r3, [r7, #12]
 8006648:	e008      	b.n	800665c <how_to_move_special+0x64>
	} else if (direction == East) {
 800664a:	797b      	ldrb	r3, [r7, #5]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d105      	bne.n	800665c <how_to_move_special+0x64>
		i = 3;
 8006650:	2303      	movs	r3, #3
 8006652:	72bb      	strb	r3, [r7, #10]
		a = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	737b      	strb	r3, [r7, #13]
		b = -1;
 8006658:	23ff      	movs	r3, #255	; 0xff
 800665a:	733b      	strb	r3, [r7, #12]
	}

	step = step_map[x][y];
 800665c:	79fa      	ldrb	r2, [r7, #7]
 800665e:	79bb      	ldrb	r3, [r7, #6]
 8006660:	4984      	ldr	r1, [pc, #528]	; (8006874 <how_to_move_special+0x27c>)
 8006662:	0112      	lsls	r2, r2, #4
 8006664:	4413      	add	r3, r2
 8006666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800666a:	81fb      	strh	r3, [r7, #14]
	if (step == 0xffff) {
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006672:	4293      	cmp	r3, r2
 8006674:	d10e      	bne.n	8006694 <how_to_move_special+0x9c>
		stop90(nomal_run.accel, nomal_run.vel_search);
 8006676:	4b80      	ldr	r3, [pc, #512]	; (8006878 <how_to_move_special+0x280>)
 8006678:	edd3 7a03 	vldr	s15, [r3, #12]
 800667c:	4b7e      	ldr	r3, [pc, #504]	; (8006878 <how_to_move_special+0x280>)
 800667e:	ed93 7a00 	vldr	s14, [r3]
 8006682:	eef0 0a47 	vmov.f32	s1, s14
 8006686:	eeb0 0a67 	vmov.f32	s0, s15
 800668a:	f003 fbe5 	bl	8009e58 <stop90>
		failsafe_flag = 1;
 800668e:	4b7b      	ldr	r3, [pc, #492]	; (800687c <how_to_move_special+0x284>)
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
	}

	if ((x - a >= 0) && (y - b >= 0)
 8006694:	79fa      	ldrb	r2, [r7, #7]
 8006696:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	db4c      	blt.n	800673a <how_to_move_special+0x142>
 80066a0:	79ba      	ldrb	r2, [r7, #6]
 80066a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	db46      	blt.n	800673a <how_to_move_special+0x142>
			&& (getWall(x, y, (West + i) % 4, &walldata.real) == 0)) {
 80066ac:	79f8      	ldrb	r0, [r7, #7]
 80066ae:	79bc      	ldrb	r4, [r7, #6]
 80066b0:	7abb      	ldrb	r3, [r7, #10]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4259      	negs	r1, r3
 80066b6:	f003 0203 	and.w	r2, r3, #3
 80066ba:	f001 0303 	and.w	r3, r1, #3
 80066be:	bf58      	it	pl
 80066c0:	425a      	negpl	r2, r3
 80066c2:	4b6f      	ldr	r3, [pc, #444]	; (8006880 <how_to_move_special+0x288>)
 80066c4:	4621      	mov	r1, r4
 80066c6:	f006 fbc3 	bl	800ce50 <getWall>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d134      	bne.n	800673a <how_to_move_special+0x142>
		if (step_map[x - a][y - b] <= step) {
 80066d0:	79fa      	ldrb	r2, [r7, #7]
 80066d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	79b9      	ldrb	r1, [r7, #6]
 80066da:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	4964      	ldr	r1, [pc, #400]	; (8006874 <how_to_move_special+0x27c>)
 80066e2:	0112      	lsls	r2, r2, #4
 80066e4:	4413      	add	r3, r2
 80066e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80066ea:	89fa      	ldrh	r2, [r7, #14]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d324      	bcc.n	800673a <how_to_move_special+0x142>
			step = step_map[x - a][y - b];
 80066f0:	79fa      	ldrb	r2, [r7, #7]
 80066f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	79b9      	ldrb	r1, [r7, #6]
 80066fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80066fe:	1acb      	subs	r3, r1, r3
 8006700:	495c      	ldr	r1, [pc, #368]	; (8006874 <how_to_move_special+0x27c>)
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	4413      	add	r3, r2
 8006706:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800670a:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (West + i) % 4, &walldata.checked) == 1)) {
 800670c:	79f8      	ldrb	r0, [r7, #7]
 800670e:	79bc      	ldrb	r4, [r7, #6]
 8006710:	7abb      	ldrb	r3, [r7, #10]
 8006712:	3301      	adds	r3, #1
 8006714:	4259      	negs	r1, r3
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	f001 0303 	and.w	r3, r1, #3
 800671e:	bf58      	it	pl
 8006720:	425a      	negpl	r2, r3
 8006722:	4b58      	ldr	r3, [pc, #352]	; (8006884 <how_to_move_special+0x28c>)
 8006724:	4621      	mov	r1, r4
 8006726:	f006 fb93 	bl	800ce50 <getWall>
 800672a:	4603      	mov	r3, r0
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <how_to_move_special+0x13e>
				flag = 1; //checkしてるからすすめる
 8006730:	2301      	movs	r3, #1
 8006732:	72fb      	strb	r3, [r7, #11]
 8006734:	e001      	b.n	800673a <how_to_move_special+0x142>
			} else {
				flag = 11; //checkしてないからここを確認しにく
 8006736:	230b      	movs	r3, #11
 8006738:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	if ((x + a <= 15) && (y + b <= 15)
 800673a:	79fa      	ldrb	r2, [r7, #7]
 800673c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006740:	4413      	add	r3, r2
 8006742:	2b0f      	cmp	r3, #15
 8006744:	dc4c      	bgt.n	80067e0 <how_to_move_special+0x1e8>
 8006746:	79ba      	ldrb	r2, [r7, #6]
 8006748:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	2b0f      	cmp	r3, #15
 8006750:	dc46      	bgt.n	80067e0 <how_to_move_special+0x1e8>
			&& (getWall(x, y, (East + i) % 4, &walldata.real) == 0)) {
 8006752:	79f8      	ldrb	r0, [r7, #7]
 8006754:	79bc      	ldrb	r4, [r7, #6]
 8006756:	7abb      	ldrb	r3, [r7, #10]
 8006758:	3303      	adds	r3, #3
 800675a:	4259      	negs	r1, r3
 800675c:	f003 0203 	and.w	r2, r3, #3
 8006760:	f001 0303 	and.w	r3, r1, #3
 8006764:	bf58      	it	pl
 8006766:	425a      	negpl	r2, r3
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <how_to_move_special+0x288>)
 800676a:	4621      	mov	r1, r4
 800676c:	f006 fb70 	bl	800ce50 <getWall>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d134      	bne.n	80067e0 <how_to_move_special+0x1e8>
		if (step_map[x + a][y + b] <= step) {
 8006776:	79fa      	ldrb	r2, [r7, #7]
 8006778:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800677c:	441a      	add	r2, r3
 800677e:	79b9      	ldrb	r1, [r7, #6]
 8006780:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006784:	440b      	add	r3, r1
 8006786:	493b      	ldr	r1, [pc, #236]	; (8006874 <how_to_move_special+0x27c>)
 8006788:	0112      	lsls	r2, r2, #4
 800678a:	4413      	add	r3, r2
 800678c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006790:	89fa      	ldrh	r2, [r7, #14]
 8006792:	429a      	cmp	r2, r3
 8006794:	d324      	bcc.n	80067e0 <how_to_move_special+0x1e8>
			step = step_map[x + a][y + b];
 8006796:	79fa      	ldrb	r2, [r7, #7]
 8006798:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800679c:	441a      	add	r2, r3
 800679e:	79b9      	ldrb	r1, [r7, #6]
 80067a0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80067a4:	440b      	add	r3, r1
 80067a6:	4933      	ldr	r1, [pc, #204]	; (8006874 <how_to_move_special+0x27c>)
 80067a8:	0112      	lsls	r2, r2, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80067b0:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (East + i) % 4, &walldata.checked) == 1)) {
 80067b2:	79f8      	ldrb	r0, [r7, #7]
 80067b4:	79bc      	ldrb	r4, [r7, #6]
 80067b6:	7abb      	ldrb	r3, [r7, #10]
 80067b8:	3303      	adds	r3, #3
 80067ba:	4259      	negs	r1, r3
 80067bc:	f003 0203 	and.w	r2, r3, #3
 80067c0:	f001 0303 	and.w	r3, r1, #3
 80067c4:	bf58      	it	pl
 80067c6:	425a      	negpl	r2, r3
 80067c8:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <how_to_move_special+0x28c>)
 80067ca:	4621      	mov	r1, r4
 80067cc:	f006 fb40 	bl	800ce50 <getWall>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <how_to_move_special+0x1e4>
				flag = 3;
 80067d6:	2303      	movs	r3, #3
 80067d8:	72fb      	strb	r3, [r7, #11]
 80067da:	e001      	b.n	80067e0 <how_to_move_special+0x1e8>
			} else {
				flag = 13;
 80067dc:	230d      	movs	r3, #13
 80067de:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	if ((y + a <= 15) && (x - b >= 0)
 80067e0:	79ba      	ldrb	r2, [r7, #6]
 80067e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80067e6:	4413      	add	r3, r2
 80067e8:	2b0f      	cmp	r3, #15
 80067ea:	dc3e      	bgt.n	800686a <how_to_move_special+0x272>
 80067ec:	79fa      	ldrb	r2, [r7, #7]
 80067ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	db38      	blt.n	800686a <how_to_move_special+0x272>
			&& (getWall(x, y, (North + i) % 4, &walldata.real) == 0)) {
 80067f8:	79f8      	ldrb	r0, [r7, #7]
 80067fa:	79b9      	ldrb	r1, [r7, #6]
 80067fc:	7abb      	ldrb	r3, [r7, #10]
 80067fe:	f003 0203 	and.w	r2, r3, #3
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <how_to_move_special+0x288>)
 8006804:	f006 fb24 	bl	800ce50 <getWall>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d12d      	bne.n	800686a <how_to_move_special+0x272>
		if (step_map[x - b][y + a] <= step) {
 800680e:	79fa      	ldrb	r2, [r7, #7]
 8006810:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	79b9      	ldrb	r1, [r7, #6]
 8006818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800681c:	440b      	add	r3, r1
 800681e:	4915      	ldr	r1, [pc, #84]	; (8006874 <how_to_move_special+0x27c>)
 8006820:	0112      	lsls	r2, r2, #4
 8006822:	4413      	add	r3, r2
 8006824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006828:	89fa      	ldrh	r2, [r7, #14]
 800682a:	429a      	cmp	r2, r3
 800682c:	d31d      	bcc.n	800686a <how_to_move_special+0x272>
			step = step_map[x - b][y + a];
 800682e:	79fa      	ldrb	r2, [r7, #7]
 8006830:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	79b9      	ldrb	r1, [r7, #6]
 8006838:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800683c:	440b      	add	r3, r1
 800683e:	490d      	ldr	r1, [pc, #52]	; (8006874 <how_to_move_special+0x27c>)
 8006840:	0112      	lsls	r2, r2, #4
 8006842:	4413      	add	r3, r2
 8006844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006848:	81fb      	strh	r3, [r7, #14]
			if ((getWall(x, y, (North + i) % 4, &walldata.checked) == 1)) {
 800684a:	79f8      	ldrb	r0, [r7, #7]
 800684c:	79b9      	ldrb	r1, [r7, #6]
 800684e:	7abb      	ldrb	r3, [r7, #10]
 8006850:	f003 0203 	and.w	r2, r3, #3
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <how_to_move_special+0x28c>)
 8006856:	f006 fafb 	bl	800ce50 <getWall>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d102      	bne.n	8006866 <how_to_move_special+0x26e>
				flag = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	72fb      	strb	r3, [r7, #11]
 8006864:	e001      	b.n	800686a <how_to_move_special+0x272>
			} else {
				flag = 10;
 8006866:	230a      	movs	r3, #10
 8006868:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	return flag; //進行方向と未知壁かの情報を返す
 800686a:	7afb      	ldrb	r3, [r7, #11]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}
 8006874:	20000b8c 	.word	0x20000b8c
 8006878:	20000028 	.word	0x20000028
 800687c:	2000065c 	.word	0x2000065c
 8006880:	200009bc 	.word	0x200009bc
 8006884:	20000a00 	.word	0x20000a00

08006888 <adachi_special_move>:

void adachi_special_move(uint8_t goal_x, uint8_t goal_y, uint8_t wall_direction,
		float accel, float vel, uint8_t ture_goal, uint8_t ture_goal_scale,
		uint16_t input) {
 8006888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	b096      	sub	sp, #88	; 0x58
 800688e:	af10      	add	r7, sp, #64	; 0x40
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	ed87 0a02 	vstr	s0, [r7, #8]
 800689a:	edc7 0a01 	vstr	s1, [r7, #4]
 800689e:	461a      	mov	r2, r3
 80068a0:	4623      	mov	r3, r4
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	4603      	mov	r3, r0
 80068a6:	73bb      	strb	r3, [r7, #14]
 80068a8:	460b      	mov	r3, r1
 80068aa:	737b      	strb	r3, [r7, #13]
 80068ac:	4613      	mov	r3, r2
 80068ae:	733b      	strb	r3, [r7, #12]
	uint8_t flag, i; //flag 0:前,1:左折2:Uターン(けつあて)3:右折4:Uターン
	uint8_t goal_scale = 1;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75bb      	strb	r3, [r7, #22]
	uint8_t straight_flag = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	757b      	strb	r3, [r7, #21]
	uint8_t slalom_flag = 1;
 80068b8:	2301      	movs	r3, #1
 80068ba:	753b      	strb	r3, [r7, #20]
	uint16_t NEW_XY_16;

	if (wall_direction == 0) { //座標と壁の方角の関係から2つのゴール座標を設定
 80068bc:	7b7b      	ldrb	r3, [r7, #13]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <adachi_special_move+0x40>
		goal_scale = 100;
 80068c2:	2364      	movs	r3, #100	; 0x64
 80068c4:	75bb      	strb	r3, [r7, #22]
 80068c6:	e236      	b.n	8006d36 <adachi_special_move+0x4ae>
	} else if (wall_direction == 1) {
 80068c8:	7b7b      	ldrb	r3, [r7, #13]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d102      	bne.n	80068d4 <adachi_special_move+0x4c>
		goal_scale = 101;
 80068ce:	2365      	movs	r3, #101	; 0x65
 80068d0:	75bb      	strb	r3, [r7, #22]
 80068d2:	e230      	b.n	8006d36 <adachi_special_move+0x4ae>
	} else if (wall_direction == 2) {
 80068d4:	7b7b      	ldrb	r3, [r7, #13]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d102      	bne.n	80068e0 <adachi_special_move+0x58>
		goal_scale = 102;
 80068da:	2366      	movs	r3, #102	; 0x66
 80068dc:	75bb      	strb	r3, [r7, #22]
 80068de:	e22a      	b.n	8006d36 <adachi_special_move+0x4ae>
	} else if (wall_direction == 3) {
 80068e0:	7b7b      	ldrb	r3, [r7, #13]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d102      	bne.n	80068ec <adachi_special_move+0x64>
		goal_scale = 103;
 80068e6:	2367      	movs	r3, #103	; 0x67
 80068e8:	75bb      	strb	r3, [r7, #22]
 80068ea:	e224      	b.n	8006d36 <adachi_special_move+0x4ae>
	} else if (wall_direction == 255) { //スタートに帰宅
 80068ec:	7b7b      	ldrb	r3, [r7, #13]
 80068ee:	2bff      	cmp	r3, #255	; 0xff
 80068f0:	d102      	bne.n	80068f8 <adachi_special_move+0x70>
		goal_scale = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	75bb      	strb	r3, [r7, #22]
 80068f6:	e21e      	b.n	8006d36 <adachi_special_move+0x4ae>
	} else if (wall_direction == 4) { //ゴールに入っておくとき
 80068f8:	7b7b      	ldrb	r3, [r7, #13]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	f040 821b 	bne.w	8006d36 <adachi_special_move+0x4ae>
		goal_scale = 4;
 8006900:	2304      	movs	r3, #4
 8006902:	75bb      	strb	r3, [r7, #22]
	}

	while (failsafe_flag == 0) {
 8006904:	e217      	b.n	8006d36 <adachi_special_move+0x4ae>
		NEW_XY_16 = make_temporary_goal_XY((ture_goal % 16), (ture_goal / 16),
 8006906:	7b3b      	ldrb	r3, [r7, #12]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	b2d8      	uxtb	r0, r3
 800690e:	7b3b      	ldrb	r3, [r7, #12]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006918:	4619      	mov	r1, r3
 800691a:	f7ff fd65 	bl	80063e8 <make_temporary_goal_XY>
 800691e:	4603      	mov	r3, r0
 8006920:	827b      	strh	r3, [r7, #18]
				ture_goal_scale);

		if ((NEW_XY_16 != input) && (input != 0xffff)) {
 8006922:	8a7a      	ldrh	r2, [r7, #18]
 8006924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006926:	429a      	cmp	r2, r3
 8006928:	d005      	beq.n	8006936 <adachi_special_move+0xae>
 800692a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800692c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006930:	4293      	cmp	r3, r2
 8006932:	f040 8206 	bne.w	8006d42 <adachi_special_move+0x4ba>
			break;
		}
		if ((NEW_XY_16 != input) && (input == 0xffff)) {
 8006936:	8a7a      	ldrh	r2, [r7, #18]
 8006938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800693a:	429a      	cmp	r2, r3
 800693c:	d008      	beq.n	8006950 <adachi_special_move+0xc8>
 800693e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006944:	4293      	cmp	r3, r2
 8006946:	d103      	bne.n	8006950 <adachi_special_move+0xc8>
			failsafe_flag = 1;
 8006948:	4bb9      	ldr	r3, [pc, #740]	; (8006c30 <adachi_special_move+0x3a8>)
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
			break;
 800694e:	e1fb      	b.n	8006d48 <adachi_special_move+0x4c0>
		}

		if (ture_goal_scale == 4) {
 8006950:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006954:	2b04      	cmp	r3, #4
 8006956:	d144      	bne.n	80069e2 <adachi_special_move+0x15a>
			if ((x.now == (ture_goal % 16) && y.now == (ture_goal / 16))
 8006958:	4bb6      	ldr	r3, [pc, #728]	; (8006c34 <adachi_special_move+0x3ac>)
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	7b3b      	ldrb	r3, [r7, #12]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	b2db      	uxtb	r3, r3
 8006964:	429a      	cmp	r2, r3
 8006966:	d106      	bne.n	8006976 <adachi_special_move+0xee>
 8006968:	4bb3      	ldr	r3, [pc, #716]	; (8006c38 <adachi_special_move+0x3b0>)
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	7b3b      	ldrb	r3, [r7, #12]
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	b2db      	uxtb	r3, r3
 8006972:	429a      	cmp	r2, r3
 8006974:	d032      	beq.n	80069dc <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16) + 1
 8006976:	4baf      	ldr	r3, [pc, #700]	; (8006c34 <adachi_special_move+0x3ac>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	7b3b      	ldrb	r3, [r7, #12]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	3301      	adds	r3, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d106      	bne.n	8006996 <adachi_special_move+0x10e>
							&& y.now == (ture_goal / 16))
 8006988:	4bab      	ldr	r3, [pc, #684]	; (8006c38 <adachi_special_move+0x3b0>)
 800698a:	781a      	ldrb	r2, [r3, #0]
 800698c:	7b3b      	ldrb	r3, [r7, #12]
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	b2db      	uxtb	r3, r3
 8006992:	429a      	cmp	r2, r3
 8006994:	d022      	beq.n	80069dc <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16)
 8006996:	4ba7      	ldr	r3, [pc, #668]	; (8006c34 <adachi_special_move+0x3ac>)
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	7b3b      	ldrb	r3, [r7, #12]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d108      	bne.n	80069b8 <adachi_special_move+0x130>
							&& y.now == (ture_goal / 16) + 1)
 80069a6:	4ba4      	ldr	r3, [pc, #656]	; (8006c38 <adachi_special_move+0x3b0>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	7b3b      	ldrb	r3, [r7, #12]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	3301      	adds	r3, #1
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d011      	beq.n	80069dc <adachi_special_move+0x154>
					|| (x.now == (ture_goal % 16) + 1
 80069b8:	4b9e      	ldr	r3, [pc, #632]	; (8006c34 <adachi_special_move+0x3ac>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	7b3b      	ldrb	r3, [r7, #12]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	3301      	adds	r3, #1
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d10b      	bne.n	80069e2 <adachi_special_move+0x15a>
							&& y.now == (ture_goal / 16) + 1)) {
 80069ca:	4b9b      	ldr	r3, [pc, #620]	; (8006c38 <adachi_special_move+0x3b0>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	7b3b      	ldrb	r3, [r7, #12]
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	3301      	adds	r3, #1
 80069d8:	429a      	cmp	r2, r3
 80069da:	d102      	bne.n	80069e2 <adachi_special_move+0x15a>
				special_goal_flag = 1;
 80069dc:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <adachi_special_move+0x3b4>)
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
//				failsafe_flag=1;
//				write_all_walldatas();
			}
		}

		if (straight_flag == 1) {
 80069e2:	7d7b      	ldrb	r3, [r7, #21]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d120      	bne.n	8006a2a <adachi_special_move+0x1a2>
			adachi_map_straight(goal_x, goal_y, goal_scale, walldata.real);
 80069e8:	4b95      	ldr	r3, [pc, #596]	; (8006c40 <adachi_special_move+0x3b8>)
 80069ea:	f897 9016 	ldrb.w	r9, [r7, #22]
 80069ee:	f897 800e 	ldrb.w	r8, [r7, #14]
 80069f2:	f897 e00f 	ldrb.w	lr, [r7, #15]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	f04f 0a00 	mov.w	sl, #0
 80069fc:	4692      	mov	sl, r2
 80069fe:	1d1c      	adds	r4, r3, #4
 8006a00:	466e      	mov	r6, sp
 8006a02:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006a06:	4635      	mov	r5, r6
 8006a08:	4623      	mov	r3, r4
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a14:	3410      	adds	r4, #16
 8006a16:	3610      	adds	r6, #16
 8006a18:	4564      	cmp	r4, ip
 8006a1a:	d1f4      	bne.n	8006a06 <adachi_special_move+0x17e>
 8006a1c:	4653      	mov	r3, sl
 8006a1e:	464a      	mov	r2, r9
 8006a20:	4641      	mov	r1, r8
 8006a22:	4670      	mov	r0, lr
 8006a24:	f7fe fbb4 	bl	8005190 <adachi_map_straight>
 8006a28:	e043      	b.n	8006ab2 <adachi_special_move+0x22a>
		} else {
			if (wall_direction == 255) {
 8006a2a:	7b7b      	ldrb	r3, [r7, #13]
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d120      	bne.n	8006a72 <adachi_special_move+0x1ea>
				adachi_map_special(goal_x, goal_y, goal_scale, walldata.real);
 8006a30:	4b83      	ldr	r3, [pc, #524]	; (8006c40 <adachi_special_move+0x3b8>)
 8006a32:	f897 9016 	ldrb.w	r9, [r7, #22]
 8006a36:	f897 800e 	ldrb.w	r8, [r7, #14]
 8006a3a:	f897 e00f 	ldrb.w	lr, [r7, #15]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f04f 0a00 	mov.w	sl, #0
 8006a44:	4692      	mov	sl, r2
 8006a46:	1d1c      	adds	r4, r3, #4
 8006a48:	466e      	mov	r6, sp
 8006a4a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006a4e:	4635      	mov	r5, r6
 8006a50:	4623      	mov	r3, r4
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a5c:	3410      	adds	r4, #16
 8006a5e:	3610      	adds	r6, #16
 8006a60:	4564      	cmp	r4, ip
 8006a62:	d1f4      	bne.n	8006a4e <adachi_special_move+0x1c6>
 8006a64:	4653      	mov	r3, sl
 8006a66:	464a      	mov	r2, r9
 8006a68:	4641      	mov	r1, r8
 8006a6a:	4670      	mov	r0, lr
 8006a6c:	f000 f9a8 	bl	8006dc0 <adachi_map_special>
 8006a70:	e01f      	b.n	8006ab2 <adachi_special_move+0x22a>
			} else {
				adachi_map_special(goal_x, goal_y, goal_scale, walldata.real);
 8006a72:	4b73      	ldr	r3, [pc, #460]	; (8006c40 <adachi_special_move+0x3b8>)
 8006a74:	f897 9016 	ldrb.w	r9, [r7, #22]
 8006a78:	f897 800e 	ldrb.w	r8, [r7, #14]
 8006a7c:	f897 e00f 	ldrb.w	lr, [r7, #15]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	f04f 0a00 	mov.w	sl, #0
 8006a86:	4692      	mov	sl, r2
 8006a88:	1d1c      	adds	r4, r3, #4
 8006a8a:	466e      	mov	r6, sp
 8006a8c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006a90:	4635      	mov	r5, r6
 8006a92:	4623      	mov	r3, r4
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a9e:	3410      	adds	r4, #16
 8006aa0:	3610      	adds	r6, #16
 8006aa2:	4564      	cmp	r4, ip
 8006aa4:	d1f4      	bne.n	8006a90 <adachi_special_move+0x208>
 8006aa6:	4653      	mov	r3, sl
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4641      	mov	r1, r8
 8006aac:	4670      	mov	r0, lr
 8006aae:	f000 f987 	bl	8006dc0 <adachi_map_special>
			}
		}
		if (step_map[x.now][y.now] == 0xffff) {
 8006ab2:	4b60      	ldr	r3, [pc, #384]	; (8006c34 <adachi_special_move+0x3ac>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	4b5f      	ldr	r3, [pc, #380]	; (8006c38 <adachi_special_move+0x3b0>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	4a61      	ldr	r2, [pc, #388]	; (8006c44 <adachi_special_move+0x3bc>)
 8006ac0:	0103      	lsls	r3, r0, #4
 8006ac2:	440b      	add	r3, r1
 8006ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d109      	bne.n	8006ae4 <adachi_special_move+0x25c>
			stop90(accel, vel);
 8006ad0:	edd7 0a01 	vldr	s1, [r7, #4]
 8006ad4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ad8:	f003 f9be 	bl	8009e58 <stop90>
			failsafe_flag = 1;
 8006adc:	4b54      	ldr	r3, [pc, #336]	; (8006c30 <adachi_special_move+0x3a8>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
			break;
 8006ae2:	e131      	b.n	8006d48 <adachi_special_move+0x4c0>
		}

		if ((goal_scale == 1) && ((x.now == goal_x && y.now == goal_y))) { //帰宅時
 8006ae4:	7dbb      	ldrb	r3, [r7, #22]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d14b      	bne.n	8006b82 <adachi_special_move+0x2fa>
 8006aea:	4b52      	ldr	r3, [pc, #328]	; (8006c34 <adachi_special_move+0x3ac>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d146      	bne.n	8006b82 <adachi_special_move+0x2fa>
 8006af4:	4b50      	ldr	r3, [pc, #320]	; (8006c38 <adachi_special_move+0x3b0>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	7bba      	ldrb	r2, [r7, #14]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d141      	bne.n	8006b82 <adachi_special_move+0x2fa>
			if (getWall(goal_x, goal_y, direction, &walldata.real)) {
 8006afe:	7bf8      	ldrb	r0, [r7, #15]
 8006b00:	7bb9      	ldrb	r1, [r7, #14]
 8006b02:	4b51      	ldr	r3, [pc, #324]	; (8006c48 <adachi_special_move+0x3c0>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	4b4d      	ldr	r3, [pc, #308]	; (8006c40 <adachi_special_move+0x3b8>)
 8006b0a:	f006 f9a1 	bl	800ce50 <getWall>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d02f      	beq.n	8006b74 <adachi_special_move+0x2ec>
				set_straight(45.0, accel, vel, vel, 0.0);
 8006b14:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8006c4c <adachi_special_move+0x3c4>
 8006b18:	edd7 1a01 	vldr	s3, [r7, #4]
 8006b1c:	ed97 1a01 	vldr	s2, [r7, #4]
 8006b20:	edd7 0a02 	vldr	s1, [r7, #8]
 8006b24:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8006c50 <adachi_special_move+0x3c8>
 8006b28:	f003 ffd2 	bl	800aad0 <set_straight>
				wait_straight();
 8006b2c:	f004 f8c4 	bl	800acb8 <wait_straight>
				HAL_Delay(50);
 8006b30:	2032      	movs	r0, #50	; 0x32
 8006b32:	f7fa faa3 	bl	800107c <HAL_Delay>
				set_rotation(180.0, nomal_rotation.accel,
 8006b36:	4b47      	ldr	r3, [pc, #284]	; (8006c54 <adachi_special_move+0x3cc>)
 8006b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <adachi_special_move+0x3cc>)
 8006b3e:	ed93 7a00 	vldr	s14, [r3]
 8006b42:	eddf 1a42 	vldr	s3, [pc, #264]	; 8006c4c <adachi_special_move+0x3c4>
 8006b46:	eeb0 1a47 	vmov.f32	s2, s14
 8006b4a:	eef0 0a67 	vmov.f32	s1, s15
 8006b4e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8006c58 <adachi_special_move+0x3d0>
 8006b52:	f003 fff7 	bl	800ab44 <set_rotation>
						nomal_rotation.vel_search, 0.0);
				wait_rotation();
 8006b56:	f004 f8ef 	bl	800ad38 <wait_rotation>
				HAL_Delay(50);
 8006b5a:	2032      	movs	r0, #50	; 0x32
 8006b5c:	f7fa fa8e 	bl	800107c <HAL_Delay>
				back_100();
 8006b60:	f002 ff90 	bl	8009a84 <back_100>
				HAL_Delay(50);
 8006b64:	2032      	movs	r0, #50	; 0x32
 8006b66:	f7fa fa89 	bl	800107c <HAL_Delay>
				rotation_deviation.cumulative = 0.0;
 8006b6a:	4b3c      	ldr	r3, [pc, #240]	; (8006c5c <adachi_special_move+0x3d4>)
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	605a      	str	r2, [r3, #4]
			} else {
				non_ketuate_goal(accel, vel);
			}
			break;
 8006b72:	e0e9      	b.n	8006d48 <adachi_special_move+0x4c0>
				non_ketuate_goal(accel, vel);
 8006b74:	edd7 0a01 	vldr	s1, [r7, #4]
 8006b78:	ed97 0a02 	vldr	s0, [r7, #8]
 8006b7c:	f002 fff2 	bl	8009b64 <non_ketuate_goal>
			break;
 8006b80:	e0e2      	b.n	8006d48 <adachi_special_move+0x4c0>
		} else if ((goal_scale > 99 || goal_scale == 4)
 8006b82:	7dbb      	ldrb	r3, [r7, #22]
 8006b84:	2b63      	cmp	r3, #99	; 0x63
 8006b86:	d802      	bhi.n	8006b8e <adachi_special_move+0x306>
 8006b88:	7dbb      	ldrb	r3, [r7, #22]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d10d      	bne.n	8006baa <adachi_special_move+0x322>
				&& step_map[x.now][y.now] == 0) {
 8006b8e:	4b29      	ldr	r3, [pc, #164]	; (8006c34 <adachi_special_move+0x3ac>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <adachi_special_move+0x3b0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <adachi_special_move+0x3bc>)
 8006b9c:	0103      	lsls	r3, r0, #4
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80ce 	beq.w	8006d46 <adachi_special_move+0x4be>
			break;
		}

		flag = how_to_move_search_known(direction, (int8_t) x.now,
 8006baa:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <adachi_special_move+0x3c0>)
 8006bac:	7818      	ldrb	r0, [r3, #0]
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <adachi_special_move+0x3ac>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b259      	sxtb	r1, r3
				(int8_t) y.now);
 8006bb4:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <adachi_special_move+0x3b0>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
		flag = how_to_move_search_known(direction, (int8_t) x.now,
 8006bb8:	b25b      	sxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f7ff f932 	bl	8005e24 <how_to_move_search_known>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	747b      	strb	r3, [r7, #17]

		if (flag == 0 || flag == 11) {
 8006bc4:	7c7b      	ldrb	r3, [r7, #17]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <adachi_special_move+0x348>
 8006bca:	7c7b      	ldrb	r3, [r7, #17]
 8006bcc:	2b0b      	cmp	r3, #11
 8006bce:	d105      	bne.n	8006bdc <adachi_special_move+0x354>
			pass_180(accel, vel);
 8006bd0:	edd7 0a01 	vldr	s1, [r7, #4]
 8006bd4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bd8:	f002 fe00 	bl	80097dc <pass_180>
		}
		if (flag == 1) {
 8006bdc:	7c7b      	ldrb	r3, [r7, #17]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10f      	bne.n	8006c02 <adachi_special_move+0x37a>
			if (slalom_flag == 0) {
 8006be2:	7d3b      	ldrb	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <adachi_special_move+0x36e>
				turn_left(accel, vel);
 8006be8:	edd7 0a01 	vldr	s1, [r7, #4]
 8006bec:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bf0:	f002 fd14 	bl	800961c <turn_left>
 8006bf4:	e005      	b.n	8006c02 <adachi_special_move+0x37a>
			} else {
				slalom_left90(accel, vel);
 8006bf6:	edd7 0a01 	vldr	s1, [r7, #4]
 8006bfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bfe:	f002 ffeb 	bl	8009bd8 <slalom_left90>
			}
		}
		if (flag == 2) {
 8006c02:	7c7b      	ldrb	r3, [r7, #17]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d105      	bne.n	8006c14 <adachi_special_move+0x38c>
			ketuate(accel, vel);
 8006c08:	edd7 0a01 	vldr	s1, [r7, #4]
 8006c0c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c10:	f002 fed0 	bl	80099b4 <ketuate>
		}
		if (flag == 3) {
 8006c14:	7c7b      	ldrb	r3, [r7, #17]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d128      	bne.n	8006c6c <adachi_special_move+0x3e4>
			if (slalom_flag == 0) {
 8006c1a:	7d3b      	ldrb	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11f      	bne.n	8006c60 <adachi_special_move+0x3d8>
				turn_right(accel, vel);
 8006c20:	edd7 0a01 	vldr	s1, [r7, #4]
 8006c24:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c28:	f002 fd68 	bl	80096fc <turn_right>
 8006c2c:	e01e      	b.n	8006c6c <adachi_special_move+0x3e4>
 8006c2e:	bf00      	nop
 8006c30:	2000065c 	.word	0x2000065c
 8006c34:	20000b88 	.word	0x20000b88
 8006c38:	20019858 	.word	0x20019858
 8006c3c:	20000686 	.word	0x20000686
 8006c40:	200009bc 	.word	0x200009bc
 8006c44:	20000b8c 	.word	0x20000b8c
 8006c48:	20000650 	.word	0x20000650
 8006c4c:	00000000 	.word	0x00000000
 8006c50:	42340000 	.word	0x42340000
 8006c54:	20000038 	.word	0x20000038
 8006c58:	43340000 	.word	0x43340000
 8006c5c:	2001981c 	.word	0x2001981c
			} else {
				slalom_right90(accel, vel);
 8006c60:	edd7 0a01 	vldr	s1, [r7, #4]
 8006c64:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c68:	f003 f858 	bl	8009d1c <slalom_right90>
			}
		}

		if (flag == 4) {
 8006c6c:	7c7b      	ldrb	r3, [r7, #17]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d108      	bne.n	8006c84 <adachi_special_move+0x3fc>
			kushi_control_flag=0;
 8006c72:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <adachi_special_move+0x4cc>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
			turn_180(accel, vel);
 8006c78:	edd7 0a01 	vldr	s1, [r7, #4]
 8006c7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c80:	f002 fdec 	bl	800985c <turn_180>
		}
		if (flag > 11) {
 8006c84:	7c7b      	ldrb	r3, [r7, #17]
 8006c86:	2b0b      	cmp	r3, #11
 8006c88:	d951      	bls.n	8006d2e <adachi_special_move+0x4a6>
			set_straight(90.0 * (flag - 10)-30, known_acc, known_vel, vel, vel);
 8006c8a:	7c7b      	ldrb	r3, [r7, #17]
 8006c8c:	3b0a      	subs	r3, #10
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7f9 fc70 	bl	8000574 <__aeabi_i2d>
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <adachi_special_move+0x4d0>)
 8006c9a:	f7f9 fcd5 	bl	8000648 <__aeabi_dmul>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <adachi_special_move+0x4d4>)
 8006cac:	f7f9 fb14 	bl	80002d8 <__aeabi_dsub>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	f7f9 ff9e 	bl	8000bf8 <__aeabi_d2f>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <adachi_special_move+0x4d8>)
 8006cc0:	edd3 7a00 	vldr	s15, [r3]
 8006cc4:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <adachi_special_move+0x4dc>)
 8006cc6:	ed93 7a00 	vldr	s14, [r3]
 8006cca:	ed97 2a01 	vldr	s4, [r7, #4]
 8006cce:	edd7 1a01 	vldr	s3, [r7, #4]
 8006cd2:	eeb0 1a47 	vmov.f32	s2, s14
 8006cd6:	eef0 0a67 	vmov.f32	s1, s15
 8006cda:	ee00 2a10 	vmov	s0, r2
 8006cde:	f003 fef7 	bl	800aad0 <set_straight>
			wait_straight();
 8006ce2:	f003 ffe9 	bl	800acb8 <wait_straight>
			set_straight(30, known_acc, known_vel, vel, vel);
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <adachi_special_move+0x4d8>)
 8006ce8:	edd3 7a00 	vldr	s15, [r3]
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <adachi_special_move+0x4dc>)
 8006cee:	ed93 7a00 	vldr	s14, [r3]
 8006cf2:	ed97 2a01 	vldr	s4, [r7, #4]
 8006cf6:	edd7 1a01 	vldr	s3, [r7, #4]
 8006cfa:	eeb0 1a47 	vmov.f32	s2, s14
 8006cfe:	eef0 0a67 	vmov.f32	s1, s15
 8006d02:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8006d06:	f003 fee3 	bl	800aad0 <set_straight>
			kushi_control_flag=0;
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <adachi_special_move+0x4cc>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
			wait_straight();
 8006d10:	f003 ffd2 	bl	800acb8 <wait_straight>
			for (i = 0; i < flag - 10 - 1; i++) {
 8006d14:	2300      	movs	r3, #0
 8006d16:	75fb      	strb	r3, [r7, #23]
 8006d18:	e004      	b.n	8006d24 <adachi_special_move+0x49c>
				coordinate();
 8006d1a:	f005 f959 	bl	800bfd0 <coordinate>
			for (i = 0; i < flag - 10 - 1; i++) {
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	3301      	adds	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
 8006d24:	7dfa      	ldrb	r2, [r7, #23]
 8006d26:	7c7b      	ldrb	r3, [r7, #17]
 8006d28:	3b0b      	subs	r3, #11
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	dbf5      	blt.n	8006d1a <adachi_special_move+0x492>
			}
		}
		coordinate();
 8006d2e:	f005 f94f 	bl	800bfd0 <coordinate>
		addWall();
 8006d32:	f005 ff1d 	bl	800cb70 <addWall>
	while (failsafe_flag == 0) {
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <adachi_special_move+0x4e0>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f43f ade3 	beq.w	8006906 <adachi_special_move+0x7e>

	}
}
 8006d40:	e002      	b.n	8006d48 <adachi_special_move+0x4c0>
			break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <adachi_special_move+0x4c0>
			break;
 8006d46:	bf00      	nop
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	bf00      	nop
 8006d54:	200006cd 	.word	0x200006cd
 8006d58:	40568000 	.word	0x40568000
 8006d5c:	403e0000 	.word	0x403e0000
 8006d60:	2001985c 	.word	0x2001985c
 8006d64:	20000b68 	.word	0x20000b68
 8006d68:	2000065c 	.word	0x2000065c

08006d6c <check_flag>:

uint8_t check_flag(uint16_t input) {
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
//	uint16_t shift = 1;
	uint8_t flag = 10;
 8006d76:	230a      	movs	r3, #10
 8006d78:	73fb      	strb	r3, [r7, #15]
	if ((input & (0x400)) != 0) {
 8006d7a:	88fb      	ldrh	r3, [r7, #6]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <check_flag+0x1c>
		flag = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x800)) != 0) {
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <check_flag+0x2a>
		flag = 1;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x1000)) != 0) {
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <check_flag+0x38>
		flag = 2;
 8006da0:	2302      	movs	r3, #2
 8006da2:	73fb      	strb	r3, [r7, #15]
	}
	if ((input & (0x2000)) != 0) {
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <check_flag+0x46>
		flag = 3;
 8006dae:	2303      	movs	r3, #3
 8006db0:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <adachi_map_special>:
		HAL_Delay(50);
	}
}

void adachi_map_special(uint8_t goal_x, uint8_t goal_y, uint8_t goal_scale,
		singlewalldata_t walldata_lo) {
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	b590      	push	{r4, r7, lr}
 8006dc4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8006dd4:	1dfb      	adds	r3, r7, #7
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	1dbb      	adds	r3, r7, #6
 8006ddc:	4602      	mov	r2, r0
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	1d7b      	adds	r3, r7, #5
 8006de2:	460a      	mov	r2, r1
 8006de4:	701a      	strb	r2, [r3, #0]
	uint8_t x_adachi, y_adachi;
	queue_t q;
	uint8_t unknown_priority = 3;
 8006de6:	2303      	movs	r3, #3
 8006de8:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
	uint8_t straight_priority = 2;
 8006dec:	2302      	movs	r3, #2
 8006dee:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t nomal_value = 5;
 8006df2:	2305      	movs	r3, #5
 8006df4:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
	uint8_t flag = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	uint16_t step;

	if (goal_x == 0 && goal_y == 0) {
 8006dfe:	1dfb      	adds	r3, r7, #7
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <adachi_map_special+0x54>
 8006e06:	1dbb      	adds	r3, r7, #6
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <adachi_map_special+0x54>
		straight_priority = 4;
 8006e0e:	2304      	movs	r3, #4
 8006e10:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (goal_x == 0 && goal_y == 0) {
 8006e14:	1dfb      	adds	r3, r7, #7
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <adachi_map_special+0x6a>
 8006e1c:	1dbb      	adds	r3, r7, #6
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <adachi_map_special+0x6a>
		straight_priority = 4;
 8006e24:	2304      	movs	r3, #4
 8006e26:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

//	moter_flag = 1;
	q.head = 0;
 8006e2a:	f107 030c 	add.w	r3, r7, #12
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	q.tail = 0;
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8006e44:	e01f      	b.n	8006e86 <adachi_map_special+0xc6>
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8006e4c:	e011      	b.n	8006e72 <adachi_map_special+0xb2>
			step_map[x_adachi][y_adachi] = 0xffff;
 8006e4e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006e52:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006e56:	4611      	mov	r1, r2
 8006e58:	4ad0      	ldr	r2, [pc, #832]	; (800719c <adachi_map_special+0x3dc>)
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	440b      	add	r3, r1
 8006e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (y_adachi = 0; y_adachi < 16; y_adachi++) {
 8006e66:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8006e72:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d9e9      	bls.n	8006e4e <adachi_map_special+0x8e>
	for (x_adachi = 0; x_adachi < 16; x_adachi++) {
 8006e7a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006e7e:	3301      	adds	r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8006e86:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8006e8a:	2b0f      	cmp	r3, #15
 8006e8c:	d9db      	bls.n	8006e46 <adachi_map_special+0x86>
		}
	}

	if (goal_scale == 1) {
 8006e8e:	1d7b      	adds	r3, r7, #5
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d11e      	bne.n	8006ed4 <adachi_map_special+0x114>
		step_map[goal_x][goal_y] = 0;
 8006e96:	1dfb      	adds	r3, r7, #7
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	1dbb      	adds	r3, r7, #6
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	49bf      	ldr	r1, [pc, #764]	; (800719c <adachi_map_special+0x3dc>)
 8006ea0:	0112      	lsls	r2, r2, #4
 8006ea2:	4413      	add	r3, r2
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006eb2:	1dbb      	adds	r3, r7, #6
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006ec0:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006ec4:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fccb 	bl	8004868 <queue_push>
 8006ed2:	e1ac      	b.n	800722e <adachi_map_special+0x46e>
	} else if (goal_scale == 4) {
 8006ed4:	1d7b      	adds	r3, r7, #5
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	f040 8085 	bne.w	8006fe8 <adachi_map_special+0x228>
		step_map[goal_x][goal_y] = 0;
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	1dbb      	adds	r3, r7, #6
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	49ad      	ldr	r1, [pc, #692]	; (800719c <adachi_map_special+0x3dc>)
 8006ee8:	0112      	lsls	r2, r2, #4
 8006eea:	4413      	add	r3, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006ef2:	1dfb      	adds	r3, r7, #7
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006efa:	1dbb      	adds	r3, r7, #6
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006f08:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006f0c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006f10:	f107 030c 	add.w	r3, r7, #12
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fca7 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y] = 0;
 8006f1a:	1dfb      	adds	r3, r7, #7
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	1dbb      	adds	r3, r7, #6
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	499d      	ldr	r1, [pc, #628]	; (800719c <adachi_map_special+0x3dc>)
 8006f26:	0112      	lsls	r2, r2, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8006f30:	1dfb      	adds	r3, r7, #7
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8006f3c:	1dbb      	adds	r3, r7, #6
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006f4a:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006f4e:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006f52:	f107 030c 	add.w	r3, r7, #12
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fd fc86 	bl	8004868 <queue_push>
		step_map[goal_x][goal_y + 1] = 0;
 8006f5c:	1dfb      	adds	r3, r7, #7
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	1dbb      	adds	r3, r7, #6
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	498d      	ldr	r1, [pc, #564]	; (800719c <adachi_map_special+0x3dc>)
 8006f68:	0112      	lsls	r2, r2, #4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8006f72:	1dfb      	adds	r3, r7, #7
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y + 1;
 8006f7a:	1dbb      	adds	r3, r7, #6
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006f8c:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006f90:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006f94:	f107 030c 	add.w	r3, r7, #12
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd fc65 	bl	8004868 <queue_push>
		step_map[goal_x + 1][goal_y + 1] = 0;
 8006f9e:	1dfb      	adds	r3, r7, #7
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	1dbb      	adds	r3, r7, #6
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	497c      	ldr	r1, [pc, #496]	; (800719c <adachi_map_special+0x3dc>)
 8006fac:	0112      	lsls	r2, r2, #4
 8006fae:	4413      	add	r3, r2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x + 1;
 8006fb6:	1dfb      	adds	r3, r7, #7
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y + 1;
 8006fc2:	1dbb      	adds	r3, r7, #6
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 8006fd4:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8006fd8:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fd fc41 	bl	8004868 <queue_push>
 8006fe6:	e122      	b.n	800722e <adachi_map_special+0x46e>
	} else if (goal_scale == 100) {
 8006fe8:	1d7b      	adds	r3, r7, #5
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b64      	cmp	r3, #100	; 0x64
 8006fee:	d144      	bne.n	800707a <adachi_map_special+0x2ba>
		step_map[goal_x][goal_y] = 0;
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	1dbb      	adds	r3, r7, #6
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4968      	ldr	r1, [pc, #416]	; (800719c <adachi_map_special+0x3dc>)
 8006ffa:	0112      	lsls	r2, r2, #4
 8006ffc:	4413      	add	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8007004:	1dfb      	adds	r3, r7, #7
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 800700c:	1dbb      	adds	r3, r7, #6
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 800701a:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800701e:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd fc1e 	bl	8004868 <queue_push>
		if (goal_y < 15) {
 800702c:	1dbb      	adds	r3, r7, #6
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b0e      	cmp	r3, #14
 8007032:	f200 80fc 	bhi.w	800722e <adachi_map_special+0x46e>
			step_map[goal_x][goal_y + 1] = 0;
 8007036:	1dfb      	adds	r3, r7, #7
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	1dbb      	adds	r3, r7, #6
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	4956      	ldr	r1, [pc, #344]	; (800719c <adachi_map_special+0x3dc>)
 8007042:	0112      	lsls	r2, r2, #4
 8007044:	4413      	add	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 800704c:	1dfb      	adds	r3, r7, #7
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y + 1;
 8007054:	1dbb      	adds	r3, r7, #6
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8007066:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800706a:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4618      	mov	r0, r3
 8007074:	f7fd fbf8 	bl	8004868 <queue_push>
 8007078:	e0d9      	b.n	800722e <adachi_map_special+0x46e>
		}
	} else if (goal_scale == 101) {
 800707a:	1d7b      	adds	r3, r7, #5
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b65      	cmp	r3, #101	; 0x65
 8007080:	d144      	bne.n	800710c <adachi_map_special+0x34c>
		step_map[goal_x][goal_y] = 0;
 8007082:	1dfb      	adds	r3, r7, #7
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4944      	ldr	r1, [pc, #272]	; (800719c <adachi_map_special+0x3dc>)
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	4413      	add	r3, r2
 8007090:	2200      	movs	r2, #0
 8007092:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 800709e:	1dbb      	adds	r3, r7, #6
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 80070ac:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 80070b0:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fd fbd5 	bl	8004868 <queue_push>
		if (goal_x > 0) {
 80070be:	1dfb      	adds	r3, r7, #7
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80b3 	beq.w	800722e <adachi_map_special+0x46e>
			step_map[goal_x - 1][goal_y] = 0;
 80070c8:	1dfb      	adds	r3, r7, #7
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	1e5a      	subs	r2, r3, #1
 80070ce:	1dbb      	adds	r3, r7, #6
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	4932      	ldr	r1, [pc, #200]	; (800719c <adachi_map_special+0x3dc>)
 80070d4:	0112      	lsls	r2, r2, #4
 80070d6:	4413      	add	r3, r2
 80070d8:	2200      	movs	r2, #0
 80070da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x - 1;
 80070de:	1dfb      	adds	r3, r7, #7
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y;
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 80070f8:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 80070fc:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd fbaf 	bl	8004868 <queue_push>
 800710a:	e090      	b.n	800722e <adachi_map_special+0x46e>
		}
	} else if (goal_scale == 102) {
 800710c:	1d7b      	adds	r3, r7, #5
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b66      	cmp	r3, #102	; 0x66
 8007112:	d145      	bne.n	80071a0 <adachi_map_special+0x3e0>
		step_map[goal_x][goal_y] = 0;
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	1dbb      	adds	r3, r7, #6
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	491f      	ldr	r1, [pc, #124]	; (800719c <adachi_map_special+0x3dc>)
 800711e:	0112      	lsls	r2, r2, #4
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 8007128:	1dfb      	adds	r3, r7, #7
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 8007130:	1dbb      	adds	r3, r7, #6
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 800713e:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8007142:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007146:	f107 030c 	add.w	r3, r7, #12
 800714a:	4618      	mov	r0, r3
 800714c:	f7fd fb8c 	bl	8004868 <queue_push>
		if (goal_y > 0) {
 8007150:	1dbb      	adds	r3, r7, #6
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d06a      	beq.n	800722e <adachi_map_special+0x46e>
			step_map[goal_x][goal_y - 1] = 0;
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	1dbb      	adds	r3, r7, #6
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	3b01      	subs	r3, #1
 8007162:	490e      	ldr	r1, [pc, #56]	; (800719c <adachi_map_special+0x3dc>)
 8007164:	0112      	lsls	r2, r2, #4
 8007166:	4413      	add	r3, r2
 8007168:	2200      	movs	r2, #0
 800716a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x;
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y - 1;
 8007176:	1dbb      	adds	r3, r7, #6
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	3b01      	subs	r3, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 8007188:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800718c:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd fb67 	bl	8004868 <queue_push>
 800719a:	e048      	b.n	800722e <adachi_map_special+0x46e>
 800719c:	20000b8c 	.word	0x20000b8c
		}
	} else if (goal_scale == 103) {
 80071a0:	1d7b      	adds	r3, r7, #5
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b67      	cmp	r3, #103	; 0x67
 80071a6:	d142      	bne.n	800722e <adachi_map_special+0x46e>
		step_map[goal_x][goal_y] = 0;
 80071a8:	1dfb      	adds	r3, r7, #7
 80071aa:	781a      	ldrb	r2, [r3, #0]
 80071ac:	1dbb      	adds	r3, r7, #6
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	49e3      	ldr	r1, [pc, #908]	; (8007540 <adachi_map_special+0x780>)
 80071b2:	0112      	lsls	r2, r2, #4
 80071b4:	4413      	add	r3, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		x_adachi = goal_x;
 80071bc:	1dfb      	adds	r3, r7, #7
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		y_adachi = goal_y;
 80071c4:	1dbb      	adds	r3, r7, #6
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		step = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		queue_push(&q, x_adachi, y_adachi);
 80071d2:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 80071d6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80071da:	f107 030c 	add.w	r3, r7, #12
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fb42 	bl	8004868 <queue_push>
		if (goal_x < 15) {
 80071e4:	1dfb      	adds	r3, r7, #7
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b0e      	cmp	r3, #14
 80071ea:	d820      	bhi.n	800722e <adachi_map_special+0x46e>
			step_map[goal_x + 1][goal_y] = 0;
 80071ec:	1dfb      	adds	r3, r7, #7
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	1dbb      	adds	r3, r7, #6
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	49d2      	ldr	r1, [pc, #840]	; (8007540 <adachi_map_special+0x780>)
 80071f8:	0112      	lsls	r2, r2, #4
 80071fa:	4413      	add	r3, r2
 80071fc:	2200      	movs	r2, #0
 80071fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			x_adachi = goal_x + 1;
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
			y_adachi = goal_y;
 800720e:	1dbb      	adds	r3, r7, #6
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			step = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			queue_push(&q, x_adachi, y_adachi);
 800721c:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8007220:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd fb1d 	bl	8004868 <queue_push>
		}
	}

	do {
		flag = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
		queue_pop(&q, &x_adachi, &y_adachi);
 8007234:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007238:	f207 2111 	addw	r1, r7, #529	; 0x211
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4618      	mov	r0, r3
 8007242:	f7fd fadf 	bl	8004804 <queue_pop>
//		while (step + 3 < step_map[x_adachi][y_adachi]) {
//			queue_push(&q, x_adachi, y_adachi);
//			queue_pop(&q, &x_adachi, &y_adachi);
//		}

		step = step_map[x_adachi][y_adachi];
 8007246:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800724a:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800724e:	4611      	mov	r1, r2
 8007250:	4abb      	ldr	r2, [pc, #748]	; (8007540 <adachi_map_special+0x780>)
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	440b      	add	r3, r1
 8007256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
//			}
//			queue_push(&q, x_adachi + 1, y_adachi);
//			flag = 10;
//		}
///////////////////////////////////////////////////////////////////
		if ((getWall(x_adachi, y_adachi, North, &walldata_lo) == 0)
 800725e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007262:	4618      	mov	r0, r3
 8007264:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007268:	4619      	mov	r1, r3
 800726a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800726e:	2200      	movs	r2, #0
 8007270:	f005 fdee 	bl	800ce50 <getWall>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 80eb 	bne.w	8007452 <adachi_map_special+0x692>
				&& ((y_adachi + 1) < 16)) {
 800727c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007280:	3301      	adds	r3, #1
 8007282:	2b0f      	cmp	r3, #15
 8007284:	f300 80e5 	bgt.w	8007452 <adachi_map_special+0x692>
			if (((step_map[x_adachi][y_adachi - 1] < step)
 8007288:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800728c:	461a      	mov	r2, r3
 800728e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007292:	3b01      	subs	r3, #1
 8007294:	49aa      	ldr	r1, [pc, #680]	; (8007540 <adachi_map_special+0x780>)
 8007296:	0112      	lsls	r2, r2, #4
 8007298:	4413      	add	r3, r2
 800729a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800729e:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d956      	bls.n	8007354 <adachi_map_special+0x594>
					&& (step_map[x_adachi][y_adachi - 1] >= step - nomal_value))
 80072a6:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072aa:	461a      	mov	r2, r3
 80072ac:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072b0:	3b01      	subs	r3, #1
 80072b2:	49a3      	ldr	r1, [pc, #652]	; (8007540 <adachi_map_special+0x780>)
 80072b4:	0112      	lsls	r2, r2, #4
 80072b6:	4413      	add	r3, r2
 80072b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80072bc:	4619      	mov	r1, r3
 80072be:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80072c2:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	4299      	cmp	r1, r3
 80072ca:	db43      	blt.n	8007354 <adachi_map_special+0x594>
					&& ((y_adachi - 1) >= 0)
 80072cc:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072d0:	3b01      	subs	r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db3e      	blt.n	8007354 <adachi_map_special+0x594>
					&& getWall(x_adachi, y_adachi, South, &walldata.adachi) == 0
 80072d6:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072da:	4618      	mov	r0, r3
 80072dc:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b98      	ldr	r3, [pc, #608]	; (8007544 <adachi_map_special+0x784>)
 80072e4:	2202      	movs	r2, #2
 80072e6:	f005 fdb3 	bl	800ce50 <getWall>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d131      	bne.n	8007354 <adachi_map_special+0x594>
					&& step_map[x_adachi][y_adachi + 1]
 80072f0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80072f4:	461a      	mov	r2, r3
 80072f6:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80072fa:	3301      	adds	r3, #1
 80072fc:	4990      	ldr	r1, [pc, #576]	; (8007540 <adachi_map_special+0x780>)
 80072fe:	0112      	lsls	r2, r2, #4
 8007300:	4413      	add	r3, r2
 8007302:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007306:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 8007308:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800730c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007310:	441a      	add	r2, r3
 8007312:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi + 1]
 800731a:	4299      	cmp	r1, r3
 800731c:	dd1a      	ble.n	8007354 <adachi_map_special+0x594>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 800731e:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007322:	b29a      	uxth	r2, r3
 8007324:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007328:	4413      	add	r3, r2
 800732a:	b299      	uxth	r1, r3
						- straight_priority;
 800732c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007330:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8007332:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007336:	461c      	mov	r4, r3
 8007338:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800733c:	3301      	adds	r3, #1
						- straight_priority;
 800733e:	1a8a      	subs	r2, r1, r2
 8007340:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 8007342:	497f      	ldr	r1, [pc, #508]	; (8007540 <adachi_map_special+0x780>)
 8007344:	0122      	lsls	r2, r4, #4
 8007346:	4413      	add	r3, r2
 8007348:	4602      	mov	r2, r0
 800734a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, North, &walldata.checked) == 0)
 8007354:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007358:	4618      	mov	r0, r3
 800735a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800735e:	4619      	mov	r1, r3
 8007360:	4b79      	ldr	r3, [pc, #484]	; (8007548 <adachi_map_special+0x788>)
 8007362:	2200      	movs	r2, #0
 8007364:	f005 fd74 	bl	800ce50 <getWall>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d131      	bne.n	80073d2 <adachi_map_special+0x612>
					&& (step_map[x_adachi][y_adachi + 1]
 800736e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007372:	461a      	mov	r2, r3
 8007374:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007378:	3301      	adds	r3, #1
 800737a:	4971      	ldr	r1, [pc, #452]	; (8007540 <adachi_map_special+0x780>)
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	4413      	add	r3, r2
 8007380:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007384:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1)) {
 8007386:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800738a:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800738e:	441a      	add	r2, r3
 8007390:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	3301      	adds	r3, #1
					&& (step_map[x_adachi][y_adachi + 1]
 8007398:	4299      	cmp	r1, r3
 800739a:	dd1a      	ble.n	80073d2 <adachi_map_special+0x612>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 800739c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80073a6:	4413      	add	r3, r2
 80073a8:	b299      	uxth	r1, r3
						- unknown_priority;
 80073aa:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80073ae:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 80073b0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80073b4:	461c      	mov	r4, r3
 80073b6:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80073ba:	3301      	adds	r3, #1
						- unknown_priority;
 80073bc:	1a8a      	subs	r2, r1, r2
 80073be:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi + 1] = step + nomal_value
 80073c0:	495f      	ldr	r1, [pc, #380]	; (8007540 <adachi_map_special+0x780>)
 80073c2:	0122      	lsls	r2, r4, #4
 80073c4:	4413      	add	r3, r2
 80073c6:	4602      	mov	r2, r0
 80073c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi][y_adachi + 1] > step + nomal_value + 1
 80073d2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80073d6:	461a      	mov	r2, r3
 80073d8:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80073dc:	3301      	adds	r3, #1
 80073de:	4958      	ldr	r1, [pc, #352]	; (8007540 <adachi_map_special+0x780>)
 80073e0:	0112      	lsls	r2, r2, #4
 80073e2:	4413      	add	r3, r2
 80073e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80073e8:	4619      	mov	r1, r3
 80073ea:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80073ee:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80073f2:	4413      	add	r3, r2
 80073f4:	3301      	adds	r3, #1
 80073f6:	4299      	cmp	r1, r3
 80073f8:	dd19      	ble.n	800742e <adachi_map_special+0x66e>
					&& flag == 0) {
 80073fa:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d115      	bne.n	800742e <adachi_map_special+0x66e>
				step_map[x_adachi][y_adachi + 1] = step + nomal_value;
 8007402:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007406:	b299      	uxth	r1, r3
 8007408:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800740c:	461c      	mov	r4, r3
 800740e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007412:	3301      	adds	r3, #1
 8007414:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007418:	440a      	add	r2, r1
 800741a:	b290      	uxth	r0, r2
 800741c:	4948      	ldr	r1, [pc, #288]	; (8007540 <adachi_map_special+0x780>)
 800741e:	0122      	lsls	r2, r4, #4
 8007420:	4413      	add	r3, r2
 8007422:	4602      	mov	r2, r0
 8007424:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 800742e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10d      	bne.n	8007452 <adachi_map_special+0x692>
				queue_push(&q, x_adachi, y_adachi + 1);
 8007436:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 800743a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800743e:	3301      	adds	r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	f107 030c 	add.w	r3, r7, #12
 8007446:	4618      	mov	r0, r3
 8007448:	f7fd fa0e 	bl	8004868 <queue_push>
				flag = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, West, &walldata_lo) == 0)
 8007452:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007456:	4618      	mov	r0, r3
 8007458:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800745c:	4619      	mov	r1, r3
 800745e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8007462:	2201      	movs	r2, #1
 8007464:	f005 fcf4 	bl	800ce50 <getWall>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 80ed 	bne.w	800764a <adachi_map_special+0x88a>
				&& ((x_adachi - 1) >= 0)) {
 8007470:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007474:	3b01      	subs	r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	f2c0 80e7 	blt.w	800764a <adachi_map_special+0x88a>
			if (((step_map[x_adachi + 1][y_adachi] < step)
 800747c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007480:	3301      	adds	r3, #1
 8007482:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007486:	4611      	mov	r1, r2
 8007488:	4a2d      	ldr	r2, [pc, #180]	; (8007540 <adachi_map_special+0x780>)
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	440b      	add	r3, r1
 800748e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007492:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007496:	429a      	cmp	r2, r3
 8007498:	d95b      	bls.n	8007552 <adachi_map_special+0x792>
					&& (step_map[x_adachi + 1][y_adachi] >= step - nomal_value))
 800749a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800749e:	3301      	adds	r3, #1
 80074a0:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80074a4:	4611      	mov	r1, r2
 80074a6:	4a26      	ldr	r2, [pc, #152]	; (8007540 <adachi_map_special+0x780>)
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	440b      	add	r3, r1
 80074ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b0:	4619      	mov	r1, r3
 80074b2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80074b6:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	4299      	cmp	r1, r3
 80074be:	db48      	blt.n	8007552 <adachi_map_special+0x792>
					&& ((x_adachi + 1) < 16)
 80074c0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074c4:	3301      	adds	r3, #1
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	dc43      	bgt.n	8007552 <adachi_map_special+0x792>
					&& (getWall(x_adachi, y_adachi, East, &walldata.adachi) == 0)
 80074ca:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074ce:	4618      	mov	r0, r3
 80074d0:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80074d4:	4619      	mov	r1, r3
 80074d6:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <adachi_map_special+0x784>)
 80074d8:	2203      	movs	r2, #3
 80074da:	f005 fcb9 	bl	800ce50 <getWall>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d136      	bne.n	8007552 <adachi_map_special+0x792>
					&& (step_map[x_adachi - 1][y_adachi]
 80074e4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80074e8:	3b01      	subs	r3, #1
 80074ea:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80074ee:	4611      	mov	r1, r2
 80074f0:	4a13      	ldr	r2, [pc, #76]	; (8007540 <adachi_map_special+0x780>)
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	440b      	add	r3, r1
 80074f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074fa:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1)) {
 80074fc:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007500:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007504:	441a      	add	r2, r3
 8007506:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	3301      	adds	r3, #1
					&& (step_map[x_adachi - 1][y_adachi]
 800750e:	4299      	cmp	r1, r3
 8007510:	dd1f      	ble.n	8007552 <adachi_map_special+0x792>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 8007512:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007516:	b29a      	uxth	r2, r3
 8007518:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800751c:	4413      	add	r3, r2
 800751e:	b299      	uxth	r1, r3
						- straight_priority;
 8007520:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007524:	b29a      	uxth	r2, r3
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 8007526:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800752a:	3b01      	subs	r3, #1
 800752c:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- straight_priority;
 8007530:	1a8a      	subs	r2, r1, r2
 8007532:	b291      	uxth	r1, r2
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 8007534:	4a02      	ldr	r2, [pc, #8]	; (8007540 <adachi_map_special+0x780>)
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	4403      	add	r3, r0
 800753a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800753e:	e005      	b.n	800754c <adachi_map_special+0x78c>
 8007540:	20000b8c 	.word	0x20000b8c
 8007544:	20000a44 	.word	0x20000a44
 8007548:	20000a00 	.word	0x20000a00
				flag = 1;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, West, &walldata.checked) == 0)
 8007552:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007556:	4618      	mov	r0, r3
 8007558:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800755c:	4619      	mov	r1, r3
 800755e:	4bdf      	ldr	r3, [pc, #892]	; (80078dc <adachi_map_special+0xb1c>)
 8007560:	2201      	movs	r2, #1
 8007562:	f005 fc75 	bl	800ce50 <getWall>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d12f      	bne.n	80075cc <adachi_map_special+0x80c>
					&& (step_map[x_adachi - 1][y_adachi]
 800756c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007570:	3b01      	subs	r3, #1
 8007572:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007576:	4611      	mov	r1, r2
 8007578:	4ad9      	ldr	r2, [pc, #868]	; (80078e0 <adachi_map_special+0xb20>)
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	440b      	add	r3, r1
 800757e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007582:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1)) {
 8007584:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007588:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800758c:	441a      	add	r2, r3
 800758e:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	3301      	adds	r3, #1
					&& (step_map[x_adachi - 1][y_adachi]
 8007596:	4299      	cmp	r1, r3
 8007598:	dd18      	ble.n	80075cc <adachi_map_special+0x80c>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 800759a:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80075a4:	4413      	add	r3, r2
 80075a6:	b299      	uxth	r1, r3
						- unknown_priority;
 80075a8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80075ac:	b29a      	uxth	r2, r3
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 80075ae:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80075b2:	3b01      	subs	r3, #1
 80075b4:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- unknown_priority;
 80075b8:	1a8a      	subs	r2, r1, r2
 80075ba:	b291      	uxth	r1, r2
				step_map[x_adachi - 1][y_adachi] = step + nomal_value
 80075bc:	4ac8      	ldr	r2, [pc, #800]	; (80078e0 <adachi_map_special+0xb20>)
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	4403      	add	r3, r0
 80075c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi - 1][y_adachi] > step + nomal_value + 1
 80075cc:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80075d0:	3b01      	subs	r3, #1
 80075d2:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80075d6:	4611      	mov	r1, r2
 80075d8:	4ac1      	ldr	r2, [pc, #772]	; (80078e0 <adachi_map_special+0xb20>)
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	440b      	add	r3, r1
 80075de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e2:	4619      	mov	r1, r3
 80075e4:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80075e8:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80075ec:	4413      	add	r3, r2
 80075ee:	3301      	adds	r3, #1
 80075f0:	4299      	cmp	r1, r3
 80075f2:	dd18      	ble.n	8007626 <adachi_map_special+0x866>
					&& flag == 0) {
 80075f4:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d114      	bne.n	8007626 <adachi_map_special+0x866>
				step_map[x_adachi - 1][y_adachi] = step + nomal_value;
 80075fc:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007600:	b299      	uxth	r1, r3
 8007602:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007606:	3b01      	subs	r3, #1
 8007608:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800760c:	4610      	mov	r0, r2
 800760e:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007612:	440a      	add	r2, r1
 8007614:	b291      	uxth	r1, r2
 8007616:	4ab2      	ldr	r2, [pc, #712]	; (80078e0 <adachi_map_special+0xb20>)
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	4403      	add	r3, r0
 800761c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}

			if (flag == 1) {
 8007626:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10d      	bne.n	800764a <adachi_map_special+0x88a>
				queue_push(&q, x_adachi - 1, y_adachi);
 800762e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007632:	3b01      	subs	r3, #1
 8007634:	b2d9      	uxtb	r1, r3
 8007636:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800763a:	f107 030c 	add.w	r3, r7, #12
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd f912 	bl	8004868 <queue_push>
				flag = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, South, &walldata_lo) == 0)
 800764a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800764e:	4618      	mov	r0, r3
 8007650:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007654:	4619      	mov	r1, r3
 8007656:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800765a:	2202      	movs	r2, #2
 800765c:	f005 fbf8 	bl	800ce50 <getWall>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 80eb 	bne.w	800783e <adachi_map_special+0xa7e>
				&& ((y_adachi - 1) >= 0)) {
 8007668:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800766c:	3b01      	subs	r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	f2c0 80e5 	blt.w	800783e <adachi_map_special+0xa7e>
			if (((step_map[x_adachi][y_adachi + 1] < step)
 8007674:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007678:	461a      	mov	r2, r3
 800767a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800767e:	3301      	adds	r3, #1
 8007680:	4997      	ldr	r1, [pc, #604]	; (80078e0 <adachi_map_special+0xb20>)
 8007682:	0112      	lsls	r2, r2, #4
 8007684:	4413      	add	r3, r2
 8007686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800768a:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800768e:	429a      	cmp	r2, r3
 8007690:	d956      	bls.n	8007740 <adachi_map_special+0x980>
					&& (step_map[x_adachi][y_adachi + 1] >= step - nomal_value))
 8007692:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007696:	461a      	mov	r2, r3
 8007698:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800769c:	3301      	adds	r3, #1
 800769e:	4990      	ldr	r1, [pc, #576]	; (80078e0 <adachi_map_special+0xb20>)
 80076a0:	0112      	lsls	r2, r2, #4
 80076a2:	4413      	add	r3, r2
 80076a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80076ae:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	4299      	cmp	r1, r3
 80076b6:	db43      	blt.n	8007740 <adachi_map_special+0x980>
					&& (y_adachi + 1) < 16
 80076b8:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80076bc:	3301      	adds	r3, #1
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	dc3e      	bgt.n	8007740 <adachi_map_special+0x980>
					&& getWall(x_adachi, y_adachi, North, &walldata.adachi) == 0
 80076c2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80076c6:	4618      	mov	r0, r3
 80076c8:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80076cc:	4619      	mov	r1, r3
 80076ce:	4b85      	ldr	r3, [pc, #532]	; (80078e4 <adachi_map_special+0xb24>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	f005 fbbd 	bl	800ce50 <getWall>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d131      	bne.n	8007740 <adachi_map_special+0x980>
					&& step_map[x_adachi][y_adachi - 1]
 80076dc:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80076e0:	461a      	mov	r2, r3
 80076e2:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80076e6:	3b01      	subs	r3, #1
 80076e8:	497d      	ldr	r1, [pc, #500]	; (80078e0 <adachi_map_special+0xb20>)
 80076ea:	0112      	lsls	r2, r2, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80076f2:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 80076f4:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80076f8:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80076fc:	441a      	add	r2, r3
 80076fe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi - 1]
 8007706:	4299      	cmp	r1, r3
 8007708:	dd1a      	ble.n	8007740 <adachi_map_special+0x980>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 800770a:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800770e:	b29a      	uxth	r2, r3
 8007710:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007714:	4413      	add	r3, r2
 8007716:	b299      	uxth	r1, r3
						- straight_priority;
 8007718:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800771c:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 800771e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007722:	461c      	mov	r4, r3
 8007724:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007728:	3b01      	subs	r3, #1
						- straight_priority;
 800772a:	1a8a      	subs	r2, r1, r2
 800772c:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 800772e:	496c      	ldr	r1, [pc, #432]	; (80078e0 <adachi_map_special+0xb20>)
 8007730:	0122      	lsls	r2, r4, #4
 8007732:	4413      	add	r3, r2
 8007734:	4602      	mov	r2, r0
 8007736:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, South, &walldata.checked) == 0)
 8007740:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007744:	4618      	mov	r0, r3
 8007746:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800774a:	4619      	mov	r1, r3
 800774c:	4b63      	ldr	r3, [pc, #396]	; (80078dc <adachi_map_special+0xb1c>)
 800774e:	2202      	movs	r2, #2
 8007750:	f005 fb7e 	bl	800ce50 <getWall>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d131      	bne.n	80077be <adachi_map_special+0x9fe>
					&& step_map[x_adachi][y_adachi - 1]
 800775a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800775e:	461a      	mov	r2, r3
 8007760:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007764:	3b01      	subs	r3, #1
 8007766:	495e      	ldr	r1, [pc, #376]	; (80078e0 <adachi_map_special+0xb20>)
 8007768:	0112      	lsls	r2, r2, #4
 800776a:	4413      	add	r3, r2
 800776c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007770:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1) {
 8007772:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007776:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800777a:	441a      	add	r2, r3
 800777c:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	3301      	adds	r3, #1
					&& step_map[x_adachi][y_adachi - 1]
 8007784:	4299      	cmp	r1, r3
 8007786:	dd1a      	ble.n	80077be <adachi_map_special+0x9fe>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 8007788:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007792:	4413      	add	r3, r2
 8007794:	b299      	uxth	r1, r3
						- unknown_priority;
 8007796:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800779a:	b29a      	uxth	r2, r3
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 800779c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80077a0:	461c      	mov	r4, r3
 80077a2:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80077a6:	3b01      	subs	r3, #1
						- unknown_priority;
 80077a8:	1a8a      	subs	r2, r1, r2
 80077aa:	b290      	uxth	r0, r2
				step_map[x_adachi][y_adachi - 1] = step + nomal_value
 80077ac:	494c      	ldr	r1, [pc, #304]	; (80078e0 <adachi_map_special+0xb20>)
 80077ae:	0122      	lsls	r2, r4, #4
 80077b0:	4413      	add	r3, r2
 80077b2:	4602      	mov	r2, r0
 80077b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi][y_adachi - 1] > step + nomal_value + 1
 80077be:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80077c2:	461a      	mov	r2, r3
 80077c4:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80077c8:	3b01      	subs	r3, #1
 80077ca:	4945      	ldr	r1, [pc, #276]	; (80078e0 <adachi_map_special+0xb20>)
 80077cc:	0112      	lsls	r2, r2, #4
 80077ce:	4413      	add	r3, r2
 80077d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80077da:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80077de:	4413      	add	r3, r2
 80077e0:	3301      	adds	r3, #1
 80077e2:	4299      	cmp	r1, r3
 80077e4:	dd19      	ble.n	800781a <adachi_map_special+0xa5a>
					&& flag == 0) {
 80077e6:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d115      	bne.n	800781a <adachi_map_special+0xa5a>
				step_map[x_adachi][y_adachi - 1] = step + nomal_value;
 80077ee:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80077f2:	b299      	uxth	r1, r3
 80077f4:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80077f8:	461c      	mov	r4, r3
 80077fa:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80077fe:	3b01      	subs	r3, #1
 8007800:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007804:	440a      	add	r2, r1
 8007806:	b290      	uxth	r0, r2
 8007808:	4935      	ldr	r1, [pc, #212]	; (80078e0 <adachi_map_special+0xb20>)
 800780a:	0122      	lsls	r2, r4, #4
 800780c:	4413      	add	r3, r2
 800780e:	4602      	mov	r2, r0
 8007810:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				flag = 1;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 800781a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800781e:	2b01      	cmp	r3, #1
 8007820:	d10d      	bne.n	800783e <adachi_map_special+0xa7e>
				queue_push(&q, x_adachi, y_adachi - 1);
 8007822:	f897 1211 	ldrb.w	r1, [r7, #529]	; 0x211
 8007826:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800782a:	3b01      	subs	r3, #1
 800782c:	b2da      	uxtb	r2, r3
 800782e:	f107 030c 	add.w	r3, r7, #12
 8007832:	4618      	mov	r0, r3
 8007834:	f7fd f818 	bl	8004868 <queue_push>
				flag = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
		if ((getWall(x_adachi, y_adachi, East, &walldata_lo) == 0)
 800783e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007842:	4618      	mov	r0, r3
 8007844:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8007848:	4619      	mov	r1, r3
 800784a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800784e:	2203      	movs	r2, #3
 8007850:	f005 fafe 	bl	800ce50 <getWall>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 80ff 	bne.w	8007a5a <adachi_map_special+0xc9a>
				&& (step_map[x_adachi + 1][y_adachi] > step + 1)
 800785c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007860:	3301      	adds	r3, #1
 8007862:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007866:	4611      	mov	r1, r2
 8007868:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <adachi_map_special+0xb20>)
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	440b      	add	r3, r1
 800786e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007872:	461a      	mov	r2, r3
 8007874:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8007878:	3301      	adds	r3, #1
 800787a:	429a      	cmp	r2, r3
 800787c:	f340 80ed 	ble.w	8007a5a <adachi_map_special+0xc9a>
				&& ((x_adachi + 1) < 16)) {
 8007880:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007884:	3301      	adds	r3, #1
 8007886:	2b0f      	cmp	r3, #15
 8007888:	f300 80e7 	bgt.w	8007a5a <adachi_map_special+0xc9a>
			if (((step_map[x_adachi - 1][y_adachi] < step)
 800788c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007890:	3b01      	subs	r3, #1
 8007892:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007896:	4611      	mov	r1, r2
 8007898:	4a11      	ldr	r2, [pc, #68]	; (80078e0 <adachi_map_special+0xb20>)
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	440b      	add	r3, r1
 800789e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d95b      	bls.n	8007962 <adachi_map_special+0xba2>
					&& (step_map[x_adachi - 1][y_adachi] >= step - nomal_value))
 80078aa:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80078ae:	3b01      	subs	r3, #1
 80078b0:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80078b4:	4611      	mov	r1, r2
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <adachi_map_special+0xb20>)
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	440b      	add	r3, r1
 80078bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c0:	4619      	mov	r1, r3
 80078c2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80078c6:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	4299      	cmp	r1, r3
 80078ce:	db48      	blt.n	8007962 <adachi_map_special+0xba2>
					&& (x_adachi - 1) >= 0
 80078d0:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80078d4:	3b01      	subs	r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	db43      	blt.n	8007962 <adachi_map_special+0xba2>
 80078da:	e005      	b.n	80078e8 <adachi_map_special+0xb28>
 80078dc:	20000a00 	.word	0x20000a00
 80078e0:	20000b8c 	.word	0x20000b8c
 80078e4:	20000a44 	.word	0x20000a44
					&& getWall(x_adachi, y_adachi, West, &walldata.adachi) == 0
 80078e8:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80078ec:	4618      	mov	r0, r3
 80078ee:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80078f2:	4619      	mov	r1, r3
 80078f4:	4b62      	ldr	r3, [pc, #392]	; (8007a80 <adachi_map_special+0xcc0>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	f005 faaa 	bl	800ce50 <getWall>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d12f      	bne.n	8007962 <adachi_map_special+0xba2>
					&& step_map[x_adachi + 1][y_adachi]
 8007902:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007906:	3301      	adds	r3, #1
 8007908:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800790c:	4611      	mov	r1, r2
 800790e:	4a5d      	ldr	r2, [pc, #372]	; (8007a84 <adachi_map_special+0xcc4>)
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	440b      	add	r3, r1
 8007914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007918:	4619      	mov	r1, r3
							> step + nomal_value - straight_priority + 1) {
 800791a:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800791e:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007922:	441a      	add	r2, r3
 8007924:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	3301      	adds	r3, #1
					&& step_map[x_adachi + 1][y_adachi]
 800792c:	4299      	cmp	r1, r3
 800792e:	dd18      	ble.n	8007962 <adachi_map_special+0xba2>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007930:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800793a:	4413      	add	r3, r2
 800793c:	b299      	uxth	r1, r3
						- straight_priority;
 800793e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007942:	b29a      	uxth	r2, r3
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007944:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007948:	3301      	adds	r3, #1
 800794a:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- straight_priority;
 800794e:	1a8a      	subs	r2, r1, r2
 8007950:	b291      	uxth	r1, r2
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 8007952:	4a4c      	ldr	r2, [pc, #304]	; (8007a84 <adachi_map_special+0xcc4>)
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	4403      	add	r3, r0
 8007958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if ((getWall(x_adachi, y_adachi, East, &walldata.checked) == 0)
 8007962:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007966:	4618      	mov	r0, r3
 8007968:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800796c:	4619      	mov	r1, r3
 800796e:	4b46      	ldr	r3, [pc, #280]	; (8007a88 <adachi_map_special+0xcc8>)
 8007970:	2203      	movs	r2, #3
 8007972:	f005 fa6d 	bl	800ce50 <getWall>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d12f      	bne.n	80079dc <adachi_map_special+0xc1c>
					&& step_map[x_adachi + 1][y_adachi]
 800797c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007980:	3301      	adds	r3, #1
 8007982:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007986:	4611      	mov	r1, r2
 8007988:	4a3e      	ldr	r2, [pc, #248]	; (8007a84 <adachi_map_special+0xcc4>)
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	440b      	add	r3, r1
 800798e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007992:	4619      	mov	r1, r3
							> step + nomal_value - unknown_priority + 1) {
 8007994:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007998:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800799c:	441a      	add	r2, r3
 800799e:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	3301      	adds	r3, #1
					&& step_map[x_adachi + 1][y_adachi]
 80079a6:	4299      	cmp	r1, r3
 80079a8:	dd18      	ble.n	80079dc <adachi_map_special+0xc1c>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 80079aa:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80079b4:	4413      	add	r3, r2
 80079b6:	b299      	uxth	r1, r3
						- unknown_priority;
 80079b8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80079bc:	b29a      	uxth	r2, r3
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 80079be:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80079c2:	3301      	adds	r3, #1
 80079c4:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
						- unknown_priority;
 80079c8:	1a8a      	subs	r2, r1, r2
 80079ca:	b291      	uxth	r1, r2
				step_map[x_adachi + 1][y_adachi] = step + nomal_value
 80079cc:	4a2d      	ldr	r2, [pc, #180]	; (8007a84 <adachi_map_special+0xcc4>)
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	4403      	add	r3, r0
 80079d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (step_map[x_adachi + 1][y_adachi] > step + nomal_value + 1
 80079dc:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80079e0:	3301      	adds	r3, #1
 80079e2:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80079e6:	4611      	mov	r1, r2
 80079e8:	4a26      	ldr	r2, [pc, #152]	; (8007a84 <adachi_map_special+0xcc4>)
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	440b      	add	r3, r1
 80079ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80079f8:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80079fc:	4413      	add	r3, r2
 80079fe:	3301      	adds	r3, #1
 8007a00:	4299      	cmp	r1, r3
 8007a02:	dd18      	ble.n	8007a36 <adachi_map_special+0xc76>
					&& flag == 0) {
 8007a04:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d114      	bne.n	8007a36 <adachi_map_special+0xc76>
				step_map[x_adachi + 1][y_adachi] = step + nomal_value;
 8007a0c:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8007a10:	b299      	uxth	r1, r3
 8007a12:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007a16:	3301      	adds	r3, #1
 8007a18:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8007a22:	440a      	add	r2, r1
 8007a24:	b291      	uxth	r1, r2
 8007a26:	4a17      	ldr	r2, [pc, #92]	; (8007a84 <adachi_map_special+0xcc4>)
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	4403      	add	r3, r0
 8007a2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flag = 1;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
			if (flag == 1) {
 8007a36:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10d      	bne.n	8007a5a <adachi_map_special+0xc9a>
				queue_push(&q, x_adachi + 1, y_adachi);
 8007a3e:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2d9      	uxtb	r1, r3
 8007a46:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8007a4a:	f107 030c 	add.w	r3, r7, #12
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fc ff0a 	bl	8004868 <queue_push>
				flag = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			}
		}
//		//myprintf("%d,%d,%d\n", x_adachi, y_adachi, step);
	} while (q.tail != q.head);
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	f47f abdf 	bne.w	800722e <adachi_map_special+0x46e>
}
 8007a70:	bf00      	nop
 8007a72:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007a7c:	b002      	add	sp, #8
 8007a7e:	4770      	bx	lr
 8007a80:	20000a44 	.word	0x20000a44
 8007a84:	20000b8c 	.word	0x20000b8c
 8007a88:	20000a00 	.word	0x20000a00

08007a8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007a92:	463b      	mov	r3, r7
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007a9e:	4b57      	ldr	r3, [pc, #348]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007aa0:	4a57      	ldr	r2, [pc, #348]	; (8007c00 <MX_ADC1_Init+0x174>)
 8007aa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007aa4:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007aaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007aac:	4b53      	ldr	r3, [pc, #332]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007ab2:	4b52      	ldr	r3, [pc, #328]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007ab8:	4b50      	ldr	r3, [pc, #320]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8007abe:	4b4f      	ldr	r3, [pc, #316]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8007ac6:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007acc:	4b4b      	ldr	r3, [pc, #300]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ad4:	4a4b      	ldr	r2, [pc, #300]	; (8007c04 <MX_ADC1_Init+0x178>)
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007ad8:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8007ade:	4b47      	ldr	r3, [pc, #284]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007ae4:	4b45      	ldr	r3, [pc, #276]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007aec:	4b43      	ldr	r3, [pc, #268]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007af2:	4842      	ldr	r0, [pc, #264]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007af4:	f7f9 fae4 	bl	80010c0 <HAL_ADC_Init>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8007afe:	f001 f94f 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007b06:	2301      	movs	r3, #1
 8007b08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4619      	mov	r1, r3
 8007b12:	483a      	ldr	r0, [pc, #232]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b14:	f7f9 fc00 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8007b1e:	f001 f93f 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 8007b22:	2302      	movs	r3, #2
 8007b24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b26:	463b      	mov	r3, r7
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4834      	ldr	r0, [pc, #208]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b2c:	f7f9 fbf4 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8007b36:	f001 f933 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b42:	463b      	mov	r3, r7
 8007b44:	4619      	mov	r1, r3
 8007b46:	482d      	ldr	r0, [pc, #180]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b48:	f7f9 fbe6 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8007b52:	f001 f925 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 8007b56:	2304      	movs	r3, #4
 8007b58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4827      	ldr	r0, [pc, #156]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b60:	f7f9 fbda 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8007b6a:	f001 f919 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8007b72:	2305      	movs	r3, #5
 8007b74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b76:	463b      	mov	r3, r7
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4820      	ldr	r0, [pc, #128]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b7c:	f7f9 fbcc 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8007b86:	f001 f90b 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 6;
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b8e:	463b      	mov	r3, r7
 8007b90:	4619      	mov	r1, r3
 8007b92:	481a      	ldr	r0, [pc, #104]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007b94:	f7f9 fbc0 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8007b9e:	f001 f8ff 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8007ba6:	2307      	movs	r3, #7
 8007ba8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007baa:	463b      	mov	r3, r7
 8007bac:	4619      	mov	r1, r3
 8007bae:	4813      	ldr	r0, [pc, #76]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007bb0:	f7f9 fbb2 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8007bba:	f001 f8f1 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 8;
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	480d      	ldr	r0, [pc, #52]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007bc8:	f7f9 fba6 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8007bd2:	f001 f8e5 	bl	8008da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007bd6:	2309      	movs	r3, #9
 8007bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8007bda:	2309      	movs	r3, #9
 8007bdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bde:	463b      	mov	r3, r7
 8007be0:	4619      	mov	r1, r3
 8007be2:	4806      	ldr	r0, [pc, #24]	; (8007bfc <MX_ADC1_Init+0x170>)
 8007be4:	f7f9 fb98 	bl	8001318 <HAL_ADC_ConfigChannel>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8007bee:	f001 f8d7 	bl	8008da0 <Error_Handler>
  }

}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200007a4 	.word	0x200007a4
 8007c00:	40012000 	.word	0x40012000
 8007c04:	0f000001 	.word	0x0f000001

08007c08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	605a      	str	r2, [r3, #4]
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3b      	ldr	r2, [pc, #236]	; (8007d14 <HAL_ADC_MspInit+0x10c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d170      	bne.n	8007d0c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	4b3a      	ldr	r3, [pc, #232]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	4a39      	ldr	r2, [pc, #228]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c38:	6453      	str	r3, [r2, #68]	; 0x44
 8007c3a:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4b33      	ldr	r3, [pc, #204]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	4a32      	ldr	r2, [pc, #200]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6313      	str	r3, [r2, #48]	; 0x30
 8007c56:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	4a2b      	ldr	r2, [pc, #172]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c6c:	f043 0302 	orr.w	r3, r3, #2
 8007c70:	6313      	str	r3, [r2, #48]	; 0x30
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <HAL_ADC_MspInit+0x110>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 8007c7e:	230f      	movs	r3, #15
 8007c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c82:	2303      	movs	r3, #3
 8007c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4822      	ldr	r0, [pc, #136]	; (8007d1c <HAL_ADC_MspInit+0x114>)
 8007c92:	f7fa fd5d 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8007c96:	2302      	movs	r3, #2
 8007c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8007ca2:	f107 0314 	add.w	r3, r7, #20
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	481d      	ldr	r0, [pc, #116]	; (8007d20 <HAL_ADC_MspInit+0x118>)
 8007caa:	f7fa fd51 	bl	8002750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007cae:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_ADC_MspInit+0x120>)
 8007cb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007cba:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cc0:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ccc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007cde:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007ce4:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007cf0:	480c      	ldr	r0, [pc, #48]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007cf2:	f7f9 fed3 	bl	8001a9c <HAL_DMA_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8007cfc:	f001 f850 	bl	8008da0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a08      	ldr	r2, [pc, #32]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <HAL_ADC_MspInit+0x11c>)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	3728      	adds	r7, #40	; 0x28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40012000 	.word	0x40012000
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40020000 	.word	0x40020000
 8007d20:	40020400 	.word	0x40020400
 8007d24:	200007ec 	.word	0x200007ec
 8007d28:	40026410 	.word	0x40026410

08007d2c <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
//	printf("%d\n", g_ADCBuffer[0]);
//	Batt = (float) g_ADCBuffer[0] / 4095 * 3.3 * 2;
//	printf("Batt=%.4f\n", Batt);
//	printf("\n");

}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <calculation_counter>:
 */

#include "buzzer.h"
#include "variable.h"

uint16_t calculation_counter(uint16_t Hz) { //タイマピリオドの計算
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	80fb      	strh	r3, [r7, #6]
	uint16_t count; //設定する値
	if (Hz == 0) {
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <calculation_counter+0x16>
		count = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	81fb      	strh	r3, [r7, #14]
 8007d54:	e006      	b.n	8007d64 <calculation_counter+0x24>
	} else {
		count = (1000000 / Hz - 1);
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	4a06      	ldr	r2, [pc, #24]	; (8007d74 <calculation_counter+0x34>)
 8007d5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	81fb      	strh	r3, [r7, #14]
	}
	return count;
 8007d64:	89fb      	ldrh	r3, [r7, #14]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	000f4240 	.word	0x000f4240

08007d78 <set_buzzer>:

void set_buzzer(uint8_t index, uint16_t Hz, uint16_t ms) {
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
 8007d82:	460b      	mov	r3, r1
 8007d84:	80bb      	strh	r3, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	807b      	strh	r3, [r7, #2]
	buzzer_index = 0;
 8007d8a:	4b10      	ldr	r3, [pc, #64]	; (8007dcc <set_buzzer+0x54>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
	buzzer_count = 0;
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <set_buzzer+0x58>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	801a      	strh	r2, [r3, #0]
	buzzer[index].ms = ms;
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	4a0e      	ldr	r2, [pc, #56]	; (8007dd4 <set_buzzer+0x5c>)
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	887a      	ldrh	r2, [r7, #2]
 8007da0:	805a      	strh	r2, [r3, #2]
	buzzer[index].autoreload = calculation_counter(Hz);
 8007da2:	79fc      	ldrb	r4, [r7, #7]
 8007da4:	88bb      	ldrh	r3, [r7, #4]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff ffca 	bl	8007d40 <calculation_counter>
 8007dac:	4603      	mov	r3, r0
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <set_buzzer+0x5c>)
 8007db2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	buzzer[index + 1].autoreload = 0xffff;
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a06      	ldr	r2, [pc, #24]	; (8007dd4 <set_buzzer+0x5c>)
 8007dbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007dc0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}
 8007dcc:	20000652 	.word	0x20000652
 8007dd0:	2000000e 	.word	0x2000000e
 8007dd4:	200195a0 	.word	0x200195a0

08007dd8 <set_buzzer_mode>:

void set_buzzer_mode(uint8_t mode) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
	buzzer_flag = 0;
 8007de2:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <set_buzzer_mode+0xcc>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
	if (mode == 0) {
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <set_buzzer_mode+0x26>
		set_buzzer(0, C_4, 600);
 8007dee:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007df2:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007df6:	2000      	movs	r0, #0
 8007df8:	f7ff ffbe 	bl	8007d78 <set_buzzer>
 8007dfc:	e04b      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 1) {
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d107      	bne.n	8007e14 <set_buzzer_mode+0x3c>
		set_buzzer(0, D_4, 600);
 8007e04:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e08:	f44f 7193 	mov.w	r1, #294	; 0x126
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f7ff ffb3 	bl	8007d78 <set_buzzer>
 8007e12:	e040      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 2) {
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d107      	bne.n	8007e2a <set_buzzer_mode+0x52>
		set_buzzer(0, E_4, 600);
 8007e1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e1e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007e22:	2000      	movs	r0, #0
 8007e24:	f7ff ffa8 	bl	8007d78 <set_buzzer>
 8007e28:	e035      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 3) {
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d107      	bne.n	8007e40 <set_buzzer_mode+0x68>
		set_buzzer(0, F_4, 600);
 8007e30:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e34:	f240 115d 	movw	r1, #349	; 0x15d
 8007e38:	2000      	movs	r0, #0
 8007e3a:	f7ff ff9d 	bl	8007d78 <set_buzzer>
 8007e3e:	e02a      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 4) {
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d107      	bne.n	8007e56 <set_buzzer_mode+0x7e>
		set_buzzer(0, G_4, 600);
 8007e46:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e4a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8007e4e:	2000      	movs	r0, #0
 8007e50:	f7ff ff92 	bl	8007d78 <set_buzzer>
 8007e54:	e01f      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 5) {
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d107      	bne.n	8007e6c <set_buzzer_mode+0x94>
		set_buzzer(0, A_4, 600);
 8007e5c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e60:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff ff87 	bl	8007d78 <set_buzzer>
 8007e6a:	e014      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 6) {
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	d107      	bne.n	8007e82 <set_buzzer_mode+0xaa>
		set_buzzer(0, B_4, 600);
 8007e72:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e76:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7ff ff7c 	bl	8007d78 <set_buzzer>
 8007e80:	e009      	b.n	8007e96 <set_buzzer_mode+0xbe>
	} else if (mode == 7) {
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b07      	cmp	r3, #7
 8007e86:	d106      	bne.n	8007e96 <set_buzzer_mode+0xbe>
		set_buzzer(0, C_5, 600);
 8007e88:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007e8c:	f240 210b 	movw	r1, #523	; 0x20b
 8007e90:	2000      	movs	r0, #0
 8007e92:	f7ff ff71 	bl	8007d78 <set_buzzer>
	}
	buzzer_flag = 1;
 8007e96:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <set_buzzer_mode+0xcc>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	701a      	strb	r2, [r3, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000653 	.word	0x20000653

08007ea8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <MX_DMA_Init+0x3c>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	4a0b      	ldr	r2, [pc, #44]	; (8007ee4 <MX_DMA_Init+0x3c>)
 8007eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <MX_DMA_Init+0x3c>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	607b      	str	r3, [r7, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	2038      	movs	r0, #56	; 0x38
 8007ed0:	f7f9 fdad 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007ed4:	2038      	movs	r0, #56	; 0x38
 8007ed6:	f7f9 fdc6 	bl	8001a66 <HAL_NVIC_EnableIRQ>

}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40023800 	.word	0x40023800

08007ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	605a      	str	r2, [r3, #4]
 8007ef8:	609a      	str	r2, [r3, #8]
 8007efa:	60da      	str	r2, [r3, #12]
 8007efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	4b48      	ldr	r3, [pc, #288]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	4a47      	ldr	r2, [pc, #284]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f08:	f043 0304 	orr.w	r3, r3, #4
 8007f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f0e:	4b45      	ldr	r3, [pc, #276]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	4b41      	ldr	r3, [pc, #260]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	4a40      	ldr	r2, [pc, #256]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	6313      	str	r3, [r2, #48]	; 0x30
 8007f2a:	4b3e      	ldr	r3, [pc, #248]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	4b3a      	ldr	r3, [pc, #232]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	4a39      	ldr	r2, [pc, #228]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	6313      	str	r3, [r2, #48]	; 0x30
 8007f46:	4b37      	ldr	r3, [pc, #220]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	4b33      	ldr	r3, [pc, #204]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	4a32      	ldr	r2, [pc, #200]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f5c:	f043 0302 	orr.w	r3, r3, #2
 8007f60:	6313      	str	r3, [r2, #48]	; 0x30
 8007f62:	4b30      	ldr	r3, [pc, #192]	; (8008024 <MX_GPIO_Init+0x13c>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UI_LED_CENTER_Pin|SENLED_R_Pin, GPIO_PIN_RESET);
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8007f74:	482c      	ldr	r0, [pc, #176]	; (8008028 <MX_GPIO_Init+0x140>)
 8007f76:	f7fa fd95 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|FLAG_LED_Pin 
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f641 2170 	movw	r1, #6768	; 0x1a70
 8007f80:	482a      	ldr	r0, [pc, #168]	; (800802c <MX_GPIO_Init+0x144>)
 8007f82:	f7fa fd8f 	bl	8002aa4 <HAL_GPIO_WritePin>
                          |UI_LED_RIGHT_Pin|SENLED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, GPIO_PIN_RESET);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4829      	ldr	r0, [pc, #164]	; (8008030 <MX_GPIO_Init+0x148>)
 8007f8c:	f7fa fd8a 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 8007f90:	2201      	movs	r2, #1
 8007f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f96:	4825      	ldr	r0, [pc, #148]	; (800802c <MX_GPIO_Init+0x144>)
 8007f98:	f7fa fd84 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin|MOTER_L_CWCCW_Pin, GPIO_PIN_SET);
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007fa2:	4823      	ldr	r0, [pc, #140]	; (8008030 <MX_GPIO_Init+0x148>)
 8007fa4:	f7fa fd7e 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UI_LED_CENTER_Pin|SENLED_R_Pin;
 8007fa8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fba:	f107 0314 	add.w	r3, r7, #20
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4819      	ldr	r0, [pc, #100]	; (8008028 <MX_GPIO_Init+0x140>)
 8007fc2:	f7fa fbc5 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 8007fc6:	f641 3370 	movw	r3, #7024	; 0x1b70
 8007fca:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|UI_LED_RIGHT_Pin|SENLED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4813      	ldr	r0, [pc, #76]	; (800802c <MX_GPIO_Init+0x144>)
 8007fe0:	f7fa fbb6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 8007fe4:	f240 33c1 	movw	r3, #961	; 0x3c1
 8007fe8:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	480c      	ldr	r0, [pc, #48]	; (8008030 <MX_GPIO_Init+0x148>)
 8007ffe:	f7fa fba7 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8008002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800800c:	2301      	movs	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	4619      	mov	r1, r3
 8008016:	4806      	ldr	r0, [pc, #24]	; (8008030 <MX_GPIO_Init+0x148>)
 8008018:	f7fa fb9a 	bl	8002750 <HAL_GPIO_Init>

}
 800801c:	bf00      	nop
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40023800 	.word	0x40023800
 8008028:	40020800 	.word	0x40020800
 800802c:	40020000 	.word	0x40020000
 8008030:	40020400 	.word	0x40020400

08008034 <interrupt_1ms>:
#include "interrupt.h"

void buzzer_1ms(void);
void adc_1ms(void);

void interrupt_1ms(void) {
 8008034:	b5b0      	push	{r4, r5, r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af06      	add	r7, sp, #24

//	real_L.vel = read_vel(LEFT); //mm/sec
//	real_R.vel = read_vel(RIGHT);

//encoder
	if (mode & 0x80) { //in_mode　モード中
 800803a:	4b90      	ldr	r3, [pc, #576]	; (800827c <interrupt_1ms+0x248>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b25b      	sxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	da18      	bge.n	8008076 <interrupt_1ms+0x42>
//		test_L = read_vel(LEFT); //mm/sec
//		test_R = read_vel(RIGHT);
//		read_vel2(&real_L.vel, &real_R.vel);
		real_L.vel = read_vel(LEFT); //mm/sec
 8008044:	2000      	movs	r0, #0
 8008046:	f003 f9e7 	bl	800b418 <read_vel>
 800804a:	eef0 7a40 	vmov.f32	s15, s0
 800804e:	4b8c      	ldr	r3, [pc, #560]	; (8008280 <interrupt_1ms+0x24c>)
 8008050:	edc3 7a01 	vstr	s15, [r3, #4]
		real_R.vel = read_vel(RIGHT);
 8008054:	2001      	movs	r0, #1
 8008056:	f003 f9df 	bl	800b418 <read_vel>
 800805a:	eef0 7a40 	vmov.f32	s15, s0
 800805e:	4b89      	ldr	r3, [pc, #548]	; (8008284 <interrupt_1ms+0x250>)
 8008060:	edc3 7a01 	vstr	s15, [r3, #4]
		integral_1ms(&real_vel_from_acc, &real_acc);
 8008064:	4988      	ldr	r1, [pc, #544]	; (8008288 <interrupt_1ms+0x254>)
 8008066:	4889      	ldr	r0, [pc, #548]	; (800828c <interrupt_1ms+0x258>)
 8008068:	f003 faca 	bl	800b600 <integral_1ms>
		integral_1ms(&real_diss_from_acc, &real_vel_from_acc);
 800806c:	4987      	ldr	r1, [pc, #540]	; (800828c <interrupt_1ms+0x258>)
 800806e:	4888      	ldr	r0, [pc, #544]	; (8008290 <interrupt_1ms+0x25c>)
 8008070:	f003 fac6 	bl	800b600 <integral_1ms>
 8008074:	e00f      	b.n	8008096 <interrupt_1ms+0x62>

//		real_L.vel = read_vel(LEFT); //mm/sec
//		real_R.vel = read_vel(RIGHT);
	} else {
		real_L.vel = read_vel(LEFT); //mm/sec
 8008076:	2000      	movs	r0, #0
 8008078:	f003 f9ce 	bl	800b418 <read_vel>
 800807c:	eef0 7a40 	vmov.f32	s15, s0
 8008080:	4b7f      	ldr	r3, [pc, #508]	; (8008280 <interrupt_1ms+0x24c>)
 8008082:	edc3 7a01 	vstr	s15, [r3, #4]
		real_R.vel = read_vel(RIGHT);
 8008086:	2001      	movs	r0, #1
 8008088:	f003 f9c6 	bl	800b418 <read_vel>
 800808c:	eef0 7a40 	vmov.f32	s15, s0
 8008090:	4b7c      	ldr	r3, [pc, #496]	; (8008284 <interrupt_1ms+0x250>)
 8008092:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	integral_1ms(&real_L.dis, &real_L.vel);
 8008096:	497f      	ldr	r1, [pc, #508]	; (8008294 <interrupt_1ms+0x260>)
 8008098:	487f      	ldr	r0, [pc, #508]	; (8008298 <interrupt_1ms+0x264>)
 800809a:	f003 fab1 	bl	800b600 <integral_1ms>
	integral_1ms(&real_R.dis, &real_R.vel);
 800809e:	497f      	ldr	r1, [pc, #508]	; (800829c <interrupt_1ms+0x268>)
 80080a0:	487f      	ldr	r0, [pc, #508]	; (80082a0 <interrupt_1ms+0x26c>)
 80080a2:	f003 faad 	bl	800b600 <integral_1ms>
	//encoder
//buzzer
	buzzer_1ms();
 80080a6:	f000 f9a3 	bl	80083f0 <buzzer_1ms>
//buzzer

//	real_acc=read_accel();

	if (log_flag == 1) {
 80080aa:	4b7e      	ldr	r3, [pc, #504]	; (80082a4 <interrupt_1ms+0x270>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <interrupt_1ms+0x82>
		log_sampling();
 80080b2:	f002 faab 	bl	800a60c <log_sampling>
	}

//ADC
	if (SEN_check_flag == 1) {
 80080b6:	4b7c      	ldr	r3, [pc, #496]	; (80082a8 <interrupt_1ms+0x274>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <interrupt_1ms+0x8e>
		adc_1ms();
 80080be:	f000 fa0b 	bl	80084d8 <adc_1ms>
	}
//ADC

//failsafe判定 //|| failsafe_accel > 3.0  real_R.vel > 2000.0 || real_L.vel > 2000.0||
	if ((rotation_deviation.cumulative > 20000.0 //200000
 80080c2:	4b7a      	ldr	r3, [pc, #488]	; (80082ac <interrupt_1ms+0x278>)
 80080c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80080c8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80082b0 <interrupt_1ms+0x27c>
 80080cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	dc09      	bgt.n	80080ea <interrupt_1ms+0xb6>
	|| rotation_deviation.cumulative < -20000.0)
 80080d6:	4b75      	ldr	r3, [pc, #468]	; (80082ac <interrupt_1ms+0x278>)
 80080d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80080dc:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80082b4 <interrupt_1ms+0x280>
 80080e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e8:	d50a      	bpl.n	8008100 <interrupt_1ms+0xcc>
			&& translation_parameter.back_rightturn_flag == 0
 80080ea:	4b73      	ldr	r3, [pc, #460]	; (80082b8 <interrupt_1ms+0x284>)
 80080ec:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <interrupt_1ms+0xcc>
			&& failsafe_flag == 0) { //|| failsafe_accel > 39.2
 80080f4:	4b71      	ldr	r3, [pc, #452]	; (80082bc <interrupt_1ms+0x288>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <interrupt_1ms+0xcc>
		failsafe();
 80080fc:	f000 fb88 	bl	8008810 <failsafe>
//		printf("R_vel=%6.2f,L_vel=%6.2f,rot_dev=%9.2f,acc=%5.2f\n", real_R.vel,
//				real_L.vel, rotation_deviation.cumulative, failsafe_accel);
	}

	//failsafe処理
	if (failsafe_flag == 1 && failsafe_counter < 1000) {
 8008100:	4b6e      	ldr	r3, [pc, #440]	; (80082bc <interrupt_1ms+0x288>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d12c      	bne.n	8008162 <interrupt_1ms+0x12e>
 8008108:	4b6d      	ldr	r3, [pc, #436]	; (80082c0 <interrupt_1ms+0x28c>)
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008110:	d227      	bcs.n	8008162 <interrupt_1ms+0x12e>
		//	ui_led_3bit(7);
		ideal_translation.accel = 0.0;
 8008112:	4b6c      	ldr	r3, [pc, #432]	; (80082c4 <interrupt_1ms+0x290>)
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
		ideal_translation.vel = 0.0;
 800811a:	4b6a      	ldr	r3, [pc, #424]	; (80082c4 <interrupt_1ms+0x290>)
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	605a      	str	r2, [r3, #4]
		run_left_deviation.cumulative = 0.0;
 8008122:	4b69      	ldr	r3, [pc, #420]	; (80082c8 <interrupt_1ms+0x294>)
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	605a      	str	r2, [r3, #4]
		run_right_deviation.cumulative = 0.0;
 800812a:	4b68      	ldr	r3, [pc, #416]	; (80082cc <interrupt_1ms+0x298>)
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	605a      	str	r2, [r3, #4]
		failsafe_counter++;
 8008132:	4b63      	ldr	r3, [pc, #396]	; (80082c0 <interrupt_1ms+0x28c>)
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	4b61      	ldr	r3, [pc, #388]	; (80082c0 <interrupt_1ms+0x28c>)
 800813c:	801a      	strh	r2, [r3, #0]

		PID_control(&ideal_translation, &real_L, &real_R, &run_left_deviation,
 800813e:	2300      	movs	r3, #0
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	4b63      	ldr	r3, [pc, #396]	; (80082d0 <interrupt_1ms+0x29c>)
 8008144:	9303      	str	r3, [sp, #12]
 8008146:	4b5c      	ldr	r3, [pc, #368]	; (80082b8 <interrupt_1ms+0x284>)
 8008148:	9302      	str	r3, [sp, #8]
 800814a:	4b62      	ldr	r3, [pc, #392]	; (80082d4 <interrupt_1ms+0x2a0>)
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	4b5f      	ldr	r3, [pc, #380]	; (80082cc <interrupt_1ms+0x298>)
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4b5d      	ldr	r3, [pc, #372]	; (80082c8 <interrupt_1ms+0x294>)
 8008154:	4a4b      	ldr	r2, [pc, #300]	; (8008284 <interrupt_1ms+0x250>)
 8008156:	494a      	ldr	r1, [pc, #296]	; (8008280 <interrupt_1ms+0x24c>)
 8008158:	485a      	ldr	r0, [pc, #360]	; (80082c4 <interrupt_1ms+0x290>)
 800815a:	f003 f897 	bl	800b28c <PID_control>
				&run_right_deviation, &run_gain, &translation_parameter, &duty,
				0);
		duty_to_moter();
 800815e:	f002 ff2f 	bl	800afc0 <duty_to_moter>
	}

	if (mode & 0x80) { //in_mode　モード中
 8008162:	4b46      	ldr	r3, [pc, #280]	; (800827c <interrupt_1ms+0x248>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	b25b      	sxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	f280 8125 	bge.w	80083b8 <interrupt_1ms+0x384>
		//gyro
		real_rotation.vel = read_gyro();
 800816e:	f002 f84f 	bl	800a210 <read_gyro>
 8008172:	eef0 7a40 	vmov.f32	s15, s0
 8008176:	4b58      	ldr	r3, [pc, #352]	; (80082d8 <interrupt_1ms+0x2a4>)
 8008178:	edc3 7a01 	vstr	s15, [r3, #4]
		integral_1ms(&real_rotation.dis, &real_rotation.vel); //角速度から角度に
 800817c:	4957      	ldr	r1, [pc, #348]	; (80082dc <interrupt_1ms+0x2a8>)
 800817e:	4858      	ldr	r0, [pc, #352]	; (80082e0 <interrupt_1ms+0x2ac>)
 8008180:	f003 fa3e 	bl	800b600 <integral_1ms>
		//gyro
		failsafe_accel = read_accel();
 8008184:	f002 f890 	bl	800a2a8 <read_accel>
 8008188:	eef0 7a40 	vmov.f32	s15, s0
 800818c:	4b55      	ldr	r3, [pc, #340]	; (80082e4 <interrupt_1ms+0x2b0>)
 800818e:	edc3 7a00 	vstr	s15, [r3]

		if (angle_calibration_flag == 1) {
 8008192:	4b55      	ldr	r3, [pc, #340]	; (80082e8 <interrupt_1ms+0x2b4>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d123      	bne.n	80081e2 <interrupt_1ms+0x1ae>
			angle_calibration_counter++;
 800819a:	4b54      	ldr	r3, [pc, #336]	; (80082ec <interrupt_1ms+0x2b8>)
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	3301      	adds	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	4b52      	ldr	r3, [pc, #328]	; (80082ec <interrupt_1ms+0x2b8>)
 80081a4:	801a      	strh	r2, [r3, #0]
			angle_calibration_integral += real_rotation.vel;
 80081a6:	4b4c      	ldr	r3, [pc, #304]	; (80082d8 <interrupt_1ms+0x2a4>)
 80081a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80081ac:	4b50      	ldr	r3, [pc, #320]	; (80082f0 <interrupt_1ms+0x2bc>)
 80081ae:	edd3 7a00 	vldr	s15, [r3]
 80081b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081b6:	4b4e      	ldr	r3, [pc, #312]	; (80082f0 <interrupt_1ms+0x2bc>)
 80081b8:	edc3 7a00 	vstr	s15, [r3]
			accel_calibration_integral += real_acc;
 80081bc:	4b4d      	ldr	r3, [pc, #308]	; (80082f4 <interrupt_1ms+0x2c0>)
 80081be:	ed93 7a00 	vldr	s14, [r3]
 80081c2:	4b31      	ldr	r3, [pc, #196]	; (8008288 <interrupt_1ms+0x254>)
 80081c4:	edd3 7a00 	vldr	s15, [r3]
 80081c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081cc:	4b49      	ldr	r3, [pc, #292]	; (80082f4 <interrupt_1ms+0x2c0>)
 80081ce:	edc3 7a00 	vstr	s15, [r3]
			if (angle_calibration_counter == 2048) {
 80081d2:	4b46      	ldr	r3, [pc, #280]	; (80082ec <interrupt_1ms+0x2b8>)
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081da:	d102      	bne.n	80081e2 <interrupt_1ms+0x1ae>
				angle_calibration_flag = 0;
 80081dc:	4b42      	ldr	r3, [pc, #264]	; (80082e8 <interrupt_1ms+0x2b4>)
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
			}
		}


		wall_control();
 80081e2:	f003 fab5 	bl	800b750 <wall_control>


//			wallcontrol_value = 0.0;

		if (moter_flag == 1 && failsafe_flag == 0) {
 80081e6:	4b44      	ldr	r3, [pc, #272]	; (80082f8 <interrupt_1ms+0x2c4>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	f040 80d7 	bne.w	800839e <interrupt_1ms+0x36a>
 80081f0:	4b32      	ldr	r3, [pc, #200]	; (80082bc <interrupt_1ms+0x288>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 80d2 	bne.w	800839e <interrupt_1ms+0x36a>
			if (front_wall_flag == 0) {
 80081fa:	4b40      	ldr	r3, [pc, #256]	; (80082fc <interrupt_1ms+0x2c8>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 8084 	bne.w	800830c <interrupt_1ms+0x2d8>
				if (translation_parameter.run_flag == 1) {
 8008204:	4b2c      	ldr	r3, [pc, #176]	; (80082b8 <interrupt_1ms+0x284>)
 8008206:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800820a:	2b01      	cmp	r3, #1
 800820c:	d104      	bne.n	8008218 <interrupt_1ms+0x1e4>
					control_accel(&ideal_translation, &translation_parameter,
 800820e:	2200      	movs	r2, #0
 8008210:	4929      	ldr	r1, [pc, #164]	; (80082b8 <interrupt_1ms+0x284>)
 8008212:	482c      	ldr	r0, [pc, #176]	; (80082c4 <interrupt_1ms+0x290>)
 8008214:	f002 ff56 	bl	800b0c4 <control_accel>
							0);
				}
				if (rotation_parameter.run_flag == 1) {
 8008218:	4b39      	ldr	r3, [pc, #228]	; (8008300 <interrupt_1ms+0x2cc>)
 800821a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800821e:	2b01      	cmp	r3, #1
 8008220:	d107      	bne.n	8008232 <interrupt_1ms+0x1fe>
					control_accel(&ideal_rotation, &rotation_parameter, 1);
 8008222:	2201      	movs	r2, #1
 8008224:	4936      	ldr	r1, [pc, #216]	; (8008300 <interrupt_1ms+0x2cc>)
 8008226:	4837      	ldr	r0, [pc, #220]	; (8008304 <interrupt_1ms+0x2d0>)
 8008228:	f002 ff4c 	bl	800b0c4 <control_accel>
					integral_ideal(&ideal_rotation);
 800822c:	4835      	ldr	r0, [pc, #212]	; (8008304 <interrupt_1ms+0x2d0>)
 800822e:	f003 fa17 	bl	800b660 <integral_ideal>
				}
//				ideal_rotation.vel-=wallcontrol_value;
				PID_control(&ideal_translation, &real_L, &real_R,
 8008232:	2300      	movs	r3, #0
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	4b26      	ldr	r3, [pc, #152]	; (80082d0 <interrupt_1ms+0x29c>)
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <interrupt_1ms+0x284>)
 800823c:	9302      	str	r3, [sp, #8]
 800823e:	4b25      	ldr	r3, [pc, #148]	; (80082d4 <interrupt_1ms+0x2a0>)
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	4b22      	ldr	r3, [pc, #136]	; (80082cc <interrupt_1ms+0x298>)
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4b20      	ldr	r3, [pc, #128]	; (80082c8 <interrupt_1ms+0x294>)
 8008248:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <interrupt_1ms+0x250>)
 800824a:	490d      	ldr	r1, [pc, #52]	; (8008280 <interrupt_1ms+0x24c>)
 800824c:	481d      	ldr	r0, [pc, #116]	; (80082c4 <interrupt_1ms+0x290>)
 800824e:	f003 f81d 	bl	800b28c <PID_control>
						&run_left_deviation, &run_right_deviation, &run_gain,
						&translation_parameter, &duty, 0);
//				if (translation_parameter.back_rightturn_flag == 0
//						|| ideal_translation.vel > 50.0) {
					PID_control(&ideal_rotation, &real_rotation, &real_rotation,
 8008252:	2301      	movs	r3, #1
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <interrupt_1ms+0x29c>)
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	4b29      	ldr	r3, [pc, #164]	; (8008300 <interrupt_1ms+0x2cc>)
 800825c:	9302      	str	r3, [sp, #8]
 800825e:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <interrupt_1ms+0x2d4>)
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <interrupt_1ms+0x278>)
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4b11      	ldr	r3, [pc, #68]	; (80082ac <interrupt_1ms+0x278>)
 8008268:	4a1b      	ldr	r2, [pc, #108]	; (80082d8 <interrupt_1ms+0x2a4>)
 800826a:	491b      	ldr	r1, [pc, #108]	; (80082d8 <interrupt_1ms+0x2a4>)
 800826c:	4825      	ldr	r0, [pc, #148]	; (8008304 <interrupt_1ms+0x2d0>)
 800826e:	f003 f80d 	bl	800b28c <PID_control>
							&rotation_deviation, &rotation_deviation,
							&rotation_gain, &rotation_parameter, &duty, 1);
//				}
				integral_ideal(&ideal_translation);
 8008272:	4814      	ldr	r0, [pc, #80]	; (80082c4 <interrupt_1ms+0x290>)
 8008274:	f003 f9f4 	bl	800b660 <integral_ideal>
 8008278:	e08f      	b.n	800839a <interrupt_1ms+0x366>
 800827a:	bf00      	nop
 800827c:	20000651 	.word	0x20000651
 8008280:	20019568 	.word	0x20019568
 8008284:	20000e9c 	.word	0x20000e9c
 8008288:	20019828 	.word	0x20019828
 800828c:	2000068c 	.word	0x2000068c
 8008290:	20000690 	.word	0x20000690
 8008294:	2001956c 	.word	0x2001956c
 8008298:	20019570 	.word	0x20019570
 800829c:	20000ea0 	.word	0x20000ea0
 80082a0:	20000ea4 	.word	0x20000ea4
 80082a4:	20000672 	.word	0x20000672
 80082a8:	2000066b 	.word	0x2000066b
 80082ac:	2001981c 	.word	0x2001981c
 80082b0:	469c4000 	.word	0x469c4000
 80082b4:	c69c4000 	.word	0xc69c4000
 80082b8:	20019574 	.word	0x20019574
 80082bc:	2000065c 	.word	0x2000065c
 80082c0:	20000668 	.word	0x20000668
 80082c4:	2001961c 	.word	0x2001961c
 80082c8:	20019648 	.word	0x20019648
 80082cc:	20032290 	.word	0x20032290
 80082d0:	20032144 	.word	0x20032144
 80082d4:	2000001c 	.word	0x2000001c
 80082d8:	20019860 	.word	0x20019860
 80082dc:	20019864 	.word	0x20019864
 80082e0:	20019868 	.word	0x20019868
 80082e4:	20000680 	.word	0x20000680
 80082e8:	20000678 	.word	0x20000678
 80082ec:	2003226c 	.word	0x2003226c
 80082f0:	2000067c 	.word	0x2000067c
 80082f4:	20000694 	.word	0x20000694
 80082f8:	2000066a 	.word	0x2000066a
 80082fc:	20000688 	.word	0x20000688
 8008300:	2001982c 	.word	0x2001982c
 8008304:	20000e90 	.word	0x20000e90
 8008308:	20000010 	.word	0x20000010

			} else {
				duty.left = (int) (front_wall_gain
						* (front_wall_value_L - SEN_LF.now));
 800830c:	4b2e      	ldr	r3, [pc, #184]	; (80083c8 <interrupt_1ms+0x394>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <interrupt_1ms+0x398>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800831e:	4b2c      	ldr	r3, [pc, #176]	; (80083d0 <interrupt_1ms+0x39c>)
 8008320:	edd3 7a00 	vldr	s15, [r3]
 8008324:	ee67 7a27 	vmul.f32	s15, s14, s15
				duty.left = (int) (front_wall_gain
 8008328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800832c:	ee17 2a90 	vmov	r2, s15
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <interrupt_1ms+0x3a0>)
 8008332:	601a      	str	r2, [r3, #0]
				if (duty.left > 70) {
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <interrupt_1ms+0x3a0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b46      	cmp	r3, #70	; 0x46
 800833a:	dd02      	ble.n	8008342 <interrupt_1ms+0x30e>
					duty.left = 70;
 800833c:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <interrupt_1ms+0x3a0>)
 800833e:	2246      	movs	r2, #70	; 0x46
 8008340:	601a      	str	r2, [r3, #0]
				}
				duty.right = (int) (front_wall_gain * 0.5
 8008342:	4b23      	ldr	r3, [pc, #140]	; (80083d0 <interrupt_1ms+0x39c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7f8 f926 	bl	8000598 <__aeabi_f2d>
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	4b21      	ldr	r3, [pc, #132]	; (80083d8 <interrupt_1ms+0x3a4>)
 8008352:	f7f8 f979 	bl	8000648 <__aeabi_dmul>
 8008356:	4603      	mov	r3, r0
 8008358:	460c      	mov	r4, r1
 800835a:	4625      	mov	r5, r4
 800835c:	461c      	mov	r4, r3
						* (front_wall_value_R - SEN_RF.now));
 800835e:	4b1f      	ldr	r3, [pc, #124]	; (80083dc <interrupt_1ms+0x3a8>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b1f      	ldr	r3, [pc, #124]	; (80083e0 <interrupt_1ms+0x3ac>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	4618      	mov	r0, r3
 800836a:	f7f8 f903 	bl	8000574 <__aeabi_i2d>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 f967 	bl	8000648 <__aeabi_dmul>
 800837a:	4603      	mov	r3, r0
 800837c:	460c      	mov	r4, r1
				duty.right = (int) (front_wall_gain * 0.5
 800837e:	4618      	mov	r0, r3
 8008380:	4621      	mov	r1, r4
 8008382:	f7f8 fc11 	bl	8000ba8 <__aeabi_d2iz>
 8008386:	4602      	mov	r2, r0
 8008388:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <interrupt_1ms+0x3a0>)
 800838a:	605a      	str	r2, [r3, #4]
				if (duty.right > 70) {
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <interrupt_1ms+0x3a0>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b46      	cmp	r3, #70	; 0x46
 8008392:	dd02      	ble.n	800839a <interrupt_1ms+0x366>
					duty.right = 70;
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <interrupt_1ms+0x3a0>)
 8008396:	2246      	movs	r2, #70	; 0x46
 8008398:	605a      	str	r2, [r3, #4]
				}
			}

			duty_to_moter();
 800839a:	f002 fe11 	bl	800afc0 <duty_to_moter>
		}

		if (moter_flag == 0) {
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <interrupt_1ms+0x3b0>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10c      	bne.n	80083c0 <interrupt_1ms+0x38c>
			duty.left = 0;
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <interrupt_1ms+0x3a0>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
			duty.right = 0;
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <interrupt_1ms+0x3a0>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	605a      	str	r2, [r3, #4]
			duty_to_moter();
 80083b2:	f002 fe05 	bl	800afc0 <duty_to_moter>
//	if (Batt < 3.72) {
//		low_batt_flag = 0xff;
//	} else {
//		//low_batt_flag = 0;
//	}
}
 80083b6:	e003      	b.n	80083c0 <interrupt_1ms+0x38c>
		integral_1ms(&mode_select_dis, &real_R.vel);
 80083b8:	490b      	ldr	r1, [pc, #44]	; (80083e8 <interrupt_1ms+0x3b4>)
 80083ba:	480c      	ldr	r0, [pc, #48]	; (80083ec <interrupt_1ms+0x3b8>)
 80083bc:	f003 f920 	bl	800b600 <integral_1ms>
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bdb0      	pop	{r4, r5, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20019618 	.word	0x20019618
 80083cc:	2003214c 	.word	0x2003214c
 80083d0:	20019658 	.word	0x20019658
 80083d4:	20032144 	.word	0x20032144
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	2001954c 	.word	0x2001954c
 80083e0:	200197fc 	.word	0x200197fc
 80083e4:	2000066a 	.word	0x2000066a
 80083e8:	20000ea0 	.word	0x20000ea0
 80083ec:	20000660 	.word	0x20000660

080083f0 <buzzer_1ms>:

void buzzer_1ms(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
	if (buzzer[buzzer_index].autoreload != 0xffff && buzzer_flag == 1) {
 80083f4:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <buzzer_1ms+0xd4>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	4b33      	ldr	r3, [pc, #204]	; (80084c8 <buzzer_1ms+0xd8>)
 80083fc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8008400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008404:	4293      	cmp	r3, r2
 8008406:	d040      	beq.n	800848a <buzzer_1ms+0x9a>
 8008408:	4b30      	ldr	r3, [pc, #192]	; (80084cc <buzzer_1ms+0xdc>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d13c      	bne.n	800848a <buzzer_1ms+0x9a>
		if (buzzer_count == 0) {
 8008410:	4b2f      	ldr	r3, [pc, #188]	; (80084d0 <buzzer_1ms+0xe0>)
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d131      	bne.n	800847c <buzzer_1ms+0x8c>
			if (buzzer[buzzer_index].autoreload != 0) {
 8008418:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <buzzer_1ms+0xd4>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <buzzer_1ms+0xd8>)
 8008420:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d025      	beq.n	8008474 <buzzer_1ms+0x84>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8008428:	2104      	movs	r1, #4
 800842a:	482a      	ldr	r0, [pc, #168]	; (80084d4 <buzzer_1ms+0xe4>)
 800842c:	f7fb fad2 	bl	80039d4 <HAL_TIM_PWM_Stop>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,
 8008430:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <buzzer_1ms+0xd4>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <buzzer_1ms+0xd8>)
 8008438:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <buzzer_1ms+0xe4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	635a      	str	r2, [r3, #52]	; 0x34
						buzzer[buzzer_index].autoreload / 2);
				__HAL_TIM_SET_AUTORELOAD(&htim3,
 8008446:	4b1f      	ldr	r3, [pc, #124]	; (80084c4 <buzzer_1ms+0xd4>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <buzzer_1ms+0xd8>)
 800844e:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8008452:	4b20      	ldr	r3, [pc, #128]	; (80084d4 <buzzer_1ms+0xe4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <buzzer_1ms+0xd4>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <buzzer_1ms+0xd8>)
 8008460:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8008464:	461a      	mov	r2, r3
 8008466:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <buzzer_1ms+0xe4>)
 8008468:	60da      	str	r2, [r3, #12]
						buzzer[buzzer_index].autoreload);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800846a:	2104      	movs	r1, #4
 800846c:	4819      	ldr	r0, [pc, #100]	; (80084d4 <buzzer_1ms+0xe4>)
 800846e:	f7fb fa73 	bl	8003958 <HAL_TIM_PWM_Start>
 8008472:	e003      	b.n	800847c <buzzer_1ms+0x8c>
			} else {
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8008474:	2104      	movs	r1, #4
 8008476:	4817      	ldr	r0, [pc, #92]	; (80084d4 <buzzer_1ms+0xe4>)
 8008478:	f7fb faac 	bl	80039d4 <HAL_TIM_PWM_Stop>
			}
		}
		buzzer_count++;
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <buzzer_1ms+0xe0>)
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <buzzer_1ms+0xe0>)
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e006      	b.n	8008498 <buzzer_1ms+0xa8>
	} else {
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800848a:	2104      	movs	r1, #4
 800848c:	4811      	ldr	r0, [pc, #68]	; (80084d4 <buzzer_1ms+0xe4>)
 800848e:	f7fb faa1 	bl	80039d4 <HAL_TIM_PWM_Stop>
		buzzer_count = 0;
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <buzzer_1ms+0xe0>)
 8008494:	2200      	movs	r2, #0
 8008496:	801a      	strh	r2, [r3, #0]
	}

	if (buzzer_count == buzzer[buzzer_index].ms) {
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <buzzer_1ms+0xd4>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <buzzer_1ms+0xd8>)
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	885a      	ldrh	r2, [r3, #2]
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <buzzer_1ms+0xe0>)
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d108      	bne.n	80084be <buzzer_1ms+0xce>
		buzzer_count = 0;
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <buzzer_1ms+0xe0>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	801a      	strh	r2, [r3, #0]
		buzzer_index++;
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <buzzer_1ms+0xd4>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	3301      	adds	r3, #1
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <buzzer_1ms+0xd4>)
 80084bc:	701a      	strb	r2, [r3, #0]
	}
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000652 	.word	0x20000652
 80084c8:	200195a0 	.word	0x200195a0
 80084cc:	20000653 	.word	0x20000653
 80084d0:	2000000e 	.word	0x2000000e
 80084d4:	200008fc 	.word	0x200008fc

080084d8 <adc_1ms>:

void adc_1ms(void) {
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, 0);
 80084de:	2200      	movs	r2, #0
 80084e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084e4:	4881      	ldr	r0, [pc, #516]	; (80086ec <adc_1ms+0x214>)
 80084e6:	f7fa fadd 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	71fb      	strb	r3, [r7, #7]
 80084ee:	e002      	b.n	80084f6 <adc_1ms+0x1e>
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	3301      	adds	r3, #1
 80084f4:	71fb      	strb	r3, [r7, #7]
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b63      	cmp	r3, #99	; 0x63
 80084fa:	d9f9      	bls.n	80084f0 <adc_1ms+0x18>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80084fc:	2209      	movs	r2, #9
 80084fe:	497c      	ldr	r1, [pc, #496]	; (80086f0 <adc_1ms+0x218>)
 8008500:	487c      	ldr	r0, [pc, #496]	; (80086f4 <adc_1ms+0x21c>)
 8008502:	f7f8 fe21 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, 1);
 8008506:	2201      	movs	r2, #1
 8008508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800850c:	4877      	ldr	r0, [pc, #476]	; (80086ec <adc_1ms+0x214>)
 800850e:	f7fa fac9 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008512:	2300      	movs	r3, #0
 8008514:	71bb      	strb	r3, [r7, #6]
 8008516:	e002      	b.n	800851e <adc_1ms+0x46>
 8008518:	79bb      	ldrb	r3, [r7, #6]
 800851a:	3301      	adds	r3, #1
 800851c:	71bb      	strb	r3, [r7, #6]
 800851e:	79bb      	ldrb	r3, [r7, #6]
 8008520:	2b63      	cmp	r3, #99	; 0x63
 8008522:	d9f9      	bls.n	8008518 <adc_1ms+0x40>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008524:	2209      	movs	r2, #9
 8008526:	4972      	ldr	r1, [pc, #456]	; (80086f0 <adc_1ms+0x218>)
 8008528:	4872      	ldr	r0, [pc, #456]	; (80086f4 <adc_1ms+0x21c>)
 800852a:	f7f8 fe0d 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_RF.now = (g_ADCBuffer[0] - g_ADCBuffer[1]) * 2;
 800852e:	4b70      	ldr	r3, [pc, #448]	; (80086f0 <adc_1ms+0x218>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	4b6e      	ldr	r3, [pc, #440]	; (80086f0 <adc_1ms+0x218>)
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	4a6e      	ldr	r2, [pc, #440]	; (80086f8 <adc_1ms+0x220>)
 800853e:	6013      	str	r3, [r2, #0]
	SEN_RF_log.before_5ms = SEN_RF_log.before_4ms;
 8008540:	4b6e      	ldr	r3, [pc, #440]	; (80086fc <adc_1ms+0x224>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	4a6d      	ldr	r2, [pc, #436]	; (80086fc <adc_1ms+0x224>)
 8008546:	6113      	str	r3, [r2, #16]
	SEN_RF_log.before_4ms = SEN_RF_log.before_3ms;
 8008548:	4b6c      	ldr	r3, [pc, #432]	; (80086fc <adc_1ms+0x224>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	4a6b      	ldr	r2, [pc, #428]	; (80086fc <adc_1ms+0x224>)
 800854e:	60d3      	str	r3, [r2, #12]
	SEN_RF_log.before_3ms = SEN_RF_log.before_2ms;
 8008550:	4b6a      	ldr	r3, [pc, #424]	; (80086fc <adc_1ms+0x224>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a69      	ldr	r2, [pc, #420]	; (80086fc <adc_1ms+0x224>)
 8008556:	6093      	str	r3, [r2, #8]
	SEN_RF_log.before_2ms = SEN_RF_log.before_1ms;
 8008558:	4b68      	ldr	r3, [pc, #416]	; (80086fc <adc_1ms+0x224>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a67      	ldr	r2, [pc, #412]	; (80086fc <adc_1ms+0x224>)
 800855e:	6053      	str	r3, [r2, #4]
	SEN_RF_log.before_1ms = SEN_RF_log.now;
 8008560:	4b66      	ldr	r3, [pc, #408]	; (80086fc <adc_1ms+0x224>)
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	4a65      	ldr	r2, [pc, #404]	; (80086fc <adc_1ms+0x224>)
 8008566:	6013      	str	r3, [r2, #0]
	SEN_RF_log.now = SEN_RF.now;
 8008568:	4b63      	ldr	r3, [pc, #396]	; (80086f8 <adc_1ms+0x220>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a63      	ldr	r2, [pc, #396]	; (80086fc <adc_1ms+0x224>)
 800856e:	6153      	str	r3, [r2, #20]
//	SEN_RF.diff_1ms = SEN_RF_log.now - SEN_RF_log.before_1ms;
	SEN_RF.diff = SEN_RF_log.now - SEN_RF_log.before_5ms;
 8008570:	4b62      	ldr	r3, [pc, #392]	; (80086fc <adc_1ms+0x224>)
 8008572:	695a      	ldr	r2, [r3, #20]
 8008574:	4b61      	ldr	r3, [pc, #388]	; (80086fc <adc_1ms+0x224>)
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	4a5f      	ldr	r2, [pc, #380]	; (80086f8 <adc_1ms+0x220>)
 800857c:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, 0);
 800857e:	2200      	movs	r2, #0
 8008580:	2120      	movs	r1, #32
 8008582:	485a      	ldr	r0, [pc, #360]	; (80086ec <adc_1ms+0x214>)
 8008584:	f7fa fa8e 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008588:	2300      	movs	r3, #0
 800858a:	717b      	strb	r3, [r7, #5]
 800858c:	e002      	b.n	8008594 <adc_1ms+0xbc>
 800858e:	797b      	ldrb	r3, [r7, #5]
 8008590:	3301      	adds	r3, #1
 8008592:	717b      	strb	r3, [r7, #5]
 8008594:	797b      	ldrb	r3, [r7, #5]
 8008596:	2b63      	cmp	r3, #99	; 0x63
 8008598:	d9f9      	bls.n	800858e <adc_1ms+0xb6>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 800859a:	2209      	movs	r2, #9
 800859c:	4954      	ldr	r1, [pc, #336]	; (80086f0 <adc_1ms+0x218>)
 800859e:	4855      	ldr	r0, [pc, #340]	; (80086f4 <adc_1ms+0x21c>)
 80085a0:	f7f8 fdd2 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, 1);
 80085a4:	2201      	movs	r2, #1
 80085a6:	2120      	movs	r1, #32
 80085a8:	4850      	ldr	r0, [pc, #320]	; (80086ec <adc_1ms+0x214>)
 80085aa:	f7fa fa7b 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	713b      	strb	r3, [r7, #4]
 80085b2:	e002      	b.n	80085ba <adc_1ms+0xe2>
 80085b4:	793b      	ldrb	r3, [r7, #4]
 80085b6:	3301      	adds	r3, #1
 80085b8:	713b      	strb	r3, [r7, #4]
 80085ba:	793b      	ldrb	r3, [r7, #4]
 80085bc:	2b63      	cmp	r3, #99	; 0x63
 80085be:	d9f9      	bls.n	80085b4 <adc_1ms+0xdc>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80085c0:	2209      	movs	r2, #9
 80085c2:	494b      	ldr	r1, [pc, #300]	; (80086f0 <adc_1ms+0x218>)
 80085c4:	484b      	ldr	r0, [pc, #300]	; (80086f4 <adc_1ms+0x21c>)
 80085c6:	f7f8 fdbf 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_L.now = g_ADCBuffer[2] - g_ADCBuffer[3];
 80085ca:	4b49      	ldr	r3, [pc, #292]	; (80086f0 <adc_1ms+0x218>)
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	461a      	mov	r2, r3
 80085d0:	4b47      	ldr	r3, [pc, #284]	; (80086f0 <adc_1ms+0x218>)
 80085d2:	88db      	ldrh	r3, [r3, #6]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	4a4a      	ldr	r2, [pc, #296]	; (8008700 <adc_1ms+0x228>)
 80085d8:	6013      	str	r3, [r2, #0]
	SEN_L_log.before_5ms = SEN_L_log.before_4ms;
 80085da:	4b4a      	ldr	r3, [pc, #296]	; (8008704 <adc_1ms+0x22c>)
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	4a49      	ldr	r2, [pc, #292]	; (8008704 <adc_1ms+0x22c>)
 80085e0:	6113      	str	r3, [r2, #16]
	SEN_L_log.before_4ms = SEN_L_log.before_3ms;
 80085e2:	4b48      	ldr	r3, [pc, #288]	; (8008704 <adc_1ms+0x22c>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	4a47      	ldr	r2, [pc, #284]	; (8008704 <adc_1ms+0x22c>)
 80085e8:	60d3      	str	r3, [r2, #12]
	SEN_L_log.before_3ms = SEN_L_log.before_2ms;
 80085ea:	4b46      	ldr	r3, [pc, #280]	; (8008704 <adc_1ms+0x22c>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	4a45      	ldr	r2, [pc, #276]	; (8008704 <adc_1ms+0x22c>)
 80085f0:	6093      	str	r3, [r2, #8]
	SEN_L_log.before_2ms = SEN_L_log.before_1ms;
 80085f2:	4b44      	ldr	r3, [pc, #272]	; (8008704 <adc_1ms+0x22c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a43      	ldr	r2, [pc, #268]	; (8008704 <adc_1ms+0x22c>)
 80085f8:	6053      	str	r3, [r2, #4]
	SEN_L_log.before_1ms = SEN_L_log.now;
 80085fa:	4b42      	ldr	r3, [pc, #264]	; (8008704 <adc_1ms+0x22c>)
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4a41      	ldr	r2, [pc, #260]	; (8008704 <adc_1ms+0x22c>)
 8008600:	6013      	str	r3, [r2, #0]
	SEN_L_log.now = SEN_L.now;
 8008602:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <adc_1ms+0x228>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a3f      	ldr	r2, [pc, #252]	; (8008704 <adc_1ms+0x22c>)
 8008608:	6153      	str	r3, [r2, #20]
//	SEN_L.diff_1ms = SEN_L_log.now - SEN_L_log.before_1ms;
	SEN_L.diff = SEN_L_log.now - SEN_L_log.before_5ms;
 800860a:	4b3e      	ldr	r3, [pc, #248]	; (8008704 <adc_1ms+0x22c>)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	4b3d      	ldr	r3, [pc, #244]	; (8008704 <adc_1ms+0x22c>)
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	4a3a      	ldr	r2, [pc, #232]	; (8008700 <adc_1ms+0x228>)
 8008616:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, 0);
 8008618:	2200      	movs	r2, #0
 800861a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800861e:	483a      	ldr	r0, [pc, #232]	; (8008708 <adc_1ms+0x230>)
 8008620:	f7fa fa40 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 8008624:	2300      	movs	r3, #0
 8008626:	70fb      	strb	r3, [r7, #3]
 8008628:	e002      	b.n	8008630 <adc_1ms+0x158>
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	3301      	adds	r3, #1
 800862e:	70fb      	strb	r3, [r7, #3]
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	2b63      	cmp	r3, #99	; 0x63
 8008634:	d9f9      	bls.n	800862a <adc_1ms+0x152>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008636:	2209      	movs	r2, #9
 8008638:	492d      	ldr	r1, [pc, #180]	; (80086f0 <adc_1ms+0x218>)
 800863a:	482e      	ldr	r0, [pc, #184]	; (80086f4 <adc_1ms+0x21c>)
 800863c:	f7f8 fd84 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, 1);
 8008640:	2201      	movs	r2, #1
 8008642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008646:	4830      	ldr	r0, [pc, #192]	; (8008708 <adc_1ms+0x230>)
 8008648:	f7fa fa2c 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 800864c:	2300      	movs	r3, #0
 800864e:	70bb      	strb	r3, [r7, #2]
 8008650:	e002      	b.n	8008658 <adc_1ms+0x180>
 8008652:	78bb      	ldrb	r3, [r7, #2]
 8008654:	3301      	adds	r3, #1
 8008656:	70bb      	strb	r3, [r7, #2]
 8008658:	78bb      	ldrb	r3, [r7, #2]
 800865a:	2b63      	cmp	r3, #99	; 0x63
 800865c:	d9f9      	bls.n	8008652 <adc_1ms+0x17a>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 800865e:	2209      	movs	r2, #9
 8008660:	4923      	ldr	r1, [pc, #140]	; (80086f0 <adc_1ms+0x218>)
 8008662:	4824      	ldr	r0, [pc, #144]	; (80086f4 <adc_1ms+0x21c>)
 8008664:	f7f8 fd70 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_R.now = g_ADCBuffer[4] - g_ADCBuffer[5];
 8008668:	4b21      	ldr	r3, [pc, #132]	; (80086f0 <adc_1ms+0x218>)
 800866a:	891b      	ldrh	r3, [r3, #8]
 800866c:	461a      	mov	r2, r3
 800866e:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <adc_1ms+0x218>)
 8008670:	895b      	ldrh	r3, [r3, #10]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	4a25      	ldr	r2, [pc, #148]	; (800870c <adc_1ms+0x234>)
 8008676:	6013      	str	r3, [r2, #0]
	SEN_R_log.before_5ms = SEN_R_log.before_4ms;
 8008678:	4b25      	ldr	r3, [pc, #148]	; (8008710 <adc_1ms+0x238>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4a24      	ldr	r2, [pc, #144]	; (8008710 <adc_1ms+0x238>)
 800867e:	6113      	str	r3, [r2, #16]
	SEN_R_log.before_4ms = SEN_R_log.before_3ms;
 8008680:	4b23      	ldr	r3, [pc, #140]	; (8008710 <adc_1ms+0x238>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	4a22      	ldr	r2, [pc, #136]	; (8008710 <adc_1ms+0x238>)
 8008686:	60d3      	str	r3, [r2, #12]
	SEN_R_log.before_3ms = SEN_R_log.before_2ms;
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <adc_1ms+0x238>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a20      	ldr	r2, [pc, #128]	; (8008710 <adc_1ms+0x238>)
 800868e:	6093      	str	r3, [r2, #8]
	SEN_R_log.before_2ms = SEN_R_log.before_1ms;
 8008690:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <adc_1ms+0x238>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <adc_1ms+0x238>)
 8008696:	6053      	str	r3, [r2, #4]
	SEN_R_log.before_1ms = SEN_R_log.now;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <adc_1ms+0x238>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <adc_1ms+0x238>)
 800869e:	6013      	str	r3, [r2, #0]
	SEN_R_log.now = SEN_R.now;
 80086a0:	4b1a      	ldr	r3, [pc, #104]	; (800870c <adc_1ms+0x234>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1a      	ldr	r2, [pc, #104]	; (8008710 <adc_1ms+0x238>)
 80086a6:	6153      	str	r3, [r2, #20]
//	SEN_R.diff_1ms = SEN_R_log.now - SEN_R_log.before_1ms;
	SEN_R.diff = SEN_R_log.now - SEN_R_log.before_5ms;
 80086a8:	4b19      	ldr	r3, [pc, #100]	; (8008710 <adc_1ms+0x238>)
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	4b18      	ldr	r3, [pc, #96]	; (8008710 <adc_1ms+0x238>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	4a16      	ldr	r2, [pc, #88]	; (800870c <adc_1ms+0x234>)
 80086b4:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, 0);
 80086b6:	2200      	movs	r2, #0
 80086b8:	2140      	movs	r1, #64	; 0x40
 80086ba:	480c      	ldr	r0, [pc, #48]	; (80086ec <adc_1ms+0x214>)
 80086bc:	f7fa f9f2 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	707b      	strb	r3, [r7, #1]
 80086c4:	e002      	b.n	80086cc <adc_1ms+0x1f4>
 80086c6:	787b      	ldrb	r3, [r7, #1]
 80086c8:	3301      	adds	r3, #1
 80086ca:	707b      	strb	r3, [r7, #1]
 80086cc:	787b      	ldrb	r3, [r7, #1]
 80086ce:	2b63      	cmp	r3, #99	; 0x63
 80086d0:	d9f9      	bls.n	80086c6 <adc_1ms+0x1ee>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80086d2:	2209      	movs	r2, #9
 80086d4:	4906      	ldr	r1, [pc, #24]	; (80086f0 <adc_1ms+0x218>)
 80086d6:	4807      	ldr	r0, [pc, #28]	; (80086f4 <adc_1ms+0x21c>)
 80086d8:	f7f8 fd36 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, 1);
 80086dc:	2201      	movs	r2, #1
 80086de:	2140      	movs	r1, #64	; 0x40
 80086e0:	4802      	ldr	r0, [pc, #8]	; (80086ec <adc_1ms+0x214>)
 80086e2:	f7fa f9df 	bl	8002aa4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 100; i++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	703b      	strb	r3, [r7, #0]
 80086ea:	e016      	b.n	800871a <adc_1ms+0x242>
 80086ec:	40020000 	.word	0x40020000
 80086f0:	2003202c 	.word	0x2003202c
 80086f4:	200007a4 	.word	0x200007a4
 80086f8:	200197fc 	.word	0x200197fc
 80086fc:	200322a8 	.word	0x200322a8
 8008700:	20032270 	.word	0x20032270
 8008704:	20019550 	.word	0x20019550
 8008708:	40020800 	.word	0x40020800
 800870c:	20019628 	.word	0x20019628
 8008710:	200322c4 	.word	0x200322c4
 8008714:	783b      	ldrb	r3, [r7, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	703b      	strb	r3, [r7, #0]
 800871a:	783b      	ldrb	r3, [r7, #0]
 800871c:	2b63      	cmp	r3, #99	; 0x63
 800871e:	d9f9      	bls.n	8008714 <adc_1ms+0x23c>
		;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8008720:	2209      	movs	r2, #9
 8008722:	4933      	ldr	r1, [pc, #204]	; (80087f0 <adc_1ms+0x318>)
 8008724:	4833      	ldr	r0, [pc, #204]	; (80087f4 <adc_1ms+0x31c>)
 8008726:	f7f8 fd0f 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	SEN_LF.now = g_ADCBuffer[6] - g_ADCBuffer[7];
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <adc_1ms+0x318>)
 800872c:	899b      	ldrh	r3, [r3, #12]
 800872e:	461a      	mov	r2, r3
 8008730:	4b2f      	ldr	r3, [pc, #188]	; (80087f0 <adc_1ms+0x318>)
 8008732:	89db      	ldrh	r3, [r3, #14]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	4a30      	ldr	r2, [pc, #192]	; (80087f8 <adc_1ms+0x320>)
 8008738:	6013      	str	r3, [r2, #0]
	SEN_LF_log.before_5ms = SEN_LF_log.before_4ms;
 800873a:	4b30      	ldr	r3, [pc, #192]	; (80087fc <adc_1ms+0x324>)
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4a2f      	ldr	r2, [pc, #188]	; (80087fc <adc_1ms+0x324>)
 8008740:	6113      	str	r3, [r2, #16]
	SEN_LF_log.before_4ms = SEN_LF_log.before_3ms;
 8008742:	4b2e      	ldr	r3, [pc, #184]	; (80087fc <adc_1ms+0x324>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	4a2d      	ldr	r2, [pc, #180]	; (80087fc <adc_1ms+0x324>)
 8008748:	60d3      	str	r3, [r2, #12]
	SEN_LF_log.before_3ms = SEN_LF_log.before_2ms;
 800874a:	4b2c      	ldr	r3, [pc, #176]	; (80087fc <adc_1ms+0x324>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	4a2b      	ldr	r2, [pc, #172]	; (80087fc <adc_1ms+0x324>)
 8008750:	6093      	str	r3, [r2, #8]
	SEN_LF_log.before_2ms = SEN_LF_log.before_1ms;
 8008752:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <adc_1ms+0x324>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a29      	ldr	r2, [pc, #164]	; (80087fc <adc_1ms+0x324>)
 8008758:	6053      	str	r3, [r2, #4]
	SEN_LF_log.before_1ms = SEN_LF_log.now;
 800875a:	4b28      	ldr	r3, [pc, #160]	; (80087fc <adc_1ms+0x324>)
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4a27      	ldr	r2, [pc, #156]	; (80087fc <adc_1ms+0x324>)
 8008760:	6013      	str	r3, [r2, #0]
	SEN_LF_log.now = SEN_LF.now;
 8008762:	4b25      	ldr	r3, [pc, #148]	; (80087f8 <adc_1ms+0x320>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a25      	ldr	r2, [pc, #148]	; (80087fc <adc_1ms+0x324>)
 8008768:	6153      	str	r3, [r2, #20]
//	SEN_LF.diff_1ms = SEN_LF_log.before_1ms;
	SEN_LF.diff = SEN_LF_log.now-SEN_LF_log.before_5ms;
 800876a:	4b24      	ldr	r3, [pc, #144]	; (80087fc <adc_1ms+0x324>)
 800876c:	695a      	ldr	r2, [r3, #20]
 800876e:	4b23      	ldr	r3, [pc, #140]	; (80087fc <adc_1ms+0x324>)
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	4a20      	ldr	r2, [pc, #128]	; (80087f8 <adc_1ms+0x320>)
 8008776:	60d3      	str	r3, [r2, #12]

	SEN_F.now = (int) ((SEN_RF.now + SEN_LF.now) / 2);
 8008778:	4b21      	ldr	r3, [pc, #132]	; (8008800 <adc_1ms+0x328>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <adc_1ms+0x320>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4413      	add	r3, r2
 8008782:	0fda      	lsrs	r2, r3, #31
 8008784:	4413      	add	r3, r2
 8008786:	105b      	asrs	r3, r3, #1
 8008788:	461a      	mov	r2, r3
 800878a:	4b1e      	ldr	r3, [pc, #120]	; (8008804 <adc_1ms+0x32c>)
 800878c:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 800878e:	2209      	movs	r2, #9
 8008790:	4917      	ldr	r1, [pc, #92]	; (80087f0 <adc_1ms+0x318>)
 8008792:	4818      	ldr	r0, [pc, #96]	; (80087f4 <adc_1ms+0x31c>)
 8008794:	f7f8 fcd8 	bl	8001148 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));
	Batt = (float) g_ADCBuffer[8] / 4095 * 3.3 * 2;
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <adc_1ms+0x318>)
 800879a:	8a1b      	ldrh	r3, [r3, #16]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008808 <adc_1ms+0x330>
 80087a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087ac:	ee16 0a90 	vmov	r0, s13
 80087b0:	f7f7 fef2 	bl	8000598 <__aeabi_f2d>
 80087b4:	a30c      	add	r3, pc, #48	; (adr r3, 80087e8 <adc_1ms+0x310>)
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	f7f7 ff45 	bl	8000648 <__aeabi_dmul>
 80087be:	4603      	mov	r3, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	4618      	mov	r0, r3
 80087c4:	4621      	mov	r1, r4
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	f7f7 fd87 	bl	80002dc <__adddf3>
 80087ce:	4603      	mov	r3, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	4618      	mov	r0, r3
 80087d4:	4621      	mov	r1, r4
 80087d6:	f7f8 fa0f 	bl	8000bf8 <__aeabi_d2f>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b0b      	ldr	r3, [pc, #44]	; (800880c <adc_1ms+0x334>)
 80087de:	601a      	str	r2, [r3, #0]
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd90      	pop	{r4, r7, pc}
 80087e8:	66666666 	.word	0x66666666
 80087ec:	400a6666 	.word	0x400a6666
 80087f0:	2003202c 	.word	0x2003202c
 80087f4:	200007a4 	.word	0x200007a4
 80087f8:	2003214c 	.word	0x2003214c
 80087fc:	20000a88 	.word	0x20000a88
 8008800:	200197fc 	.word	0x200197fc
 8008804:	2003200c 	.word	0x2003200c
 8008808:	457ff000 	.word	0x457ff000
 800880c:	20000b84 	.word	0x20000b84

08008810 <failsafe>:

void failsafe(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
	failsafe_flag = 1;
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <failsafe+0x9c>)
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
	ideal_translation.accel = 0.0;
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <failsafe+0xa0>)
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 8008822:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <failsafe+0xa0>)
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	605a      	str	r2, [r3, #4]
	duty_to_moter();
 800882a:	f002 fbc9 	bl	800afc0 <duty_to_moter>
	set_buzzer(0, C_4, 300);
 800882e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008832:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008836:	2000      	movs	r0, #0
 8008838:	f7ff fa9e 	bl	8007d78 <set_buzzer>
	set_buzzer(1, 0, 300);
 800883c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008840:	2100      	movs	r1, #0
 8008842:	2001      	movs	r0, #1
 8008844:	f7ff fa98 	bl	8007d78 <set_buzzer>
	set_buzzer(2, D_4, 300);
 8008848:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800884c:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008850:	2002      	movs	r0, #2
 8008852:	f7ff fa91 	bl	8007d78 <set_buzzer>
	set_buzzer(3, 0, 300);
 8008856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800885a:	2100      	movs	r1, #0
 800885c:	2003      	movs	r0, #3
 800885e:	f7ff fa8b 	bl	8007d78 <set_buzzer>
	set_buzzer(4, E_4, 300);
 8008862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008866:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800886a:	2004      	movs	r0, #4
 800886c:	f7ff fa84 	bl	8007d78 <set_buzzer>
	set_buzzer(5, 0, 300);
 8008870:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008874:	2100      	movs	r1, #0
 8008876:	2005      	movs	r0, #5
 8008878:	f7ff fa7e 	bl	8007d78 <set_buzzer>
	set_buzzer(6, F_4, 300);
 800887c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008880:	f240 115d 	movw	r1, #349	; 0x15d
 8008884:	2006      	movs	r0, #6
 8008886:	f7ff fa77 	bl	8007d78 <set_buzzer>
	x.now = 0;
 800888a:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <failsafe+0xa4>)
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <failsafe+0xa8>)
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
	direction = 0;
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <failsafe+0xac>)
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]

	failsafe_flag = 1;
 800889c:	4b03      	ldr	r3, [pc, #12]	; (80088ac <failsafe+0x9c>)
 800889e:	2201      	movs	r2, #1
 80088a0:	701a      	strb	r2, [r3, #0]
	failsafe_counter = 0;
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <failsafe+0xb0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	801a      	strh	r2, [r3, #0]
}
 80088a8:	bf00      	nop
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000065c 	.word	0x2000065c
 80088b0:	2001961c 	.word	0x2001961c
 80088b4:	20000b88 	.word	0x20000b88
 80088b8:	20019858 	.word	0x20019858
 80088bc:	20000650 	.word	0x20000650
 80088c0:	20000668 	.word	0x20000668
 80088c4:	00000000 	.word	0x00000000

080088c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80088ce:	f7f8 fb63 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80088d2:	f000 f9fb 	bl	8008ccc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80088d6:	f7ff fb07 	bl	8007ee8 <MX_GPIO_Init>
	MX_DMA_Init();
 80088da:	f7ff fae5 	bl	8007ea8 <MX_DMA_Init>
	MX_ADC1_Init();
 80088de:	f7ff f8d5 	bl	8007a8c <MX_ADC1_Init>
	MX_SPI2_Init();
 80088e2:	f003 fbad 	bl	800c040 <MX_SPI2_Init>
	MX_SPI3_Init();
 80088e6:	f003 fbe1 	bl	800c0ac <MX_SPI3_Init>
	MX_TIM2_Init();
 80088ea:	f003 fdd5 	bl	800c498 <MX_TIM2_Init>
	MX_TIM3_Init();
 80088ee:	f003 fe37 	bl	800c560 <MX_TIM3_Init>
	MX_TIM6_Init();
 80088f2:	f003 fe8f 	bl	800c614 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80088f6:	4853      	ldr	r0, [pc, #332]	; (8008a44 <main+0x17c>)
 80088f8:	f7fa ffdf 	bl	80038ba <HAL_TIM_Base_Start_IT>
	SEGGER_RTT_Init();
 80088fc:	f7fb ff7c 	bl	80047f8 <SEGGER_RTT_Init>
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008900:	2300      	movs	r3, #0
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	2000      	movs	r0, #0
 800890c:	f7fb ff0a 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	printf("\x1b[0m");
 8008910:	484d      	ldr	r0, [pc, #308]	; (8008a48 <main+0x180>)
 8008912:	f004 ffd7 	bl	800d8c4 <iprintf>
	init_walldata();
 8008916:	f004 fa87 	bl	800ce28 <init_walldata>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, SET);
 800891a:	2201      	movs	r2, #1
 800891c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008920:	484a      	ldr	r0, [pc, #296]	; (8008a4c <main+0x184>)
 8008922:	f7fa f8bf 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 8008926:	2201      	movs	r2, #1
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	4849      	ldr	r0, [pc, #292]	; (8008a50 <main+0x188>)
 800892c:	f7fa f8ba 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 8008930:	2201      	movs	r2, #1
 8008932:	2140      	movs	r1, #64	; 0x40
 8008934:	4846      	ldr	r0, [pc, #280]	; (8008a50 <main+0x188>)
 8008936:	f7fa f8b5 	bl	8002aa4 <HAL_GPIO_WritePin>
	init_gyro();
 800893a:	f001 fc1b 	bl	800a174 <init_gyro>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800893e:	2100      	movs	r1, #0
 8008940:	4844      	ldr	r0, [pc, #272]	; (8008a54 <main+0x18c>)
 8008942:	f7fb f847 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8008946:	2104      	movs	r1, #4
 8008948:	4842      	ldr	r0, [pc, #264]	; (8008a54 <main+0x18c>)
 800894a:	f7fb f843 	bl	80039d4 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800894e:	4b41      	ldr	r3, [pc, #260]	; (8008a54 <main+0x18c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8008956:	4b3f      	ldr	r3, [pc, #252]	; (8008a54 <main+0x18c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
	set_led(0);
 800895e:	2000      	movs	r0, #0
 8008960:	f001 fde0 	bl	800a524 <set_led>
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, SET);
 8008964:	2201      	movs	r2, #1
 8008966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800896a:	4838      	ldr	r0, [pc, #224]	; (8008a4c <main+0x184>)
 800896c:	f7fa f89a 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, SET);
 8008970:	2201      	movs	r2, #1
 8008972:	2140      	movs	r1, #64	; 0x40
 8008974:	4835      	ldr	r0, [pc, #212]	; (8008a4c <main+0x184>)
 8008976:	f7fa f895 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, SET);
 800897a:	2201      	movs	r2, #1
 800897c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008980:	4835      	ldr	r0, [pc, #212]	; (8008a58 <main+0x190>)
 8008982:	f7fa f88f 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, SET);
 8008986:	2201      	movs	r2, #1
 8008988:	2120      	movs	r1, #32
 800898a:	4830      	ldr	r0, [pc, #192]	; (8008a4c <main+0x184>)
 800898c:	f7fa f88a 	bl	8002aa4 <HAL_GPIO_WritePin>
	clear_Map(&walldata.real);
 8008990:	4832      	ldr	r0, [pc, #200]	; (8008a5c <main+0x194>)
 8008992:	f004 f9f1 	bl	800cd78 <clear_Map>
	clear_Map(&walldata.checked);
 8008996:	4832      	ldr	r0, [pc, #200]	; (8008a60 <main+0x198>)
 8008998:	f004 f9ee 	bl	800cd78 <clear_Map>
	clear_adachiMap(&walldata.adachi);
 800899c:	4831      	ldr	r0, [pc, #196]	; (8008a64 <main+0x19c>)
 800899e:	f004 fa1e 	bl	800cdde <clear_adachiMap>
	walldata.checked.row[1] = 0x1;
 80089a2:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <main+0x194>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	HAL_Delay(10);
 80089aa:	200a      	movs	r0, #10
 80089ac:	f7f8 fb66 	bl	800107c <HAL_Delay>
	Battery_Check();
 80089b0:	f001 fd3e 	bl	800a430 <Battery_Check>
//	walldata.real.column[1]++;

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
//			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	for (i = 0; i < 17; i++) {
 80089b4:	2300      	movs	r3, #0
 80089b6:	80fb      	strh	r3, [r7, #6]
 80089b8:	e024      	b.n	8008a04 <main+0x13c>
		for (j = 0; j < 17; j++) {
 80089ba:	2300      	movs	r3, #0
 80089bc:	80bb      	strh	r3, [r7, #4]
 80089be:	e010      	b.n	80089e2 <main+0x11a>
			step_map[i][j] = i + j * 16;
 80089c0:	88bb      	ldrh	r3, [r7, #4]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	b298      	uxth	r0, r3
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	88bb      	ldrh	r3, [r7, #4]
 80089ca:	88f9      	ldrh	r1, [r7, #6]
 80089cc:	4401      	add	r1, r0
 80089ce:	b288      	uxth	r0, r1
 80089d0:	4925      	ldr	r1, [pc, #148]	; (8008a68 <main+0x1a0>)
 80089d2:	0112      	lsls	r2, r2, #4
 80089d4:	4413      	add	r3, r2
 80089d6:	4602      	mov	r2, r0
 80089d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < 17; j++) {
 80089dc:	88bb      	ldrh	r3, [r7, #4]
 80089de:	3301      	adds	r3, #1
 80089e0:	80bb      	strh	r3, [r7, #4]
 80089e2:	88bb      	ldrh	r3, [r7, #4]
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d9eb      	bls.n	80089c0 <main+0xf8>
		}
		printf("i=%d,pari=%d\n", i, check_parity(i));
 80089e8:	88fc      	ldrh	r4, [r7, #6]
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fcad 	bl	800a34c <check_parity>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	4621      	mov	r1, r4
 80089f8:	481c      	ldr	r0, [pc, #112]	; (8008a6c <main+0x1a4>)
 80089fa:	f004 ff63 	bl	800d8c4 <iprintf>
	for (i = 0; i < 17; i++) {
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	3301      	adds	r3, #1
 8008a02:	80fb      	strh	r3, [r7, #6]
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	d9d7      	bls.n	80089ba <main+0xf2>
	}

	for (i = 0; i < 50; i++) {
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	80fb      	strh	r3, [r7, #6]
 8008a0e:	e013      	b.n	8008a38 <main+0x170>
		enc_buff_l[i] = 0;
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	4a17      	ldr	r2, [pc, #92]	; (8008a70 <main+0x1a8>)
 8008a14:	2100      	movs	r1, #0
 8008a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		enc_buff_r[i] = 0;
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <main+0x1ac>)
 8008a1e:	2100      	movs	r1, #0
 8008a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		acc_buff[i] = 0;
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <main+0x1b0>)
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 50; i++) {
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	3301      	adds	r3, #1
 8008a36:	80fb      	strh	r3, [r7, #6]
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	2b31      	cmp	r3, #49	; 0x31
 8008a3c:	d9e8      	bls.n	8008a10 <main+0x148>
	}
	for (i = 50; i < 100; i++) {
 8008a3e:	2332      	movs	r3, #50	; 0x32
 8008a40:	80fb      	strh	r3, [r7, #6]
 8008a42:	e028      	b.n	8008a96 <main+0x1ce>
 8008a44:	2000093c 	.word	0x2000093c
 8008a48:	0800f7f8 	.word	0x0800f7f8
 8008a4c:	40020000 	.word	0x40020000
 8008a50:	40020400 	.word	0x40020400
 8008a54:	2000097c 	.word	0x2000097c
 8008a58:	40020800 	.word	0x40020800
 8008a5c:	200009bc 	.word	0x200009bc
 8008a60:	20000a00 	.word	0x20000a00
 8008a64:	20000a44 	.word	0x20000a44
 8008a68:	20000b8c 	.word	0x20000b8c
 8008a6c:	0800f800 	.word	0x0800f800
 8008a70:	20019664 	.word	0x20019664
 8008a74:	200322e0 	.word	0x200322e0
 8008a78:	20000aa0 	.word	0x20000aa0
		enc_buff_l[i] = 0;
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	4a74      	ldr	r2, [pc, #464]	; (8008c50 <main+0x388>)
 8008a80:	2100      	movs	r1, #0
 8008a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		enc_buff_r[i] = 0;
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	4a72      	ldr	r2, [pc, #456]	; (8008c54 <main+0x38c>)
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 50; i < 100; i++) {
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	3301      	adds	r3, #1
 8008a94:	80fb      	strh	r3, [r7, #6]
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	2b63      	cmp	r3, #99	; 0x63
 8008a9a:	d9ef      	bls.n	8008a7c <main+0x1b4>
	}

//	output_Walldata(REAL);
	mode = 0;
 8008a9c:	4b6e      	ldr	r3, [pc, #440]	; (8008c58 <main+0x390>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
	mode_select_dis = 10;
 8008aa2:	4b6e      	ldr	r3, [pc, #440]	; (8008c5c <main+0x394>)
 8008aa4:	4a6e      	ldr	r2, [pc, #440]	; (8008c60 <main+0x398>)
 8008aa6:	601a      	str	r2, [r3, #0]

	SEN_L.reference = 452;
 8008aa8:	4b6e      	ldr	r3, [pc, #440]	; (8008c64 <main+0x39c>)
 8008aaa:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8008aae:	605a      	str	r2, [r3, #4]
	SEN_L.threshold = 140;
 8008ab0:	4b6c      	ldr	r3, [pc, #432]	; (8008c64 <main+0x39c>)
 8008ab2:	228c      	movs	r2, #140	; 0x8c
 8008ab4:	609a      	str	r2, [r3, #8]
	SEN_R.reference = 460;
 8008ab6:	4b6c      	ldr	r3, [pc, #432]	; (8008c68 <main+0x3a0>)
 8008ab8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008abc:	605a      	str	r2, [r3, #4]
	SEN_R.threshold = 140;
 8008abe:	4b6a      	ldr	r3, [pc, #424]	; (8008c68 <main+0x3a0>)
 8008ac0:	228c      	movs	r2, #140	; 0x8c
 8008ac2:	609a      	str	r2, [r3, #8]
	SEN_LF.reference = 420; //区画入り口
 8008ac4:	4b69      	ldr	r3, [pc, #420]	; (8008c6c <main+0x3a4>)
 8008ac6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008aca:	605a      	str	r2, [r3, #4]
	SEN_LF.threshold = 917; //区画入り口と中心の間
 8008acc:	4b67      	ldr	r3, [pc, #412]	; (8008c6c <main+0x3a4>)
 8008ace:	f240 3295 	movw	r2, #917	; 0x395
 8008ad2:	609a      	str	r2, [r3, #8]
	SEN_RF.reference = 420; //区画入り口
 8008ad4:	4b66      	ldr	r3, [pc, #408]	; (8008c70 <main+0x3a8>)
 8008ad6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008ada:	605a      	str	r2, [r3, #4]
	SEN_RF.threshold = 1200; //区画入り口と中心の間
 8008adc:	4b64      	ldr	r3, [pc, #400]	; (8008c70 <main+0x3a8>)
 8008ade:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008ae2:	609a      	str	r2, [r3, #8]

	SEN_F.reference = (int) (SEN_RF.reference + SEN_LF.reference) / 2;
 8008ae4:	4b62      	ldr	r3, [pc, #392]	; (8008c70 <main+0x3a8>)
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	4b60      	ldr	r3, [pc, #384]	; (8008c6c <main+0x3a4>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	0fda      	lsrs	r2, r3, #31
 8008af0:	4413      	add	r3, r2
 8008af2:	105b      	asrs	r3, r3, #1
 8008af4:	461a      	mov	r2, r3
 8008af6:	4b5f      	ldr	r3, [pc, #380]	; (8008c74 <main+0x3ac>)
 8008af8:	605a      	str	r2, [r3, #4]
	SEN_F.threshold = (int) (SEN_F.reference * 0.3);
 8008afa:	4b5e      	ldr	r3, [pc, #376]	; (8008c74 <main+0x3ac>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fd38 	bl	8000574 <__aeabi_i2d>
 8008b04:	a350      	add	r3, pc, #320	; (adr r3, 8008c48 <main+0x380>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fd9d 	bl	8000648 <__aeabi_dmul>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	4618      	mov	r0, r3
 8008b14:	4621      	mov	r1, r4
 8008b16:	f7f8 f847 	bl	8000ba8 <__aeabi_d2iz>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b55      	ldr	r3, [pc, #340]	; (8008c74 <main+0x3ac>)
 8008b1e:	609a      	str	r2, [r3, #8]


//	wall_cntrol_gain.Kp = 0.075;
	SEN_LF.front_kusi = 180;//200//SEN_LF.reference
 8008b20:	4b52      	ldr	r3, [pc, #328]	; (8008c6c <main+0x3a4>)
 8008b22:	22b4      	movs	r2, #180	; 0xb4
 8008b24:	61da      	str	r2, [r3, #28]
	SEN_RF.front_kusi = 180;
 8008b26:	4b52      	ldr	r3, [pc, #328]	; (8008c70 <main+0x3a8>)
 8008b28:	22b4      	movs	r2, #180	; 0xb4
 8008b2a:	61da      	str	r2, [r3, #28]
//	wall_cntrol_gain.Ki = 0.5;

	run_gain.Kp = 0.6;
 8008b2c:	4b52      	ldr	r3, [pc, #328]	; (8008c78 <main+0x3b0>)
 8008b2e:	4a53      	ldr	r2, [pc, #332]	; (8008c7c <main+0x3b4>)
 8008b30:	601a      	str	r2, [r3, #0]
	run_gain.Ki = 0.15;
 8008b32:	4b51      	ldr	r3, [pc, #324]	; (8008c78 <main+0x3b0>)
 8008b34:	4a52      	ldr	r2, [pc, #328]	; (8008c80 <main+0x3b8>)
 8008b36:	605a      	str	r2, [r3, #4]
//	rotation_gain.Ki = 0.012; //3

//	rotation_gain.Kp = 0.27;
//	rotation_gain.Ki = 0.065; //3

	rotation_gain.Kp = 0.18;//22
 8008b38:	4b52      	ldr	r3, [pc, #328]	; (8008c84 <main+0x3bc>)
 8008b3a:	4a53      	ldr	r2, [pc, #332]	; (8008c88 <main+0x3c0>)
 8008b3c:	601a      	str	r2, [r3, #0]
	rotation_gain.Ki = 0.035; //45
 8008b3e:	4b51      	ldr	r3, [pc, #324]	; (8008c84 <main+0x3bc>)
 8008b40:	4a52      	ldr	r2, [pc, #328]	; (8008c8c <main+0x3c4>)
 8008b42:	605a      	str	r2, [r3, #4]

	wall_cntrol_gain.Ki = 0.25*0;
 8008b44:	4b52      	ldr	r3, [pc, #328]	; (8008c90 <main+0x3c8>)
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	605a      	str	r2, [r3, #4]
	wall_cntrol_gain.Kp = 0.05;
 8008b4c:	4b50      	ldr	r3, [pc, #320]	; (8008c90 <main+0x3c8>)
 8008b4e:	4a51      	ldr	r2, [pc, #324]	; (8008c94 <main+0x3cc>)
 8008b50:	601a      	str	r2, [r3, #0]


	nomal_run.vel_search = 280.0;
 8008b52:	4b51      	ldr	r3, [pc, #324]	; (8008c98 <main+0x3d0>)
 8008b54:	4a51      	ldr	r2, [pc, #324]	; (8008c9c <main+0x3d4>)
 8008b56:	601a      	str	r2, [r3, #0]
	nomal_run.accel = 1000.0;
 8008b58:	4b4f      	ldr	r3, [pc, #316]	; (8008c98 <main+0x3d0>)
 8008b5a:	4a51      	ldr	r2, [pc, #324]	; (8008ca0 <main+0x3d8>)
 8008b5c:	60da      	str	r2, [r3, #12]

	known_acc = 1000.0;
 8008b5e:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <main+0x3dc>)
 8008b60:	4a4f      	ldr	r2, [pc, #316]	; (8008ca0 <main+0x3d8>)
 8008b62:	601a      	str	r2, [r3, #0]
	known_vel = 350.0;
 8008b64:	4b50      	ldr	r3, [pc, #320]	; (8008ca8 <main+0x3e0>)
 8008b66:	4a51      	ldr	r2, [pc, #324]	; (8008cac <main+0x3e4>)
 8008b68:	601a      	str	r2, [r3, #0]

	nomal_rotation.vel_search = 750.0;
 8008b6a:	4b51      	ldr	r3, [pc, #324]	; (8008cb0 <main+0x3e8>)
 8008b6c:	4a51      	ldr	r2, [pc, #324]	; (8008cb4 <main+0x3ec>)
 8008b6e:	601a      	str	r2, [r3, #0]
	nomal_rotation.accel = 1700.0;
 8008b70:	4b4f      	ldr	r3, [pc, #316]	; (8008cb0 <main+0x3e8>)
 8008b72:	4a51      	ldr	r2, [pc, #324]	; (8008cb8 <main+0x3f0>)
 8008b74:	60da      	str	r2, [r3, #12]

	x.goal = 2;
 8008b76:	4b51      	ldr	r3, [pc, #324]	; (8008cbc <main+0x3f4>)
 8008b78:	2202      	movs	r2, #2
 8008b7a:	705a      	strb	r2, [r3, #1]
	y.goal = 0;
 8008b7c:	4b50      	ldr	r3, [pc, #320]	; (8008cc0 <main+0x3f8>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	705a      	strb	r2, [r3, #1]

//		printf("mode:sel_dis=%3.2f,vel=%3.2f\n", mode_select_dis, real_R.vel);
//		printf("R=%8.2f,	L=%8.2f\n",test_R,test_L);
//		printf("%8.3f\n",real_acc);

		set_led(mode);
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <main+0x390>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fccc 	bl	800a524 <set_led>
		if (mode_select_dis > 30) {
 8008b8c:	4b33      	ldr	r3, [pc, #204]	; (8008c5c <main+0x394>)
 8008b8e:	edd3 7a00 	vldr	s15, [r3]
 8008b92:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9e:	dd15      	ble.n	8008bcc <main+0x304>
			mode_select_dis = 0;
 8008ba0:	4b2e      	ldr	r3, [pc, #184]	; (8008c5c <main+0x394>)
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
			mode++;
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <main+0x390>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	3301      	adds	r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	4b29      	ldr	r3, [pc, #164]	; (8008c58 <main+0x390>)
 8008bb2:	701a      	strb	r2, [r3, #0]
			if (mode >= 8) {
 8008bb4:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <main+0x390>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	d902      	bls.n	8008bc2 <main+0x2fa>
				mode = 0;
 8008bbc:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <main+0x390>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
			}
			set_buzzer_mode(mode);
 8008bc2:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <main+0x390>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff f906 	bl	8007dd8 <set_buzzer_mode>
		}

		if (mode_select_dis < -30) {
 8008bcc:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <main+0x394>)
 8008bce:	edd3 7a00 	vldr	s15, [r3]
 8008bd2:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8008bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bde:	d515      	bpl.n	8008c0c <main+0x344>
			mode_select_dis = 0;
 8008be0:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <main+0x394>)
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
			if (mode == 0) {
 8008be8:	4b1b      	ldr	r3, [pc, #108]	; (8008c58 <main+0x390>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <main+0x32e>
				mode = 8;
 8008bf0:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <main+0x390>)
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	701a      	strb	r2, [r3, #0]
			}
			mode--;
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <main+0x390>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	4b16      	ldr	r3, [pc, #88]	; (8008c58 <main+0x390>)
 8008c00:	701a      	strb	r2, [r3, #0]
			set_buzzer_mode(mode);
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <main+0x390>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff f8e6 	bl	8007dd8 <set_buzzer_mode>
		}

		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8008c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c10:	482c      	ldr	r0, [pc, #176]	; (8008cc4 <main+0x3fc>)
 8008c12:	f7f9 ff2f 	bl	8002a74 <HAL_GPIO_ReadPin>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10f      	bne.n	8008c3c <main+0x374>
			mode_select_dis = 0;
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <main+0x394>)
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]
			set_led(0);
 8008c24:	2000      	movs	r0, #0
 8008c26:	f001 fc7d 	bl	800a524 <set_led>
			set_buzzer_mode(mode);
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <main+0x390>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff f8d2 	bl	8007dd8 <set_buzzer_mode>
			chattering();
 8008c34:	f001 f92e 	bl	8009e94 <chattering>
			go_mode();
 8008c38:	f000 fa76 	bl	8009128 <go_mode>
		}
		HAL_GPIO_TogglePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin);
 8008c3c:	2110      	movs	r1, #16
 8008c3e:	4822      	ldr	r0, [pc, #136]	; (8008cc8 <main+0x400>)
 8008c40:	f7f9 ff49 	bl	8002ad6 <HAL_GPIO_TogglePin>
		set_led(mode);
 8008c44:	e79d      	b.n	8008b82 <main+0x2ba>
 8008c46:	bf00      	nop
 8008c48:	33333333 	.word	0x33333333
 8008c4c:	3fd33333 	.word	0x3fd33333
 8008c50:	20019664 	.word	0x20019664
 8008c54:	200322e0 	.word	0x200322e0
 8008c58:	20000651 	.word	0x20000651
 8008c5c:	20000660 	.word	0x20000660
 8008c60:	41200000 	.word	0x41200000
 8008c64:	20032270 	.word	0x20032270
 8008c68:	20019628 	.word	0x20019628
 8008c6c:	2003214c 	.word	0x2003214c
 8008c70:	200197fc 	.word	0x200197fc
 8008c74:	2003200c 	.word	0x2003200c
 8008c78:	2000001c 	.word	0x2000001c
 8008c7c:	3f19999a 	.word	0x3f19999a
 8008c80:	3e19999a 	.word	0x3e19999a
 8008c84:	20000010 	.word	0x20000010
 8008c88:	3e3851ec 	.word	0x3e3851ec
 8008c8c:	3d0f5c29 	.word	0x3d0f5c29
 8008c90:	2003229c 	.word	0x2003229c
 8008c94:	3d4ccccd 	.word	0x3d4ccccd
 8008c98:	20000028 	.word	0x20000028
 8008c9c:	438c0000 	.word	0x438c0000
 8008ca0:	447a0000 	.word	0x447a0000
 8008ca4:	2001985c 	.word	0x2001985c
 8008ca8:	20000b68 	.word	0x20000b68
 8008cac:	43af0000 	.word	0x43af0000
 8008cb0:	20000038 	.word	0x20000038
 8008cb4:	443b8000 	.word	0x443b8000
 8008cb8:	44d48000 	.word	0x44d48000
 8008cbc:	20000b88 	.word	0x20000b88
 8008cc0:	20019858 	.word	0x20019858
 8008cc4:	40020400 	.word	0x40020400
 8008cc8:	40020000 	.word	0x40020000

08008ccc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b094      	sub	sp, #80	; 0x50
 8008cd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008cd2:	f107 031c 	add.w	r3, r7, #28
 8008cd6:	2234      	movs	r2, #52	; 0x34
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f004 f98d 	bl	800cffa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	609a      	str	r2, [r3, #8]
 8008cec:	60da      	str	r2, [r3, #12]
 8008cee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <SystemClock_Config+0xcc>)
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <SystemClock_Config+0xcc>)
 8008cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8008d00:	4b25      	ldr	r3, [pc, #148]	; (8008d98 <SystemClock_Config+0xcc>)
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4b22      	ldr	r3, [pc, #136]	; (8008d9c <SystemClock_Config+0xd0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a21      	ldr	r2, [pc, #132]	; (8008d9c <SystemClock_Config+0xd0>)
 8008d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b1f      	ldr	r3, [pc, #124]	; (8008d9c <SystemClock_Config+0xd0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d30:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d32:	2302      	movs	r3, #2
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d3a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 8008d40:	2364      	movs	r3, #100	; 0x64
 8008d42:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d44:	2302      	movs	r3, #2
 8008d46:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008d50:	f107 031c 	add.w	r3, r7, #28
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fa f891 	bl	8002e7c <HAL_RCC_OscConfig>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <SystemClock_Config+0x98>
		Error_Handler();
 8008d60:	f000 f81e 	bl	8008da0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008d64:	230f      	movs	r3, #15
 8008d66:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d74:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	2103      	movs	r1, #3
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7f9 fec3 	bl	8002b0c <HAL_RCC_ClockConfig>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <SystemClock_Config+0xc4>
		Error_Handler();
 8008d8c:	f000 f808 	bl	8008da0 <Error_Handler>
	}
}
 8008d90:	bf00      	nop
 8008d92:	3750      	adds	r7, #80	; 0x50
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	40007000 	.word	0x40007000

08008da0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <mode_0>:
#include "adachi.h"
#include "buzzer.h"
#include "SEGGER_RTT.h"
#include "SEGGER_RTT_Conf.h"

void mode_0(void) {
 8008dae:	b580      	push	{r7, lr}
 8008db0:	af00      	add	r7, sp, #0
	read_all_log_from_flash();
 8008db2:	f001 f90d 	bl	8009fd0 <read_all_log_from_flash>
	log_output();
 8008db6:	f001 fcdd 	bl	800a774 <log_output>
//		;

//	read_all_walldata();
//	adachi_map(x.goal, y.goal, 4, walldata.real);
//	output_Walldata(REAL);
}
 8008dba:	bf00      	nop
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <mode_1>:

void mode_1(void) {
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	af00      	add	r7, sp, #0
//	rotation_gain.Kp = 0.47;
//	rotation_gain.Ki = 0.01; //3
//	start_led();
//	while(failsafe_flag==0);

	start_led();
 8008dc2:	f001 fdb5 	bl	800a930 <start_led>
	log_start();
 8008dc6:	f001 fc05 	bl	800a5d4 <log_start>
	search_run_special(7, 7, 4);
 8008dca:	2204      	movs	r2, #4
 8008dcc:	2107      	movs	r1, #7
 8008dce:	2007      	movs	r0, #7
 8008dd0:	f7fd fa08 	bl	80061e4 <search_run_special>
	save_all_walldata();
 8008dd4:	f001 f966 	bl	800a0a4 <save_all_walldata>
//	run_right_deviation.cumulative = 0.0;
//	//	set_straight(90.0, 3500, 300, 0.0, 0.0);
////	wait_straight();
//	moter_flag = 0;
////	save_log_to_flash();
}
 8008dd8:	bf00      	nop
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <mode_2>:

void mode_2(void) {
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af02      	add	r7, sp, #8
//	rotation_gain.Kp = 0.5;
//	rotation_gain.Ki = 0.012; //3
//	start_led();
//	while(failsafe_flag==0);

	start_led();
 8008de2:	f001 fda5 	bl	800a930 <start_led>
	adachi_search_run(7, 7, 4, nomal_run.accel, nomal_run.vel_search, 1, 0);
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <mode_2+0x38>)
 8008de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <mode_2+0x38>)
 8008dee:	ed93 7a00 	vldr	s14, [r3]
 8008df2:	2300      	movs	r3, #0
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2301      	movs	r3, #1
 8008df8:	eef0 0a47 	vmov.f32	s1, s14
 8008dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8008e00:	2204      	movs	r2, #4
 8008e02:	2107      	movs	r1, #7
 8008e04:	2007      	movs	r0, #7
 8008e06:	f7fc fd05 	bl	8005814 <adachi_search_run>
	save_all_walldata();
 8008e0a:	f001 f94b 	bl	800a0a4 <save_all_walldata>
//	//	set_straight(90.0, 3500, 300, 0.0, 0.0);
////	wait_straight();
//	moter_flag = 0;
////	save_log_to_flash();

}
 8008e0e:	bf00      	nop
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000028 	.word	0x20000028

08008e18 <mode_3>:

void mode_3(void) { //253.558
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af02      	add	r7, sp, #8
//
//	wall_cntrol_gain.Ki = 0.1;
//	wall_cntrol_gain.Kp = 0.05;
//

	start_led();
 8008e1e:	f001 fd87 	bl	800a930 <start_led>
	adachi_search_run(7, 7, 4, nomal_run.accel, nomal_run.vel_search, 0, 0);
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <mode_3+0x38>)
 8008e24:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e28:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <mode_3+0x38>)
 8008e2a:	ed93 7a00 	vldr	s14, [r3]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2300      	movs	r3, #0
 8008e34:	eef0 0a47 	vmov.f32	s1, s14
 8008e38:	eeb0 0a67 	vmov.f32	s0, s15
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	2107      	movs	r1, #7
 8008e40:	2007      	movs	r0, #7
 8008e42:	f7fc fce7 	bl	8005814 <adachi_search_run>
	save_all_walldata();
 8008e46:	f001 f92d 	bl	800a0a4 <save_all_walldata>
//	//	set_straight(90.0, 3500, 300, 0.0, 0.0);
////	wait_straight();
//	moter_flag = 0;
////	save_log_to_flash();

}
 8008e4a:	bf00      	nop
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000028 	.word	0x20000028

08008e54 <mode_4>:

void mode_4(void) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
//	set_rotation(180.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
//	wait_rotation();
//	HAL_Delay(500);
//	log_flag = 0;

	start_led();
 8008e5a:	f001 fd69 	bl	800a930 <start_led>
	log_start();
 8008e5e:	f001 fbb9 	bl	800a5d4 <log_start>
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8008e62:	4b25      	ldr	r3, [pc, #148]	; (8008ef8 <mode_4+0xa4>)
 8008e64:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e68:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <mode_4+0xa4>)
 8008e6a:	ed93 7a00 	vldr	s14, [r3]
 8008e6e:	eef0 0a47 	vmov.f32	s1, s14
 8008e72:	eeb0 0a67 	vmov.f32	s0, s15
 8008e76:	f000 fba9 	bl	80095cc <go_entrance>
	for (uint8_t i = 0; i < 1; i++) {
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	71fb      	strb	r3, [r7, #7]
 8008e7e:	e01a      	b.n	8008eb6 <mode_4+0x62>
		pass_180(nomal_run.accel, nomal_run.vel_search);
 8008e80:	4b1d      	ldr	r3, [pc, #116]	; (8008ef8 <mode_4+0xa4>)
 8008e82:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e86:	4b1c      	ldr	r3, [pc, #112]	; (8008ef8 <mode_4+0xa4>)
 8008e88:	ed93 7a00 	vldr	s14, [r3]
 8008e8c:	eef0 0a47 	vmov.f32	s1, s14
 8008e90:	eeb0 0a67 	vmov.f32	s0, s15
 8008e94:	f000 fca2 	bl	80097dc <pass_180>
		slalom_right90(nomal_run.accel, nomal_run.vel_search);
 8008e98:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <mode_4+0xa4>)
 8008e9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e9e:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <mode_4+0xa4>)
 8008ea0:	ed93 7a00 	vldr	s14, [r3]
 8008ea4:	eef0 0a47 	vmov.f32	s1, s14
 8008ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8008eac:	f000 ff36 	bl	8009d1c <slalom_right90>
	for (uint8_t i = 0; i < 1; i++) {
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	71fb      	strb	r3, [r7, #7]
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0e1      	beq.n	8008e80 <mode_4+0x2c>
	}
	set_straight(45.0, nomal_run.accel, nomal_run.vel_search,
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <mode_4+0xa4>)
 8008ebe:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <mode_4+0xa4>)
 8008ec4:	ed93 7a00 	vldr	s14, [r3]
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <mode_4+0xa4>)
 8008eca:	edd3 6a00 	vldr	s13, [r3]
 8008ece:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 8008efc <mode_4+0xa8>
 8008ed2:	eef0 1a66 	vmov.f32	s3, s13
 8008ed6:	eeb0 1a47 	vmov.f32	s2, s14
 8008eda:	eef0 0a67 	vmov.f32	s1, s15
 8008ede:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008f00 <mode_4+0xac>
 8008ee2:	f001 fdf5 	bl	800aad0 <set_straight>
			nomal_run.vel_search, 0.0);
	wall_control_flag = 0;
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <mode_4+0xb0>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8008eec:	f001 fee4 	bl	800acb8 <wait_straight>
	//save_log_to_flash();
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000028 	.word	0x20000028
 8008efc:	00000000 	.word	0x00000000
 8008f00:	42340000 	.word	0x42340000
 8008f04:	20000685 	.word	0x20000685

08008f08 <mode_5>:

void mode_5(void) { //nomal_run.accel, nomal_run.vel_search,nomal_run.vel_search
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
//	stop90(nomal_run.accel, nomal_run.vel_search);

//	real_diss_from_acc = 0.0;
//	real_vel_from_acc = 0.0;
//
	start_led();
 8008f0e:	f001 fd0f 	bl	800a930 <start_led>
	log_start();
 8008f12:	f001 fb5f 	bl	800a5d4 <log_start>
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8008f16:	4b25      	ldr	r3, [pc, #148]	; (8008fac <mode_5+0xa4>)
 8008f18:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f1c:	4b23      	ldr	r3, [pc, #140]	; (8008fac <mode_5+0xa4>)
 8008f1e:	ed93 7a00 	vldr	s14, [r3]
 8008f22:	eef0 0a47 	vmov.f32	s1, s14
 8008f26:	eeb0 0a67 	vmov.f32	s0, s15
 8008f2a:	f000 fb4f 	bl	80095cc <go_entrance>
	for (uint8_t i = 0; i < 1; i++) {
 8008f2e:	2300      	movs	r3, #0
 8008f30:	71fb      	strb	r3, [r7, #7]
 8008f32:	e01a      	b.n	8008f6a <mode_5+0x62>
		pass_180(nomal_run.accel, nomal_run.vel_search);
 8008f34:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <mode_5+0xa4>)
 8008f36:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <mode_5+0xa4>)
 8008f3c:	ed93 7a00 	vldr	s14, [r3]
 8008f40:	eef0 0a47 	vmov.f32	s1, s14
 8008f44:	eeb0 0a67 	vmov.f32	s0, s15
 8008f48:	f000 fc48 	bl	80097dc <pass_180>
		slalom_left90(nomal_run.accel, nomal_run.vel_search);
 8008f4c:	4b17      	ldr	r3, [pc, #92]	; (8008fac <mode_5+0xa4>)
 8008f4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <mode_5+0xa4>)
 8008f54:	ed93 7a00 	vldr	s14, [r3]
 8008f58:	eef0 0a47 	vmov.f32	s1, s14
 8008f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f60:	f000 fe3a 	bl	8009bd8 <slalom_left90>
	for (uint8_t i = 0; i < 1; i++) {
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	3301      	adds	r3, #1
 8008f68:	71fb      	strb	r3, [r7, #7]
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0e1      	beq.n	8008f34 <mode_5+0x2c>
	}
	set_straight(45.0, nomal_run.accel, nomal_run.vel_search,
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <mode_5+0xa4>)
 8008f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f76:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <mode_5+0xa4>)
 8008f78:	ed93 7a00 	vldr	s14, [r3]
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <mode_5+0xa4>)
 8008f7e:	edd3 6a00 	vldr	s13, [r3]
 8008f82:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 8008fb0 <mode_5+0xa8>
 8008f86:	eef0 1a66 	vmov.f32	s3, s13
 8008f8a:	eeb0 1a47 	vmov.f32	s2, s14
 8008f8e:	eef0 0a67 	vmov.f32	s1, s15
 8008f92:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008fb4 <mode_5+0xac>
 8008f96:	f001 fd9b 	bl	800aad0 <set_straight>
			nomal_run.vel_search, 0.0);
	wall_control_flag = 0;
 8008f9a:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <mode_5+0xb0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8008fa0:	f001 fe8a 	bl	800acb8 <wait_straight>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000028 	.word	0x20000028
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	42340000 	.word	0x42340000
 8008fb8:	20000685 	.word	0x20000685

08008fbc <mode_6>:

void mode_6(void) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
//	while (failsafe_flag==0)
//		;

//	wall_cntrol_gain.Ki = 0.25*0;
//
	wall_cntrol_gain.Kp = 0.08;
 8008fc0:	4b15      	ldr	r3, [pc, #84]	; (8009018 <mode_6+0x5c>)
 8008fc2:	4a16      	ldr	r2, [pc, #88]	; (800901c <mode_6+0x60>)
 8008fc4:	601a      	str	r2, [r3, #0]

	start_led();
 8008fc6:	f001 fcb3 	bl	800a930 <start_led>
	go_entrance(nomal_run.accel, nomal_run.vel_search);
 8008fca:	4b15      	ldr	r3, [pc, #84]	; (8009020 <mode_6+0x64>)
 8008fcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fd0:	4b13      	ldr	r3, [pc, #76]	; (8009020 <mode_6+0x64>)
 8008fd2:	ed93 7a00 	vldr	s14, [r3]
 8008fd6:	eef0 0a47 	vmov.f32	s1, s14
 8008fda:	eeb0 0a67 	vmov.f32	s0, s15
 8008fde:	f000 faf5 	bl	80095cc <go_entrance>
	log_start();
 8008fe2:	f001 faf7 	bl	800a5d4 <log_start>
	set_straight(90 * 6, nomal_run.accel, nomal_run.vel_search,
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <mode_6+0x64>)
 8008fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fec:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <mode_6+0x64>)
 8008fee:	ed93 7a00 	vldr	s14, [r3]
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <mode_6+0x64>)
 8008ff4:	edd3 6a00 	vldr	s13, [r3]
 8008ff8:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8009024 <mode_6+0x68>
 8008ffc:	eef0 1a66 	vmov.f32	s3, s13
 8009000:	eeb0 1a47 	vmov.f32	s2, s14
 8009004:	eef0 0a67 	vmov.f32	s1, s15
 8009008:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009028 <mode_6+0x6c>
 800900c:	f001 fd60 	bl	800aad0 <set_straight>
			nomal_run.vel_search, 0);
	wait_straight();
 8009010:	f001 fe52 	bl	800acb8 <wait_straight>
//	stop90(nomal_run.accel, nomal_run.vel_search);

//	read_all_walldata();
//	output_Walldata(ALL);

}
 8009014:	bf00      	nop
 8009016:	bd80      	pop	{r7, pc}
 8009018:	2003229c 	.word	0x2003229c
 800901c:	3da3d70a 	.word	0x3da3d70a
 8009020:	20000028 	.word	0x20000028
 8009024:	00000000 	.word	0x00000000
 8009028:	44070000 	.word	0x44070000

0800902c <mode_7>:

void mode_7(void) {
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
//	rotation_gain.Ki = 0.001;
//	while (failsafe_flag == 0) {
//		printf("rot_Dev=%8.3f\n", rotation_deviation.cumulative);
//	}

	start_led();
 8009030:	f001 fc7e 	bl	800a930 <start_led>
	moter_flag = 0;
 8009034:	4b39      	ldr	r3, [pc, #228]	; (800911c <mode_7+0xf0>)
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
	log_start();
 800903a:	f001 facb 	bl	800a5d4 <log_start>
	while (log_index < 1000) {
 800903e:	bf00      	nop
 8009040:	4b37      	ldr	r3, [pc, #220]	; (8009120 <mode_7+0xf4>)
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009048:	d3fa      	bcc.n	8009040 <mode_7+0x14>

	}
	set_buzzer(0, C_4, 600);
 800904a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800904e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009052:	2000      	movs	r0, #0
 8009054:	f7fe fe90 	bl	8007d78 <set_buzzer>
	log_flag = 0;
 8009058:	4b32      	ldr	r3, [pc, #200]	; (8009124 <mode_7+0xf8>)
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
	start_led();
 800905e:	f001 fc67 	bl	800a930 <start_led>
	moter_flag = 0;
 8009062:	4b2e      	ldr	r3, [pc, #184]	; (800911c <mode_7+0xf0>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 8009068:	4b2e      	ldr	r3, [pc, #184]	; (8009124 <mode_7+0xf8>)
 800906a:	2201      	movs	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
	while (log_index < 2000) {
 800906e:	bf00      	nop
 8009070:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <mode_7+0xf4>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009078:	d3fa      	bcc.n	8009070 <mode_7+0x44>

	}
	set_buzzer(0, C_4, 600);
 800907a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800907e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009082:	2000      	movs	r0, #0
 8009084:	f7fe fe78 	bl	8007d78 <set_buzzer>
	log_flag = 0;
 8009088:	4b26      	ldr	r3, [pc, #152]	; (8009124 <mode_7+0xf8>)
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
	start_led();
 800908e:	f001 fc4f 	bl	800a930 <start_led>
	moter_flag = 0;
 8009092:	4b22      	ldr	r3, [pc, #136]	; (800911c <mode_7+0xf0>)
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 8009098:	4b22      	ldr	r3, [pc, #136]	; (8009124 <mode_7+0xf8>)
 800909a:	2201      	movs	r2, #1
 800909c:	701a      	strb	r2, [r3, #0]
	while (log_index < 3000) {
 800909e:	bf00      	nop
 80090a0:	4b1f      	ldr	r3, [pc, #124]	; (8009120 <mode_7+0xf4>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d9f9      	bls.n	80090a0 <mode_7+0x74>

	}
	set_buzzer(0, C_4, 600);
 80090ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80090b0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7fe fe5f 	bl	8007d78 <set_buzzer>
	log_flag = 0;
 80090ba:	4b1a      	ldr	r3, [pc, #104]	; (8009124 <mode_7+0xf8>)
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
//	printf("1,%d,%d\n", log_flag, log_index);
	start_led();
 80090c0:	f001 fc36 	bl	800a930 <start_led>
	moter_flag = 0;
 80090c4:	4b15      	ldr	r3, [pc, #84]	; (800911c <mode_7+0xf0>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 80090ca:	4b16      	ldr	r3, [pc, #88]	; (8009124 <mode_7+0xf8>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	701a      	strb	r2, [r3, #0]
	while (log_index < 4000) {
 80090d0:	bf00      	nop
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <mode_7+0xf4>)
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80090da:	d3fa      	bcc.n	80090d2 <mode_7+0xa6>
	//	printf("2,%d,%d\n", log_flag, log_index);
	}
	log_flag = 0;
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <mode_7+0xf8>)
 80090de:	2200      	movs	r2, #0
 80090e0:	701a      	strb	r2, [r3, #0]
	set_buzzer(0, C_4, 600);
 80090e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80090e6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7fe fe44 	bl	8007d78 <set_buzzer>
//	printf("3,%d,%d\n", log_flag, log_index);
	start_led();
 80090f0:	f001 fc1e 	bl	800a930 <start_led>
//	printf("4,%d,%d\n", log_flag, log_index);
	moter_flag = 0;
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <mode_7+0xf0>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
	log_flag = 1;
 80090fa:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <mode_7+0xf8>)
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
//	printf("6,%d,%d\n", log_flag, log_index);
	while (log_flag == 1) {
 8009100:	bf00      	nop
 8009102:	4b08      	ldr	r3, [pc, #32]	; (8009124 <mode_7+0xf8>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d0fb      	beq.n	8009102 <mode_7+0xd6>
		//	printf("5,%d,%d\n", log_flag,log_index);
	}
	set_buzzer(0, C_4, 600);
 800910a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800910e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009112:	2000      	movs	r0, #0
 8009114:	f7fe fe30 	bl	8007d78 <set_buzzer>

//	out_put_pass(pass);
//	while (SWITCH == 1) {
//
//	}
}
 8009118:	bf00      	nop
 800911a:	bd80      	pop	{r7, pc}
 800911c:	2000066a 	.word	0x2000066a
 8009120:	2000066c 	.word	0x2000066c
 8009124:	20000672 	.word	0x20000672

08009128 <go_mode>:

void go_mode(void) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	71fb      	strb	r3, [r7, #7]
	wall_control_flag = 0;
 8009132:	4baf      	ldr	r3, [pc, #700]	; (80093f0 <go_mode+0x2c8>)
 8009134:	2200      	movs	r2, #0
 8009136:	701a      	strb	r2, [r3, #0]
	printf("0,mode=%d,%d\n", mode, (mode & 0x80));
 8009138:	4bae      	ldr	r3, [pc, #696]	; (80093f4 <go_mode+0x2cc>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	4619      	mov	r1, r3
 800913e:	4bad      	ldr	r3, [pc, #692]	; (80093f4 <go_mode+0x2cc>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009146:	461a      	mov	r2, r3
 8009148:	48ab      	ldr	r0, [pc, #684]	; (80093f8 <go_mode+0x2d0>)
 800914a:	f004 fbbb 	bl	800d8c4 <iprintf>
	mode = mode | 0x80;
 800914e:	4ba9      	ldr	r3, [pc, #676]	; (80093f4 <go_mode+0x2cc>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	4ba6      	ldr	r3, [pc, #664]	; (80093f4 <go_mode+0x2cc>)
 800915a:	701a      	strb	r2, [r3, #0]
	printf("1,mode=%d,%d\n", mode, (mode & 0x80));
 800915c:	4ba5      	ldr	r3, [pc, #660]	; (80093f4 <go_mode+0x2cc>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	4ba4      	ldr	r3, [pc, #656]	; (80093f4 <go_mode+0x2cc>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916a:	461a      	mov	r2, r3
 800916c:	48a3      	ldr	r0, [pc, #652]	; (80093fc <go_mode+0x2d4>)
 800916e:	f004 fba9 	bl	800d8c4 <iprintf>
	Battery_Check();
 8009172:	f001 f95d 	bl	800a430 <Battery_Check>
	failsafe_flag = 0;
 8009176:	4ba2      	ldr	r3, [pc, #648]	; (8009400 <go_mode+0x2d8>)
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 800917c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009180:	f7f7 ff7c 	bl	800107c <HAL_Delay>
	ideal_translation.accel = 0.0;
 8009184:	4b9f      	ldr	r3, [pc, #636]	; (8009404 <go_mode+0x2dc>)
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 800918c:	4b9d      	ldr	r3, [pc, #628]	; (8009404 <go_mode+0x2dc>)
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	605a      	str	r2, [r3, #4]
	ideal_translation.dis = 0.0;
 8009194:	4b9b      	ldr	r3, [pc, #620]	; (8009404 <go_mode+0x2dc>)
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	609a      	str	r2, [r3, #8]
	ideal_rotation.accel = 0.0;
 800919c:	4b9a      	ldr	r3, [pc, #616]	; (8009408 <go_mode+0x2e0>)
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
	ideal_rotation.dis = 0.0;
 80091a4:	4b98      	ldr	r3, [pc, #608]	; (8009408 <go_mode+0x2e0>)
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	609a      	str	r2, [r3, #8]
	ideal_rotation.vel = 0.0;
 80091ac:	4b96      	ldr	r3, [pc, #600]	; (8009408 <go_mode+0x2e0>)
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	605a      	str	r2, [r3, #4]
	rotation_parameter.back_rightturn_flag = 0;
 80091b4:	4b95      	ldr	r3, [pc, #596]	; (800940c <go_mode+0x2e4>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	761a      	strb	r2, [r3, #24]
	rotation_deviation.now = 0.0;
 80091ba:	4b95      	ldr	r3, [pc, #596]	; (8009410 <go_mode+0x2e8>)
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 80091c2:	4b93      	ldr	r3, [pc, #588]	; (8009410 <go_mode+0x2e8>)
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 80091ca:	4b92      	ldr	r3, [pc, #584]	; (8009414 <go_mode+0x2ec>)
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
	run_left_deviation.cumulative = 0.0;
 80091d2:	4b91      	ldr	r3, [pc, #580]	; (8009418 <go_mode+0x2f0>)
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	605a      	str	r2, [r3, #4]
	run_right_deviation.cumulative = 0.0;
 80091da:	4b90      	ldr	r3, [pc, #576]	; (800941c <go_mode+0x2f4>)
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	605a      	str	r2, [r3, #4]
	moter_flag = 0;
 80091e2:	4b8f      	ldr	r3, [pc, #572]	; (8009420 <go_mode+0x2f8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
	x.now = 0;
 80091e8:	4b8e      	ldr	r3, [pc, #568]	; (8009424 <go_mode+0x2fc>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 80091ee:	4b8e      	ldr	r3, [pc, #568]	; (8009428 <go_mode+0x300>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	701a      	strb	r2, [r3, #0]
	direction = 0;
 80091f4:	4b8d      	ldr	r3, [pc, #564]	; (800942c <go_mode+0x304>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
	if ((mode & 0xf) == 0) {
 80091fa:	4b7e      	ldr	r3, [pc, #504]	; (80093f4 <go_mode+0x2cc>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <go_mode+0xe4>
		mode_0();
 8009206:	f7ff fdd2 	bl	8008dae <mode_0>
 800920a:	e12e      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 1) {
 800920c:	4b79      	ldr	r3, [pc, #484]	; (80093f4 <go_mode+0x2cc>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	2b01      	cmp	r3, #1
 8009216:	d132      	bne.n	800927e <go_mode+0x156>
		printf("2,mode=%d,%d\n", mode, (mode & 0x80));
 8009218:	4b76      	ldr	r3, [pc, #472]	; (80093f4 <go_mode+0x2cc>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	4b75      	ldr	r3, [pc, #468]	; (80093f4 <go_mode+0x2cc>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009226:	461a      	mov	r2, r3
 8009228:	4881      	ldr	r0, [pc, #516]	; (8009430 <go_mode+0x308>)
 800922a:	f004 fb4b 	bl	800d8c4 <iprintf>
		for (i = 0; i < 2; i++) {
 800922e:	2300      	movs	r3, #0
 8009230:	71fb      	strb	r3, [r7, #7]
 8009232:	e013      	b.n	800925c <go_mode+0x134>
			set_led((mode & 0xf));
 8009234:	4b6f      	ldr	r3, [pc, #444]	; (80093f4 <go_mode+0x2cc>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	b2db      	uxtb	r3, r3
 800923e:	4618      	mov	r0, r3
 8009240:	f001 f970 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009244:	2064      	movs	r0, #100	; 0x64
 8009246:	f7f7 ff19 	bl	800107c <HAL_Delay>
			set_led(0);
 800924a:	2000      	movs	r0, #0
 800924c:	f001 f96a 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009250:	2064      	movs	r0, #100	; 0x64
 8009252:	f7f7 ff13 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	3301      	adds	r3, #1
 800925a:	71fb      	strb	r3, [r7, #7]
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d9e8      	bls.n	8009234 <go_mode+0x10c>
		}
		mode_1();
 8009262:	f7ff fdac 	bl	8008dbe <mode_1>
		printf("3,mode=%d,%d\n", mode, (mode & 0x80));
 8009266:	4b63      	ldr	r3, [pc, #396]	; (80093f4 <go_mode+0x2cc>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	4b61      	ldr	r3, [pc, #388]	; (80093f4 <go_mode+0x2cc>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009274:	461a      	mov	r2, r3
 8009276:	486f      	ldr	r0, [pc, #444]	; (8009434 <go_mode+0x30c>)
 8009278:	f004 fb24 	bl	800d8c4 <iprintf>
 800927c:	e0f5      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 2) {
 800927e:	4b5d      	ldr	r3, [pc, #372]	; (80093f4 <go_mode+0x2cc>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	2b02      	cmp	r3, #2
 8009288:	d11c      	bne.n	80092c4 <go_mode+0x19c>
		for (i = 0; i < 2; i++) {
 800928a:	2300      	movs	r3, #0
 800928c:	71fb      	strb	r3, [r7, #7]
 800928e:	e013      	b.n	80092b8 <go_mode+0x190>
			set_led((mode & 0xf));
 8009290:	4b58      	ldr	r3, [pc, #352]	; (80093f4 <go_mode+0x2cc>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	b2db      	uxtb	r3, r3
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f942 	bl	800a524 <set_led>
			HAL_Delay(100);
 80092a0:	2064      	movs	r0, #100	; 0x64
 80092a2:	f7f7 feeb 	bl	800107c <HAL_Delay>
			set_led(0);
 80092a6:	2000      	movs	r0, #0
 80092a8:	f001 f93c 	bl	800a524 <set_led>
			HAL_Delay(100);
 80092ac:	2064      	movs	r0, #100	; 0x64
 80092ae:	f7f7 fee5 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	3301      	adds	r3, #1
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d9e8      	bls.n	8009290 <go_mode+0x168>
		}
		mode_2();
 80092be:	f7ff fd8d 	bl	8008ddc <mode_2>
 80092c2:	e0d2      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 3) {
 80092c4:	4b4b      	ldr	r3, [pc, #300]	; (80093f4 <go_mode+0x2cc>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 030f 	and.w	r3, r3, #15
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d11c      	bne.n	800930a <go_mode+0x1e2>
		for (i = 0; i < 2; i++) {
 80092d0:	2300      	movs	r3, #0
 80092d2:	71fb      	strb	r3, [r7, #7]
 80092d4:	e013      	b.n	80092fe <go_mode+0x1d6>
			set_led((mode & 0xf));
 80092d6:	4b47      	ldr	r3, [pc, #284]	; (80093f4 <go_mode+0x2cc>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f91f 	bl	800a524 <set_led>
			HAL_Delay(100);
 80092e6:	2064      	movs	r0, #100	; 0x64
 80092e8:	f7f7 fec8 	bl	800107c <HAL_Delay>
			set_led(0);
 80092ec:	2000      	movs	r0, #0
 80092ee:	f001 f919 	bl	800a524 <set_led>
			HAL_Delay(100);
 80092f2:	2064      	movs	r0, #100	; 0x64
 80092f4:	f7f7 fec2 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	3301      	adds	r3, #1
 80092fc:	71fb      	strb	r3, [r7, #7]
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d9e8      	bls.n	80092d6 <go_mode+0x1ae>
		}
		mode_3();
 8009304:	f7ff fd88 	bl	8008e18 <mode_3>
 8009308:	e0af      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 4) {
 800930a:	4b3a      	ldr	r3, [pc, #232]	; (80093f4 <go_mode+0x2cc>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	2b04      	cmp	r3, #4
 8009314:	d11c      	bne.n	8009350 <go_mode+0x228>
		for (i = 0; i < 2; i++) {
 8009316:	2300      	movs	r3, #0
 8009318:	71fb      	strb	r3, [r7, #7]
 800931a:	e013      	b.n	8009344 <go_mode+0x21c>
			set_led((mode & 0xf));
 800931c:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <go_mode+0x2cc>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	b2db      	uxtb	r3, r3
 8009326:	4618      	mov	r0, r3
 8009328:	f001 f8fc 	bl	800a524 <set_led>
			HAL_Delay(100);
 800932c:	2064      	movs	r0, #100	; 0x64
 800932e:	f7f7 fea5 	bl	800107c <HAL_Delay>
			set_led(0);
 8009332:	2000      	movs	r0, #0
 8009334:	f001 f8f6 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009338:	2064      	movs	r0, #100	; 0x64
 800933a:	f7f7 fe9f 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	3301      	adds	r3, #1
 8009342:	71fb      	strb	r3, [r7, #7]
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d9e8      	bls.n	800931c <go_mode+0x1f4>
		}
		mode_4();
 800934a:	f7ff fd83 	bl	8008e54 <mode_4>
 800934e:	e08c      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 5) {
 8009350:	4b28      	ldr	r3, [pc, #160]	; (80093f4 <go_mode+0x2cc>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	2b05      	cmp	r3, #5
 800935a:	d11c      	bne.n	8009396 <go_mode+0x26e>
		for (i = 0; i < 2; i++) {
 800935c:	2300      	movs	r3, #0
 800935e:	71fb      	strb	r3, [r7, #7]
 8009360:	e013      	b.n	800938a <go_mode+0x262>
			set_led((mode & 0xf));
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <go_mode+0x2cc>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f8d9 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009372:	2064      	movs	r0, #100	; 0x64
 8009374:	f7f7 fe82 	bl	800107c <HAL_Delay>
			set_led(0);
 8009378:	2000      	movs	r0, #0
 800937a:	f001 f8d3 	bl	800a524 <set_led>
			HAL_Delay(100);
 800937e:	2064      	movs	r0, #100	; 0x64
 8009380:	f7f7 fe7c 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	3301      	adds	r3, #1
 8009388:	71fb      	strb	r3, [r7, #7]
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d9e8      	bls.n	8009362 <go_mode+0x23a>
		}
		mode_5();
 8009390:	f7ff fdba 	bl	8008f08 <mode_5>
 8009394:	e069      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 6) {
 8009396:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <go_mode+0x2cc>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	2b06      	cmp	r3, #6
 80093a0:	d11c      	bne.n	80093dc <go_mode+0x2b4>
		for (i = 0; i < 2; i++) {
 80093a2:	2300      	movs	r3, #0
 80093a4:	71fb      	strb	r3, [r7, #7]
 80093a6:	e013      	b.n	80093d0 <go_mode+0x2a8>
			set_led((mode & 0xf));
 80093a8:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <go_mode+0x2cc>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 f8b6 	bl	800a524 <set_led>
			HAL_Delay(100);
 80093b8:	2064      	movs	r0, #100	; 0x64
 80093ba:	f7f7 fe5f 	bl	800107c <HAL_Delay>
			set_led(0);
 80093be:	2000      	movs	r0, #0
 80093c0:	f001 f8b0 	bl	800a524 <set_led>
			HAL_Delay(100);
 80093c4:	2064      	movs	r0, #100	; 0x64
 80093c6:	f7f7 fe59 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	3301      	adds	r3, #1
 80093ce:	71fb      	strb	r3, [r7, #7]
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d9e8      	bls.n	80093a8 <go_mode+0x280>
		}
		mode_6();
 80093d6:	f7ff fdf1 	bl	8008fbc <mode_6>
 80093da:	e046      	b.n	800946a <go_mode+0x342>
	} else if ((mode & 0xf) == 7) {
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <go_mode+0x2cc>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	2b07      	cmp	r3, #7
 80093e6:	d140      	bne.n	800946a <go_mode+0x342>
		for (i = 0; i < 2; i++) {
 80093e8:	2300      	movs	r3, #0
 80093ea:	71fb      	strb	r3, [r7, #7]
 80093ec:	e038      	b.n	8009460 <go_mode+0x338>
 80093ee:	bf00      	nop
 80093f0:	20000685 	.word	0x20000685
 80093f4:	20000651 	.word	0x20000651
 80093f8:	0800f810 	.word	0x0800f810
 80093fc:	0800f820 	.word	0x0800f820
 8009400:	2000065c 	.word	0x2000065c
 8009404:	2001961c 	.word	0x2001961c
 8009408:	20000e90 	.word	0x20000e90
 800940c:	2001982c 	.word	0x2001982c
 8009410:	2001981c 	.word	0x2001981c
 8009414:	20000664 	.word	0x20000664
 8009418:	20019648 	.word	0x20019648
 800941c:	20032290 	.word	0x20032290
 8009420:	2000066a 	.word	0x2000066a
 8009424:	20000b88 	.word	0x20000b88
 8009428:	20019858 	.word	0x20019858
 800942c:	20000650 	.word	0x20000650
 8009430:	0800f830 	.word	0x0800f830
 8009434:	0800f840 	.word	0x0800f840
			set_led((mode & 0xf));
 8009438:	4b2d      	ldr	r3, [pc, #180]	; (80094f0 <go_mode+0x3c8>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	b2db      	uxtb	r3, r3
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f86e 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009448:	2064      	movs	r0, #100	; 0x64
 800944a:	f7f7 fe17 	bl	800107c <HAL_Delay>
			set_led(0);
 800944e:	2000      	movs	r0, #0
 8009450:	f001 f868 	bl	800a524 <set_led>
			HAL_Delay(100);
 8009454:	2064      	movs	r0, #100	; 0x64
 8009456:	f7f7 fe11 	bl	800107c <HAL_Delay>
		for (i = 0; i < 2; i++) {
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	3301      	adds	r3, #1
 800945e:	71fb      	strb	r3, [r7, #7]
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d9e8      	bls.n	8009438 <go_mode+0x310>
		}
		mode_7();
 8009466:	f7ff fde1 	bl	800902c <mode_7>
	}

	HAL_Delay(200);
 800946a:	20c8      	movs	r0, #200	; 0xc8
 800946c:	f7f7 fe06 	bl	800107c <HAL_Delay>
	ideal_translation.accel = 0.0;
 8009470:	4b20      	ldr	r3, [pc, #128]	; (80094f4 <go_mode+0x3cc>)
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = 0.0;
 8009478:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <go_mode+0x3cc>)
 800947a:	f04f 0200 	mov.w	r2, #0
 800947e:	605a      	str	r2, [r3, #4]

	duty.left = 0;
 8009480:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <go_mode+0x3d0>)
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
	duty.right = 0;
 8009486:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <go_mode+0x3d0>)
 8009488:	2200      	movs	r2, #0
 800948a:	605a      	str	r2, [r3, #4]
	duty_to_moter();
 800948c:	f001 fd98 	bl	800afc0 <duty_to_moter>
	x.now = 0;
 8009490:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <go_mode+0x3d4>)
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
	y.now = 0;
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <go_mode+0x3d8>)
 8009498:	2200      	movs	r2, #0
 800949a:	701a      	strb	r2, [r3, #0]
	direction = 0;
 800949c:	4b19      	ldr	r3, [pc, #100]	; (8009504 <go_mode+0x3dc>)
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
	if (failsafe_flag == 1) {
 80094a2:	4b19      	ldr	r3, [pc, #100]	; (8009508 <go_mode+0x3e0>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d105      	bne.n	80094b6 <go_mode+0x38e>
		while (failsafe_counter < 1000) {
 80094aa:	bf00      	nop
 80094ac:	4b17      	ldr	r3, [pc, #92]	; (800950c <go_mode+0x3e4>)
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094b4:	d3fa      	bcc.n	80094ac <go_mode+0x384>
		}
	}
	mode = mode & 0x7f;
 80094b6:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <go_mode+0x3c8>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <go_mode+0x3c8>)
 80094c2:	701a      	strb	r2, [r3, #0]
	moter_flag = 0;
 80094c4:	4b12      	ldr	r3, [pc, #72]	; (8009510 <go_mode+0x3e8>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
	failsafe_flag = 0;
 80094ca:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <go_mode+0x3e0>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
	SEN_check_flag = 0;
 80094d0:	4b10      	ldr	r3, [pc, #64]	; (8009514 <go_mode+0x3ec>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
	set_led(0);
 80094d6:	2000      	movs	r0, #0
 80094d8:	f001 f824 	bl	800a524 <set_led>

	if (log_index != 0) {
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <go_mode+0x3f0>)
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <go_mode+0x3c0>
		save_log_to_flash();
 80094e4:	f000 fd56 	bl	8009f94 <save_log_to_flash>
	}
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20000651 	.word	0x20000651
 80094f4:	2001961c 	.word	0x2001961c
 80094f8:	20032144 	.word	0x20032144
 80094fc:	20000b88 	.word	0x20000b88
 8009500:	20019858 	.word	0x20019858
 8009504:	20000650 	.word	0x20000650
 8009508:	2000065c 	.word	0x2000065c
 800950c:	20000668 	.word	0x20000668
 8009510:	2000066a 	.word	0x2000066a
 8009514:	2000066b 	.word	0x2000066b
 8009518:	2000066c 	.word	0x2000066c

0800951c <set_center_by_front_Wall>:
#include "stdint.h"
#include "walldata.h"
#include "motion.h"
#include "buzzer.h"

void set_center_by_front_Wall(void) {
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
	front_wall_flag = 0;
 8009520:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <set_center_by_front_Wall+0x94>)
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
	front_wall_value_L = (int) 2585 * 0.8;
 8009526:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <set_center_by_front_Wall+0x98>)
 8009528:	f640 0214 	movw	r2, #2068	; 0x814
 800952c:	601a      	str	r2, [r3, #0]
	front_wall_value_R = (int) 4200 * 0.8;
 800952e:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <set_center_by_front_Wall+0x9c>)
 8009530:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8009534:	601a      	str	r2, [r3, #0]
	front_wall_gain = 0.1;
 8009536:	4b21      	ldr	r3, [pc, #132]	; (80095bc <set_center_by_front_Wall+0xa0>)
 8009538:	4a21      	ldr	r2, [pc, #132]	; (80095c0 <set_center_by_front_Wall+0xa4>)
 800953a:	601a      	str	r2, [r3, #0]
	front_wall_flag = 1;
 800953c:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <set_center_by_front_Wall+0x94>)
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
	HAL_Delay(700);
 8009542:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8009546:	f7f7 fd99 	bl	800107c <HAL_Delay>
	front_wall_flag = 0;
 800954a:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <set_center_by_front_Wall+0x94>)
 800954c:	2200      	movs	r2, #0
 800954e:	701a      	strb	r2, [r3, #0]
	front_wall_value_L = 2585;
 8009550:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <set_center_by_front_Wall+0x98>)
 8009552:	f640 2219 	movw	r2, #2585	; 0xa19
 8009556:	601a      	str	r2, [r3, #0]
	front_wall_value_R = 4200;
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <set_center_by_front_Wall+0x9c>)
 800955a:	f241 0268 	movw	r2, #4200	; 0x1068
 800955e:	601a      	str	r2, [r3, #0]
	front_wall_gain = 0.03;
 8009560:	4b16      	ldr	r3, [pc, #88]	; (80095bc <set_center_by_front_Wall+0xa0>)
 8009562:	4a18      	ldr	r2, [pc, #96]	; (80095c4 <set_center_by_front_Wall+0xa8>)
 8009564:	601a      	str	r2, [r3, #0]
	front_wall_flag = 1;
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <set_center_by_front_Wall+0x94>)
 8009568:	2201      	movs	r2, #1
 800956a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 800956c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009570:	f7f7 fd84 	bl	800107c <HAL_Delay>
	front_wall_flag = 0;
 8009574:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <set_center_by_front_Wall+0x94>)
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
	front_wall_value_L = 2585;
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <set_center_by_front_Wall+0x98>)
 800957c:	f640 2219 	movw	r2, #2585	; 0xa19
 8009580:	601a      	str	r2, [r3, #0]
	front_wall_value_R = 4200;
 8009582:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <set_center_by_front_Wall+0x9c>)
 8009584:	f241 0268 	movw	r2, #4200	; 0x1068
 8009588:	601a      	str	r2, [r3, #0]
	front_wall_gain = 0.1;
 800958a:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <set_center_by_front_Wall+0xa0>)
 800958c:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <set_center_by_front_Wall+0xa4>)
 800958e:	601a      	str	r2, [r3, #0]
	front_wall_flag = 1;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <set_center_by_front_Wall+0x94>)
 8009592:	2201      	movs	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8009596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800959a:	f7f7 fd6f 	bl	800107c <HAL_Delay>
	front_wall_flag = 0;
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <set_center_by_front_Wall+0x94>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 80095a4:	4b08      	ldr	r3, [pc, #32]	; (80095c8 <set_center_by_front_Wall+0xac>)
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
}
 80095ac:	bf00      	nop
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000688 	.word	0x20000688
 80095b4:	20019618 	.word	0x20019618
 80095b8:	2001954c 	.word	0x2001954c
 80095bc:	20019658 	.word	0x20019658
 80095c0:	3dcccccd 	.word	0x3dcccccd
 80095c4:	3cf5c28f 	.word	0x3cf5c28f
 80095c8:	2001981c 	.word	0x2001981c

080095cc <go_entrance>:

void go_entrance(float accel, float vel) {
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80095d6:	edc7 0a00 	vstr	s1, [r7]
//	rotation_deviation.now = 0.0;
//rotation_deviation.cumulative = 0.0;
	moter_flag = 1;
 80095da:	4b0c      	ldr	r3, [pc, #48]	; (800960c <go_entrance+0x40>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
	set_straight(67.0, accel, vel, 0.0, vel);
 80095e0:	ed97 2a00 	vldr	s4, [r7]
 80095e4:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8009610 <go_entrance+0x44>
 80095e8:	ed97 1a00 	vldr	s2, [r7]
 80095ec:	edd7 0a01 	vldr	s1, [r7, #4]
 80095f0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009614 <go_entrance+0x48>
 80095f4:	f001 fa6c 	bl	800aad0 <set_straight>
	wall_control_flag=10;
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <go_entrance+0x4c>)
 80095fa:	220a      	movs	r2, #10
 80095fc:	701a      	strb	r2, [r3, #0]
	wait_straight();
 80095fe:	f001 fb5b 	bl	800acb8 <wait_straight>
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000066a 	.word	0x2000066a
 8009610:	00000000 	.word	0x00000000
 8009614:	42860000 	.word	0x42860000
 8009618:	20000685 	.word	0x20000685

0800961c <turn_left>:
//	rotation_deviation.cumulative = 0.0;
	set_straight(22.0, accel, vel, 0.0, 0.0);
	wait_straight();
}

void turn_left(float accel, float vel) {
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	ed87 0a01 	vstr	s0, [r7, #4]
 8009626:	edc7 0a00 	vstr	s1, [r7]
	if (getWall(x.now, y.now, direction, &walldata.real) == 0) {
 800962a:	4b2c      	ldr	r3, [pc, #176]	; (80096dc <turn_left+0xc0>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <turn_left+0xc4>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	4619      	mov	r1, r3
 8009636:	4b2b      	ldr	r3, [pc, #172]	; (80096e4 <turn_left+0xc8>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	4b2a      	ldr	r3, [pc, #168]	; (80096e8 <turn_left+0xcc>)
 800963e:	f003 fc07 	bl	800ce50 <getWall>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d111      	bne.n	800966c <turn_left+0x50>
		set_straight(45.0, accel, vel, vel, 0.0);
 8009648:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80096ec <turn_left+0xd0>
 800964c:	edd7 1a00 	vldr	s3, [r7]
 8009650:	ed97 1a00 	vldr	s2, [r7]
 8009654:	edd7 0a01 	vldr	s1, [r7, #4]
 8009658:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80096f0 <turn_left+0xd4>
 800965c:	f001 fa38 	bl	800aad0 <set_straight>
		wait_straight();
 8009660:	f001 fb2a 	bl	800acb8 <wait_straight>
		HAL_Delay(200);
 8009664:	20c8      	movs	r0, #200	; 0xc8
 8009666:	f7f7 fd09 	bl	800107c <HAL_Delay>
 800966a:	e00f      	b.n	800968c <turn_left+0x70>
	} else {
		set_straight(10.0, accel, vel, vel, 0.0);
 800966c:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 80096ec <turn_left+0xd0>
 8009670:	edd7 1a00 	vldr	s3, [r7]
 8009674:	ed97 1a00 	vldr	s2, [r7]
 8009678:	edd7 0a01 	vldr	s1, [r7, #4]
 800967c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009680:	f001 fa26 	bl	800aad0 <set_straight>
		wait_straight();
 8009684:	f001 fb18 	bl	800acb8 <wait_straight>
		set_center_by_front_Wall();
 8009688:	f7ff ff48 	bl	800951c <set_center_by_front_Wall>
	}
	set_rotation(90.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <turn_left+0xd8>)
 800968e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009692:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <turn_left+0xd8>)
 8009694:	ed93 7a00 	vldr	s14, [r3]
 8009698:	eddf 1a14 	vldr	s3, [pc, #80]	; 80096ec <turn_left+0xd0>
 800969c:	eeb0 1a47 	vmov.f32	s2, s14
 80096a0:	eef0 0a67 	vmov.f32	s1, s15
 80096a4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80096f8 <turn_left+0xdc>
 80096a8:	f001 fa4c 	bl	800ab44 <set_rotation>
	wait_rotation();
 80096ac:	f001 fb44 	bl	800ad38 <wait_rotation>
	HAL_Delay(200);
 80096b0:	20c8      	movs	r0, #200	; 0xc8
 80096b2:	f7f7 fce3 	bl	800107c <HAL_Delay>
	set_straight(45.0, accel, vel, 0.0, vel);
 80096b6:	ed97 2a00 	vldr	s4, [r7]
 80096ba:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80096ec <turn_left+0xd0>
 80096be:	ed97 1a00 	vldr	s2, [r7]
 80096c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80096c6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80096f0 <turn_left+0xd4>
 80096ca:	f001 fa01 	bl	800aad0 <set_straight>
	wait_straight();
 80096ce:	f001 faf3 	bl	800acb8 <wait_straight>
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000b88 	.word	0x20000b88
 80096e0:	20019858 	.word	0x20019858
 80096e4:	20000650 	.word	0x20000650
 80096e8:	200009bc 	.word	0x200009bc
 80096ec:	00000000 	.word	0x00000000
 80096f0:	42340000 	.word	0x42340000
 80096f4:	20000038 	.word	0x20000038
 80096f8:	42b40000 	.word	0x42b40000

080096fc <turn_right>:

void turn_right(float accel, float vel) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	ed87 0a01 	vstr	s0, [r7, #4]
 8009706:	edc7 0a00 	vstr	s1, [r7]
	if (getWall(x.now, y.now, direction, &walldata.real) == 0) {
 800970a:	4b2c      	ldr	r3, [pc, #176]	; (80097bc <turn_right+0xc0>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	4b2b      	ldr	r3, [pc, #172]	; (80097c0 <turn_right+0xc4>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	4619      	mov	r1, r3
 8009716:	4b2b      	ldr	r3, [pc, #172]	; (80097c4 <turn_right+0xc8>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	4b2a      	ldr	r3, [pc, #168]	; (80097c8 <turn_right+0xcc>)
 800971e:	f003 fb97 	bl	800ce50 <getWall>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d111      	bne.n	800974c <turn_right+0x50>
		set_straight(45.0, accel, vel, vel, 0.0);
 8009728:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80097cc <turn_right+0xd0>
 800972c:	edd7 1a00 	vldr	s3, [r7]
 8009730:	ed97 1a00 	vldr	s2, [r7]
 8009734:	edd7 0a01 	vldr	s1, [r7, #4]
 8009738:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80097d0 <turn_right+0xd4>
 800973c:	f001 f9c8 	bl	800aad0 <set_straight>
		wait_straight();
 8009740:	f001 faba 	bl	800acb8 <wait_straight>
		HAL_Delay(200);
 8009744:	20c8      	movs	r0, #200	; 0xc8
 8009746:	f7f7 fc99 	bl	800107c <HAL_Delay>
 800974a:	e00f      	b.n	800976c <turn_right+0x70>
	} else {
		set_straight(10.0, accel, vel, vel, 0.0);
 800974c:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 80097cc <turn_right+0xd0>
 8009750:	edd7 1a00 	vldr	s3, [r7]
 8009754:	ed97 1a00 	vldr	s2, [r7]
 8009758:	edd7 0a01 	vldr	s1, [r7, #4]
 800975c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009760:	f001 f9b6 	bl	800aad0 <set_straight>
		wait_straight();
 8009764:	f001 faa8 	bl	800acb8 <wait_straight>
		set_center_by_front_Wall();
 8009768:	f7ff fed8 	bl	800951c <set_center_by_front_Wall>
	}
	set_rotation(-90.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 800976c:	4b19      	ldr	r3, [pc, #100]	; (80097d4 <turn_right+0xd8>)
 800976e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009772:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <turn_right+0xd8>)
 8009774:	ed93 7a00 	vldr	s14, [r3]
 8009778:	eddf 1a14 	vldr	s3, [pc, #80]	; 80097cc <turn_right+0xd0>
 800977c:	eeb0 1a47 	vmov.f32	s2, s14
 8009780:	eef0 0a67 	vmov.f32	s1, s15
 8009784:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80097d8 <turn_right+0xdc>
 8009788:	f001 f9dc 	bl	800ab44 <set_rotation>
	wait_rotation();
 800978c:	f001 fad4 	bl	800ad38 <wait_rotation>
	HAL_Delay(200);
 8009790:	20c8      	movs	r0, #200	; 0xc8
 8009792:	f7f7 fc73 	bl	800107c <HAL_Delay>
	set_straight(45.0, accel, vel, 0.0, vel);
 8009796:	ed97 2a00 	vldr	s4, [r7]
 800979a:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80097cc <turn_right+0xd0>
 800979e:	ed97 1a00 	vldr	s2, [r7]
 80097a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80097a6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80097d0 <turn_right+0xd4>
 80097aa:	f001 f991 	bl	800aad0 <set_straight>
	wait_straight();
 80097ae:	f001 fa83 	bl	800acb8 <wait_straight>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000b88 	.word	0x20000b88
 80097c0:	20019858 	.word	0x20019858
 80097c4:	20000650 	.word	0x20000650
 80097c8:	200009bc 	.word	0x200009bc
 80097cc:	00000000 	.word	0x00000000
 80097d0:	42340000 	.word	0x42340000
 80097d4:	20000038 	.word	0x20000038
 80097d8:	c2b40000 	.word	0xc2b40000

080097dc <pass_180>:

void pass_180(float accel, float vel) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80097e6:	edc7 0a00 	vstr	s1, [r7]
//	log_start();
	set_straight(30.0, accel, vel, vel, vel);
 80097ea:	ed97 2a00 	vldr	s4, [r7]
 80097ee:	edd7 1a00 	vldr	s3, [r7]
 80097f2:	ed97 1a00 	vldr	s2, [r7]
 80097f6:	edd7 0a01 	vldr	s1, [r7, #4]
 80097fa:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80097fe:	f001 f967 	bl	800aad0 <set_straight>
	wait_straight();
 8009802:	f001 fa59 	bl	800acb8 <wait_straight>
	set_straight(30.0, accel, vel, vel, vel);
 8009806:	ed97 2a00 	vldr	s4, [r7]
 800980a:	edd7 1a00 	vldr	s3, [r7]
 800980e:	ed97 1a00 	vldr	s2, [r7]
 8009812:	edd7 0a01 	vldr	s1, [r7, #4]
 8009816:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800981a:	f001 f959 	bl	800aad0 <set_straight>
	wall_control_flag=10;
 800981e:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <pass_180+0x78>)
 8009820:	220a      	movs	r2, #10
 8009822:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009824:	f001 fa48 	bl	800acb8 <wait_straight>
	set_straight(30.0, accel, vel, vel, vel);
 8009828:	ed97 2a00 	vldr	s4, [r7]
 800982c:	edd7 1a00 	vldr	s3, [r7]
 8009830:	ed97 1a00 	vldr	s2, [r7]
 8009834:	edd7 0a01 	vldr	s1, [r7, #4]
 8009838:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800983c:	f001 f948 	bl	800aad0 <set_straight>
	kushi_control_flag=0;
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <pass_180+0x7c>)
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009846:	f001 fa37 	bl	800acb8 <wait_straight>
//	wait_straight();
//	set_straight(40.0, accel, vel, vel, vel);
//	kushi_control_flag=0;
//	wait_straight();
//	log_flag = 0;
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000685 	.word	0x20000685
 8009858:	200006cd 	.word	0x200006cd

0800985c <turn_180>:

void turn_180(float accel, float vel) {
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	ed87 0a01 	vstr	s0, [r7, #4]
 8009866:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 800986a:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8009974 <turn_180+0x118>
 800986e:	edd7 1a00 	vldr	s3, [r7]
 8009872:	ed97 1a00 	vldr	s2, [r7]
 8009876:	edd7 0a01 	vldr	s1, [r7, #4]
 800987a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009978 <turn_180+0x11c>
 800987e:	f001 f927 	bl	800aad0 <set_straight>
	wait_straight();
 8009882:	f001 fa19 	bl	800acb8 <wait_straight>
	HAL_Delay(50);
 8009886:	2032      	movs	r0, #50	; 0x32
 8009888:	f7f7 fbf8 	bl	800107c <HAL_Delay>
//		set_center_by_front_Wall();
//		set_rotation(-90.0, nomal_rotation.accel, nomal_rotation.vel_search,
//				0.0);
//		wait_rotation();
//	} else {
	set_rotation(180.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 800988c:	4b3b      	ldr	r3, [pc, #236]	; (800997c <turn_180+0x120>)
 800988e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009892:	4b3a      	ldr	r3, [pc, #232]	; (800997c <turn_180+0x120>)
 8009894:	ed93 7a00 	vldr	s14, [r3]
 8009898:	eddf 1a36 	vldr	s3, [pc, #216]	; 8009974 <turn_180+0x118>
 800989c:	eeb0 1a47 	vmov.f32	s2, s14
 80098a0:	eef0 0a67 	vmov.f32	s1, s15
 80098a4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8009980 <turn_180+0x124>
 80098a8:	f001 f94c 	bl	800ab44 <set_rotation>
	wait_rotation();
 80098ac:	f001 fa44 	bl	800ad38 <wait_rotation>
//		set_rotation(-90.0, nomal_rotation.accel, nomal_rotation.vel_search,
//				0.0);
//		wait_rotation();
//	}

	if (getWall(x.now, y.now, (direction + 2) % 4, &walldata.real) == 1) {
 80098b0:	4b34      	ldr	r3, [pc, #208]	; (8009984 <turn_180+0x128>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	4b34      	ldr	r3, [pc, #208]	; (8009988 <turn_180+0x12c>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461c      	mov	r4, r3
 80098bc:	4b33      	ldr	r3, [pc, #204]	; (800998c <turn_180+0x130>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	3302      	adds	r3, #2
 80098c2:	4259      	negs	r1, r3
 80098c4:	f003 0203 	and.w	r2, r3, #3
 80098c8:	f001 0303 	and.w	r3, r1, #3
 80098cc:	bf58      	it	pl
 80098ce:	425a      	negpl	r2, r3
 80098d0:	4b2f      	ldr	r3, [pc, #188]	; (8009990 <turn_180+0x134>)
 80098d2:	4621      	mov	r1, r4
 80098d4:	f003 fabc 	bl	800ce50 <getWall>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d123      	bne.n	8009926 <turn_180+0xca>
		HAL_Delay(50);
 80098de:	2032      	movs	r0, #50	; 0x32
 80098e0:	f7f7 fbcc 	bl	800107c <HAL_Delay>
		back_100();
 80098e4:	f000 f8ce 	bl	8009a84 <back_100>
//		} else {
//			HAL_Delay(5);
//			u_turn_counter++;
//		}

		rotation_deviation.now = 0.0;
 80098e8:	4b2a      	ldr	r3, [pc, #168]	; (8009994 <turn_180+0x138>)
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
		rotation_deviation.cumulative = 0.0;
 80098f0:	4b28      	ldr	r3, [pc, #160]	; (8009994 <turn_180+0x138>)
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 80098f8:	4b27      	ldr	r3, [pc, #156]	; (8009998 <turn_180+0x13c>)
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
		run_left_deviation.cumulative = 0.0;
 8009900:	4b26      	ldr	r3, [pc, #152]	; (800999c <turn_180+0x140>)
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	605a      	str	r2, [r3, #4]
		run_right_deviation.cumulative = 0.0;
 8009908:	4b25      	ldr	r3, [pc, #148]	; (80099a0 <turn_180+0x144>)
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	605a      	str	r2, [r3, #4]
		wallcontrol_value = 0.0;
 8009910:	4b21      	ldr	r3, [pc, #132]	; (8009998 <turn_180+0x13c>)
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
		go_entrance(accel, vel);
 8009918:	edd7 0a00 	vldr	s1, [r7]
 800991c:	ed97 0a01 	vldr	s0, [r7, #4]
 8009920:	f7ff fe54 	bl	80095cc <go_entrance>
//		wallcontrol_value = 0.0;
		set_straight(75.0, accel, vel, 0.0, vel);
		wall_control_flag=10;
		wait_straight();
	}
}
 8009924:	e021      	b.n	800996a <turn_180+0x10e>
		set_straight(-30.0, 600.0, 300.0, 0.0, 0.0);
 8009926:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8009974 <turn_180+0x118>
 800992a:	eddf 1a12 	vldr	s3, [pc, #72]	; 8009974 <turn_180+0x118>
 800992e:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80099a4 <turn_180+0x148>
 8009932:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80099a8 <turn_180+0x14c>
 8009936:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800993a:	f001 f8c9 	bl	800aad0 <set_straight>
		wait_straight();
 800993e:	f001 f9bb 	bl	800acb8 <wait_straight>
		HAL_Delay(10);
 8009942:	200a      	movs	r0, #10
 8009944:	f7f7 fb9a 	bl	800107c <HAL_Delay>
		set_straight(75.0, accel, vel, 0.0, vel);
 8009948:	ed97 2a00 	vldr	s4, [r7]
 800994c:	eddf 1a09 	vldr	s3, [pc, #36]	; 8009974 <turn_180+0x118>
 8009950:	ed97 1a00 	vldr	s2, [r7]
 8009954:	edd7 0a01 	vldr	s1, [r7, #4]
 8009958:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80099ac <turn_180+0x150>
 800995c:	f001 f8b8 	bl	800aad0 <set_straight>
		wall_control_flag=10;
 8009960:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <turn_180+0x154>)
 8009962:	220a      	movs	r2, #10
 8009964:	701a      	strb	r2, [r3, #0]
		wait_straight();
 8009966:	f001 f9a7 	bl	800acb8 <wait_straight>
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	bd90      	pop	{r4, r7, pc}
 8009972:	bf00      	nop
 8009974:	00000000 	.word	0x00000000
 8009978:	42340000 	.word	0x42340000
 800997c:	20000038 	.word	0x20000038
 8009980:	43340000 	.word	0x43340000
 8009984:	20000b88 	.word	0x20000b88
 8009988:	20019858 	.word	0x20019858
 800998c:	20000650 	.word	0x20000650
 8009990:	200009bc 	.word	0x200009bc
 8009994:	2001981c 	.word	0x2001981c
 8009998:	20000664 	.word	0x20000664
 800999c:	20019648 	.word	0x20019648
 80099a0:	20032290 	.word	0x20032290
 80099a4:	43960000 	.word	0x43960000
 80099a8:	44160000 	.word	0x44160000
 80099ac:	42960000 	.word	0x42960000
 80099b0:	20000685 	.word	0x20000685

080099b4 <ketuate>:

void ketuate(float accel, float vel) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80099be:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 80099c2:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8009a60 <ketuate+0xac>
 80099c6:	edd7 1a00 	vldr	s3, [r7]
 80099ca:	ed97 1a00 	vldr	s2, [r7]
 80099ce:	edd7 0a01 	vldr	s1, [r7, #4]
 80099d2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8009a64 <ketuate+0xb0>
 80099d6:	f001 f87b 	bl	800aad0 <set_straight>
	kushi_control_flag = 0;
 80099da:	4b23      	ldr	r3, [pc, #140]	; (8009a68 <ketuate+0xb4>)
 80099dc:	2200      	movs	r2, #0
 80099de:	701a      	strb	r2, [r3, #0]
	wait_straight();
 80099e0:	f001 f96a 	bl	800acb8 <wait_straight>
//		set_center_by_front_Wall();
//		set_rotation(-90.0, nomal_rotation.accel, nomal_rotation.vel_search,
//				0.0);
//		wait_rotation();
//	} else {
	set_rotation(180.0, nomal_rotation.accel, nomal_rotation.vel_search, 0.0);
 80099e4:	4b21      	ldr	r3, [pc, #132]	; (8009a6c <ketuate+0xb8>)
 80099e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80099ea:	4b20      	ldr	r3, [pc, #128]	; (8009a6c <ketuate+0xb8>)
 80099ec:	ed93 7a00 	vldr	s14, [r3]
 80099f0:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8009a60 <ketuate+0xac>
 80099f4:	eeb0 1a47 	vmov.f32	s2, s14
 80099f8:	eef0 0a67 	vmov.f32	s1, s15
 80099fc:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8009a70 <ketuate+0xbc>
 8009a00:	f001 f8a0 	bl	800ab44 <set_rotation>
	wait_rotation();
 8009a04:	f001 f998 	bl	800ad38 <wait_rotation>
//	}

	HAL_Delay(50);
 8009a08:	2032      	movs	r0, #50	; 0x32
 8009a0a:	f7f7 fb37 	bl	800107c <HAL_Delay>
	back_100();
 8009a0e:	f000 f839 	bl	8009a84 <back_100>
//		u_turn_counter = 0;
//	} else {
//		HAL_Delay(5);
//		u_turn_counter++;
//	}
	rotation_deviation.cumulative = 0.0;
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <ketuate+0xc0>)
 8009a14:	f04f 0200 	mov.w	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
	rotation_deviation.now = 0.0;
 8009a1a:	4b16      	ldr	r3, [pc, #88]	; (8009a74 <ketuate+0xc0>)
 8009a1c:	f04f 0200 	mov.w	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 8009a22:	4b14      	ldr	r3, [pc, #80]	; (8009a74 <ketuate+0xc0>)
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <ketuate+0xc4>)
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
	run_left_deviation.cumulative = 0.0;
 8009a32:	4b12      	ldr	r3, [pc, #72]	; (8009a7c <ketuate+0xc8>)
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
	run_right_deviation.cumulative = 0.0;
 8009a3a:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <ketuate+0xcc>)
 8009a3c:	f04f 0200 	mov.w	r2, #0
 8009a40:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 8009a42:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <ketuate+0xc4>)
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
	go_entrance(accel, vel);
 8009a4a:	edd7 0a00 	vldr	s1, [r7]
 8009a4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8009a52:	f7ff fdbb 	bl	80095cc <go_entrance>
}
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	00000000 	.word	0x00000000
 8009a64:	42340000 	.word	0x42340000
 8009a68:	200006cd 	.word	0x200006cd
 8009a6c:	20000038 	.word	0x20000038
 8009a70:	43340000 	.word	0x43340000
 8009a74:	2001981c 	.word	0x2001981c
 8009a78:	20000664 	.word	0x20000664
 8009a7c:	20019648 	.word	0x20019648
 8009a80:	20032290 	.word	0x20032290

08009a84 <back_100>:
	HAL_Delay(5);
	rotation_deviation.cumulative = 0.0;
	go_entrance(accel, vel);
}

void back_100(void) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
	float kp, ki;
	ki = rotation_gain.Ki;
 8009a8a:	4b2c      	ldr	r3, [pc, #176]	; (8009b3c <back_100+0xb8>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	607b      	str	r3, [r7, #4]
	kp = rotation_gain.Kp;
 8009a90:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <back_100+0xb8>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	603b      	str	r3, [r7, #0]
	set_straight(-35.0, 300, 80, 0.0, 80.0);
 8009a96:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 8009b40 <back_100+0xbc>
 8009a9a:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8009b44 <back_100+0xc0>
 8009a9e:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8009b40 <back_100+0xbc>
 8009aa2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8009b48 <back_100+0xc4>
 8009aa6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8009b4c <back_100+0xc8>
 8009aaa:	f001 f811 	bl	800aad0 <set_straight>
	wall_control_flag = 0;
 8009aae:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <back_100+0xcc>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009ab4:	f001 f900 	bl	800acb8 <wait_straight>
	rotation_gain.Ki = 0.0;
 8009ab8:	4b20      	ldr	r3, [pc, #128]	; (8009b3c <back_100+0xb8>)
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	605a      	str	r2, [r3, #4]
	rotation_gain.Kp = 0.0;
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <back_100+0xb8>)
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
	set_straight(-15.0, 300, 80, 80.0, 0.0);
 8009ac8:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 8009b44 <back_100+0xc0>
 8009acc:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8009b40 <back_100+0xbc>
 8009ad0:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8009b40 <back_100+0xbc>
 8009ad4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009b48 <back_100+0xc4>
 8009ad8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8009adc:	f000 fff8 	bl	800aad0 <set_straight>
	wall_control_flag = 0;
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <back_100+0xcc>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009ae6:	f001 f8e7 	bl	800acb8 <wait_straight>

	HAL_Delay(100);
 8009aea:	2064      	movs	r0, #100	; 0x64
 8009aec:	f7f7 fac6 	bl	800107c <HAL_Delay>

	rotation_deviation.cumulative = 0.0;
 8009af0:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <back_100+0xd0>)
 8009af2:	f04f 0200 	mov.w	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
	rotation_deviation.now = 0.0;
 8009af8:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <back_100+0xd0>)
 8009afa:	f04f 0200 	mov.w	r2, #0
 8009afe:	601a      	str	r2, [r3, #0]
	rotation_deviation.cumulative = 0.0;
 8009b00:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <back_100+0xd0>)
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 8009b08:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <back_100+0xd4>)
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
	run_left_deviation.cumulative = 0.0;
 8009b10:	4b12      	ldr	r3, [pc, #72]	; (8009b5c <back_100+0xd8>)
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	605a      	str	r2, [r3, #4]
	run_right_deviation.cumulative = 0.0;
 8009b18:	4b11      	ldr	r3, [pc, #68]	; (8009b60 <back_100+0xdc>)
 8009b1a:	f04f 0200 	mov.w	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
	wallcontrol_value = 0.0;
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <back_100+0xd4>)
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]

	rotation_gain.Ki = ki;
 8009b28:	4a04      	ldr	r2, [pc, #16]	; (8009b3c <back_100+0xb8>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6053      	str	r3, [r2, #4]
	rotation_gain.Kp = kp;
 8009b2e:	4a03      	ldr	r2, [pc, #12]	; (8009b3c <back_100+0xb8>)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	6013      	str	r3, [r2, #0]
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000010 	.word	0x20000010
 8009b40:	42a00000 	.word	0x42a00000
 8009b44:	00000000 	.word	0x00000000
 8009b48:	43960000 	.word	0x43960000
 8009b4c:	c20c0000 	.word	0xc20c0000
 8009b50:	20000685 	.word	0x20000685
 8009b54:	2001981c 	.word	0x2001981c
 8009b58:	20000664 	.word	0x20000664
 8009b5c:	20019648 	.word	0x20019648
 8009b60:	20032290 	.word	0x20032290

08009b64 <non_ketuate_goal>:
	wall_control_flag = 0;
	wait_straight();
	HAL_Delay(50);
}

void non_ketuate_goal(float accel, float vel) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8009b6e:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, accel, vel, vel, 0.0);
 8009b72:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8009bc4 <non_ketuate_goal+0x60>
 8009b76:	edd7 1a00 	vldr	s3, [r7]
 8009b7a:	ed97 1a00 	vldr	s2, [r7]
 8009b7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8009b82:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009bc8 <non_ketuate_goal+0x64>
 8009b86:	f000 ffa3 	bl	800aad0 <set_straight>
	wait_straight();
 8009b8a:	f001 f895 	bl	800acb8 <wait_straight>
	HAL_Delay(50);
 8009b8e:	2032      	movs	r0, #50	; 0x32
 8009b90:	f7f7 fa74 	bl	800107c <HAL_Delay>
	set_straight(-25.0, 500, 150, 0.0, 0.0);
 8009b94:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 8009bc4 <non_ketuate_goal+0x60>
 8009b98:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8009bc4 <non_ketuate_goal+0x60>
 8009b9c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8009bcc <non_ketuate_goal+0x68>
 8009ba0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8009bd0 <non_ketuate_goal+0x6c>
 8009ba4:	eebb 0a09 	vmov.f32	s0, #185	; 0xc1c80000 -25.0
 8009ba8:	f000 ff92 	bl	800aad0 <set_straight>
	wall_control_flag = 0;
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <non_ketuate_goal+0x70>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009bb2:	f001 f881 	bl	800acb8 <wait_straight>
	HAL_Delay(50);
 8009bb6:	2032      	movs	r0, #50	; 0x32
 8009bb8:	f7f7 fa60 	bl	800107c <HAL_Delay>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	00000000 	.word	0x00000000
 8009bc8:	42340000 	.word	0x42340000
 8009bcc:	43160000 	.word	0x43160000
 8009bd0:	43fa0000 	.word	0x43fa0000
 8009bd4:	20000685 	.word	0x20000685

08009bd8 <slalom_left90>:

void slalom_left90(float run_accel, float run_vel) {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08c      	sub	sp, #48	; 0x30
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	ed87 0a01 	vstr	s0, [r7, #4]
 8009be2:	edc7 0a00 	vstr	s1, [r7]
	float rota_accel, rota_vel, in_offset, out_offset, angle_offset = 0.0;
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
	float i_dis_box=ideal_translation.dis;
 8009bec:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <slalom_left90+0x10c>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	61bb      	str	r3, [r7, #24]
	gain_t box;
	box.Ki = rotation_gain.Ki;
 8009bf2:	4b3d      	ldr	r3, [pc, #244]	; (8009ce8 <slalom_left90+0x110>)
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	613b      	str	r3, [r7, #16]
	box.Kp = rotation_gain.Kp;
 8009bf8:	4b3b      	ldr	r3, [pc, #236]	; (8009ce8 <slalom_left90+0x110>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60fb      	str	r3, [r7, #12]
	if ((SEN_F.now < SEN_F.reference)
 8009bfe:	4b3b      	ldr	r3, [pc, #236]	; (8009cec <slalom_left90+0x114>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b3a      	ldr	r3, [pc, #232]	; (8009cec <slalom_left90+0x114>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	da18      	bge.n	8009c3c <slalom_left90+0x64>
				&& (getWall(x.now, y.now, direction, &walldata.real))) {
 8009c0a:	4b39      	ldr	r3, [pc, #228]	; (8009cf0 <slalom_left90+0x118>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <slalom_left90+0x11c>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	4b38      	ldr	r3, [pc, #224]	; (8009cf8 <slalom_left90+0x120>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <slalom_left90+0x124>)
 8009c1e:	f003 f917 	bl	800ce50 <getWall>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d009      	beq.n	8009c3c <slalom_left90+0x64>
			while (SEN_F.now < SEN_F.reference) {
 8009c28:	e002      	b.n	8009c30 <slalom_left90+0x58>
	//			set_buzzer(0, C_5, 200);
				ideal_translation.dis = i_dis_box;
 8009c2a:	4a2e      	ldr	r2, [pc, #184]	; (8009ce4 <slalom_left90+0x10c>)
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	6093      	str	r3, [r2, #8]
			while (SEN_F.now < SEN_F.reference) {
 8009c30:	4b2e      	ldr	r3, [pc, #184]	; (8009cec <slalom_left90+0x114>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <slalom_left90+0x114>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	dbf6      	blt.n	8009c2a <slalom_left90+0x52>
			}
	}
	if (run_vel == 280.0) {
 8009c3c:	edd7 7a00 	vldr	s15, [r7]
 8009c40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009d00 <slalom_left90+0x128>
 8009c44:	eef4 7a47 	vcmp.f32	s15, s14
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	d10f      	bne.n	8009c6e <slalom_left90+0x96>
		rotation_gain.Ki *= 1;
 8009c4e:	4b26      	ldr	r3, [pc, #152]	; (8009ce8 <slalom_left90+0x110>)
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4a25      	ldr	r2, [pc, #148]	; (8009ce8 <slalom_left90+0x110>)
 8009c54:	6053      	str	r3, [r2, #4]
		rotation_gain.Kp *= 1;
 8009c56:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <slalom_left90+0x110>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a23      	ldr	r2, [pc, #140]	; (8009ce8 <slalom_left90+0x110>)
 8009c5c:	6013      	str	r3, [r2, #0]
		rota_accel = 10000;
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <slalom_left90+0x12c>)
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
		rota_vel = 1300;
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <slalom_left90+0x130>)
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28
		in_offset = 10;
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <slalom_left90+0x134>)
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
		out_offset = 13;
 8009c6a:	4b29      	ldr	r3, [pc, #164]	; (8009d10 <slalom_left90+0x138>)
 8009c6c:	623b      	str	r3, [r7, #32]
	}

	set_straight(in_offset, run_accel, run_vel, run_vel, run_vel);
 8009c6e:	ed97 2a00 	vldr	s4, [r7]
 8009c72:	edd7 1a00 	vldr	s3, [r7]
 8009c76:	ed97 1a00 	vldr	s2, [r7]
 8009c7a:	edd7 0a01 	vldr	s1, [r7, #4]
 8009c7e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009c82:	f000 ff25 	bl	800aad0 <set_straight>
	wait_straight();
 8009c86:	f001 f817 	bl	800acb8 <wait_straight>
	set_rotation(90.0 + angle_offset, rota_accel, rota_vel, run_vel);
 8009c8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c8e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009d14 <slalom_left90+0x13c>
 8009c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c96:	edd7 1a00 	vldr	s3, [r7]
 8009c9a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8009c9e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8009ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca6:	f000 ff4d 	bl	800ab44 <set_rotation>
	wait_rotation();
 8009caa:	f001 f845 	bl	800ad38 <wait_rotation>
	set_straight(out_offset, run_accel, run_vel, run_vel, run_vel);
 8009cae:	ed97 2a00 	vldr	s4, [r7]
 8009cb2:	edd7 1a00 	vldr	s3, [r7]
 8009cb6:	ed97 1a00 	vldr	s2, [r7]
 8009cba:	edd7 0a01 	vldr	s1, [r7, #4]
 8009cbe:	ed97 0a08 	vldr	s0, [r7, #32]
 8009cc2:	f000 ff05 	bl	800aad0 <set_straight>
	kushi_control_flag = 0;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <slalom_left90+0x140>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009ccc:	f000 fff4 	bl	800acb8 <wait_straight>
	rotation_gain.Ki = box.Ki;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	4a05      	ldr	r2, [pc, #20]	; (8009ce8 <slalom_left90+0x110>)
 8009cd4:	6053      	str	r3, [r2, #4]
	rotation_gain.Kp = box.Kp;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4a03      	ldr	r2, [pc, #12]	; (8009ce8 <slalom_left90+0x110>)
 8009cda:	6013      	str	r3, [r2, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	3730      	adds	r7, #48	; 0x30
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2001961c 	.word	0x2001961c
 8009ce8:	20000010 	.word	0x20000010
 8009cec:	2003200c 	.word	0x2003200c
 8009cf0:	20000b88 	.word	0x20000b88
 8009cf4:	20019858 	.word	0x20019858
 8009cf8:	20000650 	.word	0x20000650
 8009cfc:	200009bc 	.word	0x200009bc
 8009d00:	438c0000 	.word	0x438c0000
 8009d04:	461c4000 	.word	0x461c4000
 8009d08:	44a28000 	.word	0x44a28000
 8009d0c:	41200000 	.word	0x41200000
 8009d10:	41500000 	.word	0x41500000
 8009d14:	42b40000 	.word	0x42b40000
 8009d18:	200006cd 	.word	0x200006cd

08009d1c <slalom_right90>:

void slalom_right90(float run_accel, float run_vel) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08c      	sub	sp, #48	; 0x30
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8009d26:	edc7 0a00 	vstr	s1, [r7]
	float rota_accel, rota_vel, in_offset, out_offset;
	float angle_offset = 0.0;
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
	float i_dis_box=ideal_translation.dis;
 8009d30:	4b3c      	ldr	r3, [pc, #240]	; (8009e24 <slalom_right90+0x108>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	61bb      	str	r3, [r7, #24]
	gain_t box;
	box.Ki = rotation_gain.Ki;
 8009d36:	4b3c      	ldr	r3, [pc, #240]	; (8009e28 <slalom_right90+0x10c>)
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	613b      	str	r3, [r7, #16]
	box.Kp = rotation_gain.Kp;
 8009d3c:	4b3a      	ldr	r3, [pc, #232]	; (8009e28 <slalom_right90+0x10c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]
	if ((SEN_F.now < SEN_F.reference)
 8009d42:	4b3a      	ldr	r3, [pc, #232]	; (8009e2c <slalom_right90+0x110>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <slalom_right90+0x110>)
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	da18      	bge.n	8009d80 <slalom_right90+0x64>
			&& (getWall(x.now, y.now, direction, &walldata.real))) {
 8009d4e:	4b38      	ldr	r3, [pc, #224]	; (8009e30 <slalom_right90+0x114>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	4b37      	ldr	r3, [pc, #220]	; (8009e34 <slalom_right90+0x118>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4b37      	ldr	r3, [pc, #220]	; (8009e38 <slalom_right90+0x11c>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	4b36      	ldr	r3, [pc, #216]	; (8009e3c <slalom_right90+0x120>)
 8009d62:	f003 f875 	bl	800ce50 <getWall>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <slalom_right90+0x64>
		while (SEN_F.now < SEN_F.reference) {
 8009d6c:	e002      	b.n	8009d74 <slalom_right90+0x58>
//			set_buzzer(0, C_5, 200);
			ideal_translation.dis = i_dis_box;
 8009d6e:	4a2d      	ldr	r2, [pc, #180]	; (8009e24 <slalom_right90+0x108>)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	6093      	str	r3, [r2, #8]
		while (SEN_F.now < SEN_F.reference) {
 8009d74:	4b2d      	ldr	r3, [pc, #180]	; (8009e2c <slalom_right90+0x110>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4b2c      	ldr	r3, [pc, #176]	; (8009e2c <slalom_right90+0x110>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	dbf6      	blt.n	8009d6e <slalom_right90+0x52>
		}
	}
	if (run_vel == 280.0) {
 8009d80:	edd7 7a00 	vldr	s15, [r7]
 8009d84:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009e40 <slalom_right90+0x124>
 8009d88:	eef4 7a47 	vcmp.f32	s15, s14
 8009d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d90:	d10c      	bne.n	8009dac <slalom_right90+0x90>
//		rotation_gain.Ki *= 1.2;
		rotation_gain.Kp *= 1;
 8009d92:	4b25      	ldr	r3, [pc, #148]	; (8009e28 <slalom_right90+0x10c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a24      	ldr	r2, [pc, #144]	; (8009e28 <slalom_right90+0x10c>)
 8009d98:	6013      	str	r3, [r2, #0]
		rota_accel = 10000;
 8009d9a:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <slalom_right90+0x128>)
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		rota_vel = 1300;
 8009d9e:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <slalom_right90+0x12c>)
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28
		in_offset = 10;
 8009da2:	4b2a      	ldr	r3, [pc, #168]	; (8009e4c <slalom_right90+0x130>)
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
		out_offset = 16;
 8009da6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8009daa:	623b      	str	r3, [r7, #32]
	}
	set_straight(in_offset, run_accel, run_vel, run_vel, run_vel);
 8009dac:	ed97 2a00 	vldr	s4, [r7]
 8009db0:	edd7 1a00 	vldr	s3, [r7]
 8009db4:	ed97 1a00 	vldr	s2, [r7]
 8009db8:	edd7 0a01 	vldr	s1, [r7, #4]
 8009dbc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009dc0:	f000 fe86 	bl	800aad0 <set_straight>
	wait_straight();
 8009dc4:	f000 ff78 	bl	800acb8 <wait_straight>
	set_rotation(-90.0 + angle_offset, rota_accel, rota_vel, run_vel);
 8009dc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8009dcc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009e50 <slalom_right90+0x134>
 8009dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009dd4:	edd7 1a00 	vldr	s3, [r7]
 8009dd8:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8009ddc:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8009de0:	eeb0 0a67 	vmov.f32	s0, s15
 8009de4:	f000 feae 	bl	800ab44 <set_rotation>
	wait_rotation();
 8009de8:	f000 ffa6 	bl	800ad38 <wait_rotation>
	set_straight(out_offset, run_accel, run_vel, run_vel, run_vel);
 8009dec:	ed97 2a00 	vldr	s4, [r7]
 8009df0:	edd7 1a00 	vldr	s3, [r7]
 8009df4:	ed97 1a00 	vldr	s2, [r7]
 8009df8:	edd7 0a01 	vldr	s1, [r7, #4]
 8009dfc:	ed97 0a08 	vldr	s0, [r7, #32]
 8009e00:	f000 fe66 	bl	800aad0 <set_straight>
	kushi_control_flag = 0;
 8009e04:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <slalom_right90+0x138>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
	wait_straight();
 8009e0a:	f000 ff55 	bl	800acb8 <wait_straight>
	rotation_gain.Ki = box.Ki;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	4a05      	ldr	r2, [pc, #20]	; (8009e28 <slalom_right90+0x10c>)
 8009e12:	6053      	str	r3, [r2, #4]
	rotation_gain.Kp = box.Kp;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4a04      	ldr	r2, [pc, #16]	; (8009e28 <slalom_right90+0x10c>)
 8009e18:	6013      	str	r3, [r2, #0]
}
 8009e1a:	bf00      	nop
 8009e1c:	3730      	adds	r7, #48	; 0x30
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	2001961c 	.word	0x2001961c
 8009e28:	20000010 	.word	0x20000010
 8009e2c:	2003200c 	.word	0x2003200c
 8009e30:	20000b88 	.word	0x20000b88
 8009e34:	20019858 	.word	0x20019858
 8009e38:	20000650 	.word	0x20000650
 8009e3c:	200009bc 	.word	0x200009bc
 8009e40:	438c0000 	.word	0x438c0000
 8009e44:	461c4000 	.word	0x461c4000
 8009e48:	44a28000 	.word	0x44a28000
 8009e4c:	41200000 	.word	0x41200000
 8009e50:	42b40000 	.word	0x42b40000
 8009e54:	200006cd 	.word	0x200006cd

08009e58 <stop90>:

void stop90(float run_accel, float run_vel) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009e62:	edc7 0a00 	vstr	s1, [r7]
	set_straight(45.0, run_accel, run_vel, run_vel, 0.0);
 8009e66:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8009e8c <stop90+0x34>
 8009e6a:	edd7 1a00 	vldr	s3, [r7]
 8009e6e:	ed97 1a00 	vldr	s2, [r7]
 8009e72:	edd7 0a01 	vldr	s1, [r7, #4]
 8009e76:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009e90 <stop90+0x38>
 8009e7a:	f000 fe29 	bl	800aad0 <set_straight>
	wait_straight();
 8009e7e:	f000 ff1b 	bl	800acb8 <wait_straight>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	42340000 	.word	0x42340000

08009e94 <chattering>:
#define CHATT 10000
#define SECTOR_BASE_ADRR 0x08160000ul
#define SECTOR14_BASE_ADRR 0x08140000ul
#define SECTOR13_BASE_ADRR 0x08120000ul

void chattering(void) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
	int i = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009e9e:	e002      	b.n	8009ea6 <chattering+0x12>
		i++;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f242 720f 	movw	r2, #9999	; 0x270f
 8009eac:	4293      	cmp	r3, r2
 8009eae:	ddf7      	ble.n	8009ea0 <chattering+0xc>
	}
	while (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8009eb0:	bf00      	nop
 8009eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009eb6:	480a      	ldr	r0, [pc, #40]	; (8009ee0 <chattering+0x4c>)
 8009eb8:	f7f8 fddc 	bl	8002a74 <HAL_GPIO_ReadPin>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f7      	beq.n	8009eb2 <chattering+0x1e>
	}
	i = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009ec6:	e002      	b.n	8009ece <chattering+0x3a>
		i++;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	ddf7      	ble.n	8009ec8 <chattering+0x34>
	}
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40020400 	.word	0x40020400

08009ee4 <write_flash_log>:

void write_flash_log(uint32_t address, uint8_t *data, uint32_t size) {
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b093      	sub	sp, #76	; 0x4c
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
	uint32_t add = address;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_FLASH_Unlock(); //flash unlook
 8009ef4:	f7f8 f99c 	bl	8002230 <HAL_FLASH_Unlock>
	if (address == SECTOR14_BASE_ADRR) {
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a24      	ldr	r2, [pc, #144]	; (8009f8c <write_flash_log+0xa8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d110      	bne.n	8009f22 <write_flash_log+0x3e>
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 8009f00:	2300      	movs	r3, #0
 8009f02:	633b      	str	r3, [r7, #48]	; 0x30
		EraseInitStruct.Sector = FLASH_SECTOR_14; //sector Name
 8009f04:	230e      	movs	r3, #14
 8009f06:	63bb      	str	r3, [r7, #56]	; 0x38
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 8009f08:	2302      	movs	r3, #2
 8009f0a:	643b      	str	r3, [r7, #64]	; 0x40
		EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t SectorError; //srroe sector nomber
		HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 8009f10:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f8 faf6 	bl	800250c <HAL_FLASHEx_Erase>
 8009f20:	e013      	b.n	8009f4a <write_flash_log+0x66>
	} else if (address == SECTOR13_BASE_ADRR) {
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a1a      	ldr	r2, [pc, #104]	; (8009f90 <write_flash_log+0xac>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d10f      	bne.n	8009f4a <write_flash_log+0x66>
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.Sector = FLASH_SECTOR_13; //sector Name
 8009f2e:	230d      	movs	r3, #13
 8009f30:	623b      	str	r3, [r7, #32]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 8009f32:	2302      	movs	r3, #2
 8009f34:	62bb      	str	r3, [r7, #40]	; 0x28
		EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 8009f36:	2301      	movs	r3, #1
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t SectorError; //srroe sector nomber
		HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 8009f3a:	f107 0214 	add.w	r2, r7, #20
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7f8 fae1 	bl	800250c <HAL_FLASHEx_Erase>
	}
	for (add = address; add < (address + size); add++) {
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f4e:	e010      	b.n	8009f72 <write_flash_log+0x8e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	f04f 0400 	mov.w	r4, #0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f60:	2000      	movs	r0, #0
 8009f62:	f7f8 f911 	bl	8002188 <HAL_FLASH_Program>
		data++;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60bb      	str	r3, [r7, #8]
	for (add = address; add < (address + size); add++) {
 8009f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6e:	3301      	adds	r3, #1
 8009f70:	647b      	str	r3, [r7, #68]	; 0x44
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4413      	add	r3, r2
 8009f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d3e8      	bcc.n	8009f50 <write_flash_log+0x6c>
	}
	HAL_FLASH_Lock(); //flash look
 8009f7e:	f7f8 f979 	bl	8002274 <HAL_FLASH_Lock>
}
 8009f82:	bf00      	nop
 8009f84:	374c      	adds	r7, #76	; 0x4c
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	08140000 	.word	0x08140000
 8009f90:	08120000 	.word	0x08120000

08009f94 <save_log_to_flash>:

void save_log_to_flash(void) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
	log_flag = 0;
 8009f98:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <save_log_to_flash+0x24>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
	write_flash_log(SECTOR14_BASE_ADRR, (uint8_t*) &mylog, sizeof(mylog));
 8009f9e:	4a07      	ldr	r2, [pc, #28]	; (8009fbc <save_log_to_flash+0x28>)
 8009fa0:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <save_log_to_flash+0x2c>)
 8009fa2:	4808      	ldr	r0, [pc, #32]	; (8009fc4 <save_log_to_flash+0x30>)
 8009fa4:	f7ff ff9e 	bl	8009ee4 <write_flash_log>
	write_flash_log(SECTOR13_BASE_ADRR, (uint8_t*) &mylog2, sizeof(mylog2));
 8009fa8:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <save_log_to_flash+0x28>)
 8009faa:	4907      	ldr	r1, [pc, #28]	; (8009fc8 <save_log_to_flash+0x34>)
 8009fac:	4807      	ldr	r0, [pc, #28]	; (8009fcc <save_log_to_flash+0x38>)
 8009fae:	f7ff ff99 	bl	8009ee4 <write_flash_log>
}
 8009fb2:	bf00      	nop
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000672 	.word	0x20000672
 8009fbc:	000186a0 	.word	0x000186a0
 8009fc0:	20000ea8 	.word	0x20000ea8
 8009fc4:	08140000 	.word	0x08140000
 8009fc8:	2001996c 	.word	0x2001996c
 8009fcc:	08120000 	.word	0x08120000

08009fd0 <read_all_log_from_flash>:

void read_all_log_from_flash(void) {
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
	read_flash(SECTOR14_BASE_ADRR, (uint8_t*) &mylog, sizeof(mylog));
 8009fd4:	4a05      	ldr	r2, [pc, #20]	; (8009fec <read_all_log_from_flash+0x1c>)
 8009fd6:	4906      	ldr	r1, [pc, #24]	; (8009ff0 <read_all_log_from_flash+0x20>)
 8009fd8:	4806      	ldr	r0, [pc, #24]	; (8009ff4 <read_all_log_from_flash+0x24>)
 8009fda:	f000 f852 	bl	800a082 <read_flash>
	read_flash(SECTOR13_BASE_ADRR, (uint8_t*) &mylog2, sizeof(mylog2));
 8009fde:	4a03      	ldr	r2, [pc, #12]	; (8009fec <read_all_log_from_flash+0x1c>)
 8009fe0:	4905      	ldr	r1, [pc, #20]	; (8009ff8 <read_all_log_from_flash+0x28>)
 8009fe2:	4806      	ldr	r0, [pc, #24]	; (8009ffc <read_all_log_from_flash+0x2c>)
 8009fe4:	f000 f84d 	bl	800a082 <read_flash>
}
 8009fe8:	bf00      	nop
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	000186a0 	.word	0x000186a0
 8009ff0:	20000ea8 	.word	0x20000ea8
 8009ff4:	08140000 	.word	0x08140000
 8009ff8:	2001996c 	.word	0x2001996c
 8009ffc:	08120000 	.word	0x08120000

0800a000 <erase_flash>:

void erase_flash(void) {
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 800a006:	2300      	movs	r3, #0
 800a008:	607b      	str	r3, [r7, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_15; //sector Name
 800a00a:	230f      	movs	r3, #15
 800a00c:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 800a00e:	2302      	movs	r3, #2
 800a010:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 800a012:	2301      	movs	r3, #1
 800a014:	613b      	str	r3, [r7, #16]

	uint32_t SectorError; //srroe sector nomber

	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 800a016:	463a      	mov	r2, r7
 800a018:	1d3b      	adds	r3, r7, #4
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7f8 fa75 	bl	800250c <HAL_FLASHEx_Erase>
}
 800a022:	bf00      	nop
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <write_flash>:

void write_flash(uint32_t address, uint8_t *data, uint32_t size) {
 800a02a:	b590      	push	{r4, r7, lr}
 800a02c:	b087      	sub	sp, #28
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
	uint32_t add = address;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock(); //flash unlook
 800a03a:	f7f8 f8f9 	bl	8002230 <HAL_FLASH_Unlock>
	erase_flash();
 800a03e:	f7ff ffdf 	bl	800a000 <erase_flash>
	for (add = address; add < (address + size); add++) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e010      	b.n	800a06a <write_flash+0x40>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f04f 0400 	mov.w	r4, #0
 800a052:	461a      	mov	r2, r3
 800a054:	4623      	mov	r3, r4
 800a056:	6979      	ldr	r1, [r7, #20]
 800a058:	2000      	movs	r0, #0
 800a05a:	f7f8 f895 	bl	8002188 <HAL_FLASH_Program>
		data++;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3301      	adds	r3, #1
 800a062:	60bb      	str	r3, [r7, #8]
	for (add = address; add < (address + size); add++) {
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3301      	adds	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4413      	add	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3e8      	bcc.n	800a048 <write_flash+0x1e>
	}
	HAL_FLASH_Lock(); //flash look
 800a076:	f7f8 f8fd 	bl	8002274 <HAL_FLASH_Lock>
}
 800a07a:	bf00      	nop
 800a07c:	371c      	adds	r7, #28
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd90      	pop	{r4, r7, pc}

0800a082 <read_flash>:

void read_flash(uint32_t address, uint8_t *data, uint32_t size) {
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*) address, size);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	4619      	mov	r1, r3
 800a094:	68b8      	ldr	r0, [r7, #8]
 800a096:	f002 ffa5 	bl	800cfe4 <memcpy>
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <save_all_walldata>:

void save_all_walldata(void) {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
	write_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
 800a0a8:	22cc      	movs	r2, #204	; 0xcc
 800a0aa:	4903      	ldr	r1, [pc, #12]	; (800a0b8 <save_all_walldata+0x14>)
 800a0ac:	4803      	ldr	r0, [pc, #12]	; (800a0bc <save_all_walldata+0x18>)
 800a0ae:	f7ff ffbc 	bl	800a02a <write_flash>
}
 800a0b2:	bf00      	nop
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200009bc 	.word	0x200009bc
 800a0bc:	08160000 	.word	0x08160000

0800a0c0 <read_spi>:

void read_all_walldata(void) {
	read_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
}

uint8_t read_spi(uint8_t addr) { //addrのデータを読み取る
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_tx[2], data_rx[2];
	data_tx[0] = (0x80 | addr); //readのMSB(1)とアドレス
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	733b      	strb	r3, [r7, #12]
	data_tx[1] = 0x00; //dummy
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0de:	480c      	ldr	r0, [pc, #48]	; (800a110 <read_spi+0x50>)
 800a0e0:	f7f8 fce0 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 800a0e4:	f107 0208 	add.w	r2, r7, #8
 800a0e8:	f107 010c 	add.w	r1, r7, #12
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	4808      	ldr	r0, [pc, #32]	; (800a114 <read_spi+0x54>)
 800a0f4:	f7f9 f968 	bl	80033c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0fe:	4804      	ldr	r0, [pc, #16]	; (800a110 <read_spi+0x50>)
 800a100:	f7f8 fcd0 	bl	8002aa4 <HAL_GPIO_WritePin>

	return data_rx[1];
 800a104:	7a7b      	ldrb	r3, [r7, #9]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40020000 	.word	0x40020000
 800a114:	2000084c 	.word	0x2000084c

0800a118 <write_spi>:

void write_spi(uint8_t addr, uint8_t data) {
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	4603      	mov	r3, r0
 800a120:	460a      	mov	r2, r1
 800a122:	71fb      	strb	r3, [r7, #7]
 800a124:	4613      	mov	r3, r2
 800a126:	71bb      	strb	r3, [r7, #6]
	uint8_t data_rx[2], data_tx[2];
	data_tx[0] = 0x7f & addr;
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	723b      	strb	r3, [r7, #8]
	data_tx[1] = data;
 800a132:	79bb      	ldrb	r3, [r7, #6]
 800a134:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 800a136:	2200      	movs	r2, #0
 800a138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a13c:	480b      	ldr	r0, [pc, #44]	; (800a16c <write_spi+0x54>)
 800a13e:	f7f8 fcb1 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 800a142:	f107 020c 	add.w	r2, r7, #12
 800a146:	f107 0108 	add.w	r1, r7, #8
 800a14a:	2301      	movs	r3, #1
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	2302      	movs	r3, #2
 800a150:	4807      	ldr	r0, [pc, #28]	; (800a170 <write_spi+0x58>)
 800a152:	f7f9 f939 	bl	80033c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 800a156:	2201      	movs	r2, #1
 800a158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a15c:	4803      	ldr	r0, [pc, #12]	; (800a16c <write_spi+0x54>)
 800a15e:	f7f8 fca1 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	40020000 	.word	0x40020000
 800a170:	2000084c 	.word	0x2000084c

0800a174 <init_gyro>:

void init_gyro(void) {
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
	read_spi(WHO_AM_I);
 800a178:	2000      	movs	r0, #0
 800a17a:	f7ff ffa1 	bl	800a0c0 <read_spi>
	HAL_Delay(10);
 800a17e:	200a      	movs	r0, #10
 800a180:	f7f6 ff7c 	bl	800107c <HAL_Delay>
	if (read_spi(WHO_AM_I) != 0xe0) {
 800a184:	2000      	movs	r0, #0
 800a186:	f7ff ff9b 	bl	800a0c0 <read_spi>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2be0      	cmp	r3, #224	; 0xe0
 800a18e:	d002      	beq.n	800a196 <init_gyro+0x22>
		printf("gyro init error\n");
 800a190:	481e      	ldr	r0, [pc, #120]	; (800a20c <init_gyro+0x98>)
 800a192:	f003 fc1f 	bl	800d9d4 <puts>
	}
	HAL_Delay(10);
 800a196:	200a      	movs	r0, #10
 800a198:	f7f6 ff70 	bl	800107c <HAL_Delay>
	write_spi(0x05, 0x00); //USER_CTRL いろんな機能をoffに
 800a19c:	2100      	movs	r1, #0
 800a19e:	2005      	movs	r0, #5
 800a1a0:	f7ff ffba 	bl	800a118 <write_spi>
	HAL_Delay(10);
 800a1a4:	200a      	movs	r0, #10
 800a1a6:	f7f6 ff69 	bl	800107c <HAL_Delay>
	write_spi(0x06, 0x09); //PWRMGMT_1 温度センサoff クロックを自動設定 スリープ解除
 800a1aa:	2109      	movs	r1, #9
 800a1ac:	2006      	movs	r0, #6
 800a1ae:	f7ff ffb3 	bl	800a118 <write_spi>
	HAL_Delay(10);
 800a1b2:	200a      	movs	r0, #10
 800a1b4:	f7f6 ff62 	bl	800107c <HAL_Delay>
	write_spi(0x07, 0x3f); //PWRMGMT_2 ジャイロ・加速度センサoff
 800a1b8:	213f      	movs	r1, #63	; 0x3f
 800a1ba:	2007      	movs	r0, #7
 800a1bc:	f7ff ffac 	bl	800a118 <write_spi>

	HAL_Delay(10);
 800a1c0:	200a      	movs	r0, #10
 800a1c2:	f7f6 ff5b 	bl	800107c <HAL_Delay>
	write_spi(0x7f, 0x20); //REG_BANK_SEL bank2に移動
 800a1c6:	2120      	movs	r1, #32
 800a1c8:	207f      	movs	r0, #127	; 0x7f
 800a1ca:	f7ff ffa5 	bl	800a118 <write_spi>

	HAL_Delay(10);
 800a1ce:	200a      	movs	r0, #10
 800a1d0:	f7f6 ff54 	bl	800107c <HAL_Delay>
	write_spi(0x01, 0x06); //GYRO_CONFIG_1 +-2000dps non-filter
 800a1d4:	2106      	movs	r1, #6
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f7ff ff9e 	bl	800a118 <write_spi>
	HAL_Delay(10);
 800a1dc:	200a      	movs	r0, #10
 800a1de:	f7f6 ff4d 	bl	800107c <HAL_Delay>
	write_spi(0x14, 0x00); //ACCEL_CONFIG +-2g non-filter
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	2014      	movs	r0, #20
 800a1e6:	f7ff ff97 	bl	800a118 <write_spi>

	HAL_Delay(10);
 800a1ea:	200a      	movs	r0, #10
 800a1ec:	f7f6 ff46 	bl	800107c <HAL_Delay>
	write_spi(0x7f, 0x00); //REG_BANK_SEL bank0に移動
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	207f      	movs	r0, #127	; 0x7f
 800a1f4:	f7ff ff90 	bl	800a118 <write_spi>

	HAL_Delay(10);
 800a1f8:	200a      	movs	r0, #10
 800a1fa:	f7f6 ff3f 	bl	800107c <HAL_Delay>
	write_spi(0x07, 0x00); //PWRMGMT_2 ジャイロ・加速度センサon
 800a1fe:	2100      	movs	r1, #0
 800a200:	2007      	movs	r0, #7
 800a202:	f7ff ff89 	bl	800a118 <write_spi>
}
 800a206:	bf00      	nop
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0800f850 	.word	0x0800f850

0800a210 <read_gyro>:

float read_gyro(void) {
 800a210:	b5b0      	push	{r4, r5, r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
	uint8_t data_l;
	int8_t data_h;
	int16_t value;
	data_h = read_spi(0x37);
 800a216:	2037      	movs	r0, #55	; 0x37
 800a218:	f7ff ff52 	bl	800a0c0 <read_spi>
 800a21c:	4603      	mov	r3, r0
 800a21e:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x38);
 800a220:	2038      	movs	r0, #56	; 0x38
 800a222:	f7ff ff4d 	bl	800a0c0 <read_spi>
 800a226:	4603      	mov	r3, r0
 800a228:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 800a22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	b21a      	sxth	r2, r3
 800a232:	79bb      	ldrb	r3, [r7, #6]
 800a234:	b21b      	sxth	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	80bb      	strh	r3, [r7, #4]
//	if (rotation_parameter.back_rightturn_flag == 1) {
//		value = -1 * value;
//	}
	return (float) value * 0.0610370189 - angle_calibration; //*2000/(2^15-1) return deg/sec
 800a23a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a246:	ee17 0a90 	vmov	r0, s15
 800a24a:	f7f6 f9a5 	bl	8000598 <__aeabi_f2d>
 800a24e:	a313      	add	r3, pc, #76	; (adr r3, 800a29c <read_gyro+0x8c>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f9f8 	bl	8000648 <__aeabi_dmul>
 800a258:	4603      	mov	r3, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4625      	mov	r5, r4
 800a25e:	461c      	mov	r4, r3
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <read_gyro+0x88>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f7f6 f997 	bl	8000598 <__aeabi_f2d>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 f831 	bl	80002d8 <__aeabi_dsub>
 800a276:	4603      	mov	r3, r0
 800a278:	460c      	mov	r4, r1
 800a27a:	4618      	mov	r0, r3
 800a27c:	4621      	mov	r1, r4
 800a27e:	f7f6 fcbb 	bl	8000bf8 <__aeabi_d2f>
 800a282:	4603      	mov	r3, r0
 800a284:	ee07 3a90 	vmov	s15, r3
}
 800a288:	eeb0 0a67 	vmov.f32	s0, s15
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bdb0      	pop	{r4, r5, r7, pc}
 800a292:	bf00      	nop
 800a294:	f3af 8000 	nop.w
 800a298:	20000674 	.word	0x20000674
 800a29c:	800aaabd 	.word	0x800aaabd
 800a2a0:	3faf403e 	.word	0x3faf403e
 800a2a4:	00000000 	.word	0x00000000

0800a2a8 <read_accel>:

float read_accel(void) {
 800a2a8:	b5b0      	push	{r4, r5, r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	uint8_t data_l, data_h;
	int16_t value;
	data_h = read_spi(0x2d);
 800a2ae:	202d      	movs	r0, #45	; 0x2d
 800a2b0:	f7ff ff06 	bl	800a0c0 <read_spi>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x2e);
 800a2b8:	202e      	movs	r0, #46	; 0x2e
 800a2ba:	f7ff ff01 	bl	800a0c0 <read_spi>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	b21a      	sxth	r2, r3
 800a2c8:	79bb      	ldrb	r3, [r7, #6]
 800a2ca:	b21b      	sxth	r3, r3
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	80bb      	strh	r3, [r7, #4]
//	acc_log_index++;
//	if (acc_log_index == 6) {
//		acc_log_index = 0;
//	}

	return ((float) (value * 0.598568681905 * -1) - accel_calibration) * 1.02; //*9.8...*2/(2^15-1)*1000 return mm/ms^2
 800a2d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f6 f94d 	bl	8000574 <__aeabi_i2d>
 800a2da:	a31a      	add	r3, pc, #104	; (adr r3, 800a344 <read_accel+0x9c>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f6 f9b2 	bl	8000648 <__aeabi_dmul>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7f6 fc81 	bl	8000bf8 <__aeabi_d2f>
 800a2f6:	ee07 0a10 	vmov	s14, r0
 800a2fa:	4b11      	ldr	r3, [pc, #68]	; (800a340 <read_accel+0x98>)
 800a2fc:	edd3 7a00 	vldr	s15, [r3]
 800a300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a304:	ee17 0a90 	vmov	r0, s15
 800a308:	f7f6 f946 	bl	8000598 <__aeabi_f2d>
 800a30c:	a30a      	add	r3, pc, #40	; (adr r3, 800a338 <read_accel+0x90>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f6 f999 	bl	8000648 <__aeabi_dmul>
 800a316:	4603      	mov	r3, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	4618      	mov	r0, r3
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7f6 fc6b 	bl	8000bf8 <__aeabi_d2f>
 800a322:	4603      	mov	r3, r0
 800a324:	ee07 3a90 	vmov	s15, r3
}
 800a328:	eeb0 0a67 	vmov.f32	s0, s15
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bdb0      	pop	{r4, r5, r7, pc}
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	851eb852 	.word	0x851eb852
 800a33c:	3ff051eb 	.word	0x3ff051eb
 800a340:	20000698 	.word	0x20000698
 800a344:	8226233e 	.word	0x8226233e
 800a348:	3fe32779 	.word	0x3fe32779

0800a34c <check_parity>:

uint16_t check_parity(uint16_t val) {
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 8;
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	88fb      	ldrh	r3, [r7, #6]
 800a35e:	4053      	eors	r3, r2
 800a360:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 4;
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	091b      	lsrs	r3, r3, #4
 800a366:	b29a      	uxth	r2, r3
 800a368:	88fb      	ldrh	r3, [r7, #6]
 800a36a:	4053      	eors	r3, r2
 800a36c:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 2;
 800a36e:	88fb      	ldrh	r3, [r7, #6]
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	b29a      	uxth	r2, r3
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	4053      	eors	r3, r2
 800a378:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 1;
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	4053      	eors	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
	return val & 0x0001;
 800a386:	88fb      	ldrh	r3, [r7, #6]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	b29b      	uxth	r3, r3
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
	...

0800a39c <read_spi_en>:

uint16_t read_spi_en(uint8_t le_ri, uint16_t addr) { //addrのデータを読み取る
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	460a      	mov	r2, r1
 800a3a6:	71fb      	strb	r3, [r7, #7]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	80bb      	strh	r3, [r7, #4]
	uint16_t data_tx;
	uint16_t data_rx;

	data_tx = (0x4000 | addr); //14bitが1でread 0でwrite
 800a3ac:	88bb      	ldrh	r3, [r7, #4]
 800a3ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	81fb      	strh	r3, [r7, #14]
	data_tx = data_tx | (check_parity(data_tx) << 15); //偶パリティ
 800a3b6:	89fb      	ldrh	r3, [r7, #14]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff ffc7 	bl	800a34c <check_parity>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	03db      	lsls	r3, r3, #15
 800a3c2:	b21a      	sxth	r2, r3
 800a3c4:	89fb      	ldrh	r3, [r7, #14]
 800a3c6:	b21b      	sxth	r3, r3
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	b21b      	sxth	r3, r3
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	81fb      	strh	r3, [r7, #14]

	if (le_ri == LEFT) { //select CS
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d105      	bne.n	800a3e2 <read_spi_en+0x46>
		HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 0);
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2180      	movs	r1, #128	; 0x80
 800a3da:	4812      	ldr	r0, [pc, #72]	; (800a424 <read_spi_en+0x88>)
 800a3dc:	f7f8 fb62 	bl	8002aa4 <HAL_GPIO_WritePin>
 800a3e0:	e007      	b.n	800a3f2 <read_spi_en+0x56>
	} else if (le_ri == RIGHT) {
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d104      	bne.n	800a3f2 <read_spi_en+0x56>
		HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 0);
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2140      	movs	r1, #64	; 0x40
 800a3ec:	480d      	ldr	r0, [pc, #52]	; (800a424 <read_spi_en+0x88>)
 800a3ee:	f7f8 fb59 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &data_tx, (uint8_t*) &data_rx, 1,
 800a3f2:	f107 020c 	add.w	r2, r7, #12
 800a3f6:	f107 010e 	add.w	r1, r7, #14
 800a3fa:	2364      	movs	r3, #100	; 0x64
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	2301      	movs	r3, #1
 800a400:	4809      	ldr	r0, [pc, #36]	; (800a428 <read_spi_en+0x8c>)
 800a402:	f7f8 ffe1 	bl	80033c8 <HAL_SPI_TransmitReceive>
			100);
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 800a406:	2201      	movs	r2, #1
 800a408:	2180      	movs	r1, #128	; 0x80
 800a40a:	4806      	ldr	r0, [pc, #24]	; (800a424 <read_spi_en+0x88>)
 800a40c:	f7f8 fb4a 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 800a410:	2201      	movs	r2, #1
 800a412:	2140      	movs	r1, #64	; 0x40
 800a414:	4803      	ldr	r0, [pc, #12]	; (800a424 <read_spi_en+0x88>)
 800a416:	f7f8 fb45 	bl	8002aa4 <HAL_GPIO_WritePin>
	return data_rx;
 800a41a:	89bb      	ldrh	r3, [r7, #12]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	40020400 	.word	0x40020400
 800a428:	200008a4 	.word	0x200008a4
 800a42c:	00000000 	.word	0x00000000

0800a430 <Battery_Check>:
	} else {

	}
}

void Battery_Check(void) {
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800a434:	2100      	movs	r1, #0
 800a436:	4836      	ldr	r0, [pc, #216]	; (800a510 <Battery_Check+0xe0>)
 800a438:	f7f9 facc 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800a43c:	2104      	movs	r1, #4
 800a43e:	4834      	ldr	r0, [pc, #208]	; (800a510 <Battery_Check+0xe0>)
 800a440:	f7f9 fac8 	bl	80039d4 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800a444:	4b32      	ldr	r3, [pc, #200]	; (800a510 <Battery_Check+0xe0>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2200      	movs	r2, #0
 800a44a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800a44c:	4b30      	ldr	r3, [pc, #192]	; (800a510 <Battery_Check+0xe0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2200      	movs	r2, #0
 800a452:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, SET);
 800a454:	2201      	movs	r2, #1
 800a456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a45a:	482e      	ldr	r0, [pc, #184]	; (800a514 <Battery_Check+0xe4>)
 800a45c:	f7f8 fb22 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, SET);
 800a460:	2201      	movs	r2, #1
 800a462:	2140      	movs	r1, #64	; 0x40
 800a464:	482b      	ldr	r0, [pc, #172]	; (800a514 <Battery_Check+0xe4>)
 800a466:	f7f8 fb1d 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, SET);
 800a46a:	2201      	movs	r2, #1
 800a46c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a470:	4829      	ldr	r0, [pc, #164]	; (800a518 <Battery_Check+0xe8>)
 800a472:	f7f8 fb17 	bl	8002aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, SET);
 800a476:	2201      	movs	r2, #1
 800a478:	2120      	movs	r1, #32
 800a47a:	4826      	ldr	r0, [pc, #152]	; (800a514 <Battery_Check+0xe4>)
 800a47c:	f7f8 fb12 	bl	8002aa4 <HAL_GPIO_WritePin>

	SEN_check_flag = 1;
 800a480:	4b26      	ldr	r3, [pc, #152]	; (800a51c <Battery_Check+0xec>)
 800a482:	2201      	movs	r2, #1
 800a484:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800a486:	200a      	movs	r0, #10
 800a488:	f7f6 fdf8 	bl	800107c <HAL_Delay>
	SEN_check_flag = 0;
 800a48c:	4b23      	ldr	r3, [pc, #140]	; (800a51c <Battery_Check+0xec>)
 800a48e:	2200      	movs	r2, #0
 800a490:	701a      	strb	r2, [r3, #0]
//	}

//	Batt = (float) g_ADCBuffer[8] / 4095 * 3.3 * 2;
//	printf("%4.2f\n", Batt);

	if ((Batt < 3.72 && Batt > 3.35) || (Batt < 3.25)) { //7.7
 800a492:	4b23      	ldr	r3, [pc, #140]	; (800a520 <Battery_Check+0xf0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4618      	mov	r0, r3
 800a498:	f7f6 f87e 	bl	8000598 <__aeabi_f2d>
 800a49c:	a318      	add	r3, pc, #96	; (adr r3, 800a500 <Battery_Check+0xd0>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f6 fb43 	bl	8000b2c <__aeabi_dcmplt>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00c      	beq.n	800a4c6 <Battery_Check+0x96>
 800a4ac:	4b1c      	ldr	r3, [pc, #112]	; (800a520 <Battery_Check+0xf0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7f6 f871 	bl	8000598 <__aeabi_f2d>
 800a4b6:	a314      	add	r3, pc, #80	; (adr r3, 800a508 <Battery_Check+0xd8>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f6 fb54 	bl	8000b68 <__aeabi_dcmpgt>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <Battery_Check+0xac>
 800a4c6:	4b16      	ldr	r3, [pc, #88]	; (800a520 <Battery_Check+0xf0>)
 800a4c8:	edd3 7a00 	vldr	s15, [r3]
 800a4cc:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 800a4d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d8:	d400      	bmi.n	800a4dc <Battery_Check+0xac>
			set_led(6);
			HAL_Delay(500);
			//	myprintf("%6.2f\n",Battery);
		}
	}
}
 800a4da:	e00e      	b.n	800a4fa <Battery_Check+0xca>
			set_led(3);
 800a4dc:	2003      	movs	r0, #3
 800a4de:	f000 f821 	bl	800a524 <set_led>
			HAL_Delay(500);
 800a4e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4e6:	f7f6 fdc9 	bl	800107c <HAL_Delay>
			set_led(6);
 800a4ea:	2006      	movs	r0, #6
 800a4ec:	f000 f81a 	bl	800a524 <set_led>
			HAL_Delay(500);
 800a4f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4f4:	f7f6 fdc2 	bl	800107c <HAL_Delay>
			set_led(3);
 800a4f8:	e7f0      	b.n	800a4dc <Battery_Check+0xac>
}
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	f3af 8000 	nop.w
 800a500:	5c28f5c3 	.word	0x5c28f5c3
 800a504:	400dc28f 	.word	0x400dc28f
 800a508:	cccccccd 	.word	0xcccccccd
 800a50c:	400acccc 	.word	0x400acccc
 800a510:	2000097c 	.word	0x2000097c
 800a514:	40020000 	.word	0x40020000
 800a518:	40020800 	.word	0x40020800
 800a51c:	2000066b 	.word	0x2000066b
 800a520:	20000b84 	.word	0x20000b84

0800a524 <set_led>:

void set_led(uint8_t num) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	71fb      	strb	r3, [r7, #7]
	if ((0x01 & num) != 0) {
 800a52e:	79fb      	ldrb	r3, [r7, #7]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d006      	beq.n	800a548 <set_led+0x24>
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, SET);
 800a53a:	2201      	movs	r2, #1
 800a53c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a540:	4821      	ldr	r0, [pc, #132]	; (800a5c8 <set_led+0xa4>)
 800a542:	f7f8 faaf 	bl	8002aa4 <HAL_GPIO_WritePin>
 800a546:	e005      	b.n	800a554 <set_led+0x30>
	} else {
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, RESET);
 800a548:	2200      	movs	r2, #0
 800a54a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a54e:	481e      	ldr	r0, [pc, #120]	; (800a5c8 <set_led+0xa4>)
 800a550:	f7f8 faa8 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x02 & num) != 0) {
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <set_led+0x4a>
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, SET);
 800a560:	2201      	movs	r2, #1
 800a562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a566:	4819      	ldr	r0, [pc, #100]	; (800a5cc <set_led+0xa8>)
 800a568:	f7f8 fa9c 	bl	8002aa4 <HAL_GPIO_WritePin>
 800a56c:	e005      	b.n	800a57a <set_led+0x56>
	} else {
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, RESET);
 800a56e:	2200      	movs	r2, #0
 800a570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a574:	4815      	ldr	r0, [pc, #84]	; (800a5cc <set_led+0xa8>)
 800a576:	f7f8 fa95 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x04 & num) != 0) {
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <set_led+0x6e>
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, SET);
 800a586:	2201      	movs	r2, #1
 800a588:	2101      	movs	r1, #1
 800a58a:	4811      	ldr	r0, [pc, #68]	; (800a5d0 <set_led+0xac>)
 800a58c:	f7f8 fa8a 	bl	8002aa4 <HAL_GPIO_WritePin>
 800a590:	e004      	b.n	800a59c <set_led+0x78>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, RESET);
 800a592:	2200      	movs	r2, #0
 800a594:	2101      	movs	r1, #1
 800a596:	480e      	ldr	r0, [pc, #56]	; (800a5d0 <set_led+0xac>)
 800a598:	f7f8 fa84 	bl	8002aa4 <HAL_GPIO_WritePin>
	}
	if ((0x08 & num) != 0) {
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <set_led+0x90>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, SET);
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	2110      	movs	r1, #16
 800a5ac:	4806      	ldr	r0, [pc, #24]	; (800a5c8 <set_led+0xa4>)
 800a5ae:	f7f8 fa79 	bl	8002aa4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
	}
}
 800a5b2:	e004      	b.n	800a5be <set_led+0x9a>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2110      	movs	r1, #16
 800a5b8:	4803      	ldr	r0, [pc, #12]	; (800a5c8 <set_led+0xa4>)
 800a5ba:	f7f8 fa73 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40020000 	.word	0x40020000
 800a5cc:	40020800 	.word	0x40020800
 800a5d0:	40020400 	.word	0x40020400

0800a5d4 <log_start>:

void log_start(void) {
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
	log_often_count = 0;
 800a5d8:	4b08      	ldr	r3, [pc, #32]	; (800a5fc <log_start+0x28>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	801a      	strh	r2, [r3, #0]
	log_index = 0;
 800a5de:	4b08      	ldr	r3, [pc, #32]	; (800a600 <log_start+0x2c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	801a      	strh	r2, [r3, #0]
	log_how_often = 1;
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <log_start+0x30>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	801a      	strh	r2, [r3, #0]
	log_flag = 1;
 800a5ea:	4b07      	ldr	r3, [pc, #28]	; (800a608 <log_start+0x34>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000670 	.word	0x20000670
 800a600:	2000066c 	.word	0x2000066c
 800a604:	2000066e 	.word	0x2000066e
 800a608:	20000672 	.word	0x20000672

0800a60c <log_sampling>:

void log_sampling(void) {
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
	log_often_count++;
 800a610:	4b4a      	ldr	r3, [pc, #296]	; (800a73c <log_sampling+0x130>)
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	3301      	adds	r3, #1
 800a616:	b29a      	uxth	r2, r3
 800a618:	4b48      	ldr	r3, [pc, #288]	; (800a73c <log_sampling+0x130>)
 800a61a:	801a      	strh	r2, [r3, #0]
	if (log_index == LOG_MAX - 1) {
 800a61c:	4b48      	ldr	r3, [pc, #288]	; (800a740 <log_sampling+0x134>)
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	f241 3287 	movw	r2, #4999	; 0x1387
 800a624:	4293      	cmp	r3, r2
 800a626:	d103      	bne.n	800a630 <log_sampling+0x24>
		log_flag = 0;
 800a628:	4b46      	ldr	r3, [pc, #280]	; (800a744 <log_sampling+0x138>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
		log_index++;
		log_often_count = 0;
		//	printf(",%4.8f,%4.8f,%4.8f,%4.8f\n",real_L.vel,real_R.vel,real_L.dis,real_R.dis);

	}
}
 800a62e:	e080      	b.n	800a732 <log_sampling+0x126>
	} else if (log_often_count == log_how_often) {
 800a630:	4b42      	ldr	r3, [pc, #264]	; (800a73c <log_sampling+0x130>)
 800a632:	881a      	ldrh	r2, [r3, #0]
 800a634:	4b44      	ldr	r3, [pc, #272]	; (800a748 <log_sampling+0x13c>)
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d17a      	bne.n	800a732 <log_sampling+0x126>
		mylog.log_1[log_index] = real_L.vel;
 800a63c:	4b40      	ldr	r3, [pc, #256]	; (800a740 <log_sampling+0x134>)
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	4b42      	ldr	r3, [pc, #264]	; (800a74c <log_sampling+0x140>)
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4942      	ldr	r1, [pc, #264]	; (800a750 <log_sampling+0x144>)
 800a648:	0083      	lsls	r3, r0, #2
 800a64a:	440b      	add	r3, r1
 800a64c:	601a      	str	r2, [r3, #0]
		mylog.log_2[log_index] = real_R.vel;
 800a64e:	4b3c      	ldr	r3, [pc, #240]	; (800a740 <log_sampling+0x134>)
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	4b3f      	ldr	r3, [pc, #252]	; (800a754 <log_sampling+0x148>)
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	493d      	ldr	r1, [pc, #244]	; (800a750 <log_sampling+0x144>)
 800a65a:	f500 539c 	add.w	r3, r0, #4992	; 0x1380
 800a65e:	3308      	adds	r3, #8
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	601a      	str	r2, [r3, #0]
		mylog.log_3[log_index] = ideal_translation.vel;
 800a666:	4b36      	ldr	r3, [pc, #216]	; (800a740 <log_sampling+0x134>)
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	4b3a      	ldr	r3, [pc, #232]	; (800a758 <log_sampling+0x14c>)
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	4937      	ldr	r1, [pc, #220]	; (800a750 <log_sampling+0x144>)
 800a672:	f500 531c 	add.w	r3, r0, #9984	; 0x2700
 800a676:	3310      	adds	r3, #16
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	601a      	str	r2, [r3, #0]
		mylog.log_4[log_index] = real_rotation.vel;
 800a67e:	4b30      	ldr	r3, [pc, #192]	; (800a740 <log_sampling+0x134>)
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	4b35      	ldr	r3, [pc, #212]	; (800a75c <log_sampling+0x150>)
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	4931      	ldr	r1, [pc, #196]	; (800a750 <log_sampling+0x144>)
 800a68a:	f500 536a 	add.w	r3, r0, #14976	; 0x3a80
 800a68e:	3318      	adds	r3, #24
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	601a      	str	r2, [r3, #0]
		mylog.log_5[log_index] = ideal_rotation.vel;
 800a696:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <log_sampling+0x134>)
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	4b30      	ldr	r3, [pc, #192]	; (800a760 <log_sampling+0x154>)
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	492b      	ldr	r1, [pc, #172]	; (800a750 <log_sampling+0x144>)
 800a6a2:	f500 439c 	add.w	r3, r0, #19968	; 0x4e00
 800a6a6:	3320      	adds	r3, #32
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	601a      	str	r2, [r3, #0]
		mylog2.log_1[log_index] = real_rotation.dis;
 800a6ae:	4b24      	ldr	r3, [pc, #144]	; (800a740 <log_sampling+0x134>)
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	4b29      	ldr	r3, [pc, #164]	; (800a75c <log_sampling+0x150>)
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	492a      	ldr	r1, [pc, #168]	; (800a764 <log_sampling+0x158>)
 800a6ba:	0083      	lsls	r3, r0, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	601a      	str	r2, [r3, #0]
		mylog2.log_2[log_index] = ideal_rotation.dis;
 800a6c0:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <log_sampling+0x134>)
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	4b26      	ldr	r3, [pc, #152]	; (800a760 <log_sampling+0x154>)
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4926      	ldr	r1, [pc, #152]	; (800a764 <log_sampling+0x158>)
 800a6cc:	f500 539c 	add.w	r3, r0, #4992	; 0x1380
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	440b      	add	r3, r1
 800a6d6:	601a      	str	r2, [r3, #0]
		mylog2.log_3[log_index] = wallcontrol_value;
 800a6d8:	4b19      	ldr	r3, [pc, #100]	; (800a740 <log_sampling+0x134>)
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	4b22      	ldr	r3, [pc, #136]	; (800a768 <log_sampling+0x15c>)
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	4920      	ldr	r1, [pc, #128]	; (800a764 <log_sampling+0x158>)
 800a6e4:	f500 531c 	add.w	r3, r0, #9984	; 0x2700
 800a6e8:	3310      	adds	r3, #16
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	440b      	add	r3, r1
 800a6ee:	601a      	str	r2, [r3, #0]
		mylog2.log_4[log_index] = test_R;
 800a6f0:	4b13      	ldr	r3, [pc, #76]	; (800a740 <log_sampling+0x134>)
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	4b1d      	ldr	r3, [pc, #116]	; (800a76c <log_sampling+0x160>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	491a      	ldr	r1, [pc, #104]	; (800a764 <log_sampling+0x158>)
 800a6fc:	f500 536a 	add.w	r3, r0, #14976	; 0x3a80
 800a700:	3318      	adds	r3, #24
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	601a      	str	r2, [r3, #0]
		mylog2.log_5[log_index] = test_L2;
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <log_sampling+0x134>)
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	4b18      	ldr	r3, [pc, #96]	; (800a770 <log_sampling+0x164>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4914      	ldr	r1, [pc, #80]	; (800a764 <log_sampling+0x158>)
 800a714:	f500 439c 	add.w	r3, r0, #19968	; 0x4e00
 800a718:	3320      	adds	r3, #32
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	440b      	add	r3, r1
 800a71e:	601a      	str	r2, [r3, #0]
		log_index++;
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <log_sampling+0x134>)
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <log_sampling+0x134>)
 800a72a:	801a      	strh	r2, [r3, #0]
		log_often_count = 0;
 800a72c:	4b03      	ldr	r3, [pc, #12]	; (800a73c <log_sampling+0x130>)
 800a72e:	2200      	movs	r2, #0
 800a730:	801a      	strh	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20000670 	.word	0x20000670
 800a740:	2000066c 	.word	0x2000066c
 800a744:	20000672 	.word	0x20000672
 800a748:	2000066e 	.word	0x2000066e
 800a74c:	20019568 	.word	0x20019568
 800a750:	20000ea8 	.word	0x20000ea8
 800a754:	20000e9c 	.word	0x20000e9c
 800a758:	2001961c 	.word	0x2001961c
 800a75c:	20019860 	.word	0x20019860
 800a760:	20000e90 	.word	0x20000e90
 800a764:	2001996c 	.word	0x2001996c
 800a768:	20000664 	.word	0x20000664
 800a76c:	20019660 	.word	0x20019660
 800a770:	20032140 	.word	0x20032140

0800a774 <log_output>:

void log_output(void) {
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b085      	sub	sp, #20
 800a778:	af02      	add	r7, sp, #8
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0,
 800a77a:	2302      	movs	r3, #2
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	2000      	movs	r0, #0
 800a786:	f7f9 ffcd 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
	for (uint16_t i = 0; i < LOG_MAX; i++) {
 800a78a:	2300      	movs	r3, #0
 800a78c:	80fb      	strh	r3, [r7, #6]
 800a78e:	e0b6      	b.n	800a8fe <log_output+0x18a>
		printf(",");
 800a790:	202c      	movs	r0, #44	; 0x2c
 800a792:	f003 f8af 	bl	800d8f4 <putchar>
		printf("%8.2f,", mylog.log_1[i]);
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	4a62      	ldr	r2, [pc, #392]	; (800a924 <log_output+0x1b0>)
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7f5 fef9 	bl	8000598 <__aeabi_f2d>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	485e      	ldr	r0, [pc, #376]	; (800a928 <log_output+0x1b4>)
 800a7b0:	f003 f888 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog.log_2[i]);
 800a7b4:	88fb      	ldrh	r3, [r7, #6]
 800a7b6:	4a5b      	ldr	r2, [pc, #364]	; (800a924 <log_output+0x1b0>)
 800a7b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a7bc:	3308      	adds	r3, #8
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f5 fee7 	bl	8000598 <__aeabi_f2d>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	4855      	ldr	r0, [pc, #340]	; (800a928 <log_output+0x1b4>)
 800a7d4:	f003 f876 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog.log_3[i]);
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	4a52      	ldr	r2, [pc, #328]	; (800a924 <log_output+0x1b0>)
 800a7dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f5 fed5 	bl	8000598 <__aeabi_f2d>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4623      	mov	r3, r4
 800a7f6:	484c      	ldr	r0, [pc, #304]	; (800a928 <log_output+0x1b4>)
 800a7f8:	f003 f864 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog.log_4[i]);
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	4a49      	ldr	r2, [pc, #292]	; (800a924 <log_output+0x1b0>)
 800a800:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800a804:	3318      	adds	r3, #24
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7f5 fec3 	bl	8000598 <__aeabi_f2d>
 800a812:	4603      	mov	r3, r0
 800a814:	460c      	mov	r4, r1
 800a816:	461a      	mov	r2, r3
 800a818:	4623      	mov	r3, r4
 800a81a:	4843      	ldr	r0, [pc, #268]	; (800a928 <log_output+0x1b4>)
 800a81c:	f003 f852 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog.log_5[i]);
 800a820:	88fb      	ldrh	r3, [r7, #6]
 800a822:	4a40      	ldr	r2, [pc, #256]	; (800a924 <log_output+0x1b0>)
 800a824:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a828:	3320      	adds	r3, #32
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7f5 feb1 	bl	8000598 <__aeabi_f2d>
 800a836:	4603      	mov	r3, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	461a      	mov	r2, r3
 800a83c:	4623      	mov	r3, r4
 800a83e:	483a      	ldr	r0, [pc, #232]	; (800a928 <log_output+0x1b4>)
 800a840:	f003 f840 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog2.log_1[i]);
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	4a39      	ldr	r2, [pc, #228]	; (800a92c <log_output+0x1b8>)
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f5 fea2 	bl	8000598 <__aeabi_f2d>
 800a854:	4603      	mov	r3, r0
 800a856:	460c      	mov	r4, r1
 800a858:	461a      	mov	r2, r3
 800a85a:	4623      	mov	r3, r4
 800a85c:	4832      	ldr	r0, [pc, #200]	; (800a928 <log_output+0x1b4>)
 800a85e:	f003 f831 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog2.log_2[i]);
 800a862:	88fb      	ldrh	r3, [r7, #6]
 800a864:	4a31      	ldr	r2, [pc, #196]	; (800a92c <log_output+0x1b8>)
 800a866:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a86a:	3308      	adds	r3, #8
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f7f5 fe90 	bl	8000598 <__aeabi_f2d>
 800a878:	4603      	mov	r3, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	461a      	mov	r2, r3
 800a87e:	4623      	mov	r3, r4
 800a880:	4829      	ldr	r0, [pc, #164]	; (800a928 <log_output+0x1b4>)
 800a882:	f003 f81f 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog2.log_3[i]);
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	4a28      	ldr	r2, [pc, #160]	; (800a92c <log_output+0x1b8>)
 800a88a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a88e:	3310      	adds	r3, #16
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7f5 fe7e 	bl	8000598 <__aeabi_f2d>
 800a89c:	4603      	mov	r3, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	4820      	ldr	r0, [pc, #128]	; (800a928 <log_output+0x1b4>)
 800a8a6:	f003 f80d 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog2.log_4[i]);
 800a8aa:	88fb      	ldrh	r3, [r7, #6]
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <log_output+0x1b8>)
 800a8ae:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800a8b2:	3318      	adds	r3, #24
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f5 fe6c 	bl	8000598 <__aeabi_f2d>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	4817      	ldr	r0, [pc, #92]	; (800a928 <log_output+0x1b4>)
 800a8ca:	f002 fffb 	bl	800d8c4 <iprintf>
		printf("%8.2f,", mylog2.log_5[i]);
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	4a16      	ldr	r2, [pc, #88]	; (800a92c <log_output+0x1b8>)
 800a8d2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a8d6:	3320      	adds	r3, #32
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7f5 fe5a 	bl	8000598 <__aeabi_f2d>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4623      	mov	r3, r4
 800a8ec:	480e      	ldr	r0, [pc, #56]	; (800a928 <log_output+0x1b4>)
 800a8ee:	f002 ffe9 	bl	800d8c4 <iprintf>
		printf("\n");
 800a8f2:	200a      	movs	r0, #10
 800a8f4:	f002 fffe 	bl	800d8f4 <putchar>
	for (uint16_t i = 0; i < LOG_MAX; i++) {
 800a8f8:	88fb      	ldrh	r3, [r7, #6]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	80fb      	strh	r3, [r7, #6]
 800a8fe:	88fb      	ldrh	r3, [r7, #6]
 800a900:	f241 3287 	movw	r2, #4999	; 0x1387
 800a904:	4293      	cmp	r3, r2
 800a906:	f67f af43 	bls.w	800a790 <log_output+0x1c>
	}
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0,
 800a90a:	2300      	movs	r3, #0
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	2300      	movs	r3, #0
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	2000      	movs	r0, #0
 800a916:	f7f9 ff05 	bl	8004724 <SEGGER_RTT_ConfigUpBuffer>
	SEGGER_RTT_MODE_NO_BLOCK_SKIP);
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd90      	pop	{r4, r7, pc}
 800a922:	bf00      	nop
 800a924:	20000ea8 	.word	0x20000ea8
 800a928:	0800f860 	.word	0x0800f860
 800a92c:	2001996c 	.word	0x2001996c

0800a930 <start_led>:

void start_led(void) {
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
	uint8_t i;
	SEN_check_flag = 1;
 800a936:	4b54      	ldr	r3, [pc, #336]	; (800aa88 <start_led+0x158>)
 800a938:	2201      	movs	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
	wall_control_flag = 0;
 800a93c:	4b53      	ldr	r3, [pc, #332]	; (800aa8c <start_led+0x15c>)
 800a93e:	2200      	movs	r2, #0
 800a940:	701a      	strb	r2, [r3, #0]
	while (SEN_R.now < 1000 || SEN_RF.now < 1000) {
 800a942:	bf00      	nop
 800a944:	4b52      	ldr	r3, [pc, #328]	; (800aa90 <start_led+0x160>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a94c:	dbfa      	blt.n	800a944 <start_led+0x14>
 800a94e:	4b51      	ldr	r3, [pc, #324]	; (800aa94 <start_led+0x164>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a956:	dbf5      	blt.n	800a944 <start_led+0x14>
//			||SEN_L.now < 1000&& SEN_LF.now < 1000) {

	}
	set_buzzer(0, C_5, 800);
 800a958:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a95c:	f240 210b 	movw	r1, #523	; 0x20b
 800a960:	2000      	movs	r0, #0
 800a962:	f7fd fa09 	bl	8007d78 <set_buzzer>
	set_led(7);
 800a966:	2007      	movs	r0, #7
 800a968:	f7ff fddc 	bl	800a524 <set_led>
	HAL_Delay(200);
 800a96c:	20c8      	movs	r0, #200	; 0xc8
 800a96e:	f7f6 fb85 	bl	800107c <HAL_Delay>
	set_led(0);
 800a972:	2000      	movs	r0, #0
 800a974:	f7ff fdd6 	bl	800a524 <set_led>
	HAL_Delay(200);
 800a978:	20c8      	movs	r0, #200	; 0xc8
 800a97a:	f7f6 fb7f 	bl	800107c <HAL_Delay>
	set_led(7);
 800a97e:	2007      	movs	r0, #7
 800a980:	f7ff fdd0 	bl	800a524 <set_led>
	HAL_Delay(200);
 800a984:	20c8      	movs	r0, #200	; 0xc8
 800a986:	f7f6 fb79 	bl	800107c <HAL_Delay>
	set_led(0);
 800a98a:	2000      	movs	r0, #0
 800a98c:	f7ff fdca 	bl	800a524 <set_led>
	HAL_Delay(200);
 800a990:	20c8      	movs	r0, #200	; 0xc8
 800a992:	f7f6 fb73 	bl	800107c <HAL_Delay>

//	log_start();

	angle_calibration_integral = 0.0;
 800a996:	4b40      	ldr	r3, [pc, #256]	; (800aa98 <start_led+0x168>)
 800a998:	f04f 0200 	mov.w	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
	angle_calibration = 0.0;
 800a99e:	4b3f      	ldr	r3, [pc, #252]	; (800aa9c <start_led+0x16c>)
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
	accel_calibration_integral = 0.0;
 800a9a6:	4b3e      	ldr	r3, [pc, #248]	; (800aaa0 <start_led+0x170>)
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
	accel_calibration = 0.0;
 800a9ae:	4b3d      	ldr	r3, [pc, #244]	; (800aaa4 <start_led+0x174>)
 800a9b0:	f04f 0200 	mov.w	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]
	angle_calibration_counter = 0;
 800a9b6:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <start_led+0x178>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	801a      	strh	r2, [r3, #0]
	angle_calibration_flag = 1;
 800a9bc:	4b3b      	ldr	r3, [pc, #236]	; (800aaac <start_led+0x17c>)
 800a9be:	2201      	movs	r2, #1
 800a9c0:	701a      	strb	r2, [r3, #0]
	while (angle_calibration_flag == 1) {
 800a9c2:	bf00      	nop
 800a9c4:	4b39      	ldr	r3, [pc, #228]	; (800aaac <start_led+0x17c>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d0fb      	beq.n	800a9c4 <start_led+0x94>

	}
	angle_calibration = angle_calibration_integral / 2048.0;
 800a9cc:	4b32      	ldr	r3, [pc, #200]	; (800aa98 <start_led+0x168>)
 800a9ce:	ed93 7a00 	vldr	s14, [r3]
 800a9d2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800aab0 <start_led+0x180>
 800a9d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9da:	4b30      	ldr	r3, [pc, #192]	; (800aa9c <start_led+0x16c>)
 800a9dc:	edc3 7a00 	vstr	s15, [r3]
	accel_calibration = accel_calibration_integral / 2048.0;
 800a9e0:	4b2f      	ldr	r3, [pc, #188]	; (800aaa0 <start_led+0x170>)
 800a9e2:	ed93 7a00 	vldr	s14, [r3]
 800a9e6:	eddf 6a32 	vldr	s13, [pc, #200]	; 800aab0 <start_led+0x180>
 800a9ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9ee:	4b2d      	ldr	r3, [pc, #180]	; (800aaa4 <start_led+0x174>)
 800a9f0:	edc3 7a00 	vstr	s15, [r3]
	real_rotation.dis = 0.0;
 800a9f4:	4b2f      	ldr	r3, [pc, #188]	; (800aab4 <start_led+0x184>)
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	609a      	str	r2, [r3, #8]
	ideal_translation.vel = 0.0;
 800a9fc:	4b2e      	ldr	r3, [pc, #184]	; (800aab8 <start_led+0x188>)
 800a9fe:	f04f 0200 	mov.w	r2, #0
 800aa02:	605a      	str	r2, [r3, #4]

	for (i = 0; i < 50; i++) {
 800aa04:	2300      	movs	r3, #0
 800aa06:	71fb      	strb	r3, [r7, #7]
 800aa08:	e013      	b.n	800aa32 <start_led+0x102>
		enc_buff_l[i] = 0;
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	4a2b      	ldr	r2, [pc, #172]	; (800aabc <start_led+0x18c>)
 800aa0e:	2100      	movs	r1, #0
 800aa10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		enc_buff_r[i] = 0;
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	4a2a      	ldr	r2, [pc, #168]	; (800aac0 <start_led+0x190>)
 800aa18:	2100      	movs	r1, #0
 800aa1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		acc_buff[i] = 0;
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	4a28      	ldr	r2, [pc, #160]	; (800aac4 <start_led+0x194>)
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	f04f 0200 	mov.w	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 50; i++) {
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	71fb      	strb	r3, [r7, #7]
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	2b31      	cmp	r3, #49	; 0x31
 800aa36:	d9e8      	bls.n	800aa0a <start_led+0xda>
	}
	for (i = 50; i < 100; i++) {
 800aa38:	2332      	movs	r3, #50	; 0x32
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	e00c      	b.n	800aa58 <start_led+0x128>
		enc_buff_l[i] = 0;
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	4a1e      	ldr	r2, [pc, #120]	; (800aabc <start_led+0x18c>)
 800aa42:	2100      	movs	r1, #0
 800aa44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		enc_buff_r[i] = 0;
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <start_led+0x190>)
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 50; i < 100; i++) {
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	3301      	adds	r3, #1
 800aa56:	71fb      	strb	r3, [r7, #7]
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	2b63      	cmp	r3, #99	; 0x63
 800aa5c:	d9ef      	bls.n	800aa3e <start_led+0x10e>
	}

	rotation_deviation.cumulative = 0;
 800aa5e:	4b1a      	ldr	r3, [pc, #104]	; (800aac8 <start_led+0x198>)
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
	set_buzzer(0, E_5, 800);
 800aa66:	f44f 7248 	mov.w	r2, #800	; 0x320
 800aa6a:	f240 2193 	movw	r1, #659	; 0x293
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f7fd f982 	bl	8007d78 <set_buzzer>
	moter_flag = 1;
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <start_led+0x19c>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	701a      	strb	r2, [r3, #0]
	wall_control_flag = 1;
 800aa7a:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <start_led+0x15c>)
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	701a      	strb	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	2000066b 	.word	0x2000066b
 800aa8c:	20000685 	.word	0x20000685
 800aa90:	20019628 	.word	0x20019628
 800aa94:	200197fc 	.word	0x200197fc
 800aa98:	2000067c 	.word	0x2000067c
 800aa9c:	20000674 	.word	0x20000674
 800aaa0:	20000694 	.word	0x20000694
 800aaa4:	20000698 	.word	0x20000698
 800aaa8:	2003226c 	.word	0x2003226c
 800aaac:	20000678 	.word	0x20000678
 800aab0:	45000000 	.word	0x45000000
 800aab4:	20019860 	.word	0x20019860
 800aab8:	2001961c 	.word	0x2001961c
 800aabc:	20019664 	.word	0x20019664
 800aac0:	200322e0 	.word	0x200322e0
 800aac4:	20000aa0 	.word	0x20000aa0
 800aac8:	2001981c 	.word	0x2001981c
 800aacc:	2000066a 	.word	0x2000066a

0800aad0 <set_straight>:
#include "variable.h"
#include "tim.h"
#include "walldata.h"

void set_straight(float i_distance, float accel, float max_vel, float strat_vel,
		float end_vel) {
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	ed87 0a05 	vstr	s0, [r7, #20]
 800aada:	edc7 0a04 	vstr	s1, [r7, #16]
 800aade:	ed87 1a03 	vstr	s2, [r7, #12]
 800aae2:	edc7 1a02 	vstr	s3, [r7, #8]
 800aae6:	ed87 2a01 	vstr	s4, [r7, #4]

	trapezoid_preparation(&translation_parameter, i_distance, accel, max_vel,
 800aaea:	ed97 2a01 	vldr	s4, [r7, #4]
 800aaee:	edd7 1a02 	vldr	s3, [r7, #8]
 800aaf2:	ed97 1a03 	vldr	s2, [r7, #12]
 800aaf6:	edd7 0a04 	vldr	s1, [r7, #16]
 800aafa:	ed97 0a05 	vldr	s0, [r7, #20]
 800aafe:	480e      	ldr	r0, [pc, #56]	; (800ab38 <set_straight+0x68>)
 800ab00:	f000 f94a 	bl	800ad98 <trapezoid_preparation>
			strat_vel, end_vel);
	wall_control_flag = 1;
 800ab04:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <set_straight+0x6c>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
	if (i_distance < 0) {
 800ab0a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab16:	d502      	bpl.n	800ab1e <set_straight+0x4e>
		wall_control_flag = 0;
 800ab18:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <set_straight+0x6c>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	701a      	strb	r2, [r3, #0]
	}
	translation_parameter.run_flag = 1;
 800ab1e:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <set_straight+0x68>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ideal_translation.vel = translation_parameter.strat_vel;
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <set_straight+0x68>)
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	4a05      	ldr	r2, [pc, #20]	; (800ab40 <set_straight+0x70>)
 800ab2c:	6053      	str	r3, [r2, #4]
}
 800ab2e:	bf00      	nop
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20019574 	.word	0x20019574
 800ab3c:	20000685 	.word	0x20000685
 800ab40:	2001961c 	.word	0x2001961c

0800ab44 <set_rotation>:

void set_rotation(float i_angle, float accel, float max_vel, float center_vel) {
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	ed87 0a03 	vstr	s0, [r7, #12]
 800ab4e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ab52:	ed87 1a01 	vstr	s2, [r7, #4]
 800ab56:	edc7 1a00 	vstr	s3, [r7]
	rotation_parameter.back_rightturn_flag = 0;
 800ab5a:	4b48      	ldr	r3, [pc, #288]	; (800ac7c <set_rotation+0x138>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	761a      	strb	r2, [r3, #24]
	trapezoid_preparation(&rotation_parameter, i_angle, accel, max_vel, 0.0,
 800ab60:	ed9f 2a47 	vldr	s4, [pc, #284]	; 800ac80 <set_rotation+0x13c>
 800ab64:	eddf 1a46 	vldr	s3, [pc, #280]	; 800ac80 <set_rotation+0x13c>
 800ab68:	ed97 1a01 	vldr	s2, [r7, #4]
 800ab6c:	edd7 0a02 	vldr	s1, [r7, #8]
 800ab70:	ed97 0a03 	vldr	s0, [r7, #12]
 800ab74:	4841      	ldr	r0, [pc, #260]	; (800ac7c <set_rotation+0x138>)
 800ab76:	f000 f90f 	bl	800ad98 <trapezoid_preparation>
			0.0);

	wall_control_flag = 0;
 800ab7a:	4b42      	ldr	r3, [pc, #264]	; (800ac84 <set_rotation+0x140>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
	ideal_rotation.vel = 0.0;
 800ab80:	4b41      	ldr	r3, [pc, #260]	; (800ac88 <set_rotation+0x144>)
 800ab82:	f04f 0200 	mov.w	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]
	ideal_translation.accel = 0.0;
 800ab88:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <set_rotation+0x148>)
 800ab8a:	f04f 0200 	mov.w	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
	ideal_translation.vel = center_vel;
 800ab90:	4a3e      	ldr	r2, [pc, #248]	; (800ac8c <set_rotation+0x148>)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6053      	str	r3, [r2, #4]
	rotation_deviation.now = 0.0;
 800ab96:	4b3e      	ldr	r3, [pc, #248]	; (800ac90 <set_rotation+0x14c>)
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
	if ((i_angle > 80.0) && (i_angle < 100.0)) {
 800ab9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800aba2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800ac94 <set_rotation+0x150>
 800aba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	dd0f      	ble.n	800abd0 <set_rotation+0x8c>
 800abb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800abb4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ac98 <set_rotation+0x154>
 800abb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc0:	d506      	bpl.n	800abd0 <set_rotation+0x8c>
		direction++;
 800abc2:	4b36      	ldr	r3, [pc, #216]	; (800ac9c <set_rotation+0x158>)
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	4b34      	ldr	r3, [pc, #208]	; (800ac9c <set_rotation+0x158>)
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	e042      	b.n	800ac56 <set_rotation+0x112>
	} else if ((i_angle < -80.0) && (i_angle > -100.0)) {
 800abd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800abd4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800aca0 <set_rotation+0x15c>
 800abd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe0:	d50f      	bpl.n	800ac02 <set_rotation+0xbe>
 800abe2:	edd7 7a03 	vldr	s15, [r7, #12]
 800abe6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800aca4 <set_rotation+0x160>
 800abea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf2:	dd06      	ble.n	800ac02 <set_rotation+0xbe>
		direction += 3;
 800abf4:	4b29      	ldr	r3, [pc, #164]	; (800ac9c <set_rotation+0x158>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	3303      	adds	r3, #3
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	4b27      	ldr	r3, [pc, #156]	; (800ac9c <set_rotation+0x158>)
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	e029      	b.n	800ac56 <set_rotation+0x112>
	} else if (((i_angle > 170.0) && (i_angle < 190.0))
 800ac02:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800aca8 <set_rotation+0x164>
 800ac0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	dd08      	ble.n	800ac26 <set_rotation+0xe2>
 800ac14:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac18:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800acac <set_rotation+0x168>
 800ac1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac24:	d411      	bmi.n	800ac4a <set_rotation+0x106>
			|| ((i_angle < -170.0) && (i_angle > -190.0))) {
 800ac26:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800acb0 <set_rotation+0x16c>
 800ac2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac36:	d50e      	bpl.n	800ac56 <set_rotation+0x112>
 800ac38:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac3c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800acb4 <set_rotation+0x170>
 800ac40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac48:	dd05      	ble.n	800ac56 <set_rotation+0x112>
		direction += 2;
 800ac4a:	4b14      	ldr	r3, [pc, #80]	; (800ac9c <set_rotation+0x158>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	3302      	adds	r3, #2
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <set_rotation+0x158>)
 800ac54:	701a      	strb	r2, [r3, #0]
	}
	if (direction > 3) {
 800ac56:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <set_rotation+0x158>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d905      	bls.n	800ac6a <set_rotation+0x126>
		direction -= 4;
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <set_rotation+0x158>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	3b04      	subs	r3, #4
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <set_rotation+0x158>)
 800ac68:	701a      	strb	r2, [r3, #0]
	}
	rotation_parameter.run_flag = 1;
 800ac6a:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <set_rotation+0x138>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
//	log_start();
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2001982c 	.word	0x2001982c
 800ac80:	00000000 	.word	0x00000000
 800ac84:	20000685 	.word	0x20000685
 800ac88:	20000e90 	.word	0x20000e90
 800ac8c:	2001961c 	.word	0x2001961c
 800ac90:	2001981c 	.word	0x2001981c
 800ac94:	42a00000 	.word	0x42a00000
 800ac98:	42c80000 	.word	0x42c80000
 800ac9c:	20000650 	.word	0x20000650
 800aca0:	c2a00000 	.word	0xc2a00000
 800aca4:	c2c80000 	.word	0xc2c80000
 800aca8:	432a0000 	.word	0x432a0000
 800acac:	433e0000 	.word	0x433e0000
 800acb0:	c32a0000 	.word	0xc32a0000
 800acb4:	c33e0000 	.word	0xc33e0000

0800acb8 <wait_straight>:

void wait_straight(void) {
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
//LEFTEING = 1;
//	printf("wait_st%6.2f\n", ideal_translation.vel);
	while (translation_parameter.run_flag == 1 && failsafe_flag == 0) {
 800acbc:	bf00      	nop
 800acbe:	4b18      	ldr	r3, [pc, #96]	; (800ad20 <wait_straight+0x68>)
 800acc0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d103      	bne.n	800acd0 <wait_straight+0x18>
 800acc8:	4b16      	ldr	r3, [pc, #88]	; (800ad24 <wait_straight+0x6c>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0f6      	beq.n	800acbe <wait_straight+0x6>

	}
//LEFTFRONT = 1;
//translation_parameter.run_flag=1;
	ideal_translation.accel = 0.0;
 800acd0:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <wait_straight+0x70>)
 800acd2:	f04f 0200 	mov.w	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
	ideal_translation.dis = 0.0;
 800acd8:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <wait_straight+0x70>)
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	609a      	str	r2, [r3, #8]
	ideal_translation.vel = translation_parameter.end_vel;
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <wait_straight+0x68>)
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4a10      	ldr	r2, [pc, #64]	; (800ad28 <wait_straight+0x70>)
 800ace6:	6053      	str	r3, [r2, #4]
	translation_parameter.back_rightturn_flag = 0;
 800ace8:	4b0d      	ldr	r3, [pc, #52]	; (800ad20 <wait_straight+0x68>)
 800acea:	2200      	movs	r2, #0
 800acec:	761a      	strb	r2, [r3, #24]
	run_left_deviation.now = 0.0;
 800acee:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <wait_straight+0x74>)
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
	run_left_deviation.difference = 0.0;
 800acf6:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <wait_straight+0x74>)
 800acf8:	f04f 0200 	mov.w	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
	run_right_deviation.now = 0.0;
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <wait_straight+0x78>)
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	601a      	str	r2, [r3, #0]
	run_right_deviation.difference = 0.0;
 800ad06:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <wait_straight+0x78>)
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	609a      	str	r2, [r3, #8]
	rotation_parameter.back_rightturn_flag = 0;
 800ad0e:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <wait_straight+0x7c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	761a      	strb	r2, [r3, #24]
}
 800ad14:	bf00      	nop
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	20019574 	.word	0x20019574
 800ad24:	2000065c 	.word	0x2000065c
 800ad28:	2001961c 	.word	0x2001961c
 800ad2c:	20019648 	.word	0x20019648
 800ad30:	20032290 	.word	0x20032290
 800ad34:	2001982c 	.word	0x2001982c

0800ad38 <wait_rotation>:

void wait_rotation(void) {
 800ad38:	b480      	push	{r7}
 800ad3a:	af00      	add	r7, sp, #0
//	LEFTEING = 1;
	while (rotation_parameter.run_flag == 1 && failsafe_flag == 0) {
 800ad3c:	bf00      	nop
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <wait_rotation+0x4c>)
 800ad40:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d103      	bne.n	800ad50 <wait_rotation+0x18>
 800ad48:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <wait_rotation+0x50>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0f6      	beq.n	800ad3e <wait_rotation+0x6>

	}
//	LEFTFRONT = 1;
//	rotation_gain.Ki = 0.0;
	ideal_translation.dis = 0.0;
 800ad50:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <wait_rotation+0x54>)
 800ad52:	f04f 0200 	mov.w	r2, #0
 800ad56:	609a      	str	r2, [r3, #8]
	ideal_rotation.accel = 0.0;
 800ad58:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <wait_rotation+0x58>)
 800ad5a:	f04f 0200 	mov.w	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
	ideal_rotation.dis = 0.0;
 800ad60:	4b0b      	ldr	r3, [pc, #44]	; (800ad90 <wait_rotation+0x58>)
 800ad62:	f04f 0200 	mov.w	r2, #0
 800ad66:	609a      	str	r2, [r3, #8]
	ideal_rotation.vel = 0.0;
 800ad68:	4b09      	ldr	r3, [pc, #36]	; (800ad90 <wait_rotation+0x58>)
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	605a      	str	r2, [r3, #4]
//	rotation_parameter.back_rightturn_flag = 0;
	rotation_deviation.now = 0.0;
 800ad70:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <wait_rotation+0x5c>)
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
//	rotation_deviation.cumulative = 0.0;
//	duty.left = 0;
//	duty.right = 0;
//	duty_to_moter();
}
 800ad78:	bf00      	nop
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	2001982c 	.word	0x2001982c
 800ad88:	2000065c 	.word	0x2000065c
 800ad8c:	2001961c 	.word	0x2001961c
 800ad90:	20000e90 	.word	0x20000e90
 800ad94:	2001981c 	.word	0x2001981c

0800ad98 <trapezoid_preparation>:

void trapezoid_preparation(trapezoid_t *trapezoid, float i_distance,
		float accel, float max_vel, float strat_vel, float end_vel) {
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6178      	str	r0, [r7, #20]
 800ada0:	ed87 0a04 	vstr	s0, [r7, #16]
 800ada4:	edc7 0a03 	vstr	s1, [r7, #12]
 800ada8:	ed87 1a02 	vstr	s2, [r7, #8]
 800adac:	edc7 1a01 	vstr	s3, [r7, #4]
 800adb0:	ed87 2a00 	vstr	s4, [r7]
//任意のパラメータから台形加速の概要を計算
//trapezoidはポインタでとってる

	trapezoid->back_rightturn_flag = 0;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2200      	movs	r2, #0
 800adb8:	761a      	strb	r2, [r3, #24]

	if (i_distance < 0) {
 800adba:	edd7 7a04 	vldr	s15, [r7, #16]
 800adbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800adc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc6:	d508      	bpl.n	800adda <trapezoid_preparation+0x42>
		i_distance = i_distance * -1;
 800adc8:	edd7 7a04 	vldr	s15, [r7, #16]
 800adcc:	eef1 7a67 	vneg.f32	s15, s15
 800add0:	edc7 7a04 	vstr	s15, [r7, #16]
		trapezoid->back_rightturn_flag = 1;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2201      	movs	r2, #1
 800add8:	761a      	strb	r2, [r3, #24]
	}

	trapezoid->accel = accel;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	605a      	str	r2, [r3, #4]
	trapezoid->end_vel = end_vel;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	611a      	str	r2, [r3, #16]
	trapezoid->i_distance = i_distance;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	601a      	str	r2, [r3, #0]
	trapezoid->max_vel = max_vel;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	609a      	str	r2, [r3, #8]
	trapezoid->strat_vel = strat_vel;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	60da      	str	r2, [r3, #12]
//	trapezoid->triangle = triangle;
//	trapezoid->triangle_flag = triangle_flag;
//↑任意の値を代入してる

	if (accel != 0.0) {
 800adf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800adfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	f000 80cc 	beq.w	800afa0 <trapezoid_preparation+0x208>

		trapezoid->acceldistance = (max_vel * max_vel - strat_vel * strat_vel)
 800ae08:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae0c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae14:	edd7 6a01 	vldr	s13, [r7, #4]
 800ae18:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae24:	ee17 0a90 	vmov	r0, s15
 800ae28:	f7f5 fbb6 	bl	8000598 <__aeabi_f2d>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
				/ (2.0 * accel);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7f5 fbb1 	bl	8000598 <__aeabi_f2d>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	f7f5 fa4f 	bl	80002dc <__adddf3>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4620      	mov	r0, r4
 800ae44:	4629      	mov	r1, r5
 800ae46:	f7f5 fd29 	bl	800089c <__aeabi_ddiv>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	4618      	mov	r0, r3
 800ae50:	4621      	mov	r1, r4
 800ae52:	f7f5 fed1 	bl	8000bf8 <__aeabi_d2f>
 800ae56:	4602      	mov	r2, r0
		trapezoid->acceldistance = (max_vel * max_vel - strat_vel * strat_vel)
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	61da      	str	r2, [r3, #28]
		trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800ae5c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae60:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae68:	edd7 6a00 	vldr	s13, [r7]
 800ae6c:	edd7 7a00 	vldr	s15, [r7]
 800ae70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae78:	ee17 0a90 	vmov	r0, s15
 800ae7c:	f7f5 fb8c 	bl	8000598 <__aeabi_f2d>
 800ae80:	4604      	mov	r4, r0
 800ae82:	460d      	mov	r5, r1
				/ (2.0 * accel);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7f5 fb87 	bl	8000598 <__aeabi_f2d>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	f7f5 fa25 	bl	80002dc <__adddf3>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fcff 	bl	800089c <__aeabi_ddiv>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	4618      	mov	r0, r3
 800aea4:	4621      	mov	r1, r4
 800aea6:	f7f5 fea7 	bl	8000bf8 <__aeabi_d2f>
 800aeaa:	4602      	mov	r2, r0
		trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	621a      	str	r2, [r3, #32]
		while (i_distance
 800aeb0:	e063      	b.n	800af7a <trapezoid_preparation+0x1e2>
				< trapezoid->acceldistance + trapezoid->deacceldistance) {
			max_vel = max_vel * 0.95;
 800aeb2:	68b8      	ldr	r0, [r7, #8]
 800aeb4:	f7f5 fb70 	bl	8000598 <__aeabi_f2d>
 800aeb8:	a33f      	add	r3, pc, #252	; (adr r3, 800afb8 <trapezoid_preparation+0x220>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 fbc3 	bl	8000648 <__aeabi_dmul>
 800aec2:	4603      	mov	r3, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	4618      	mov	r0, r3
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7f5 fe95 	bl	8000bf8 <__aeabi_d2f>
 800aece:	4603      	mov	r3, r0
 800aed0:	60bb      	str	r3, [r7, #8]
			trapezoid->acceldistance = (max_vel * max_vel
 800aed2:	ed97 7a02 	vldr	s14, [r7, #8]
 800aed6:	edd7 7a02 	vldr	s15, [r7, #8]
 800aeda:	ee27 7a27 	vmul.f32	s14, s14, s15
					- strat_vel * strat_vel) / (2.0 * accel);
 800aede:	edd7 6a01 	vldr	s13, [r7, #4]
 800aee2:	edd7 7a01 	vldr	s15, [r7, #4]
 800aee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aeea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeee:	ee17 0a90 	vmov	r0, s15
 800aef2:	f7f5 fb51 	bl	8000598 <__aeabi_f2d>
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7f5 fb4c 	bl	8000598 <__aeabi_f2d>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	f7f5 f9ea 	bl	80002dc <__adddf3>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fcc4 	bl	800089c <__aeabi_ddiv>
 800af14:	4603      	mov	r3, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4618      	mov	r0, r3
 800af1a:	4621      	mov	r1, r4
 800af1c:	f7f5 fe6c 	bl	8000bf8 <__aeabi_d2f>
 800af20:	4602      	mov	r2, r0
			trapezoid->acceldistance = (max_vel * max_vel
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	61da      	str	r2, [r3, #28]
			trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800af26:	ed97 7a02 	vldr	s14, [r7, #8]
 800af2a:	edd7 7a02 	vldr	s15, [r7, #8]
 800af2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af32:	edd7 6a00 	vldr	s13, [r7]
 800af36:	edd7 7a00 	vldr	s15, [r7]
 800af3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af42:	ee17 0a90 	vmov	r0, s15
 800af46:	f7f5 fb27 	bl	8000598 <__aeabi_f2d>
 800af4a:	4604      	mov	r4, r0
 800af4c:	460d      	mov	r5, r1
					/ (2.0 * accel);
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7f5 fb22 	bl	8000598 <__aeabi_f2d>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	f7f5 f9c0 	bl	80002dc <__adddf3>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fc9a 	bl	800089c <__aeabi_ddiv>
 800af68:	4603      	mov	r3, r0
 800af6a:	460c      	mov	r4, r1
 800af6c:	4618      	mov	r0, r3
 800af6e:	4621      	mov	r1, r4
 800af70:	f7f5 fe42 	bl	8000bf8 <__aeabi_d2f>
 800af74:	4602      	mov	r2, r0
			trapezoid->deacceldistance = (max_vel * max_vel - end_vel * end_vel)
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	621a      	str	r2, [r3, #32]
				< trapezoid->acceldistance + trapezoid->deacceldistance) {
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	ed93 7a07 	vldr	s14, [r3, #28]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	edd3 7a08 	vldr	s15, [r3, #32]
 800af86:	ee77 7a27 	vadd.f32	s15, s14, s15
		while (i_distance
 800af8a:	ed97 7a04 	vldr	s14, [r7, #16]
 800af8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af96:	d48c      	bmi.n	800aeb2 <trapezoid_preparation+0x11a>
		}
		trapezoid->max_vel = max_vel;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	609a      	str	r2, [r3, #8]
	} else {
		trapezoid->acceldistance = 0.0;
		trapezoid->deacceldistance = 0.0;
	}

}
 800af9e:	e007      	b.n	800afb0 <trapezoid_preparation+0x218>
		trapezoid->acceldistance = 0.0;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	61da      	str	r2, [r3, #28]
		trapezoid->deacceldistance = 0.0;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	621a      	str	r2, [r3, #32]
}
 800afb0:	bf00      	nop
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bdb0      	pop	{r4, r5, r7, pc}
 800afb8:	66666666 	.word	0x66666666
 800afbc:	3fee6666 	.word	0x3fee6666

0800afc0 <duty_to_moter>:

void duty_to_moter(void) {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
	int duty_left = 0, duty_right = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	2300      	movs	r3, #0
 800afcc:	603b      	str	r3, [r7, #0]

	if (duty.left >= 0) {
 800afce:	4b39      	ldr	r3, [pc, #228]	; (800b0b4 <duty_to_moter+0xf4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	db09      	blt.n	800afea <duty_to_moter+0x2a>
		HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, RESET);
 800afd6:	2200      	movs	r2, #0
 800afd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afdc:	4836      	ldr	r0, [pc, #216]	; (800b0b8 <duty_to_moter+0xf8>)
 800afde:	f7f7 fd61 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_left = duty.left;
 800afe2:	4b34      	ldr	r3, [pc, #208]	; (800b0b4 <duty_to_moter+0xf4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	607b      	str	r3, [r7, #4]
 800afe8:	e009      	b.n	800affe <duty_to_moter+0x3e>
	} else {
		HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, SET);
 800afea:	2201      	movs	r2, #1
 800afec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aff0:	4831      	ldr	r0, [pc, #196]	; (800b0b8 <duty_to_moter+0xf8>)
 800aff2:	f7f7 fd57 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_left = (duty.left * -1);
 800aff6:	4b2f      	ldr	r3, [pc, #188]	; (800b0b4 <duty_to_moter+0xf4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	425b      	negs	r3, r3
 800affc:	607b      	str	r3, [r7, #4]
	}
	if (duty.right >= 0) {
 800affe:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <duty_to_moter+0xf4>)
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	db09      	blt.n	800b01a <duty_to_moter+0x5a>
		HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, SET);
 800b006:	2201      	movs	r2, #1
 800b008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b00c:	482a      	ldr	r0, [pc, #168]	; (800b0b8 <duty_to_moter+0xf8>)
 800b00e:	f7f7 fd49 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_right = duty.right;
 800b012:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <duty_to_moter+0xf4>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	e009      	b.n	800b02e <duty_to_moter+0x6e>
	} else {
		HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, RESET);
 800b01a:	2200      	movs	r2, #0
 800b01c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b020:	4825      	ldr	r0, [pc, #148]	; (800b0b8 <duty_to_moter+0xf8>)
 800b022:	f7f7 fd3f 	bl	8002aa4 <HAL_GPIO_WritePin>
		duty_right = (duty.right * -1);
 800b026:	4b23      	ldr	r3, [pc, #140]	; (800b0b4 <duty_to_moter+0xf4>)
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	425b      	negs	r3, r3
 800b02c:	603b      	str	r3, [r7, #0]
	}

//	test_L = duty_left;
//	test_R = duty_right;

	if (duty_left >= 800) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800b034:	db02      	blt.n	800b03c <duty_to_moter+0x7c>
		duty_left = 800 - 1;
 800b036:	f240 331f 	movw	r3, #799	; 0x31f
 800b03a:	607b      	str	r3, [r7, #4]
	}
	if (duty_right >= 800) {
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800b042:	db02      	blt.n	800b04a <duty_to_moter+0x8a>
		duty_right = 800 - 1;
 800b044:	f240 331f 	movw	r3, #799	; 0x31f
 800b048:	603b      	str	r3, [r7, #0]
	}
	if (duty_left <= -800) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f513 7f48 	cmn.w	r3, #800	; 0x320
 800b050:	dc01      	bgt.n	800b056 <duty_to_moter+0x96>
		duty_left = -800 + 1;
 800b052:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <duty_to_moter+0xfc>)
 800b054:	607b      	str	r3, [r7, #4]
	}
	if (duty_right <= -800) {
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f513 7f48 	cmn.w	r3, #800	; 0x320
 800b05c:	dc01      	bgt.n	800b062 <duty_to_moter+0xa2>
		duty_right = -800 + 1;
 800b05e:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <duty_to_moter+0xfc>)
 800b060:	603b      	str	r3, [r7, #0]
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800b062:	2100      	movs	r1, #0
 800b064:	4816      	ldr	r0, [pc, #88]	; (800b0c0 <duty_to_moter+0x100>)
 800b066:	f7f8 fcb5 	bl	80039d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800b06a:	2104      	movs	r1, #4
 800b06c:	4814      	ldr	r0, [pc, #80]	; (800b0c0 <duty_to_moter+0x100>)
 800b06e:	f7f8 fcb1 	bl	80039d4 <HAL_TIM_PWM_Stop>
	if (duty_left == 0 && duty_right == 0) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <duty_to_moter+0xbe>
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00f      	beq.n	800b09e <duty_to_moter+0xde>

	} else {
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_right); //MOTER_R
 800b07e:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <duty_to_moter+0x100>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_left); //MOTER_L
 800b086:	4b0e      	ldr	r3, [pc, #56]	; (800b0c0 <duty_to_moter+0x100>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800b08e:	2100      	movs	r1, #0
 800b090:	480b      	ldr	r0, [pc, #44]	; (800b0c0 <duty_to_moter+0x100>)
 800b092:	f7f8 fc61 	bl	8003958 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800b096:	2104      	movs	r1, #4
 800b098:	4809      	ldr	r0, [pc, #36]	; (800b0c0 <duty_to_moter+0x100>)
 800b09a:	f7f8 fc5d 	bl	8003958 <HAL_TIM_PWM_Start>
	}

	duty.left = 0;
 800b09e:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <duty_to_moter+0xf4>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
	duty.right = 0;
 800b0a4:	4b03      	ldr	r3, [pc, #12]	; (800b0b4 <duty_to_moter+0xf4>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	605a      	str	r2, [r3, #4]
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20032144 	.word	0x20032144
 800b0b8:	40020400 	.word	0x40020400
 800b0bc:	fffffce1 	.word	0xfffffce1
 800b0c0:	2000097c 	.word	0x2000097c

0800b0c4 <control_accel>:

void control_accel(run_t *ideal, trapezoid_t *trapezoid, uint8_t rotation_flag) {
 800b0c4:	b590      	push	{r4, r7, lr}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	71fb      	strb	r3, [r7, #7]
	if (trapezoid->back_rightturn_flag == 1) {
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d138      	bne.n	800b14e <control_accel+0x8a>
		ideal->dis *= -1.0;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fa59 	bl	8000598 <__aeabi_f2d>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	f7f5 fd83 	bl	8000bf8 <__aeabi_d2f>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef1 7a67 	vneg.f32	s15, s15
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	edc3 7a02 	vstr	s15, [r3, #8]
		ideal->vel *= -1.0;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	f7f5 fa46 	bl	8000598 <__aeabi_f2d>
 800b10c:	4603      	mov	r3, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	4618      	mov	r0, r3
 800b112:	4621      	mov	r1, r4
 800b114:	f7f5 fd70 	bl	8000bf8 <__aeabi_d2f>
 800b118:	4603      	mov	r3, r0
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef1 7a67 	vneg.f32	s15, s15
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	edc3 7a01 	vstr	s15, [r3, #4]
		ideal->accel *= -1.0;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f5 fa33 	bl	8000598 <__aeabi_f2d>
 800b132:	4603      	mov	r3, r0
 800b134:	460c      	mov	r4, r1
 800b136:	4618      	mov	r0, r3
 800b138:	4621      	mov	r1, r4
 800b13a:	f7f5 fd5d 	bl	8000bf8 <__aeabi_d2f>
 800b13e:	4603      	mov	r3, r0
 800b140:	ee07 3a90 	vmov	s15, r3
 800b144:	eef1 7a67 	vneg.f32	s15, s15
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (ideal->dis < trapezoid->acceldistance) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	ed93 7a02 	vldr	s14, [r3, #8]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	edd3 7a07 	vldr	s15, [r3, #28]
 800b15a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b162:	d518      	bpl.n	800b196 <control_accel+0xd2>
//		UI_LED1 = 1;
		if (ideal->vel < trapezoid->max_vel) {
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	ed93 7a01 	vldr	s14, [r3, #4]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b178:	d504      	bpl.n	800b184 <control_accel+0xc0>
			ideal->accel = trapezoid->accel;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	e041      	b.n	800b208 <control_accel+0x144>
		} else {
			ideal->vel = trapezoid->max_vel;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	605a      	str	r2, [r3, #4]
			ideal->accel = 0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e038      	b.n	800b208 <control_accel+0x144>
		}

	} else if (ideal->dis
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	ed93 7a02 	vldr	s14, [r3, #8]
			< (trapezoid->i_distance - trapezoid->deacceldistance)) {
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	edd3 6a00 	vldr	s13, [r3]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b1a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
	} else if (ideal->dis
 800b1ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	d508      	bpl.n	800b1c8 <control_accel+0x104>
//		UI_LED2 = 1;
		ideal->accel = 0;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]

		ideal->vel = trapezoid->max_vel;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
 800b1c6:	e01f      	b.n	800b208 <control_accel+0x144>
	} else if (ideal->vel > trapezoid->end_vel) {
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	ed93 7a01 	vldr	s14, [r3, #4]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b1d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	dd08      	ble.n	800b1f0 <control_accel+0x12c>
		ideal->accel = -trapezoid->accel;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1e4:	eef1 7a67 	vneg.f32	s15, s15
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	edc3 7a00 	vstr	s15, [r3]
 800b1ee:	e00b      	b.n	800b208 <control_accel+0x144>

	} else {
		trapezoid->run_flag = 0;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ideal->accel = 0;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	601a      	str	r2, [r3, #0]
		ideal->vel = trapezoid->end_vel;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	605a      	str	r2, [r3, #4]
	}

	if (trapezoid->back_rightturn_flag == 1) {
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d138      	bne.n	800b284 <control_accel+0x1c0>
		ideal->dis *= -1.0;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f7f5 f9be 	bl	8000598 <__aeabi_f2d>
 800b21c:	4603      	mov	r3, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	4618      	mov	r0, r3
 800b222:	4621      	mov	r1, r4
 800b224:	f7f5 fce8 	bl	8000bf8 <__aeabi_d2f>
 800b228:	4603      	mov	r3, r0
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef1 7a67 	vneg.f32	s15, s15
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	edc3 7a02 	vstr	s15, [r3, #8]
		ideal->vel *= -1.0;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f5 f9ab 	bl	8000598 <__aeabi_f2d>
 800b242:	4603      	mov	r3, r0
 800b244:	460c      	mov	r4, r1
 800b246:	4618      	mov	r0, r3
 800b248:	4621      	mov	r1, r4
 800b24a:	f7f5 fcd5 	bl	8000bf8 <__aeabi_d2f>
 800b24e:	4603      	mov	r3, r0
 800b250:	ee07 3a90 	vmov	s15, r3
 800b254:	eef1 7a67 	vneg.f32	s15, s15
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	edc3 7a01 	vstr	s15, [r3, #4]
		ideal->accel *= -1.0;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f7f5 f998 	bl	8000598 <__aeabi_f2d>
 800b268:	4603      	mov	r3, r0
 800b26a:	460c      	mov	r4, r1
 800b26c:	4618      	mov	r0, r3
 800b26e:	4621      	mov	r1, r4
 800b270:	f7f5 fcc2 	bl	8000bf8 <__aeabi_d2f>
 800b274:	4603      	mov	r3, r0
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef1 7a67 	vneg.f32	s15, s15
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	edc3 7a00 	vstr	s15, [r3]
	}

//	printf("ideal_vel=%4.2f,ideal_dis=%4.2f\n", ideal->vel, ideal->dis);

}
 800b284:	bf00      	nop
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd90      	pop	{r4, r7, pc}

0800b28c <PID_control>:

void PID_control(run_t *ideal, run_t *left, run_t *right,
		deviation_t *left_deviation, deviation_t *right_deviation, gain_t *gain,
		trapezoid_t *parameter, duty_t *duty, uint8_t rotation_flag) {
 800b28c:	b480      	push	{r7}
 800b28e:	b089      	sub	sp, #36	; 0x24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	int duty_left, duty_right;
	float Kp, Ki;

	Ki = gain->Ki;
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	61bb      	str	r3, [r7, #24]
	Kp = gain->Kp;
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	617b      	str	r3, [r7, #20]

	left->vel = (left->vel + right->vel) / 2;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b2ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	edc3 7a01 	vstr	s15, [r3, #4]
	right->vel = left->vel;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]

	if (rotation_flag == 1) {
 800b2cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d10e      	bne.n	800b2f2 <PID_control+0x66>
		right->vel += wallcontrol_value;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2da:	4b4d      	ldr	r3, [pc, #308]	; (800b410 <PID_control+0x184>)
 800b2dc:	edd3 7a00 	vldr	s15, [r3]
 800b2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	edc3 7a01 	vstr	s15, [r3, #4]
		left->vel = right->vel;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	605a      	str	r2, [r3, #4]

//	if (parameter->back_rightturn_flag == 1) {
//		ideal->vel *= -1.0;
//	}

	left_deviation->now = (ideal->vel - left->vel);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	edc3 7a00 	vstr	s15, [r3]
	right_deviation->now = (ideal->vel - right->vel);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	edd3 7a01 	vldr	s15, [r3, #4]
 800b314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	edc3 7a00 	vstr	s15, [r3]
	if (rotation_flag == 0) {
 800b31e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b322:	2b00      	cmp	r3, #0
 800b324:	d116      	bne.n	800b354 <PID_control+0xc8>
		left_deviation->cumulative += left_deviation->now;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	ed93 7a01 	vldr	s14, [r3, #4]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	edd3 7a00 	vldr	s15, [r3]
 800b332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	edc3 7a01 	vstr	s15, [r3, #4]
		right_deviation->cumulative += right_deviation->now;
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	edd3 7a00 	vldr	s15, [r3]
 800b348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	edc3 7a01 	vstr	s15, [r3, #4]
 800b352:	e012      	b.n	800b37a <PID_control+0xee>
	} else if (rotation_flag == 1) {
 800b354:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d10e      	bne.n	800b37a <PID_control+0xee>
		left_deviation->cumulative += left_deviation->now; //+ wallcontrol_value
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	edd3 7a00 	vldr	s15, [r3]
 800b368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	edc3 7a01 	vstr	s15, [r3, #4]
		right_deviation->cumulative = left_deviation->cumulative;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	605a      	str	r2, [r3, #4]
	}
	duty_left = (int) left_deviation->now * Kp
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	edd3 7a00 	vldr	s15, [r3]
 800b380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b388:	edd7 7a05 	vldr	s15, [r7, #20]
 800b38c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ left_deviation->cumulative * Ki;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	edd3 6a01 	vldr	s13, [r3, #4]
 800b396:	edd7 7a06 	vldr	s15, [r7, #24]
 800b39a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b39e:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty_left = (int) left_deviation->now * Kp
 800b3a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a6:	ee17 3a90 	vmov	r3, s15
 800b3aa:	61fb      	str	r3, [r7, #28]
	duty_right = (int) right_deviation->now * Kp
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	edd3 7a00 	vldr	s15, [r3]
 800b3b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3be:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ right_deviation->cumulative * Ki;
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b3c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3d0:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty_right = (int) right_deviation->now * Kp
 800b3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d8:	ee17 3a90 	vmov	r3, s15
 800b3dc:	613b      	str	r3, [r7, #16]

	if (rotation_flag == 1) {
 800b3de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d102      	bne.n	800b3ec <PID_control+0x160>
		duty_left = duty_left * -1;
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	425b      	negs	r3, r3
 800b3ea:	61fb      	str	r3, [r7, #28]
	}
//	if (parameter->back_rightturn_flag == 1) {
//		duty_left = duty_left * -1;
//		duty_right = duty_right * -1;
//	}
	duty->left += duty_left;
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	441a      	add	r2, r3
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f6:	601a      	str	r2, [r3, #0]
	duty->right += duty_right;
 800b3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	441a      	add	r2, r3
 800b400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b402:	605a      	str	r2, [r3, #4]
}
 800b404:	bf00      	nop
 800b406:	3724      	adds	r7, #36	; 0x24
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000664 	.word	0x20000664
 800b414:	00000000 	.word	0x00000000

0800b418 <read_vel>:

float read_vel(uint8_t RorL) {
 800b418:	b590      	push	{r4, r7, lr}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	71fb      	strb	r3, [r7, #7]
	uint16_t val;
	float val2;
	float val_cor;
	uint8_t table_index, table_value;
	uint8_t i;
	for (i = 0; i < 50; i++)
 800b422:	2300      	movs	r3, #0
 800b424:	72fb      	strb	r3, [r7, #11]
 800b426:	e002      	b.n	800b42e <read_vel+0x16>
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	2b31      	cmp	r3, #49	; 0x31
 800b432:	d9f9      	bls.n	800b428 <read_vel+0x10>
		;
	read_spi_en(RorL, 0x3fff);
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe ffae 	bl	800a39c <read_spi_en>
	for (i = 0; i < 50; i++)
 800b440:	2300      	movs	r3, #0
 800b442:	72fb      	strb	r3, [r7, #11]
 800b444:	e002      	b.n	800b44c <read_vel+0x34>
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	3301      	adds	r3, #1
 800b44a:	72fb      	strb	r3, [r7, #11]
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	2b31      	cmp	r3, #49	; 0x31
 800b450:	d9f9      	bls.n	800b446 <read_vel+0x2e>
		;
	val = (0x3fff & read_spi_en(RorL, 0x3fff));
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe ff9f 	bl	800a39c <read_spi_en>
 800b45e:	4603      	mov	r3, r0
 800b460:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b464:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < 50; i++)
 800b466:	2300      	movs	r3, #0
 800b468:	72fb      	strb	r3, [r7, #11]
 800b46a:	e002      	b.n	800b472 <read_vel+0x5a>
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	2b31      	cmp	r3, #49	; 0x31
 800b476:	d9f9      	bls.n	800b46c <read_vel+0x54>
		;

//	table_index = val / 500;
	if (RorL == LEFT) {
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d107      	bne.n	800b48e <read_vel+0x76>
//			val_cor = (float) ((en_L_table[table_index + 1]
//					- en_L_table[table_index]) * (float) table_value / 335
//					+ en_L_table[table_index]) * val;
//		}

		val_cor = (float) val;
 800b47e:	893b      	ldrh	r3, [r7, #8]
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b488:	edc7 7a03 	vstr	s15, [r7, #12]
 800b48c:	e006      	b.n	800b49c <read_vel+0x84>
//				+ LPF[1] * (float) en_log_R.before_1ms
//				+ LPF[2] * (float) en_log_R.before_2ms
//				+ LPF[3] * (float) en_log_R.before_3ms
//				+ LPF[4] * (float) en_log_R.before_4ms
//				+ LPF[5] * (float) en_log_R.before_5ms;
		val_cor = (float) val;
 800b48e:	893b      	ldrh	r3, [r7, #8]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b498:	edc7 7a03 	vstr	s15, [r7, #12]
//		test_R = (float) val;
//		test_R = val_cor;
	}

	val2 = (float) ((val_cor - before_en_val[RorL]));
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	4a4c      	ldr	r2, [pc, #304]	; (800b5d0 <read_vel+0x1b8>)
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	edd3 7a00 	vldr	s15, [r3]
 800b4a8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b4ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4b0:	edc7 7a04 	vstr	s15, [r7, #16]
	before_en_val[RorL] = val_cor;
 800b4b4:	79fb      	ldrb	r3, [r7, #7]
 800b4b6:	4a46      	ldr	r2, [pc, #280]	; (800b5d0 <read_vel+0x1b8>)
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	601a      	str	r2, [r3, #0]
	if (val2 < -8000) {
 800b4c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800b5d4 <read_vel+0x1bc>
 800b4c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	d507      	bpl.n	800b4e2 <read_vel+0xca>
		val2 += 16384;
 800b4d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4d6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b5d8 <read_vel+0x1c0>
 800b4da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4de:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if (val2 > 8000) {
 800b4e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4e6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b5dc <read_vel+0x1c4>
 800b4ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f2:	dd07      	ble.n	800b504 <read_vel+0xec>
		val2 -= 16384;
 800b4f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4f8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b5d8 <read_vel+0x1c0>
 800b4fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b500:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	if (RorL == LEFT) {
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d103      	bne.n	800b512 <read_vel+0xfa>
		test_L2 = val2;
 800b50a:	4a35      	ldr	r2, [pc, #212]	; (800b5e0 <read_vel+0x1c8>)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	e002      	b.n	800b518 <read_vel+0x100>
	} else {
		test_R2 = val2;
 800b512:	4a34      	ldr	r2, [pc, #208]	; (800b5e4 <read_vel+0x1cc>)
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	6013      	str	r3, [r2, #0]
	}

	vel = ((float) (val2)) / 16384.0 * (3.1415926 * DIAMETER) * 1000;
 800b518:	6938      	ldr	r0, [r7, #16]
 800b51a:	f7f5 f83d 	bl	8000598 <__aeabi_f2d>
 800b51e:	f04f 0200 	mov.w	r2, #0
 800b522:	4b31      	ldr	r3, [pc, #196]	; (800b5e8 <read_vel+0x1d0>)
 800b524:	f7f5 f9ba 	bl	800089c <__aeabi_ddiv>
 800b528:	4603      	mov	r3, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4618      	mov	r0, r3
 800b52e:	4621      	mov	r1, r4
 800b530:	a325      	add	r3, pc, #148	; (adr r3, 800b5c8 <read_vel+0x1b0>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f5 f887 	bl	8000648 <__aeabi_dmul>
 800b53a:	4603      	mov	r3, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	4618      	mov	r0, r3
 800b540:	4621      	mov	r1, r4
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <read_vel+0x1d4>)
 800b548:	f7f5 f87e 	bl	8000648 <__aeabi_dmul>
 800b54c:	4603      	mov	r3, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	4618      	mov	r0, r3
 800b552:	4621      	mov	r1, r4
 800b554:	f7f5 fb50 	bl	8000bf8 <__aeabi_d2f>
 800b558:	4603      	mov	r3, r0
 800b55a:	617b      	str	r3, [r7, #20]

	if (RorL == LEFT) {
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d108      	bne.n	800b574 <read_vel+0x15c>
		en_log_L[en_log_index] = vel;
 800b562:	4b23      	ldr	r3, [pc, #140]	; (800b5f0 <read_vel+0x1d8>)
 800b564:	f993 3000 	ldrsb.w	r3, [r3]
 800b568:	4a22      	ldr	r2, [pc, #136]	; (800b5f4 <read_vel+0x1dc>)
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	e018      	b.n	800b5a6 <read_vel+0x18e>
//				+ LPF[3] * en_log_L[((en_log_index - 3 + 6) % 6)]
//				+ LPF[4] * en_log_L[((en_log_index - 4 + 6) % 6)]
//				+ LPF[5] * en_log_L[((en_log_index - 5 + 6) % 6)];

	} else {
		en_log_R[en_log_index] = vel;
 800b574:	4b1e      	ldr	r3, [pc, #120]	; (800b5f0 <read_vel+0x1d8>)
 800b576:	f993 3000 	ldrsb.w	r3, [r3]
 800b57a:	4a1f      	ldr	r2, [pc, #124]	; (800b5f8 <read_vel+0x1e0>)
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	601a      	str	r2, [r3, #0]
//				+ LPF[1] * en_log_R[((en_log_index - 1 + 6) % 6)]
//				+ LPF[2] * en_log_R[((en_log_index - 2 + 6) % 6)]
//				+ LPF[3] * en_log_R[((en_log_index - 3 + 6) % 6)]
//				+ LPF[4] * en_log_R[((en_log_index - 4 + 6) % 6)]
//				+ LPF[5] * en_log_R[((en_log_index - 5 + 6) % 6)];
		en_log_index++;
 800b584:	4b1a      	ldr	r3, [pc, #104]	; (800b5f0 <read_vel+0x1d8>)
 800b586:	f993 3000 	ldrsb.w	r3, [r3]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	3301      	adds	r3, #1
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	b25a      	sxtb	r2, r3
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <read_vel+0x1d8>)
 800b594:	701a      	strb	r2, [r3, #0]
		if (en_log_index == 6) {
 800b596:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <read_vel+0x1d8>)
 800b598:	f993 3000 	ldrsb.w	r3, [r3]
 800b59c:	2b06      	cmp	r3, #6
 800b59e:	d102      	bne.n	800b5a6 <read_vel+0x18e>
			en_log_index = 0;
 800b5a0:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <read_vel+0x1d8>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (RorL == LEFT) {
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d105      	bne.n	800b5b8 <read_vel+0x1a0>
		vel *= -1;
 800b5ac:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5b0:	eef1 7a67 	vneg.f32	s15, s15
 800b5b4:	edc7 7a05 	vstr	s15, [r7, #20]

//	if (translation_parameter.back_rightturn_flag == 1) { //バックするとき速度マイナスにするバカ
//		vel *= -1;
//	}

	return vel;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	ee07 3a90 	vmov	s15, r3
}
 800b5be:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}
 800b5c8:	e45359cd 	.word	0xe45359cd
 800b5cc:	40439e86 	.word	0x40439e86
 800b5d0:	20000654 	.word	0x20000654
 800b5d4:	c5fa0000 	.word	0xc5fa0000
 800b5d8:	46800000 	.word	0x46800000
 800b5dc:	45fa0000 	.word	0x45fa0000
 800b5e0:	20032140 	.word	0x20032140
 800b5e4:	200322c0 	.word	0x200322c0
 800b5e8:	40d00000 	.word	0x40d00000
 800b5ec:	408f4000 	.word	0x408f4000
 800b5f0:	200006cc 	.word	0x200006cc
 800b5f4:	2000069c 	.word	0x2000069c
 800b5f8:	200006b4 	.word	0x200006b4
 800b5fc:	00000000 	.word	0x00000000

0800b600 <integral_1ms>:
//			vel *= -1;
//		}
//	return vel;
//}

void integral_1ms(float* dis, float*vel) {
 800b600:	b5b0      	push	{r4, r5, r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	*dis += *vel * 0.001;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7f4 ffc2 	bl	8000598 <__aeabi_f2d>
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f4 ffbb 	bl	8000598 <__aeabi_f2d>
 800b622:	a30d      	add	r3, pc, #52	; (adr r3, 800b658 <integral_1ms+0x58>)
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	f7f5 f80e 	bl	8000648 <__aeabi_dmul>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4620      	mov	r0, r4
 800b632:	4629      	mov	r1, r5
 800b634:	f7f4 fe52 	bl	80002dc <__adddf3>
 800b638:	4603      	mov	r3, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	4618      	mov	r0, r3
 800b63e:	4621      	mov	r1, r4
 800b640:	f7f5 fada 	bl	8000bf8 <__aeabi_d2f>
 800b644:	4602      	mov	r2, r0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	601a      	str	r2, [r3, #0]
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bdb0      	pop	{r4, r5, r7, pc}
 800b652:	bf00      	nop
 800b654:	f3af 8000 	nop.w
 800b658:	d2f1a9fc 	.word	0xd2f1a9fc
 800b65c:	3f50624d 	.word	0x3f50624d

0800b660 <integral_ideal>:

void integral_ideal(run_t *ideal) {
 800b660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
	ideal->vel += ideal->accel * 0.001;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f4 ff92 	bl	8000598 <__aeabi_f2d>
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7f4 ff8b 	bl	8000598 <__aeabi_f2d>
 800b682:	a331      	add	r3, pc, #196	; (adr r3, 800b748 <integral_ideal+0xe8>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 ffde 	bl	8000648 <__aeabi_dmul>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fe22 	bl	80002dc <__adddf3>
 800b698:	4603      	mov	r3, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	4618      	mov	r0, r3
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f7f5 faaa 	bl	8000bf8 <__aeabi_d2f>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	605a      	str	r2, [r3, #4]
	ideal->dis += ideal->vel * 0.001 + ideal->accel * 0.001 * 0.001 / 2;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7f4 ff72 	bl	8000598 <__aeabi_f2d>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7f4 ff6b 	bl	8000598 <__aeabi_f2d>
 800b6c2:	a321      	add	r3, pc, #132	; (adr r3, 800b748 <integral_ideal+0xe8>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 ffbe 	bl	8000648 <__aeabi_dmul>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4690      	mov	r8, r2
 800b6d2:	4699      	mov	r9, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f4 ff5d 	bl	8000598 <__aeabi_f2d>
 800b6de:	a31a      	add	r3, pc, #104	; (adr r3, 800b748 <integral_ideal+0xe8>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f7f4 ffb0 	bl	8000648 <__aeabi_dmul>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	a315      	add	r3, pc, #84	; (adr r3, 800b748 <integral_ideal+0xe8>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	f7f4 ffa7 	bl	8000648 <__aeabi_dmul>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4610      	mov	r0, r2
 800b700:	4619      	mov	r1, r3
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b70a:	f7f5 f8c7 	bl	800089c <__aeabi_ddiv>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4640      	mov	r0, r8
 800b714:	4649      	mov	r1, r9
 800b716:	f7f4 fde1 	bl	80002dc <__adddf3>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f4 fddb 	bl	80002dc <__adddf3>
 800b726:	4603      	mov	r3, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	4618      	mov	r0, r3
 800b72c:	4621      	mov	r1, r4
 800b72e:	f7f5 fa63 	bl	8000bf8 <__aeabi_d2f>
 800b732:	4602      	mov	r2, r0
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	609a      	str	r2, [r3, #8]
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	d2f1a9fc 	.word	0xd2f1a9fc
 800b74c:	3f50624d 	.word	0x3f50624d

0800b750 <wall_control>:

void wall_control(void) {
 800b750:	b5b0      	push	{r4, r5, r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
	float L_error = (float) SEN_L.now - (float) SEN_L.reference;
 800b756:	4bb1      	ldr	r3, [pc, #708]	; (800ba1c <wall_control+0x2cc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b762:	4bae      	ldr	r3, [pc, #696]	; (800ba1c <wall_control+0x2cc>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b772:	edc7 7a05 	vstr	s15, [r7, #20]
	float R_error = (float) SEN_R.now - (float) SEN_R.reference;
 800b776:	4baa      	ldr	r3, [pc, #680]	; (800ba20 <wall_control+0x2d0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b782:	4ba7      	ldr	r3, [pc, #668]	; (800ba20 <wall_control+0x2d0>)
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b78e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b792:	edc7 7a04 	vstr	s15, [r7, #16]

	float error_max = 400;
 800b796:	4ba3      	ldr	r3, [pc, #652]	; (800ba24 <wall_control+0x2d4>)
 800b798:	60fb      	str	r3, [r7, #12]

	if (L_error < 0) {
 800b79a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b79e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	d507      	bpl.n	800b7b8 <wall_control+0x68>
		L_error *= 3;
 800b7a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7ac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b7b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7b4:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	if (R_error < 0) {
 800b7b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c4:	d507      	bpl.n	800b7d6 <wall_control+0x86>
		R_error *= 3;
 800b7c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7ca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b7ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7d2:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	if (L_error > error_max) {
 800b7d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b7da:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	dd01      	ble.n	800b7ec <wall_control+0x9c>
		L_error = error_max;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	617b      	str	r3, [r7, #20]
	}
	if (R_error > error_max) {
 800b7ec:	ed97 7a04 	vldr	s14, [r7, #16]
 800b7f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fc:	dd01      	ble.n	800b802 <wall_control+0xb2>
		R_error = error_max;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	613b      	str	r3, [r7, #16]
	}
	if (L_error < -error_max) {
 800b802:	edd7 7a03 	vldr	s15, [r7, #12]
 800b806:	eef1 7a67 	vneg.f32	s15, s15
 800b80a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b80e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b816:	d505      	bpl.n	800b824 <wall_control+0xd4>
		L_error = -error_max;
 800b818:	edd7 7a03 	vldr	s15, [r7, #12]
 800b81c:	eef1 7a67 	vneg.f32	s15, s15
 800b820:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	if (R_error < -error_max) {
 800b824:	edd7 7a03 	vldr	s15, [r7, #12]
 800b828:	eef1 7a67 	vneg.f32	s15, s15
 800b82c:	ed97 7a04 	vldr	s14, [r7, #16]
 800b830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	d505      	bpl.n	800b846 <wall_control+0xf6>
		R_error = -error_max;
 800b83a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b83e:	eef1 7a67 	vneg.f32	s15, s15
 800b842:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	float L_error_diff = (L_error - SEN_L.error_before);
 800b846:	4b75      	ldr	r3, [pc, #468]	; (800ba1c <wall_control+0x2cc>)
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b852:	ed97 7a05 	vldr	s14, [r7, #20]
 800b856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b85a:	edc7 7a02 	vstr	s15, [r7, #8]
	float R_error_diff = (R_error - SEN_R.error_before);
 800b85e:	4b70      	ldr	r3, [pc, #448]	; (800ba20 <wall_control+0x2d0>)
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b86a:	ed97 7a04 	vldr	s14, [r7, #16]
 800b86e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b872:	edc7 7a01 	vstr	s15, [r7, #4]
	SEN_L.error_before = ((float) SEN_L.now - (float) SEN_L.diff)
 800b876:	4b69      	ldr	r3, [pc, #420]	; (800ba1c <wall_control+0x2cc>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b882:	4b66      	ldr	r3, [pc, #408]	; (800ba1c <wall_control+0x2cc>)
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b88e:	ee37 7a67 	vsub.f32	s14, s14, s15
			- (float) SEN_L.reference;
 800b892:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <wall_control+0x2cc>)
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b89e:	ee77 7a67 	vsub.f32	s15, s14, s15
	SEN_L.error_before = ((float) SEN_L.now - (float) SEN_L.diff)
 800b8a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8a6:	ee17 2a90 	vmov	r2, s15
 800b8aa:	4b5c      	ldr	r3, [pc, #368]	; (800ba1c <wall_control+0x2cc>)
 800b8ac:	611a      	str	r2, [r3, #16]
	SEN_R.error_before = ((float) SEN_R.now - (float) SEN_R.diff)
 800b8ae:	4b5c      	ldr	r3, [pc, #368]	; (800ba20 <wall_control+0x2d0>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8ba:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <wall_control+0x2d0>)
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8c6:	ee37 7a67 	vsub.f32	s14, s14, s15
			- (float) SEN_R.reference;
 800b8ca:	4b55      	ldr	r3, [pc, #340]	; (800ba20 <wall_control+0x2d0>)
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
	SEN_R.error_before = ((float) SEN_R.now - (float) SEN_R.diff)
 800b8da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8de:	ee17 2a90 	vmov	r2, s15
 800b8e2:	4b4f      	ldr	r3, [pc, #316]	; (800ba20 <wall_control+0x2d0>)
 800b8e4:	611a      	str	r2, [r3, #16]
	test_L = L_error_diff;
 800b8e6:	4a50      	ldr	r2, [pc, #320]	; (800ba28 <wall_control+0x2d8>)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6013      	str	r3, [r2, #0]
	test_R = R_error_diff;
 800b8ec:	4a4f      	ldr	r2, [pc, #316]	; (800ba2c <wall_control+0x2dc>)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6013      	str	r3, [r2, #0]
	if ((wall_control_flag == 1) && (wall_control_oblique_flag == 0)) { //通常
 800b8f2:	4b4f      	ldr	r3, [pc, #316]	; (800ba30 <wall_control+0x2e0>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	f040 8188 	bne.w	800bc0c <wall_control+0x4bc>
 800b8fc:	4b4d      	ldr	r3, [pc, #308]	; (800ba34 <wall_control+0x2e4>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8183 	bne.w	800bc0c <wall_control+0x4bc>

		if (((ideal_translation.vel) > 40.0) && (SEN_L.diff < 18)
 800b906:	4b4c      	ldr	r3, [pc, #304]	; (800ba38 <wall_control+0x2e8>)
 800b908:	edd3 7a01 	vldr	s15, [r3, #4]
 800b90c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ba3c <wall_control+0x2ec>
 800b910:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b918:	f340 80df 	ble.w	800bada <wall_control+0x38a>
 800b91c:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <wall_control+0x2cc>)
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	2b11      	cmp	r3, #17
 800b922:	f300 80da 	bgt.w	800bada <wall_control+0x38a>
				&& (SEN_R.diff < 18) && (SEN_F.now < SEN_F.reference)) { //&& (SEN_L.diff < 2000) && (SEN_R.diff < 2000)&& (SEN_F.now < SEN_F.threshold * 100))
 800b926:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <wall_control+0x2d0>)
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	2b11      	cmp	r3, #17
 800b92c:	f300 80d5 	bgt.w	800bada <wall_control+0x38a>
 800b930:	4b43      	ldr	r3, [pc, #268]	; (800ba40 <wall_control+0x2f0>)
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	4b42      	ldr	r3, [pc, #264]	; (800ba40 <wall_control+0x2f0>)
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	429a      	cmp	r2, r3
 800b93a:	f280 80ce 	bge.w	800bada <wall_control+0x38a>
			if (SEN_L.now > SEN_L.threshold && SEN_R.now > SEN_R.threshold) {
 800b93e:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <wall_control+0x2cc>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b36      	ldr	r3, [pc, #216]	; (800ba1c <wall_control+0x2cc>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	429a      	cmp	r2, r3
 800b948:	dd21      	ble.n	800b98e <wall_control+0x23e>
 800b94a:	4b35      	ldr	r3, [pc, #212]	; (800ba20 <wall_control+0x2d0>)
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	4b34      	ldr	r3, [pc, #208]	; (800ba20 <wall_control+0x2d0>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	dd1b      	ble.n	800b98e <wall_control+0x23e>
				wallcontrol_value = wall_cntrol_gain.Kp
 800b956:	4b3b      	ldr	r3, [pc, #236]	; (800ba44 <wall_control+0x2f4>)
 800b958:	ed93 7a00 	vldr	s14, [r3]
						* ((L_error) - (R_error))
 800b95c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b960:	edd7 7a04 	vldr	s15, [r7, #16]
 800b964:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b968:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ wall_cntrol_gain.Kd
 800b96c:	4b35      	ldr	r3, [pc, #212]	; (800ba44 <wall_control+0x2f4>)
 800b96e:	edd3 6a02 	vldr	s13, [r3, #8]
								* (float) (L_error_diff - R_error_diff);
 800b972:	ed97 6a02 	vldr	s12, [r7, #8]
 800b976:	edd7 7a01 	vldr	s15, [r7, #4]
 800b97a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b97e:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ wall_cntrol_gain.Kd
 800b982:	ee77 7a27 	vadd.f32	s15, s14, s15
				wallcontrol_value = wall_cntrol_gain.Kp
 800b986:	4b30      	ldr	r3, [pc, #192]	; (800ba48 <wall_control+0x2f8>)
 800b988:	edc3 7a00 	vstr	s15, [r3]
 800b98c:	e0a5      	b.n	800bada <wall_control+0x38a>
//				set_led(5);
			} else if (SEN_L.now < SEN_L.threshold
 800b98e:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <wall_control+0x2cc>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	4b22      	ldr	r3, [pc, #136]	; (800ba1c <wall_control+0x2cc>)
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	429a      	cmp	r2, r3
 800b998:	da58      	bge.n	800ba4c <wall_control+0x2fc>
					&& SEN_R.now > SEN_R.threshold) {
 800b99a:	4b21      	ldr	r3, [pc, #132]	; (800ba20 <wall_control+0x2d0>)
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <wall_control+0x2d0>)
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	dd52      	ble.n	800ba4c <wall_control+0x2fc>
				wallcontrol_value = -2.0 * wall_cntrol_gain.Kp * (R_error)
 800b9a6:	4b27      	ldr	r3, [pc, #156]	; (800ba44 <wall_control+0x2f4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f4 fdf4 	bl	8000598 <__aeabi_f2d>
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b9b8:	f7f4 fe46 	bl	8000648 <__aeabi_dmul>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	460c      	mov	r4, r1
 800b9c0:	4625      	mov	r5, r4
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	6938      	ldr	r0, [r7, #16]
 800b9c6:	f7f4 fde7 	bl	8000598 <__aeabi_f2d>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	f7f4 fe39 	bl	8000648 <__aeabi_dmul>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	4625      	mov	r5, r4
 800b9dc:	461c      	mov	r4, r3
						+ wall_cntrol_gain.Kd * (float) (-2 * R_error_diff);
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <wall_control+0x2f4>)
 800b9e0:	ed93 7a02 	vldr	s14, [r3, #8]
 800b9e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9e8:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800b9ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f4:	ee17 0a90 	vmov	r0, s15
 800b9f8:	f7f4 fdce 	bl	8000598 <__aeabi_f2d>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4620      	mov	r0, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fc6a 	bl	80002dc <__adddf3>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f7f5 f8f2 	bl	8000bf8 <__aeabi_d2f>
 800ba14:	4602      	mov	r2, r0
				wallcontrol_value = -2.0 * wall_cntrol_gain.Kp * (R_error)
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <wall_control+0x2f8>)
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	e05e      	b.n	800bada <wall_control+0x38a>
 800ba1c:	20032270 	.word	0x20032270
 800ba20:	20019628 	.word	0x20019628
 800ba24:	43c80000 	.word	0x43c80000
 800ba28:	200197f8 	.word	0x200197f8
 800ba2c:	20019660 	.word	0x20019660
 800ba30:	20000685 	.word	0x20000685
 800ba34:	20000684 	.word	0x20000684
 800ba38:	2001961c 	.word	0x2001961c
 800ba3c:	42200000 	.word	0x42200000
 800ba40:	2003200c 	.word	0x2003200c
 800ba44:	2003229c 	.word	0x2003229c
 800ba48:	20000664 	.word	0x20000664
//				set_led(4);
			} else if (SEN_L.now > SEN_L.threshold
 800ba4c:	4b66      	ldr	r3, [pc, #408]	; (800bbe8 <wall_control+0x498>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	4b65      	ldr	r3, [pc, #404]	; (800bbe8 <wall_control+0x498>)
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	dd3c      	ble.n	800bad2 <wall_control+0x382>
					&& SEN_R.now < SEN_R.threshold) {
 800ba58:	4b64      	ldr	r3, [pc, #400]	; (800bbec <wall_control+0x49c>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	4b63      	ldr	r3, [pc, #396]	; (800bbec <wall_control+0x49c>)
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	da36      	bge.n	800bad2 <wall_control+0x382>
				wallcontrol_value = 2.0 * wall_cntrol_gain.Kp * (L_error)
 800ba64:	4b62      	ldr	r3, [pc, #392]	; (800bbf0 <wall_control+0x4a0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f4 fd95 	bl	8000598 <__aeabi_f2d>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	f7f4 fc33 	bl	80002dc <__adddf3>
 800ba76:	4603      	mov	r3, r0
 800ba78:	460c      	mov	r4, r1
 800ba7a:	4625      	mov	r5, r4
 800ba7c:	461c      	mov	r4, r3
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	f7f4 fd8a 	bl	8000598 <__aeabi_f2d>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4620      	mov	r0, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7f4 fddc 	bl	8000648 <__aeabi_dmul>
 800ba90:	4603      	mov	r3, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	4625      	mov	r5, r4
 800ba96:	461c      	mov	r4, r3
						+ wall_cntrol_gain.Kd * (float) (2 * L_error_diff);
 800ba98:	4b55      	ldr	r3, [pc, #340]	; (800bbf0 <wall_control+0x4a0>)
 800ba9a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba9e:	edd7 7a02 	vldr	s15, [r7, #8]
 800baa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800baa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baaa:	ee17 0a90 	vmov	r0, s15
 800baae:	f7f4 fd73 	bl	8000598 <__aeabi_f2d>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fc0f 	bl	80002dc <__adddf3>
 800babe:	4603      	mov	r3, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	4618      	mov	r0, r3
 800bac4:	4621      	mov	r1, r4
 800bac6:	f7f5 f897 	bl	8000bf8 <__aeabi_d2f>
 800baca:	4602      	mov	r2, r0
				wallcontrol_value = 2.0 * wall_cntrol_gain.Kp * (L_error)
 800bacc:	4b49      	ldr	r3, [pc, #292]	; (800bbf4 <wall_control+0x4a4>)
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	e003      	b.n	800bada <wall_control+0x38a>
//				set_led(1);
			} else {
				wallcontrol_value = 0.0;
 800bad2:	4b48      	ldr	r3, [pc, #288]	; (800bbf4 <wall_control+0x4a4>)
 800bad4:	f04f 0200 	mov.w	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]
//				set_led(2);
			}
		}
		if ((kushi_control_flag == 1) && ideal_translation.vel > 150.0) {
 800bada:	4b47      	ldr	r3, [pc, #284]	; (800bbf8 <wall_control+0x4a8>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d17c      	bne.n	800bbdc <wall_control+0x48c>
 800bae2:	4b46      	ldr	r3, [pc, #280]	; (800bbfc <wall_control+0x4ac>)
 800bae4:	edd3 7a01 	vldr	s15, [r3, #4]
 800bae8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800bc00 <wall_control+0x4b0>
 800baec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf4:	dd72      	ble.n	800bbdc <wall_control+0x48c>
			set_led(7);
 800baf6:	2007      	movs	r0, #7
 800baf8:	f7fe fd14 	bl	800a524 <set_led>
			if ((SEN_RF.now > SEN_RF.front_kusi)
 800bafc:	4b41      	ldr	r3, [pc, #260]	; (800bc04 <wall_control+0x4b4>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	4b40      	ldr	r3, [pc, #256]	; (800bc04 <wall_control+0x4b4>)
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	dd30      	ble.n	800bb6a <wall_control+0x41a>
					&& ((float) SEN_RF.now < (float) SEN_RF.reference * 1)
 800bb08:	4b3e      	ldr	r3, [pc, #248]	; (800bc04 <wall_control+0x4b4>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb14:	4b3b      	ldr	r3, [pc, #236]	; (800bc04 <wall_control+0x4b4>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb28:	d51f      	bpl.n	800bb6a <wall_control+0x41a>
					&& (SEN_RF.diff > 10) && (SEN_R.now < SEN_R.threshold)) { //
 800bb2a:	4b36      	ldr	r3, [pc, #216]	; (800bc04 <wall_control+0x4b4>)
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	2b0a      	cmp	r3, #10
 800bb30:	dd1b      	ble.n	800bb6a <wall_control+0x41a>
 800bb32:	4b2e      	ldr	r3, [pc, #184]	; (800bbec <wall_control+0x49c>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	4b2d      	ldr	r3, [pc, #180]	; (800bbec <wall_control+0x49c>)
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	da15      	bge.n	800bb6a <wall_control+0x41a>
				wallcontrol_value -= wall_cntrol_gain.Ki
 800bb3e:	4b2d      	ldr	r3, [pc, #180]	; (800bbf4 <wall_control+0x4a4>)
 800bb40:	ed93 7a00 	vldr	s14, [r3]
 800bb44:	4b2a      	ldr	r3, [pc, #168]	; (800bbf0 <wall_control+0x4a0>)
 800bb46:	edd3 6a01 	vldr	s13, [r3, #4]
						* (SEN_RF.now - SEN_RF.front_kusi);
 800bb4a:	4b2e      	ldr	r3, [pc, #184]	; (800bc04 <wall_control+0x4b4>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	4b2d      	ldr	r3, [pc, #180]	; (800bc04 <wall_control+0x4b4>)
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				wallcontrol_value -= wall_cntrol_gain.Ki
 800bb60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb64:	4b23      	ldr	r3, [pc, #140]	; (800bbf4 <wall_control+0x4a4>)
 800bb66:	edc3 7a00 	vstr	s15, [r3]
			}
			if ((SEN_LF.now > SEN_LF.front_kusi)
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <wall_control+0x4b8>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	4b26      	ldr	r3, [pc, #152]	; (800bc08 <wall_control+0x4b8>)
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	dd36      	ble.n	800bbe4 <wall_control+0x494>
					&& ((float) SEN_LF.now < (float) SEN_LF.reference * 1)
 800bb76:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <wall_control+0x4b8>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb82:	4b21      	ldr	r3, [pc, #132]	; (800bc08 <wall_control+0x4b8>)
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	d400      	bmi.n	800bb9a <wall_control+0x44a>
			if ((SEN_LF.now > SEN_LF.front_kusi)
 800bb98:	e024      	b.n	800bbe4 <wall_control+0x494>
					&& (SEN_LF.diff > 10) && (SEN_L.now < SEN_L.threshold)) { //
 800bb9a:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <wall_control+0x4b8>)
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	2b0a      	cmp	r3, #10
 800bba0:	dd20      	ble.n	800bbe4 <wall_control+0x494>
 800bba2:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <wall_control+0x498>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <wall_control+0x498>)
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	da1a      	bge.n	800bbe4 <wall_control+0x494>
				wallcontrol_value += wall_cntrol_gain.Ki
 800bbae:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <wall_control+0x4a0>)
 800bbb0:	ed93 7a01 	vldr	s14, [r3, #4]
						* (SEN_LF.now - SEN_LF.front_kusi);
 800bbb4:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <wall_control+0x4b8>)
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	4b13      	ldr	r3, [pc, #76]	; (800bc08 <wall_control+0x4b8>)
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbc6:	ee27 7a27 	vmul.f32	s14, s14, s15
				wallcontrol_value += wall_cntrol_gain.Ki
 800bbca:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <wall_control+0x4a4>)
 800bbcc:	edd3 7a00 	vldr	s15, [r3]
 800bbd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbd4:	4b07      	ldr	r3, [pc, #28]	; (800bbf4 <wall_control+0x4a4>)
 800bbd6:	edc3 7a00 	vstr	s15, [r3]
			if ((SEN_LF.now > SEN_LF.front_kusi)
 800bbda:	e003      	b.n	800bbe4 <wall_control+0x494>
			}
		} else {
			set_led(2);
 800bbdc:	2002      	movs	r0, #2
 800bbde:	f7fe fca1 	bl	800a524 <set_led>
		if ((kushi_control_flag == 1) && ideal_translation.vel > 150.0) {
 800bbe2:	e1e3      	b.n	800bfac <wall_control+0x85c>
			if ((SEN_LF.now > SEN_LF.front_kusi)
 800bbe4:	bf00      	nop
		if ((kushi_control_flag == 1) && ideal_translation.vel > 150.0) {
 800bbe6:	e1e1      	b.n	800bfac <wall_control+0x85c>
 800bbe8:	20032270 	.word	0x20032270
 800bbec:	20019628 	.word	0x20019628
 800bbf0:	2003229c 	.word	0x2003229c
 800bbf4:	20000664 	.word	0x20000664
 800bbf8:	200006cd 	.word	0x200006cd
 800bbfc:	2001961c 	.word	0x2001961c
 800bc00:	43160000 	.word	0x43160000
 800bc04:	200197fc 	.word	0x200197fc
 800bc08:	2003214c 	.word	0x2003214c
//			}
//		} else {
//			wallcontrol_value = 0.0;
//
//		}
	} else if ((wall_control_flag == 1) && (wall_control_oblique_flag >= 1)) {
 800bc0c:	4bac      	ldr	r3, [pc, #688]	; (800bec0 <wall_control+0x770>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	f040 80e1 	bne.w	800bdd8 <wall_control+0x688>
 800bc16:	4bab      	ldr	r3, [pc, #684]	; (800bec4 <wall_control+0x774>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 80dc 	beq.w	800bdd8 <wall_control+0x688>
		test_R2 = 7;
 800bc20:	4ba9      	ldr	r3, [pc, #676]	; (800bec8 <wall_control+0x778>)
 800bc22:	4aaa      	ldr	r2, [pc, #680]	; (800becc <wall_control+0x77c>)
 800bc24:	601a      	str	r2, [r3, #0]
		wallcontrol_value = 0.0; //ここに斜め壁制御を書く
 800bc26:	4baa      	ldr	r3, [pc, #680]	; (800bed0 <wall_control+0x780>)
 800bc28:	f04f 0200 	mov.w	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
		if (wall_control_oblique_flag == 1 || wall_control_oblique_flag == 2) {
 800bc2e:	4ba5      	ldr	r3, [pc, #660]	; (800bec4 <wall_control+0x774>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d003      	beq.n	800bc3e <wall_control+0x4ee>
 800bc36:	4ba3      	ldr	r3, [pc, #652]	; (800bec4 <wall_control+0x774>)
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d149      	bne.n	800bcd2 <wall_control+0x582>
			test_R2 = 8;
 800bc3e:	4ba2      	ldr	r3, [pc, #648]	; (800bec8 <wall_control+0x778>)
 800bc40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800bc44:	601a      	str	r2, [r3, #0]
			if (SEN_L.now > SEN_L.oblique_threshold && SEN_L.diff < 180) {
 800bc46:	4ba3      	ldr	r3, [pc, #652]	; (800bed4 <wall_control+0x784>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	4ba2      	ldr	r3, [pc, #648]	; (800bed4 <wall_control+0x784>)
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	dd1c      	ble.n	800bc8c <wall_control+0x53c>
 800bc52:	4ba0      	ldr	r3, [pc, #640]	; (800bed4 <wall_control+0x784>)
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	2bb3      	cmp	r3, #179	; 0xb3
 800bc58:	dc18      	bgt.n	800bc8c <wall_control+0x53c>
				test_R2 = 9;
 800bc5a:	4b9b      	ldr	r3, [pc, #620]	; (800bec8 <wall_control+0x778>)
 800bc5c:	4a9e      	ldr	r2, [pc, #632]	; (800bed8 <wall_control+0x788>)
 800bc5e:	601a      	str	r2, [r3, #0]
				wallcontrol_value += (float) oblique_Side_gain
						* (float) (SEN_L.now - SEN_L.oblique_reference);
 800bc60:	4b9c      	ldr	r3, [pc, #624]	; (800bed4 <wall_control+0x784>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	4b9b      	ldr	r3, [pc, #620]	; (800bed4 <wall_control+0x784>)
 800bc66:	695b      	ldr	r3, [r3, #20]
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc72:	4b9a      	ldr	r3, [pc, #616]	; (800bedc <wall_control+0x78c>)
 800bc74:	edd3 7a00 	vldr	s15, [r3]
 800bc78:	ee27 7a27 	vmul.f32	s14, s14, s15
				wallcontrol_value += (float) oblique_Side_gain
 800bc7c:	4b94      	ldr	r3, [pc, #592]	; (800bed0 <wall_control+0x780>)
 800bc7e:	edd3 7a00 	vldr	s15, [r3]
 800bc82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc86:	4b92      	ldr	r3, [pc, #584]	; (800bed0 <wall_control+0x780>)
 800bc88:	edc3 7a00 	vstr	s15, [r3]
			}
			if (SEN_LF.now > SEN_LF.oblique_threshold && SEN_LF.diff < 20) {
 800bc8c:	4b94      	ldr	r3, [pc, #592]	; (800bee0 <wall_control+0x790>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	4b93      	ldr	r3, [pc, #588]	; (800bee0 <wall_control+0x790>)
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	dd1c      	ble.n	800bcd2 <wall_control+0x582>
 800bc98:	4b91      	ldr	r3, [pc, #580]	; (800bee0 <wall_control+0x790>)
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	2b13      	cmp	r3, #19
 800bc9e:	dc18      	bgt.n	800bcd2 <wall_control+0x582>
				test_R2 = 10;
 800bca0:	4b89      	ldr	r3, [pc, #548]	; (800bec8 <wall_control+0x778>)
 800bca2:	4a90      	ldr	r2, [pc, #576]	; (800bee4 <wall_control+0x794>)
 800bca4:	601a      	str	r2, [r3, #0]
				wallcontrol_value += (float) oblique_Front_gain
						* (float) (SEN_LF.now - SEN_LF.oblique_reference);
 800bca6:	4b8e      	ldr	r3, [pc, #568]	; (800bee0 <wall_control+0x790>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b8d      	ldr	r3, [pc, #564]	; (800bee0 <wall_control+0x790>)
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	ee07 3a90 	vmov	s15, r3
 800bcb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcb8:	4b8b      	ldr	r3, [pc, #556]	; (800bee8 <wall_control+0x798>)
 800bcba:	edd3 7a00 	vldr	s15, [r3]
 800bcbe:	ee27 7a27 	vmul.f32	s14, s14, s15
				wallcontrol_value += (float) oblique_Front_gain
 800bcc2:	4b83      	ldr	r3, [pc, #524]	; (800bed0 <wall_control+0x780>)
 800bcc4:	edd3 7a00 	vldr	s15, [r3]
 800bcc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bccc:	4b80      	ldr	r3, [pc, #512]	; (800bed0 <wall_control+0x780>)
 800bcce:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if (wall_control_oblique_flag == 1 || wall_control_oblique_flag == 3) {
 800bcd2:	4b7c      	ldr	r3, [pc, #496]	; (800bec4 <wall_control+0x774>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d003      	beq.n	800bce2 <wall_control+0x592>
 800bcda:	4b7a      	ldr	r3, [pc, #488]	; (800bec4 <wall_control+0x774>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d15e      	bne.n	800bda0 <wall_control+0x650>
			test_R2 = 11;
 800bce2:	4b79      	ldr	r3, [pc, #484]	; (800bec8 <wall_control+0x778>)
 800bce4:	4a81      	ldr	r2, [pc, #516]	; (800beec <wall_control+0x79c>)
 800bce6:	601a      	str	r2, [r3, #0]
			if (SEN_R.now > SEN_R.oblique_threshold && SEN_R.diff < 180) {
 800bce8:	4b81      	ldr	r3, [pc, #516]	; (800bef0 <wall_control+0x7a0>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	4b80      	ldr	r3, [pc, #512]	; (800bef0 <wall_control+0x7a0>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	dd32      	ble.n	800bd5a <wall_control+0x60a>
 800bcf4:	4b7e      	ldr	r3, [pc, #504]	; (800bef0 <wall_control+0x7a0>)
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	2bb3      	cmp	r3, #179	; 0xb3
 800bcfa:	dc2e      	bgt.n	800bd5a <wall_control+0x60a>
				test_R2 = 12;
 800bcfc:	4b72      	ldr	r3, [pc, #456]	; (800bec8 <wall_control+0x778>)
 800bcfe:	4a7d      	ldr	r2, [pc, #500]	; (800bef4 <wall_control+0x7a4>)
 800bd00:	601a      	str	r2, [r3, #0]
				wallcontrol_value -= (float) oblique_Side_gain
 800bd02:	4b73      	ldr	r3, [pc, #460]	; (800bed0 <wall_control+0x780>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f4 fc46 	bl	8000598 <__aeabi_f2d>
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
						* (float) (SEN_R.now - SEN_R.oblique_reference) * 2.0;
 800bd10:	4b77      	ldr	r3, [pc, #476]	; (800bef0 <wall_control+0x7a0>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	4b76      	ldr	r3, [pc, #472]	; (800bef0 <wall_control+0x7a0>)
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd22:	4b6e      	ldr	r3, [pc, #440]	; (800bedc <wall_control+0x78c>)
 800bd24:	edd3 7a00 	vldr	s15, [r3]
 800bd28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd2c:	ee17 0a90 	vmov	r0, s15
 800bd30:	f7f4 fc32 	bl	8000598 <__aeabi_f2d>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	f7f4 fad0 	bl	80002dc <__adddf3>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
				wallcontrol_value -= (float) oblique_Side_gain
 800bd40:	4620      	mov	r0, r4
 800bd42:	4629      	mov	r1, r5
 800bd44:	f7f4 fac8 	bl	80002d8 <__aeabi_dsub>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f7f4 ff52 	bl	8000bf8 <__aeabi_d2f>
 800bd54:	4602      	mov	r2, r0
 800bd56:	4b5e      	ldr	r3, [pc, #376]	; (800bed0 <wall_control+0x780>)
 800bd58:	601a      	str	r2, [r3, #0]

			}
			if (SEN_RF.now > SEN_RF.oblique_threshold && SEN_RF.diff < 30) {
 800bd5a:	4b67      	ldr	r3, [pc, #412]	; (800bef8 <wall_control+0x7a8>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	4b66      	ldr	r3, [pc, #408]	; (800bef8 <wall_control+0x7a8>)
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	dd1c      	ble.n	800bda0 <wall_control+0x650>
 800bd66:	4b64      	ldr	r3, [pc, #400]	; (800bef8 <wall_control+0x7a8>)
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	2b1d      	cmp	r3, #29
 800bd6c:	dc18      	bgt.n	800bda0 <wall_control+0x650>
				test_R2 = 13;
 800bd6e:	4b56      	ldr	r3, [pc, #344]	; (800bec8 <wall_control+0x778>)
 800bd70:	4a62      	ldr	r2, [pc, #392]	; (800befc <wall_control+0x7ac>)
 800bd72:	601a      	str	r2, [r3, #0]
				wallcontrol_value -= (float) oblique_Front_gain
 800bd74:	4b56      	ldr	r3, [pc, #344]	; (800bed0 <wall_control+0x780>)
 800bd76:	ed93 7a00 	vldr	s14, [r3]
						* (float) (SEN_RF.now - SEN_RF.oblique_reference);
 800bd7a:	4b5f      	ldr	r3, [pc, #380]	; (800bef8 <wall_control+0x7a8>)
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	4b5e      	ldr	r3, [pc, #376]	; (800bef8 <wall_control+0x7a8>)
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd8c:	4b56      	ldr	r3, [pc, #344]	; (800bee8 <wall_control+0x798>)
 800bd8e:	edd3 7a00 	vldr	s15, [r3]
 800bd92:	ee66 7aa7 	vmul.f32	s15, s13, s15
				wallcontrol_value -= (float) oblique_Front_gain
 800bd96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd9a:	4b4d      	ldr	r3, [pc, #308]	; (800bed0 <wall_control+0x780>)
 800bd9c:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if (wallcontrol_value > 300.0) {
 800bda0:	4b4b      	ldr	r3, [pc, #300]	; (800bed0 <wall_control+0x780>)
 800bda2:	edd3 7a00 	vldr	s15, [r3]
 800bda6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800bf00 <wall_control+0x7b0>
 800bdaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb2:	dd02      	ble.n	800bdba <wall_control+0x66a>
			wallcontrol_value = 300.0;
 800bdb4:	4b46      	ldr	r3, [pc, #280]	; (800bed0 <wall_control+0x780>)
 800bdb6:	4a53      	ldr	r2, [pc, #332]	; (800bf04 <wall_control+0x7b4>)
 800bdb8:	601a      	str	r2, [r3, #0]
		}
		if (wallcontrol_value < -300.0) {
 800bdba:	4b45      	ldr	r3, [pc, #276]	; (800bed0 <wall_control+0x780>)
 800bdbc:	edd3 7a00 	vldr	s15, [r3]
 800bdc0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800bf08 <wall_control+0x7b8>
 800bdc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdcc:	f140 80ee 	bpl.w	800bfac <wall_control+0x85c>
			wallcontrol_value = -300.0;
 800bdd0:	4b3f      	ldr	r3, [pc, #252]	; (800bed0 <wall_control+0x780>)
 800bdd2:	4a4e      	ldr	r2, [pc, #312]	; (800bf0c <wall_control+0x7bc>)
 800bdd4:	601a      	str	r2, [r3, #0]
		if (wallcontrol_value < -300.0) {
 800bdd6:	e0e9      	b.n	800bfac <wall_control+0x85c>
		}

	} else if (wall_control_flag == 10) { //壁キレ区間
 800bdd8:	4b39      	ldr	r3, [pc, #228]	; (800bec0 <wall_control+0x770>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b0a      	cmp	r3, #10
 800bdde:	f040 80e1 	bne.w	800bfa4 <wall_control+0x854>
		if (SEN_L.now > SEN_L.reference && SEN_R.now > SEN_R.reference) {
 800bde2:	4b3c      	ldr	r3, [pc, #240]	; (800bed4 <wall_control+0x784>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4b3b      	ldr	r3, [pc, #236]	; (800bed4 <wall_control+0x784>)
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	dd21      	ble.n	800be32 <wall_control+0x6e2>
 800bdee:	4b40      	ldr	r3, [pc, #256]	; (800bef0 <wall_control+0x7a0>)
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	4b3f      	ldr	r3, [pc, #252]	; (800bef0 <wall_control+0x7a0>)
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	dd1b      	ble.n	800be32 <wall_control+0x6e2>
			wallcontrol_value = wall_cntrol_gain.Kp * ((L_error) - (R_error))
 800bdfa:	4b45      	ldr	r3, [pc, #276]	; (800bf10 <wall_control+0x7c0>)
 800bdfc:	ed93 7a00 	vldr	s14, [r3]
 800be00:	edd7 6a05 	vldr	s13, [r7, #20]
 800be04:	edd7 7a04 	vldr	s15, [r7, #16]
 800be08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800be0c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ wall_cntrol_gain.Kd
 800be10:	4b3f      	ldr	r3, [pc, #252]	; (800bf10 <wall_control+0x7c0>)
 800be12:	edd3 6a02 	vldr	s13, [r3, #8]
							* (float) (L_error_diff - R_error_diff);
 800be16:	ed97 6a02 	vldr	s12, [r7, #8]
 800be1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800be1e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800be22:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ wall_cntrol_gain.Kd
 800be26:	ee77 7a27 	vadd.f32	s15, s14, s15
			wallcontrol_value = wall_cntrol_gain.Kp * ((L_error) - (R_error))
 800be2a:	4b29      	ldr	r3, [pc, #164]	; (800bed0 <wall_control+0x780>)
 800be2c:	edc3 7a00 	vstr	s15, [r3]
 800be30:	e0bc      	b.n	800bfac <wall_control+0x85c>
//				set_led(5);
		} else if (SEN_L.now < SEN_L.threshold  && SEN_R.now > SEN_R.reference) {
 800be32:	4b28      	ldr	r3, [pc, #160]	; (800bed4 <wall_control+0x784>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	4b27      	ldr	r3, [pc, #156]	; (800bed4 <wall_control+0x784>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	da6a      	bge.n	800bf14 <wall_control+0x7c4>
 800be3e:	4b2c      	ldr	r3, [pc, #176]	; (800bef0 <wall_control+0x7a0>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <wall_control+0x7a0>)
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	429a      	cmp	r2, r3
 800be48:	dd64      	ble.n	800bf14 <wall_control+0x7c4>
			wallcontrol_value = -2.0 * wall_cntrol_gain.Kp * (R_error)
 800be4a:	4b31      	ldr	r3, [pc, #196]	; (800bf10 <wall_control+0x7c0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f4 fba2 	bl	8000598 <__aeabi_f2d>
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800be5c:	f7f4 fbf4 	bl	8000648 <__aeabi_dmul>
 800be60:	4603      	mov	r3, r0
 800be62:	460c      	mov	r4, r1
 800be64:	4625      	mov	r5, r4
 800be66:	461c      	mov	r4, r3
 800be68:	6938      	ldr	r0, [r7, #16]
 800be6a:	f7f4 fb95 	bl	8000598 <__aeabi_f2d>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fbe7 	bl	8000648 <__aeabi_dmul>
 800be7a:	4603      	mov	r3, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	4625      	mov	r5, r4
 800be80:	461c      	mov	r4, r3
					+ wall_cntrol_gain.Kd * (float) (-2 * R_error_diff);
 800be82:	4b23      	ldr	r3, [pc, #140]	; (800bf10 <wall_control+0x7c0>)
 800be84:	ed93 7a02 	vldr	s14, [r3, #8]
 800be88:	edd7 7a01 	vldr	s15, [r7, #4]
 800be8c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800be90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be98:	ee17 0a90 	vmov	r0, s15
 800be9c:	f7f4 fb7c 	bl	8000598 <__aeabi_f2d>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4620      	mov	r0, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 fa18 	bl	80002dc <__adddf3>
 800beac:	4603      	mov	r3, r0
 800beae:	460c      	mov	r4, r1
 800beb0:	4618      	mov	r0, r3
 800beb2:	4621      	mov	r1, r4
 800beb4:	f7f4 fea0 	bl	8000bf8 <__aeabi_d2f>
 800beb8:	4602      	mov	r2, r0
			wallcontrol_value = -2.0 * wall_cntrol_gain.Kp * (R_error)
 800beba:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <wall_control+0x780>)
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	e075      	b.n	800bfac <wall_control+0x85c>
 800bec0:	20000685 	.word	0x20000685
 800bec4:	20000684 	.word	0x20000684
 800bec8:	200322c0 	.word	0x200322c0
 800becc:	40e00000 	.word	0x40e00000
 800bed0:	20000664 	.word	0x20000664
 800bed4:	20032270 	.word	0x20032270
 800bed8:	41100000 	.word	0x41100000
 800bedc:	2000004c 	.word	0x2000004c
 800bee0:	2003214c 	.word	0x2003214c
 800bee4:	41200000 	.word	0x41200000
 800bee8:	20000048 	.word	0x20000048
 800beec:	41300000 	.word	0x41300000
 800bef0:	20019628 	.word	0x20019628
 800bef4:	41400000 	.word	0x41400000
 800bef8:	200197fc 	.word	0x200197fc
 800befc:	41500000 	.word	0x41500000
 800bf00:	43960000 	.word	0x43960000
 800bf04:	43960000 	.word	0x43960000
 800bf08:	c3960000 	.word	0xc3960000
 800bf0c:	c3960000 	.word	0xc3960000
 800bf10:	2003229c 	.word	0x2003229c
//				set_led(4);
		} else if (SEN_L.now > SEN_L.reference && SEN_R.now < SEN_R.threshold) {
 800bf14:	4b29      	ldr	r3, [pc, #164]	; (800bfbc <wall_control+0x86c>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	4b28      	ldr	r3, [pc, #160]	; (800bfbc <wall_control+0x86c>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	dd3c      	ble.n	800bf9a <wall_control+0x84a>
 800bf20:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <wall_control+0x870>)
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	4b26      	ldr	r3, [pc, #152]	; (800bfc0 <wall_control+0x870>)
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	da36      	bge.n	800bf9a <wall_control+0x84a>
			wallcontrol_value = 2.0 * wall_cntrol_gain.Kp * (L_error)
 800bf2c:	4b25      	ldr	r3, [pc, #148]	; (800bfc4 <wall_control+0x874>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7f4 fb31 	bl	8000598 <__aeabi_f2d>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	f7f4 f9cf 	bl	80002dc <__adddf3>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	460c      	mov	r4, r1
 800bf42:	4625      	mov	r5, r4
 800bf44:	461c      	mov	r4, r3
 800bf46:	6978      	ldr	r0, [r7, #20]
 800bf48:	f7f4 fb26 	bl	8000598 <__aeabi_f2d>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4620      	mov	r0, r4
 800bf52:	4629      	mov	r1, r5
 800bf54:	f7f4 fb78 	bl	8000648 <__aeabi_dmul>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	4625      	mov	r5, r4
 800bf5e:	461c      	mov	r4, r3
					+ wall_cntrol_gain.Kd * (float) (2 * L_error_diff);
 800bf60:	4b18      	ldr	r3, [pc, #96]	; (800bfc4 <wall_control+0x874>)
 800bf62:	ed93 7a02 	vldr	s14, [r3, #8]
 800bf66:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf72:	ee17 0a90 	vmov	r0, s15
 800bf76:	f7f4 fb0f 	bl	8000598 <__aeabi_f2d>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 f9ab 	bl	80002dc <__adddf3>
 800bf86:	4603      	mov	r3, r0
 800bf88:	460c      	mov	r4, r1
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	f7f4 fe33 	bl	8000bf8 <__aeabi_d2f>
 800bf92:	4602      	mov	r2, r0
			wallcontrol_value = 2.0 * wall_cntrol_gain.Kp * (L_error)
 800bf94:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <wall_control+0x878>)
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	e008      	b.n	800bfac <wall_control+0x85c>
//				set_led(1);
		} else {
			wallcontrol_value = 0.0;
 800bf9a:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <wall_control+0x878>)
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	e003      	b.n	800bfac <wall_control+0x85c>
//				set_led(2);
		}

	} else {
		wallcontrol_value = 0.0;
 800bfa4:	4b08      	ldr	r3, [pc, #32]	; (800bfc8 <wall_control+0x878>)
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]

	}
	test_float = wallcontrol_value;
 800bfac:	4b06      	ldr	r3, [pc, #24]	; (800bfc8 <wall_control+0x878>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a06      	ldr	r2, [pc, #24]	; (800bfcc <wall_control+0x87c>)
 800bfb2:	6013      	str	r3, [r2, #0]

}
 800bfb4:	bf00      	nop
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bdb0      	pop	{r4, r5, r7, pc}
 800bfbc:	20032270 	.word	0x20032270
 800bfc0:	20019628 	.word	0x20019628
 800bfc4:	2003229c 	.word	0x2003229c
 800bfc8:	20000664 	.word	0x20000664
 800bfcc:	200322dc 	.word	0x200322dc

0800bfd0 <coordinate>:

void coordinate(void) {
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
	if (direction == North) {
 800bfd4:	4b17      	ldr	r3, [pc, #92]	; (800c034 <coordinate+0x64>)
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <coordinate+0x1a>
		y.now++;
 800bfdc:	4b16      	ldr	r3, [pc, #88]	; (800c038 <coordinate+0x68>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b14      	ldr	r3, [pc, #80]	; (800c038 <coordinate+0x68>)
 800bfe6:	701a      	strb	r2, [r3, #0]
	} else if (direction == South) {
		y.now--;
	} else if (direction == East) {
		x.now++;
	}
}
 800bfe8:	e01f      	b.n	800c02a <coordinate+0x5a>
	} else if (direction == West) {
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <coordinate+0x64>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d106      	bne.n	800c000 <coordinate+0x30>
		x.now--;
 800bff2:	4b12      	ldr	r3, [pc, #72]	; (800c03c <coordinate+0x6c>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	4b10      	ldr	r3, [pc, #64]	; (800c03c <coordinate+0x6c>)
 800bffc:	701a      	strb	r2, [r3, #0]
}
 800bffe:	e014      	b.n	800c02a <coordinate+0x5a>
	} else if (direction == South) {
 800c000:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <coordinate+0x64>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d106      	bne.n	800c016 <coordinate+0x46>
		y.now--;
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <coordinate+0x68>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	4b09      	ldr	r3, [pc, #36]	; (800c038 <coordinate+0x68>)
 800c012:	701a      	strb	r2, [r3, #0]
}
 800c014:	e009      	b.n	800c02a <coordinate+0x5a>
	} else if (direction == East) {
 800c016:	4b07      	ldr	r3, [pc, #28]	; (800c034 <coordinate+0x64>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d105      	bne.n	800c02a <coordinate+0x5a>
		x.now++;
 800c01e:	4b07      	ldr	r3, [pc, #28]	; (800c03c <coordinate+0x6c>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	b2da      	uxtb	r2, r3
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <coordinate+0x6c>)
 800c028:	701a      	strb	r2, [r3, #0]
}
 800c02a:	bf00      	nop
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr
 800c034:	20000650 	.word	0x20000650
 800c038:	20019858 	.word	0x20019858
 800c03c:	20000b88 	.word	0x20000b88

0800c040 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800c044:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c046:	4a18      	ldr	r2, [pc, #96]	; (800c0a8 <MX_SPI2_Init+0x68>)
 800c048:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c04a:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c04c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c050:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c052:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c054:	2200      	movs	r2, #0
 800c056:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c058:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c060:	2202      	movs	r2, #2
 800c062:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c064:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c066:	2201      	movs	r2, #1
 800c068:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c06a:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c06c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c070:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c072:	4b0c      	ldr	r3, [pc, #48]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c074:	2218      	movs	r2, #24
 800c076:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c07e:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c080:	2200      	movs	r2, #0
 800c082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c086:	2200      	movs	r2, #0
 800c088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c08c:	220a      	movs	r2, #10
 800c08e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c090:	4804      	ldr	r0, [pc, #16]	; (800c0a4 <MX_SPI2_Init+0x64>)
 800c092:	f7f7 f935 	bl	8003300 <HAL_SPI_Init>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800c09c:	f7fc fe80 	bl	8008da0 <Error_Handler>
  }

}
 800c0a0:	bf00      	nop
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	2000084c 	.word	0x2000084c
 800c0a8:	40003800 	.word	0x40003800

0800c0ac <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800c0b0:	4b18      	ldr	r3, [pc, #96]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0b2:	4a19      	ldr	r2, [pc, #100]	; (800c118 <MX_SPI3_Init+0x6c>)
 800c0b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c0b6:	4b17      	ldr	r3, [pc, #92]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c0bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0cc:	4b11      	ldr	r3, [pc, #68]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c0d2:	4b10      	ldr	r3, [pc, #64]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c0d8:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0e2:	2218      	movs	r2, #24
 800c0e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c0e6:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0f2:	4b08      	ldr	r3, [pc, #32]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c0f8:	4b06      	ldr	r3, [pc, #24]	; (800c114 <MX_SPI3_Init+0x68>)
 800c0fa:	220a      	movs	r2, #10
 800c0fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c0fe:	4805      	ldr	r0, [pc, #20]	; (800c114 <MX_SPI3_Init+0x68>)
 800c100:	f7f7 f8fe 	bl	8003300 <HAL_SPI_Init>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800c10a:	f7fc fe49 	bl	8008da0 <Error_Handler>
  }

}
 800c10e:	bf00      	nop
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200008a4 	.word	0x200008a4
 800c118:	40003c00 	.word	0x40003c00

0800c11c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08c      	sub	sp, #48	; 0x30
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c124:	f107 031c 	add.w	r3, r7, #28
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	605a      	str	r2, [r3, #4]
 800c12e:	609a      	str	r2, [r3, #8]
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a3b      	ldr	r2, [pc, #236]	; (800c228 <HAL_SPI_MspInit+0x10c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d12d      	bne.n	800c19a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c13e:	2300      	movs	r3, #0
 800c140:	61bb      	str	r3, [r7, #24]
 800c142:	4b3a      	ldr	r3, [pc, #232]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	4a39      	ldr	r2, [pc, #228]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c14c:	6413      	str	r3, [r2, #64]	; 0x40
 800c14e:	4b37      	ldr	r3, [pc, #220]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	4b33      	ldr	r3, [pc, #204]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c162:	4a32      	ldr	r2, [pc, #200]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c164:	f043 0302 	orr.w	r3, r3, #2
 800c168:	6313      	str	r3, [r2, #48]	; 0x30
 800c16a:	4b30      	ldr	r3, [pc, #192]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 800c176:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800c17a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c17c:	2302      	movs	r3, #2
 800c17e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c180:	2300      	movs	r3, #0
 800c182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c184:	2303      	movs	r3, #3
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c188:	2305      	movs	r3, #5
 800c18a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c18c:	f107 031c 	add.w	r3, r7, #28
 800c190:	4619      	mov	r1, r3
 800c192:	4827      	ldr	r0, [pc, #156]	; (800c230 <HAL_SPI_MspInit+0x114>)
 800c194:	f7f6 fadc 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800c198:	e041      	b.n	800c21e <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a25      	ldr	r2, [pc, #148]	; (800c234 <HAL_SPI_MspInit+0x118>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d13c      	bne.n	800c21e <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	613b      	str	r3, [r7, #16]
 800c1a8:	4b20      	ldr	r3, [pc, #128]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ac:	4a1f      	ldr	r2, [pc, #124]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1b2:	6413      	str	r3, [r2, #64]	; 0x40
 800c1b4:	4b1d      	ldr	r3, [pc, #116]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1bc:	613b      	str	r3, [r7, #16]
 800c1be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	4b19      	ldr	r3, [pc, #100]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c8:	4a18      	ldr	r2, [pc, #96]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1ca:	f043 0302 	orr.w	r3, r3, #2
 800c1ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c1d0:	4b16      	ldr	r3, [pc, #88]	; (800c22c <HAL_SPI_MspInit+0x110>)
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	60fb      	str	r3, [r7, #12]
 800c1da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 800c1dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800c1ee:	2307      	movs	r3, #7
 800c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 800c1f2:	f107 031c 	add.w	r3, r7, #28
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	480d      	ldr	r0, [pc, #52]	; (800c230 <HAL_SPI_MspInit+0x114>)
 800c1fa:	f7f6 faa9 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 800c1fe:	2330      	movs	r3, #48	; 0x30
 800c200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c202:	2302      	movs	r3, #2
 800c204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c206:	2300      	movs	r3, #0
 800c208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c20a:	2303      	movs	r3, #3
 800c20c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c20e:	2306      	movs	r3, #6
 800c210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c212:	f107 031c 	add.w	r3, r7, #28
 800c216:	4619      	mov	r1, r3
 800c218:	4805      	ldr	r0, [pc, #20]	; (800c230 <HAL_SPI_MspInit+0x114>)
 800c21a:	f7f6 fa99 	bl	8002750 <HAL_GPIO_Init>
}
 800c21e:	bf00      	nop
 800c220:	3730      	adds	r7, #48	; 0x30
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	40003800 	.word	0x40003800
 800c22c:	40023800 	.word	0x40023800
 800c230:	40020400 	.word	0x40020400
 800c234:	40003c00 	.word	0x40003c00

0800c238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c23e:	2300      	movs	r3, #0
 800c240:	607b      	str	r3, [r7, #4]
 800c242:	4b10      	ldr	r3, [pc, #64]	; (800c284 <HAL_MspInit+0x4c>)
 800c244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c246:	4a0f      	ldr	r2, [pc, #60]	; (800c284 <HAL_MspInit+0x4c>)
 800c248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c24c:	6453      	str	r3, [r2, #68]	; 0x44
 800c24e:	4b0d      	ldr	r3, [pc, #52]	; (800c284 <HAL_MspInit+0x4c>)
 800c250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c256:	607b      	str	r3, [r7, #4]
 800c258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c25a:	2300      	movs	r3, #0
 800c25c:	603b      	str	r3, [r7, #0]
 800c25e:	4b09      	ldr	r3, [pc, #36]	; (800c284 <HAL_MspInit+0x4c>)
 800c260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c262:	4a08      	ldr	r2, [pc, #32]	; (800c284 <HAL_MspInit+0x4c>)
 800c264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c268:	6413      	str	r3, [r2, #64]	; 0x40
 800c26a:	4b06      	ldr	r3, [pc, #24]	; (800c284 <HAL_MspInit+0x4c>)
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	40023800 	.word	0x40023800

0800c288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c288:	b480      	push	{r7}
 800c28a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c28c:	bf00      	nop
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c296:	b480      	push	{r7}
 800c298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c29a:	e7fe      	b.n	800c29a <HardFault_Handler+0x4>

0800c29c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c2a0:	e7fe      	b.n	800c2a0 <MemManage_Handler+0x4>

0800c2a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c2a6:	e7fe      	b.n	800c2a6 <BusFault_Handler+0x4>

0800c2a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c2ac:	e7fe      	b.n	800c2ac <UsageFault_Handler+0x4>

0800c2ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c2b2:	bf00      	nop
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c2ce:	bf00      	nop
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c2dc:	f7f4 feae 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c2e0:	bf00      	nop
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c2e8:	4803      	ldr	r0, [pc, #12]	; (800c2f8 <TIM6_DAC_IRQHandler+0x14>)
 800c2ea:	f7f7 fbcb 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_1ms();
 800c2ee:	f7fb fea1 	bl	8008034 <interrupt_1ms>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c2f2:	bf00      	nop
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	2000093c 	.word	0x2000093c

0800c2fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c300:	4802      	ldr	r0, [pc, #8]	; (800c30c <DMA2_Stream0_IRQHandler+0x10>)
 800c302:	f7f5 fcd9 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800c306:	bf00      	nop
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	200007ec 	.word	0x200007ec

0800c310 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c31c:	2300      	movs	r3, #0
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	e00a      	b.n	800c338 <_read+0x28>
		*ptr++ = __io_getchar();
 800c322:	f3af 8000 	nop.w
 800c326:	4601      	mov	r1, r0
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	60ba      	str	r2, [r7, #8]
 800c32e:	b2ca      	uxtb	r2, r1
 800c330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	3301      	adds	r3, #1
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	dbf0      	blt.n	800c322 <_read+0x12>
	}

	return len;
 800c340:	687b      	ldr	r3, [r7, #4]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	60b9      	str	r1, [r7, #8]
 800c354:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

	(void) file; /* Not used, avoid warning */
	SEGGER_RTT_Write(0, ptr, len);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	461a      	mov	r2, r3
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	2000      	movs	r0, #0
 800c35e:	f7f8 f9bd 	bl	80046dc <SEGGER_RTT_Write>
	return len;
 800c362:	687b      	ldr	r3, [r7, #4]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <_close>:

int _close(int file) {
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	return -1;
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <_fstat>:

int _fstat(int file, struct stat *st) {
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c394:	605a      	str	r2, [r3, #4]
	return 0;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <_isatty>:

int _isatty(int file) {
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	return 1;
 800c3ac:	2301      	movs	r3, #1
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	60f8      	str	r0, [r7, #12]
 800c3c2:	60b9      	str	r1, [r7, #8]
 800c3c4:	607a      	str	r2, [r7, #4]
	return 0;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c3dc:	4b11      	ldr	r3, [pc, #68]	; (800c424 <_sbrk+0x50>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <_sbrk+0x16>
		heap_end = &end;
 800c3e4:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <_sbrk+0x50>)
 800c3e6:	4a10      	ldr	r2, [pc, #64]	; (800c428 <_sbrk+0x54>)
 800c3e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c3ea:	4b0e      	ldr	r3, [pc, #56]	; (800c424 <_sbrk+0x50>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c3f0:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <_sbrk+0x50>)
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	466a      	mov	r2, sp
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d907      	bls.n	800c40e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c3fe:	f000 fdc7 	bl	800cf90 <__errno>
 800c402:	4602      	mov	r2, r0
 800c404:	230c      	movs	r3, #12
 800c406:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c408:	f04f 33ff 	mov.w	r3, #4294967295
 800c40c:	e006      	b.n	800c41c <_sbrk+0x48>
	}

	heap_end += incr;
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <_sbrk+0x50>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4413      	add	r3, r2
 800c416:	4a03      	ldr	r2, [pc, #12]	; (800c424 <_sbrk+0x50>)
 800c418:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c41a:	68fb      	ldr	r3, [r7, #12]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	2000064c 	.word	0x2000064c
 800c428:	20032478 	.word	0x20032478

0800c42c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c42c:	b480      	push	{r7}
 800c42e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c430:	4b16      	ldr	r3, [pc, #88]	; (800c48c <SystemInit+0x60>)
 800c432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c436:	4a15      	ldr	r2, [pc, #84]	; (800c48c <SystemInit+0x60>)
 800c438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c43c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c440:	4b13      	ldr	r3, [pc, #76]	; (800c490 <SystemInit+0x64>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a12      	ldr	r2, [pc, #72]	; (800c490 <SystemInit+0x64>)
 800c446:	f043 0301 	orr.w	r3, r3, #1
 800c44a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c44c:	4b10      	ldr	r3, [pc, #64]	; (800c490 <SystemInit+0x64>)
 800c44e:	2200      	movs	r2, #0
 800c450:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c452:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <SystemInit+0x64>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a0e      	ldr	r2, [pc, #56]	; (800c490 <SystemInit+0x64>)
 800c458:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c45c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c460:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c462:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <SystemInit+0x64>)
 800c464:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <SystemInit+0x68>)
 800c466:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c468:	4b09      	ldr	r3, [pc, #36]	; (800c490 <SystemInit+0x64>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a08      	ldr	r2, [pc, #32]	; (800c490 <SystemInit+0x64>)
 800c46e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c474:	4b06      	ldr	r3, [pc, #24]	; (800c490 <SystemInit+0x64>)
 800c476:	2200      	movs	r2, #0
 800c478:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c47a:	4b04      	ldr	r3, [pc, #16]	; (800c48c <SystemInit+0x60>)
 800c47c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c480:	609a      	str	r2, [r3, #8]
#endif
}
 800c482:	bf00      	nop
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	e000ed00 	.word	0xe000ed00
 800c490:	40023800 	.word	0x40023800
 800c494:	24003010 	.word	0x24003010

0800c498 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	; 0x28
 800c49c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c49e:	f107 0320 	add.w	r3, r7, #32
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c4a8:	1d3b      	adds	r3, r7, #4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	605a      	str	r2, [r3, #4]
 800c4b0:	609a      	str	r2, [r3, #8]
 800c4b2:	60da      	str	r2, [r3, #12]
 800c4b4:	611a      	str	r2, [r3, #16]
 800c4b6:	615a      	str	r2, [r3, #20]
 800c4b8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800c4ba:	4b28      	ldr	r3, [pc, #160]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c4c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800c4c2:	4b26      	ldr	r3, [pc, #152]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4c8:	4b24      	ldr	r3, [pc, #144]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 800c4ce:	4b23      	ldr	r3, [pc, #140]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4d0:	f240 321f 	movw	r2, #799	; 0x31f
 800c4d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c4d6:	4b21      	ldr	r3, [pc, #132]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c4dc:	4b1f      	ldr	r3, [pc, #124]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4de:	2280      	movs	r2, #128	; 0x80
 800c4e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c4e2:	481e      	ldr	r0, [pc, #120]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c4e4:	f7f7 fa0d 	bl	8003902 <HAL_TIM_PWM_Init>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800c4ee:	f7fc fc57 	bl	8008da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c4fa:	f107 0320 	add.w	r3, r7, #32
 800c4fe:	4619      	mov	r1, r3
 800c500:	4816      	ldr	r0, [pc, #88]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c502:	f7f7 ff34 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800c50c:	f7fc fc48 	bl	8008da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c510:	2360      	movs	r3, #96	; 0x60
 800c512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10-1;
 800c514:	2309      	movs	r3, #9
 800c516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c518:	2300      	movs	r3, #0
 800c51a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c520:	1d3b      	adds	r3, r7, #4
 800c522:	2200      	movs	r2, #0
 800c524:	4619      	mov	r1, r3
 800c526:	480d      	ldr	r0, [pc, #52]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c528:	f7f7 fbb4 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800c532:	f7fc fc35 	bl	8008da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c536:	1d3b      	adds	r3, r7, #4
 800c538:	2204      	movs	r2, #4
 800c53a:	4619      	mov	r1, r3
 800c53c:	4807      	ldr	r0, [pc, #28]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c53e:	f7f7 fba9 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d001      	beq.n	800c54c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800c548:	f7fc fc2a 	bl	8008da0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800c54c:	4803      	ldr	r0, [pc, #12]	; (800c55c <MX_TIM2_Init+0xc4>)
 800c54e:	f000 f8f5 	bl	800c73c <HAL_TIM_MspPostInit>

}
 800c552:	bf00      	nop
 800c554:	3728      	adds	r7, #40	; 0x28
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	2000097c 	.word	0x2000097c

0800c560 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c566:	f107 0320 	add.w	r3, r7, #32
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c570:	1d3b      	adds	r3, r7, #4
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	609a      	str	r2, [r3, #8]
 800c57a:	60da      	str	r2, [r3, #12]
 800c57c:	611a      	str	r2, [r3, #16]
 800c57e:	615a      	str	r2, [r3, #20]
 800c580:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800c582:	4b22      	ldr	r3, [pc, #136]	; (800c60c <MX_TIM3_Init+0xac>)
 800c584:	4a22      	ldr	r2, [pc, #136]	; (800c610 <MX_TIM3_Init+0xb0>)
 800c586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800c588:	4b20      	ldr	r3, [pc, #128]	; (800c60c <MX_TIM3_Init+0xac>)
 800c58a:	2263      	movs	r2, #99	; 0x63
 800c58c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c58e:	4b1f      	ldr	r3, [pc, #124]	; (800c60c <MX_TIM3_Init+0xac>)
 800c590:	2200      	movs	r2, #0
 800c592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3822-1;
 800c594:	4b1d      	ldr	r3, [pc, #116]	; (800c60c <MX_TIM3_Init+0xac>)
 800c596:	f640 62ed 	movw	r2, #3821	; 0xeed
 800c59a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c59c:	4b1b      	ldr	r3, [pc, #108]	; (800c60c <MX_TIM3_Init+0xac>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c5a2:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <MX_TIM3_Init+0xac>)
 800c5a4:	2280      	movs	r2, #128	; 0x80
 800c5a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c5a8:	4818      	ldr	r0, [pc, #96]	; (800c60c <MX_TIM3_Init+0xac>)
 800c5aa:	f7f7 f9aa 	bl	8003902 <HAL_TIM_PWM_Init>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800c5b4:	f7fc fbf4 	bl	8008da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c5c0:	f107 0320 	add.w	r3, r7, #32
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4811      	ldr	r0, [pc, #68]	; (800c60c <MX_TIM3_Init+0xac>)
 800c5c8:	f7f7 fed1 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800c5d2:	f7fc fbe5 	bl	8008da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c5d6:	2360      	movs	r3, #96	; 0x60
 800c5d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1600;
 800c5da:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c5de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c5e8:	1d3b      	adds	r3, r7, #4
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4807      	ldr	r0, [pc, #28]	; (800c60c <MX_TIM3_Init+0xac>)
 800c5f0:	f7f7 fb50 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800c5fa:	f7fc fbd1 	bl	8008da0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800c5fe:	4803      	ldr	r0, [pc, #12]	; (800c60c <MX_TIM3_Init+0xac>)
 800c600:	f000 f89c 	bl	800c73c <HAL_TIM_MspPostInit>

}
 800c604:	bf00      	nop
 800c606:	3728      	adds	r7, #40	; 0x28
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	200008fc 	.word	0x200008fc
 800c610:	40000400 	.word	0x40000400

0800c614 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c61a:	463b      	mov	r3, r7
 800c61c:	2200      	movs	r2, #0
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800c622:	4b15      	ldr	r3, [pc, #84]	; (800c678 <MX_TIM6_Init+0x64>)
 800c624:	4a15      	ldr	r2, [pc, #84]	; (800c67c <MX_TIM6_Init+0x68>)
 800c626:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <MX_TIM6_Init+0x64>)
 800c62a:	2263      	movs	r2, #99	; 0x63
 800c62c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c62e:	4b12      	ldr	r3, [pc, #72]	; (800c678 <MX_TIM6_Init+0x64>)
 800c630:	2200      	movs	r2, #0
 800c632:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800c634:	4b10      	ldr	r3, [pc, #64]	; (800c678 <MX_TIM6_Init+0x64>)
 800c636:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c63a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <MX_TIM6_Init+0x64>)
 800c63e:	2280      	movs	r2, #128	; 0x80
 800c640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c642:	480d      	ldr	r0, [pc, #52]	; (800c678 <MX_TIM6_Init+0x64>)
 800c644:	f7f7 f90e 	bl	8003864 <HAL_TIM_Base_Init>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800c64e:	f7fc fba7 	bl	8008da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c652:	2300      	movs	r3, #0
 800c654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c656:	2300      	movs	r3, #0
 800c658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c65a:	463b      	mov	r3, r7
 800c65c:	4619      	mov	r1, r3
 800c65e:	4806      	ldr	r0, [pc, #24]	; (800c678 <MX_TIM6_Init+0x64>)
 800c660:	f7f7 fe85 	bl	800436e <HAL_TIMEx_MasterConfigSynchronization>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800c66a:	f7fc fb99 	bl	8008da0 <Error_Handler>
  }

}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	2000093c 	.word	0x2000093c
 800c67c:	40001000 	.word	0x40001000

0800c680 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c690:	d10e      	bne.n	800c6b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69a:	4a12      	ldr	r2, [pc, #72]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c69c:	f043 0301 	orr.w	r3, r3, #1
 800c6a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c6a2:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c6ae:	e012      	b.n	800c6d6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <HAL_TIM_PWM_MspInit+0x68>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d10d      	bne.n	800c6d6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	4a08      	ldr	r2, [pc, #32]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c6c4:	f043 0302 	orr.w	r3, r3, #2
 800c6c8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <HAL_TIM_PWM_MspInit+0x64>)
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	60bb      	str	r3, [r7, #8]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
}
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	40023800 	.word	0x40023800
 800c6e8:	40000400 	.word	0x40000400

0800c6ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a0e      	ldr	r2, [pc, #56]	; (800c734 <HAL_TIM_Base_MspInit+0x48>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d115      	bne.n	800c72a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	4b0d      	ldr	r3, [pc, #52]	; (800c738 <HAL_TIM_Base_MspInit+0x4c>)
 800c704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c706:	4a0c      	ldr	r2, [pc, #48]	; (800c738 <HAL_TIM_Base_MspInit+0x4c>)
 800c708:	f043 0310 	orr.w	r3, r3, #16
 800c70c:	6413      	str	r3, [r2, #64]	; 0x40
 800c70e:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <HAL_TIM_Base_MspInit+0x4c>)
 800c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c712:	f003 0310 	and.w	r3, r3, #16
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800c71a:	2200      	movs	r2, #0
 800c71c:	2100      	movs	r1, #0
 800c71e:	2036      	movs	r0, #54	; 0x36
 800c720:	f7f5 f985 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c724:	2036      	movs	r0, #54	; 0x36
 800c726:	f7f5 f99e 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800c72a:	bf00      	nop
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	40001000 	.word	0x40001000
 800c738:	40023800 	.word	0x40023800

0800c73c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	; 0x28
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	609a      	str	r2, [r3, #8]
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c75c:	d13d      	bne.n	800c7da <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c75e:	2300      	movs	r3, #0
 800c760:	613b      	str	r3, [r7, #16]
 800c762:	4b31      	ldr	r3, [pc, #196]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	4a30      	ldr	r2, [pc, #192]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	6313      	str	r3, [r2, #48]	; 0x30
 800c76e:	4b2e      	ldr	r3, [pc, #184]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	613b      	str	r3, [r7, #16]
 800c778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c782:	4a29      	ldr	r2, [pc, #164]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c784:	f043 0302 	orr.w	r3, r3, #2
 800c788:	6313      	str	r3, [r2, #48]	; 0x30
 800c78a:	4b27      	ldr	r3, [pc, #156]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 800c796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c79a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c79c:	2302      	movs	r3, #2
 800c79e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 800c7ac:	f107 0314 	add.w	r3, r7, #20
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	481e      	ldr	r0, [pc, #120]	; (800c82c <HAL_TIM_MspPostInit+0xf0>)
 800c7b4:	f7f5 ffcc 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7bc:	2302      	movs	r3, #2
 800c7be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 800c7cc:	f107 0314 	add.w	r3, r7, #20
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4817      	ldr	r0, [pc, #92]	; (800c830 <HAL_TIM_MspPostInit+0xf4>)
 800c7d4:	f7f5 ffbc 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c7d8:	e022      	b.n	800c820 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a15      	ldr	r2, [pc, #84]	; (800c834 <HAL_TIM_MspPostInit+0xf8>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d11d      	bne.n	800c820 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	60bb      	str	r3, [r7, #8]
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ec:	4a0e      	ldr	r2, [pc, #56]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c7ee:	f043 0301 	orr.w	r3, r3, #1
 800c7f2:	6313      	str	r3, [r2, #48]	; 0x30
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <HAL_TIM_MspPostInit+0xec>)
 800c7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 800c800:	2380      	movs	r3, #128	; 0x80
 800c802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c804:	2302      	movs	r3, #2
 800c806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c808:	2300      	movs	r3, #0
 800c80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c80c:	2300      	movs	r3, #0
 800c80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c810:	2302      	movs	r3, #2
 800c812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 800c814:	f107 0314 	add.w	r3, r7, #20
 800c818:	4619      	mov	r1, r3
 800c81a:	4804      	ldr	r0, [pc, #16]	; (800c82c <HAL_TIM_MspPostInit+0xf0>)
 800c81c:	f7f5 ff98 	bl	8002750 <HAL_GPIO_Init>
}
 800c820:	bf00      	nop
 800c822:	3728      	adds	r7, #40	; 0x28
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	40023800 	.word	0x40023800
 800c82c:	40020000 	.word	0x40020000
 800c830:	40020400 	.word	0x40020400
 800c834:	40000400 	.word	0x40000400

0800c838 <add_West_wall>:
#include "stdio.h"
#include "variable.h"
#include "walldata.h"
#include "main.h"

void add_West_wall(singlewalldata_t *walldate) {
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c840:	2301      	movs	r3, #1
 800c842:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800c844:	89fb      	ldrh	r3, [r7, #14]
 800c846:	4a0f      	ldr	r2, [pc, #60]	; (800c884 <add_West_wall+0x4c>)
 800c848:	7812      	ldrb	r2, [r2, #0]
 800c84a:	4093      	lsls	r3, r2
 800c84c:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now] |= new;
 800c84e:	4b0e      	ldr	r3, [pc, #56]	; (800c888 <add_West_wall+0x50>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	3310      	adds	r3, #16
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	4413      	add	r3, r2
 800c85a:	885a      	ldrh	r2, [r3, #2]
 800c85c:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <add_West_wall+0x50>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	4618      	mov	r0, r3
 800c862:	89fb      	ldrh	r3, [r7, #14]
 800c864:	4313      	orrs	r3, r2
 800c866:	b299      	uxth	r1, r3
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	f100 0310 	add.w	r3, r0, #16
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	4413      	add	r3, r2
 800c872:	460a      	mov	r2, r1
 800c874:	805a      	strh	r2, [r3, #2]
}
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20019858 	.word	0x20019858
 800c888:	20000b88 	.word	0x20000b88

0800c88c <add_South_wall>:

void add_South_wall(singlewalldata_t *walldate) {
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c894:	2301      	movs	r3, #1
 800c896:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800c898:	89fb      	ldrh	r3, [r7, #14]
 800c89a:	4a0c      	ldr	r2, [pc, #48]	; (800c8cc <add_South_wall+0x40>)
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	4093      	lsls	r3, r2
 800c8a0:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now] |= new;
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <add_South_wall+0x44>)
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c8ae:	4b08      	ldr	r3, [pc, #32]	; (800c8d0 <add_South_wall+0x44>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800c8c0:	bf00      	nop
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000b88 	.word	0x20000b88
 800c8d0:	20019858 	.word	0x20019858

0800c8d4 <add_East_wall>:

void add_East_wall(singlewalldata_t *walldate) {
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800c8e0:	89fb      	ldrh	r3, [r7, #14]
 800c8e2:	4a0f      	ldr	r2, [pc, #60]	; (800c920 <add_East_wall+0x4c>)
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	4093      	lsls	r3, r2
 800c8e8:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now + 1] |= new;
 800c8ea:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <add_East_wall+0x50>)
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	3310      	adds	r3, #16
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	4413      	add	r3, r2
 800c8f8:	8859      	ldrh	r1, [r3, #2]
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <add_East_wall+0x50>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	3301      	adds	r3, #1
 800c900:	89fa      	ldrh	r2, [r7, #14]
 800c902:	430a      	orrs	r2, r1
 800c904:	b291      	uxth	r1, r2
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	3310      	adds	r3, #16
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	4413      	add	r3, r2
 800c90e:	460a      	mov	r2, r1
 800c910:	805a      	strh	r2, [r3, #2]
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20019858 	.word	0x20019858
 800c924:	20000b88 	.word	0x20000b88

0800c928 <add_North_wall>:

void add_North_wall(singlewalldata_t *walldate) {
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c930:	2301      	movs	r3, #1
 800c932:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800c934:	89fb      	ldrh	r3, [r7, #14]
 800c936:	4a0c      	ldr	r2, [pc, #48]	; (800c968 <add_North_wall+0x40>)
 800c938:	7812      	ldrb	r2, [r2, #0]
 800c93a:	4093      	lsls	r3, r2
 800c93c:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now + 1] |= new;
 800c93e:	4b0b      	ldr	r3, [pc, #44]	; (800c96c <add_North_wall+0x44>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800c94a:	4b08      	ldr	r3, [pc, #32]	; (800c96c <add_North_wall+0x44>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	89fb      	ldrh	r3, [r7, #14]
 800c952:	430b      	orrs	r3, r1
 800c954:	b299      	uxth	r1, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800c95c:	bf00      	nop
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	20000b88 	.word	0x20000b88
 800c96c:	20019858 	.word	0x20019858

0800c970 <pull_West_wall>:

void pull_West_wall(singlewalldata_t *walldate) {
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c978:	2301      	movs	r3, #1
 800c97a:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800c97c:	89fb      	ldrh	r3, [r7, #14]
 800c97e:	4a10      	ldr	r2, [pc, #64]	; (800c9c0 <pull_West_wall+0x50>)
 800c980:	7812      	ldrb	r2, [r2, #0]
 800c982:	4093      	lsls	r3, r2
 800c984:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now] &= ~new;
 800c986:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <pull_West_wall+0x54>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	3310      	adds	r3, #16
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	885b      	ldrh	r3, [r3, #2]
 800c994:	b21a      	sxth	r2, r3
 800c996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c99a:	43db      	mvns	r3, r3
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	4013      	ands	r3, r2
 800c9a0:	b21a      	sxth	r2, r3
 800c9a2:	4b08      	ldr	r3, [pc, #32]	; (800c9c4 <pull_West_wall+0x54>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b291      	uxth	r1, r2
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	3310      	adds	r3, #16
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	805a      	strh	r2, [r3, #2]
}
 800c9b4:	bf00      	nop
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	20019858 	.word	0x20019858
 800c9c4:	20000b88 	.word	0x20000b88

0800c9c8 <pull_South_wall>:

void pull_South_wall(singlewalldata_t *walldate) {
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800c9d4:	89fb      	ldrh	r3, [r7, #14]
 800c9d6:	4a0f      	ldr	r2, [pc, #60]	; (800ca14 <pull_South_wall+0x4c>)
 800c9d8:	7812      	ldrb	r2, [r2, #0]
 800c9da:	4093      	lsls	r3, r2
 800c9dc:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now] &= ~new;
 800c9de:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <pull_South_wall+0x50>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c9ea:	b21a      	sxth	r2, r3
 800c9ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c9f0:	43db      	mvns	r3, r3
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	b219      	sxth	r1, r3
 800c9f8:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <pull_South_wall+0x50>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	b289      	uxth	r1, r1
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	20000b88 	.word	0x20000b88
 800ca18:	20019858 	.word	0x20019858

0800ca1c <pull_East_wall>:

void pull_East_wall(singlewalldata_t *walldate) {
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800ca24:	2301      	movs	r3, #1
 800ca26:	81fb      	strh	r3, [r7, #14]
	new <<= y.now;
 800ca28:	89fb      	ldrh	r3, [r7, #14]
 800ca2a:	4a11      	ldr	r2, [pc, #68]	; (800ca70 <pull_East_wall+0x54>)
 800ca2c:	7812      	ldrb	r2, [r2, #0]
 800ca2e:	4093      	lsls	r3, r2
 800ca30:	81fb      	strh	r3, [r7, #14]
	walldate->column[x.now + 1] &= ~new;
 800ca32:	4b10      	ldr	r3, [pc, #64]	; (800ca74 <pull_East_wall+0x58>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	3310      	adds	r3, #16
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	885b      	ldrh	r3, [r3, #2]
 800ca42:	b21a      	sxth	r2, r3
 800ca44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ca48:	43db      	mvns	r3, r3
 800ca4a:	b21b      	sxth	r3, r3
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	b21a      	sxth	r2, r3
 800ca50:	4b08      	ldr	r3, [pc, #32]	; (800ca74 <pull_East_wall+0x58>)
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	b291      	uxth	r1, r2
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	3310      	adds	r3, #16
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	460a      	mov	r2, r1
 800ca62:	805a      	strh	r2, [r3, #2]
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	20019858 	.word	0x20019858
 800ca74:	20000b88 	.word	0x20000b88

0800ca78 <pull_North_wall>:

void pull_North_wall(singlewalldata_t *walldate) {
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	uint16_t new;
	new = 1;
 800ca80:	2301      	movs	r3, #1
 800ca82:	81fb      	strh	r3, [r7, #14]
	new <<= x.now;
 800ca84:	89fb      	ldrh	r3, [r7, #14]
 800ca86:	4a0f      	ldr	r2, [pc, #60]	; (800cac4 <pull_North_wall+0x4c>)
 800ca88:	7812      	ldrb	r2, [r2, #0]
 800ca8a:	4093      	lsls	r3, r2
 800ca8c:	81fb      	strh	r3, [r7, #14]
	walldate->row[y.now + 1] &= ~new;
 800ca8e:	4b0e      	ldr	r3, [pc, #56]	; (800cac8 <pull_North_wall+0x50>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ca9a:	b21a      	sxth	r2, r3
 800ca9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800caa0:	43db      	mvns	r3, r3
 800caa2:	b21b      	sxth	r3, r3
 800caa4:	4013      	ands	r3, r2
 800caa6:	b219      	sxth	r1, r3
 800caa8:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <pull_North_wall+0x50>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	b289      	uxth	r1, r1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20000b88 	.word	0x20000b88
 800cac8:	20019858 	.word	0x20019858

0800cacc <add_walldata_one>:

void add_walldata_one(uint8_t dire, singlewalldata_t* walldata) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
	dire = dire % 4;
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	f003 0303 	and.w	r3, r3, #3
 800cade:	71fb      	strb	r3, [r7, #7]
	if (dire == North) {
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <add_walldata_one+0x22>
		add_North_wall(walldata);
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	f7ff ff1e 	bl	800c928 <add_North_wall>
	} else if (dire == South) {
		add_South_wall(walldata);
	} else if (dire == East) {
		add_East_wall(walldata);
	}
}
 800caec:	e013      	b.n	800cb16 <add_walldata_one+0x4a>
	} else if (dire == West) {
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d103      	bne.n	800cafc <add_walldata_one+0x30>
		add_West_wall(walldata);
 800caf4:	6838      	ldr	r0, [r7, #0]
 800caf6:	f7ff fe9f 	bl	800c838 <add_West_wall>
}
 800cafa:	e00c      	b.n	800cb16 <add_walldata_one+0x4a>
	} else if (dire == South) {
 800cafc:	79fb      	ldrb	r3, [r7, #7]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d103      	bne.n	800cb0a <add_walldata_one+0x3e>
		add_South_wall(walldata);
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f7ff fec2 	bl	800c88c <add_South_wall>
}
 800cb08:	e005      	b.n	800cb16 <add_walldata_one+0x4a>
	} else if (dire == East) {
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d102      	bne.n	800cb16 <add_walldata_one+0x4a>
		add_East_wall(walldata);
 800cb10:	6838      	ldr	r0, [r7, #0]
 800cb12:	f7ff fedf 	bl	800c8d4 <add_East_wall>
}
 800cb16:	bf00      	nop
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <pull_walldata_one>:

void pull_walldata_one(uint8_t dire, singlewalldata_t* walldata) {
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	4603      	mov	r3, r0
 800cb26:	6039      	str	r1, [r7, #0]
 800cb28:	71fb      	strb	r3, [r7, #7]
	dire = dire % 4;
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	71fb      	strb	r3, [r7, #7]
	if (dire == North) {
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d103      	bne.n	800cb40 <pull_walldata_one+0x22>
		pull_North_wall(walldata);
 800cb38:	6838      	ldr	r0, [r7, #0]
 800cb3a:	f7ff ff9d 	bl	800ca78 <pull_North_wall>
	} else if (dire == South) {
		pull_South_wall(walldata);
	} else if (dire == East) {
		pull_East_wall(walldata);
	}
}
 800cb3e:	e013      	b.n	800cb68 <pull_walldata_one+0x4a>
	} else if (dire == West) {
 800cb40:	79fb      	ldrb	r3, [r7, #7]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d103      	bne.n	800cb4e <pull_walldata_one+0x30>
		pull_West_wall(walldata);
 800cb46:	6838      	ldr	r0, [r7, #0]
 800cb48:	f7ff ff12 	bl	800c970 <pull_West_wall>
}
 800cb4c:	e00c      	b.n	800cb68 <pull_walldata_one+0x4a>
	} else if (dire == South) {
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d103      	bne.n	800cb5c <pull_walldata_one+0x3e>
		pull_South_wall(walldata);
 800cb54:	6838      	ldr	r0, [r7, #0]
 800cb56:	f7ff ff37 	bl	800c9c8 <pull_South_wall>
}
 800cb5a:	e005      	b.n	800cb68 <pull_walldata_one+0x4a>
	} else if (dire == East) {
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d102      	bne.n	800cb68 <pull_walldata_one+0x4a>
		pull_East_wall(walldata);
 800cb62:	6838      	ldr	r0, [r7, #0]
 800cb64:	f7ff ff5a 	bl	800ca1c <pull_East_wall>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <addWall>:

void addWall(void) {
 800cb70:	b5b0      	push	{r4, r5, r7, lr}
 800cb72:	af00      	add	r7, sp, #0
//	uint16_t new;
	if (add_wall_flag == 1) {
 800cb74:	4b72      	ldr	r3, [pc, #456]	; (800cd40 <addWall+0x1d0>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f040 80df 	bne.w	800cd3c <addWall+0x1cc>
		if (direction == North) {
 800cb7e:	4b71      	ldr	r3, [pc, #452]	; (800cd44 <addWall+0x1d4>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <addWall+0x2a>
			add_West_wall(&walldata.checked);
 800cb86:	4870      	ldr	r0, [pc, #448]	; (800cd48 <addWall+0x1d8>)
 800cb88:	f7ff fe56 	bl	800c838 <add_West_wall>
			add_East_wall(&walldata.checked);
 800cb8c:	486e      	ldr	r0, [pc, #440]	; (800cd48 <addWall+0x1d8>)
 800cb8e:	f7ff fea1 	bl	800c8d4 <add_East_wall>
			add_North_wall(&walldata.checked);
 800cb92:	486d      	ldr	r0, [pc, #436]	; (800cd48 <addWall+0x1d8>)
 800cb94:	f7ff fec8 	bl	800c928 <add_North_wall>
 800cb98:	e028      	b.n	800cbec <addWall+0x7c>
		} else if (direction == West) {
 800cb9a:	4b6a      	ldr	r3, [pc, #424]	; (800cd44 <addWall+0x1d4>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d109      	bne.n	800cbb6 <addWall+0x46>
			add_West_wall(&walldata.checked);
 800cba2:	4869      	ldr	r0, [pc, #420]	; (800cd48 <addWall+0x1d8>)
 800cba4:	f7ff fe48 	bl	800c838 <add_West_wall>
			add_South_wall(&walldata.checked);
 800cba8:	4867      	ldr	r0, [pc, #412]	; (800cd48 <addWall+0x1d8>)
 800cbaa:	f7ff fe6f 	bl	800c88c <add_South_wall>
			add_North_wall(&walldata.checked);
 800cbae:	4866      	ldr	r0, [pc, #408]	; (800cd48 <addWall+0x1d8>)
 800cbb0:	f7ff feba 	bl	800c928 <add_North_wall>
 800cbb4:	e01a      	b.n	800cbec <addWall+0x7c>
		} else if (direction == South) {
 800cbb6:	4b63      	ldr	r3, [pc, #396]	; (800cd44 <addWall+0x1d4>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d109      	bne.n	800cbd2 <addWall+0x62>
			add_West_wall(&walldata.checked);
 800cbbe:	4862      	ldr	r0, [pc, #392]	; (800cd48 <addWall+0x1d8>)
 800cbc0:	f7ff fe3a 	bl	800c838 <add_West_wall>
			add_South_wall(&walldata.checked);
 800cbc4:	4860      	ldr	r0, [pc, #384]	; (800cd48 <addWall+0x1d8>)
 800cbc6:	f7ff fe61 	bl	800c88c <add_South_wall>
			add_East_wall(&walldata.checked);
 800cbca:	485f      	ldr	r0, [pc, #380]	; (800cd48 <addWall+0x1d8>)
 800cbcc:	f7ff fe82 	bl	800c8d4 <add_East_wall>
 800cbd0:	e00c      	b.n	800cbec <addWall+0x7c>
		} else if (direction == East) {
 800cbd2:	4b5c      	ldr	r3, [pc, #368]	; (800cd44 <addWall+0x1d4>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d108      	bne.n	800cbec <addWall+0x7c>
			add_North_wall(&walldata.checked);
 800cbda:	485b      	ldr	r0, [pc, #364]	; (800cd48 <addWall+0x1d8>)
 800cbdc:	f7ff fea4 	bl	800c928 <add_North_wall>
			add_South_wall(&walldata.checked);
 800cbe0:	4859      	ldr	r0, [pc, #356]	; (800cd48 <addWall+0x1d8>)
 800cbe2:	f7ff fe53 	bl	800c88c <add_South_wall>
			add_East_wall(&walldata.checked);
 800cbe6:	4858      	ldr	r0, [pc, #352]	; (800cd48 <addWall+0x1d8>)
 800cbe8:	f7ff fe74 	bl	800c8d4 <add_East_wall>
		}

		kushi_control_flag = 1;
 800cbec:	4b57      	ldr	r3, [pc, #348]	; (800cd4c <addWall+0x1dc>)
 800cbee:	2201      	movs	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
		if ((SEN_F.now > SEN_F.threshold)
 800cbf2:	4b57      	ldr	r3, [pc, #348]	; (800cd50 <addWall+0x1e0>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b56      	ldr	r3, [pc, #344]	; (800cd50 <addWall+0x1e0>)
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	dd3d      	ble.n	800cc7a <addWall+0x10a>
				&& (SEN_RF.now > (int) SEN_RF.reference * 0.5)
 800cbfe:	4b55      	ldr	r3, [pc, #340]	; (800cd54 <addWall+0x1e4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f3 fcb6 	bl	8000574 <__aeabi_i2d>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	4b51      	ldr	r3, [pc, #324]	; (800cd54 <addWall+0x1e4>)
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f3 fcaf 	bl	8000574 <__aeabi_i2d>
 800cc16:	f04f 0200 	mov.w	r2, #0
 800cc1a:	4b4f      	ldr	r3, [pc, #316]	; (800cd58 <addWall+0x1e8>)
 800cc1c:	f7f3 fd14 	bl	8000648 <__aeabi_dmul>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4620      	mov	r0, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	f7f3 ff9e 	bl	8000b68 <__aeabi_dcmpgt>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d023      	beq.n	800cc7a <addWall+0x10a>
				&& (SEN_LF.now > (int) SEN_LF.reference * 0.5)) {
 800cc32:	4b4a      	ldr	r3, [pc, #296]	; (800cd5c <addWall+0x1ec>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f3 fc9c 	bl	8000574 <__aeabi_i2d>
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	460d      	mov	r5, r1
 800cc40:	4b46      	ldr	r3, [pc, #280]	; (800cd5c <addWall+0x1ec>)
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f3 fc95 	bl	8000574 <__aeabi_i2d>
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	4b42      	ldr	r3, [pc, #264]	; (800cd58 <addWall+0x1e8>)
 800cc50:	f7f3 fcfa 	bl	8000648 <__aeabi_dmul>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 ff84 	bl	8000b68 <__aeabi_dcmpgt>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d009      	beq.n	800cc7a <addWall+0x10a>
			add_walldata_one(direction, &walldata.real);
 800cc66:	4b37      	ldr	r3, [pc, #220]	; (800cd44 <addWall+0x1d4>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	493d      	ldr	r1, [pc, #244]	; (800cd60 <addWall+0x1f0>)
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff ff2d 	bl	800cacc <add_walldata_one>
			kushi_control_flag = 0;
 800cc72:	4b36      	ldr	r3, [pc, #216]	; (800cd4c <addWall+0x1dc>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	e014      	b.n	800cca4 <addWall+0x134>
		} else if (getWall(x.now, y.now, direction, &walldata.real) == 0) {
 800cc7a:	4b3a      	ldr	r3, [pc, #232]	; (800cd64 <addWall+0x1f4>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	4b39      	ldr	r3, [pc, #228]	; (800cd68 <addWall+0x1f8>)
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	4619      	mov	r1, r3
 800cc86:	4b2f      	ldr	r3, [pc, #188]	; (800cd44 <addWall+0x1d4>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4b34      	ldr	r3, [pc, #208]	; (800cd60 <addWall+0x1f0>)
 800cc8e:	f000 f8df 	bl	800ce50 <getWall>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d105      	bne.n	800cca4 <addWall+0x134>
			pull_walldata_one(direction, &walldata.adachi);
 800cc98:	4b2a      	ldr	r3, [pc, #168]	; (800cd44 <addWall+0x1d4>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	4933      	ldr	r1, [pc, #204]	; (800cd6c <addWall+0x1fc>)
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff ff3d 	bl	800cb1e <pull_walldata_one>
		}

		if (SEN_R.now > SEN_R.threshold) {
 800cca4:	4b32      	ldr	r3, [pc, #200]	; (800cd70 <addWall+0x200>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	4b31      	ldr	r3, [pc, #196]	; (800cd70 <addWall+0x200>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	dd08      	ble.n	800ccc2 <addWall+0x152>
			add_walldata_one(direction + 3, &walldata.real);
 800ccb0:	4b24      	ldr	r3, [pc, #144]	; (800cd44 <addWall+0x1d4>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	3303      	adds	r3, #3
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	4929      	ldr	r1, [pc, #164]	; (800cd60 <addWall+0x1f0>)
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff ff06 	bl	800cacc <add_walldata_one>
 800ccc0:	e016      	b.n	800ccf0 <addWall+0x180>
//			kushi_control_flag = 0;
		} else if (getWall(x.now, y.now, direction + 3, &walldata.real) == 0) {
 800ccc2:	4b28      	ldr	r3, [pc, #160]	; (800cd64 <addWall+0x1f4>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	4b27      	ldr	r3, [pc, #156]	; (800cd68 <addWall+0x1f8>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	4619      	mov	r1, r3
 800ccce:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <addWall+0x1d4>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	1cda      	adds	r2, r3, #3
 800ccd4:	4b22      	ldr	r3, [pc, #136]	; (800cd60 <addWall+0x1f0>)
 800ccd6:	f000 f8bb 	bl	800ce50 <getWall>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d107      	bne.n	800ccf0 <addWall+0x180>
			pull_walldata_one(direction + 3, &walldata.adachi);
 800cce0:	4b18      	ldr	r3, [pc, #96]	; (800cd44 <addWall+0x1d4>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	3303      	adds	r3, #3
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	4920      	ldr	r1, [pc, #128]	; (800cd6c <addWall+0x1fc>)
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7ff ff17 	bl	800cb1e <pull_walldata_one>
		}

		if (SEN_L.now > SEN_L.threshold) {
 800ccf0:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <addWall+0x204>)
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	4b1f      	ldr	r3, [pc, #124]	; (800cd74 <addWall+0x204>)
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	dd08      	ble.n	800cd0e <addWall+0x19e>
			add_walldata_one(direction + 1, &walldata.real);
 800ccfc:	4b11      	ldr	r3, [pc, #68]	; (800cd44 <addWall+0x1d4>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	3301      	adds	r3, #1
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	4916      	ldr	r1, [pc, #88]	; (800cd60 <addWall+0x1f0>)
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fee0 	bl	800cacc <add_walldata_one>
		} else if (getWall(x.now, y.now, direction + 1, &walldata.real) == 0) {
			pull_walldata_one(direction + 1, &walldata.adachi);
		}

	}
}
 800cd0c:	e016      	b.n	800cd3c <addWall+0x1cc>
		} else if (getWall(x.now, y.now, direction + 1, &walldata.real) == 0) {
 800cd0e:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <addWall+0x1f4>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	4618      	mov	r0, r3
 800cd14:	4b14      	ldr	r3, [pc, #80]	; (800cd68 <addWall+0x1f8>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <addWall+0x1d4>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <addWall+0x1f0>)
 800cd22:	f000 f895 	bl	800ce50 <getWall>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d107      	bne.n	800cd3c <addWall+0x1cc>
			pull_walldata_one(direction + 1, &walldata.adachi);
 800cd2c:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <addWall+0x1d4>)
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	490d      	ldr	r1, [pc, #52]	; (800cd6c <addWall+0x1fc>)
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fef1 	bl	800cb1e <pull_walldata_one>
}
 800cd3c:	bf00      	nop
 800cd3e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd40:	2000000c 	.word	0x2000000c
 800cd44:	20000650 	.word	0x20000650
 800cd48:	20000a00 	.word	0x20000a00
 800cd4c:	200006cd 	.word	0x200006cd
 800cd50:	2003200c 	.word	0x2003200c
 800cd54:	200197fc 	.word	0x200197fc
 800cd58:	3fe00000 	.word	0x3fe00000
 800cd5c:	2003214c 	.word	0x2003214c
 800cd60:	200009bc 	.word	0x200009bc
 800cd64:	20000b88 	.word	0x20000b88
 800cd68:	20019858 	.word	0x20019858
 800cd6c:	20000a44 	.word	0x20000a44
 800cd70:	20019628 	.word	0x20019628
 800cd74:	20032270 	.word	0x20032270

0800cd78 <clear_Map>:

void clear_Map(singlewalldata_t *walldate) {
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 16; i++) {
 800cd80:	2300      	movs	r3, #0
 800cd82:	73fb      	strb	r3, [r7, #15]
 800cd84:	e00e      	b.n	800cda4 <clear_Map+0x2c>
		walldate->column[i] = 0;
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	3310      	adds	r3, #16
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	2200      	movs	r2, #0
 800cd92:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0;
 800cd94:	7bfa      	ldrb	r2, [r7, #15]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 16; i++) {
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	3301      	adds	r3, #1
 800cda2:	73fb      	strb	r3, [r7, #15]
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	2b0f      	cmp	r3, #15
 800cda8:	d9ed      	bls.n	800cd86 <clear_Map+0xe>
	}
	walldate->column[0] = 0xffff;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdb0:	845a      	strh	r2, [r3, #34]	; 0x22
	walldate->row[0] = 0xffff;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdb8:	801a      	strh	r2, [r3, #0]
	walldate->column[16] = 0xffff;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdc0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walldate->row[16] = 0xffff;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdca:	841a      	strh	r2, [r3, #32]
	walldate->column[1] = 0x0001;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <clear_adachiMap>:

void clear_adachiMap(singlewalldata_t *walldate) {
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 17; i++) {
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
 800cdea:	e014      	b.n	800ce16 <clear_adachiMap+0x38>
		walldate->column[i] = 0xffff;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	3310      	adds	r3, #16
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdfa:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0xffff;
 800cdfc:	7bfa      	ldrb	r2, [r7, #15]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		walldate->row[1] = 0xfffe;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ce0e:	805a      	strh	r2, [r3, #2]
	for (i = 0; i < 17; i++) {
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	3301      	adds	r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	2b10      	cmp	r3, #16
 800ce1a:	d9e7      	bls.n	800cdec <clear_adachiMap+0xe>
	}
}
 800ce1c:	bf00      	nop
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <init_walldata>:

void init_walldata(void) {
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
	clear_Map(&walldata.real);
 800ce2c:	4805      	ldr	r0, [pc, #20]	; (800ce44 <init_walldata+0x1c>)
 800ce2e:	f7ff ffa3 	bl	800cd78 <clear_Map>
	clear_Map(&walldata.checked);
 800ce32:	4805      	ldr	r0, [pc, #20]	; (800ce48 <init_walldata+0x20>)
 800ce34:	f7ff ffa0 	bl	800cd78 <clear_Map>
	clear_adachiMap(&walldata.adachi);
 800ce38:	4804      	ldr	r0, [pc, #16]	; (800ce4c <init_walldata+0x24>)
 800ce3a:	f7ff ffd0 	bl	800cdde <clear_adachiMap>
}
 800ce3e:	bf00      	nop
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200009bc 	.word	0x200009bc
 800ce48:	20000a00 	.word	0x20000a00
 800ce4c:	20000a44 	.word	0x20000a44

0800ce50 <getWall>:
	SEGGER_RTT_MODE_NO_BLOCK_SKIP);
	printf("\x1b[0m");
}
//
int getWall(int x_check, int y_check, int direction_check,
		singlewalldata_t *walldate) { //(見たい座標のx,y,とその座標からの方角１～４壁があれば１
 800ce50:	b480      	push	{r7}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
	int check_wall = 1;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]

	direction_check = direction_check % 4;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	425a      	negs	r2, r3
 800ce66:	f003 0303 	and.w	r3, r3, #3
 800ce6a:	f002 0203 	and.w	r2, r2, #3
 800ce6e:	bf58      	it	pl
 800ce70:	4253      	negpl	r3, r2
 800ce72:	607b      	str	r3, [r7, #4]

	if (direction_check == North) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d113      	bne.n	800cea2 <getWall+0x52>
		check_wall <<= x_check;
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce82:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->row[y_check + 1];
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4013      	ands	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d048      	beq.n	800cf2e <getWall+0xde>
			check_wall = 1;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	e045      	b.n	800cf2e <getWall+0xde>
		}
	} else if (direction_check == East) {
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d115      	bne.n	800ced4 <getWall+0x84>
		check_wall <<= y_check;
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->column[x_check + 1];
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	3310      	adds	r3, #16
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4413      	add	r3, r2
 800cebe:	885b      	ldrh	r3, [r3, #2]
 800cec0:	461a      	mov	r2, r3
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	4013      	ands	r3, r2
 800cec6:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d02f      	beq.n	800cf2e <getWall+0xde>
			check_wall = 1;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	e02c      	b.n	800cf2e <getWall+0xde>
		}
	} else if (direction_check == South) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d112      	bne.n	800cf00 <getWall+0xb0>
		check_wall <<= x_check;
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	fa02 f303 	lsl.w	r3, r2, r3
 800cee2:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->row[y_check];
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ceec:	461a      	mov	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	4013      	ands	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d019      	beq.n	800cf2e <getWall+0xde>
			check_wall = 1;
 800cefa:	2301      	movs	r3, #1
 800cefc:	617b      	str	r3, [r7, #20]
 800cefe:	e016      	b.n	800cf2e <getWall+0xde>
		}
	} else if (direction_check == West) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d113      	bne.n	800cf2e <getWall+0xde>
		check_wall <<= y_check;
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0e:	617b      	str	r3, [r7, #20]
		check_wall &= walldate->column[x_check];
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3310      	adds	r3, #16
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	885b      	ldrh	r3, [r3, #2]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	4013      	ands	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]
		if (check_wall != 0) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <getWall+0xde>
			check_wall = 1;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	617b      	str	r3, [r7, #20]
		}
	}
	return check_wall;
 800cf2e:	697b      	ldr	r3, [r7, #20]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800cf3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cf74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800cf40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cf42:	e003      	b.n	800cf4c <LoopCopyDataInit>

0800cf44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cf44:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cf46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cf48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cf4a:	3104      	adds	r1, #4

0800cf4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cf4c:	480b      	ldr	r0, [pc, #44]	; (800cf7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cf50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cf52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cf54:	d3f6      	bcc.n	800cf44 <CopyDataInit>
  ldr  r2, =_sbss
 800cf56:	4a0b      	ldr	r2, [pc, #44]	; (800cf84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cf58:	e002      	b.n	800cf60 <LoopFillZerobss>

0800cf5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800cf5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cf5c:	f842 3b04 	str.w	r3, [r2], #4

0800cf60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cf60:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cf62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cf64:	d3f9      	bcc.n	800cf5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cf66:	f7ff fa61 	bl	800c42c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf6a:	f000 f817 	bl	800cf9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cf6e:	f7fb fcab 	bl	80088c8 <main>
  bx  lr    
 800cf72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800cf74:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800cf78:	0800fb70 	.word	0x0800fb70
  ldr  r0, =_sdata
 800cf7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cf80:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 800cf84:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 800cf88:	20032474 	.word	0x20032474

0800cf8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cf8c:	e7fe      	b.n	800cf8c <ADC_IRQHandler>
	...

0800cf90 <__errno>:
 800cf90:	4b01      	ldr	r3, [pc, #4]	; (800cf98 <__errno+0x8>)
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20000050 	.word	0x20000050

0800cf9c <__libc_init_array>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	4e0d      	ldr	r6, [pc, #52]	; (800cfd4 <__libc_init_array+0x38>)
 800cfa0:	4c0d      	ldr	r4, [pc, #52]	; (800cfd8 <__libc_init_array+0x3c>)
 800cfa2:	1ba4      	subs	r4, r4, r6
 800cfa4:	10a4      	asrs	r4, r4, #2
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	42a5      	cmp	r5, r4
 800cfaa:	d109      	bne.n	800cfc0 <__libc_init_array+0x24>
 800cfac:	4e0b      	ldr	r6, [pc, #44]	; (800cfdc <__libc_init_array+0x40>)
 800cfae:	4c0c      	ldr	r4, [pc, #48]	; (800cfe0 <__libc_init_array+0x44>)
 800cfb0:	f002 fbf8 	bl	800f7a4 <_init>
 800cfb4:	1ba4      	subs	r4, r4, r6
 800cfb6:	10a4      	asrs	r4, r4, #2
 800cfb8:	2500      	movs	r5, #0
 800cfba:	42a5      	cmp	r5, r4
 800cfbc:	d105      	bne.n	800cfca <__libc_init_array+0x2e>
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}
 800cfc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfc4:	4798      	blx	r3
 800cfc6:	3501      	adds	r5, #1
 800cfc8:	e7ee      	b.n	800cfa8 <__libc_init_array+0xc>
 800cfca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfce:	4798      	blx	r3
 800cfd0:	3501      	adds	r5, #1
 800cfd2:	e7f2      	b.n	800cfba <__libc_init_array+0x1e>
 800cfd4:	0800fb68 	.word	0x0800fb68
 800cfd8:	0800fb68 	.word	0x0800fb68
 800cfdc:	0800fb68 	.word	0x0800fb68
 800cfe0:	0800fb6c 	.word	0x0800fb6c

0800cfe4 <memcpy>:
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	1e43      	subs	r3, r0, #1
 800cfe8:	440a      	add	r2, r1
 800cfea:	4291      	cmp	r1, r2
 800cfec:	d100      	bne.n	800cff0 <memcpy+0xc>
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cff8:	e7f7      	b.n	800cfea <memcpy+0x6>

0800cffa <memset>:
 800cffa:	4402      	add	r2, r0
 800cffc:	4603      	mov	r3, r0
 800cffe:	4293      	cmp	r3, r2
 800d000:	d100      	bne.n	800d004 <memset+0xa>
 800d002:	4770      	bx	lr
 800d004:	f803 1b01 	strb.w	r1, [r3], #1
 800d008:	e7f9      	b.n	800cffe <memset+0x4>

0800d00a <__cvt>:
 800d00a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d00e:	ec55 4b10 	vmov	r4, r5, d0
 800d012:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d018:	2d00      	cmp	r5, #0
 800d01a:	460e      	mov	r6, r1
 800d01c:	4691      	mov	r9, r2
 800d01e:	4619      	mov	r1, r3
 800d020:	bfb8      	it	lt
 800d022:	4622      	movlt	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	f027 0720 	bic.w	r7, r7, #32
 800d02a:	bfbb      	ittet	lt
 800d02c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d030:	461d      	movlt	r5, r3
 800d032:	2300      	movge	r3, #0
 800d034:	232d      	movlt	r3, #45	; 0x2d
 800d036:	bfb8      	it	lt
 800d038:	4614      	movlt	r4, r2
 800d03a:	2f46      	cmp	r7, #70	; 0x46
 800d03c:	700b      	strb	r3, [r1, #0]
 800d03e:	d004      	beq.n	800d04a <__cvt+0x40>
 800d040:	2f45      	cmp	r7, #69	; 0x45
 800d042:	d100      	bne.n	800d046 <__cvt+0x3c>
 800d044:	3601      	adds	r6, #1
 800d046:	2102      	movs	r1, #2
 800d048:	e000      	b.n	800d04c <__cvt+0x42>
 800d04a:	2103      	movs	r1, #3
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	ab02      	add	r3, sp, #8
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	4632      	mov	r2, r6
 800d056:	4653      	mov	r3, sl
 800d058:	ec45 4b10 	vmov	d0, r4, r5
 800d05c:	f000 fe10 	bl	800dc80 <_dtoa_r>
 800d060:	2f47      	cmp	r7, #71	; 0x47
 800d062:	4680      	mov	r8, r0
 800d064:	d102      	bne.n	800d06c <__cvt+0x62>
 800d066:	f019 0f01 	tst.w	r9, #1
 800d06a:	d026      	beq.n	800d0ba <__cvt+0xb0>
 800d06c:	2f46      	cmp	r7, #70	; 0x46
 800d06e:	eb08 0906 	add.w	r9, r8, r6
 800d072:	d111      	bne.n	800d098 <__cvt+0x8e>
 800d074:	f898 3000 	ldrb.w	r3, [r8]
 800d078:	2b30      	cmp	r3, #48	; 0x30
 800d07a:	d10a      	bne.n	800d092 <__cvt+0x88>
 800d07c:	2200      	movs	r2, #0
 800d07e:	2300      	movs	r3, #0
 800d080:	4620      	mov	r0, r4
 800d082:	4629      	mov	r1, r5
 800d084:	f7f3 fd48 	bl	8000b18 <__aeabi_dcmpeq>
 800d088:	b918      	cbnz	r0, 800d092 <__cvt+0x88>
 800d08a:	f1c6 0601 	rsb	r6, r6, #1
 800d08e:	f8ca 6000 	str.w	r6, [sl]
 800d092:	f8da 3000 	ldr.w	r3, [sl]
 800d096:	4499      	add	r9, r3
 800d098:	2200      	movs	r2, #0
 800d09a:	2300      	movs	r3, #0
 800d09c:	4620      	mov	r0, r4
 800d09e:	4629      	mov	r1, r5
 800d0a0:	f7f3 fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 800d0a4:	b938      	cbnz	r0, 800d0b6 <__cvt+0xac>
 800d0a6:	2230      	movs	r2, #48	; 0x30
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	454b      	cmp	r3, r9
 800d0ac:	d205      	bcs.n	800d0ba <__cvt+0xb0>
 800d0ae:	1c59      	adds	r1, r3, #1
 800d0b0:	9103      	str	r1, [sp, #12]
 800d0b2:	701a      	strb	r2, [r3, #0]
 800d0b4:	e7f8      	b.n	800d0a8 <__cvt+0x9e>
 800d0b6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0be:	eba3 0308 	sub.w	r3, r3, r8
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	b004      	add	sp, #16
 800d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d0cc <__exponent>:
 800d0cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ce:	2900      	cmp	r1, #0
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	bfba      	itte	lt
 800d0d4:	4249      	neglt	r1, r1
 800d0d6:	232d      	movlt	r3, #45	; 0x2d
 800d0d8:	232b      	movge	r3, #43	; 0x2b
 800d0da:	2909      	cmp	r1, #9
 800d0dc:	f804 2b02 	strb.w	r2, [r4], #2
 800d0e0:	7043      	strb	r3, [r0, #1]
 800d0e2:	dd20      	ble.n	800d126 <__exponent+0x5a>
 800d0e4:	f10d 0307 	add.w	r3, sp, #7
 800d0e8:	461f      	mov	r7, r3
 800d0ea:	260a      	movs	r6, #10
 800d0ec:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0f0:	fb06 1115 	mls	r1, r6, r5, r1
 800d0f4:	3130      	adds	r1, #48	; 0x30
 800d0f6:	2d09      	cmp	r5, #9
 800d0f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d0fc:	f103 32ff 	add.w	r2, r3, #4294967295
 800d100:	4629      	mov	r1, r5
 800d102:	dc09      	bgt.n	800d118 <__exponent+0x4c>
 800d104:	3130      	adds	r1, #48	; 0x30
 800d106:	3b02      	subs	r3, #2
 800d108:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d10c:	42bb      	cmp	r3, r7
 800d10e:	4622      	mov	r2, r4
 800d110:	d304      	bcc.n	800d11c <__exponent+0x50>
 800d112:	1a10      	subs	r0, r2, r0
 800d114:	b003      	add	sp, #12
 800d116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d118:	4613      	mov	r3, r2
 800d11a:	e7e7      	b.n	800d0ec <__exponent+0x20>
 800d11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d120:	f804 2b01 	strb.w	r2, [r4], #1
 800d124:	e7f2      	b.n	800d10c <__exponent+0x40>
 800d126:	2330      	movs	r3, #48	; 0x30
 800d128:	4419      	add	r1, r3
 800d12a:	7083      	strb	r3, [r0, #2]
 800d12c:	1d02      	adds	r2, r0, #4
 800d12e:	70c1      	strb	r1, [r0, #3]
 800d130:	e7ef      	b.n	800d112 <__exponent+0x46>
	...

0800d134 <_printf_float>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	b08d      	sub	sp, #52	; 0x34
 800d13a:	460c      	mov	r4, r1
 800d13c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d140:	4616      	mov	r6, r2
 800d142:	461f      	mov	r7, r3
 800d144:	4605      	mov	r5, r0
 800d146:	f001 fccd 	bl	800eae4 <_localeconv_r>
 800d14a:	6803      	ldr	r3, [r0, #0]
 800d14c:	9304      	str	r3, [sp, #16]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7f3 f866 	bl	8000220 <strlen>
 800d154:	2300      	movs	r3, #0
 800d156:	930a      	str	r3, [sp, #40]	; 0x28
 800d158:	f8d8 3000 	ldr.w	r3, [r8]
 800d15c:	9005      	str	r0, [sp, #20]
 800d15e:	3307      	adds	r3, #7
 800d160:	f023 0307 	bic.w	r3, r3, #7
 800d164:	f103 0208 	add.w	r2, r3, #8
 800d168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d16c:	f8d4 b000 	ldr.w	fp, [r4]
 800d170:	f8c8 2000 	str.w	r2, [r8]
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d17c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d180:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d184:	9307      	str	r3, [sp, #28]
 800d186:	f8cd 8018 	str.w	r8, [sp, #24]
 800d18a:	f04f 32ff 	mov.w	r2, #4294967295
 800d18e:	4ba7      	ldr	r3, [pc, #668]	; (800d42c <_printf_float+0x2f8>)
 800d190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d194:	f7f3 fcf2 	bl	8000b7c <__aeabi_dcmpun>
 800d198:	bb70      	cbnz	r0, 800d1f8 <_printf_float+0xc4>
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295
 800d19e:	4ba3      	ldr	r3, [pc, #652]	; (800d42c <_printf_float+0x2f8>)
 800d1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a4:	f7f3 fccc 	bl	8000b40 <__aeabi_dcmple>
 800d1a8:	bb30      	cbnz	r0, 800d1f8 <_printf_float+0xc4>
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 800d1b6:	b110      	cbz	r0, 800d1be <_printf_float+0x8a>
 800d1b8:	232d      	movs	r3, #45	; 0x2d
 800d1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1be:	4a9c      	ldr	r2, [pc, #624]	; (800d430 <_printf_float+0x2fc>)
 800d1c0:	4b9c      	ldr	r3, [pc, #624]	; (800d434 <_printf_float+0x300>)
 800d1c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d1c6:	bf8c      	ite	hi
 800d1c8:	4690      	movhi	r8, r2
 800d1ca:	4698      	movls	r8, r3
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	f02b 0204 	bic.w	r2, fp, #4
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	f04f 0900 	mov.w	r9, #0
 800d1da:	9700      	str	r7, [sp, #0]
 800d1dc:	4633      	mov	r3, r6
 800d1de:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f000 f9e6 	bl	800d5b4 <_printf_common>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	f040 808d 	bne.w	800d308 <_printf_float+0x1d4>
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	b00d      	add	sp, #52	; 0x34
 800d1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	464b      	mov	r3, r9
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	4649      	mov	r1, r9
 800d200:	f7f3 fcbc 	bl	8000b7c <__aeabi_dcmpun>
 800d204:	b110      	cbz	r0, 800d20c <_printf_float+0xd8>
 800d206:	4a8c      	ldr	r2, [pc, #560]	; (800d438 <_printf_float+0x304>)
 800d208:	4b8c      	ldr	r3, [pc, #560]	; (800d43c <_printf_float+0x308>)
 800d20a:	e7da      	b.n	800d1c2 <_printf_float+0x8e>
 800d20c:	6861      	ldr	r1, [r4, #4]
 800d20e:	1c4b      	adds	r3, r1, #1
 800d210:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d214:	a80a      	add	r0, sp, #40	; 0x28
 800d216:	d13e      	bne.n	800d296 <_printf_float+0x162>
 800d218:	2306      	movs	r3, #6
 800d21a:	6063      	str	r3, [r4, #4]
 800d21c:	2300      	movs	r3, #0
 800d21e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d222:	ab09      	add	r3, sp, #36	; 0x24
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	ec49 8b10 	vmov	d0, r8, r9
 800d22a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d22e:	6022      	str	r2, [r4, #0]
 800d230:	f8cd a004 	str.w	sl, [sp, #4]
 800d234:	6861      	ldr	r1, [r4, #4]
 800d236:	4628      	mov	r0, r5
 800d238:	f7ff fee7 	bl	800d00a <__cvt>
 800d23c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d240:	2b47      	cmp	r3, #71	; 0x47
 800d242:	4680      	mov	r8, r0
 800d244:	d109      	bne.n	800d25a <_printf_float+0x126>
 800d246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d248:	1cd8      	adds	r0, r3, #3
 800d24a:	db02      	blt.n	800d252 <_printf_float+0x11e>
 800d24c:	6862      	ldr	r2, [r4, #4]
 800d24e:	4293      	cmp	r3, r2
 800d250:	dd47      	ble.n	800d2e2 <_printf_float+0x1ae>
 800d252:	f1aa 0a02 	sub.w	sl, sl, #2
 800d256:	fa5f fa8a 	uxtb.w	sl, sl
 800d25a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d260:	d824      	bhi.n	800d2ac <_printf_float+0x178>
 800d262:	3901      	subs	r1, #1
 800d264:	4652      	mov	r2, sl
 800d266:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d26a:	9109      	str	r1, [sp, #36]	; 0x24
 800d26c:	f7ff ff2e 	bl	800d0cc <__exponent>
 800d270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d272:	1813      	adds	r3, r2, r0
 800d274:	2a01      	cmp	r2, #1
 800d276:	4681      	mov	r9, r0
 800d278:	6123      	str	r3, [r4, #16]
 800d27a:	dc02      	bgt.n	800d282 <_printf_float+0x14e>
 800d27c:	6822      	ldr	r2, [r4, #0]
 800d27e:	07d1      	lsls	r1, r2, #31
 800d280:	d501      	bpl.n	800d286 <_printf_float+0x152>
 800d282:	3301      	adds	r3, #1
 800d284:	6123      	str	r3, [r4, #16]
 800d286:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0a5      	beq.n	800d1da <_printf_float+0xa6>
 800d28e:	232d      	movs	r3, #45	; 0x2d
 800d290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d294:	e7a1      	b.n	800d1da <_printf_float+0xa6>
 800d296:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d29a:	f000 8177 	beq.w	800d58c <_printf_float+0x458>
 800d29e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d2a2:	d1bb      	bne.n	800d21c <_printf_float+0xe8>
 800d2a4:	2900      	cmp	r1, #0
 800d2a6:	d1b9      	bne.n	800d21c <_printf_float+0xe8>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e7b6      	b.n	800d21a <_printf_float+0xe6>
 800d2ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d2b0:	d119      	bne.n	800d2e6 <_printf_float+0x1b2>
 800d2b2:	2900      	cmp	r1, #0
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	dd0c      	ble.n	800d2d2 <_printf_float+0x19e>
 800d2b8:	6121      	str	r1, [r4, #16]
 800d2ba:	b913      	cbnz	r3, 800d2c2 <_printf_float+0x18e>
 800d2bc:	6822      	ldr	r2, [r4, #0]
 800d2be:	07d2      	lsls	r2, r2, #31
 800d2c0:	d502      	bpl.n	800d2c8 <_printf_float+0x194>
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	440b      	add	r3, r1
 800d2c6:	6123      	str	r3, [r4, #16]
 800d2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800d2cc:	f04f 0900 	mov.w	r9, #0
 800d2d0:	e7d9      	b.n	800d286 <_printf_float+0x152>
 800d2d2:	b913      	cbnz	r3, 800d2da <_printf_float+0x1a6>
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	07d0      	lsls	r0, r2, #31
 800d2d8:	d501      	bpl.n	800d2de <_printf_float+0x1aa>
 800d2da:	3302      	adds	r3, #2
 800d2dc:	e7f3      	b.n	800d2c6 <_printf_float+0x192>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e7f1      	b.n	800d2c6 <_printf_float+0x192>
 800d2e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d2e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	db05      	blt.n	800d2fa <_printf_float+0x1c6>
 800d2ee:	6822      	ldr	r2, [r4, #0]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	07d1      	lsls	r1, r2, #31
 800d2f4:	d5e8      	bpl.n	800d2c8 <_printf_float+0x194>
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	e7e5      	b.n	800d2c6 <_printf_float+0x192>
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	bfd4      	ite	le
 800d2fe:	f1c3 0302 	rsble	r3, r3, #2
 800d302:	2301      	movgt	r3, #1
 800d304:	4413      	add	r3, r2
 800d306:	e7de      	b.n	800d2c6 <_printf_float+0x192>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	055a      	lsls	r2, r3, #21
 800d30c:	d407      	bmi.n	800d31e <_printf_float+0x1ea>
 800d30e:	6923      	ldr	r3, [r4, #16]
 800d310:	4642      	mov	r2, r8
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	d12b      	bne.n	800d374 <_printf_float+0x240>
 800d31c:	e767      	b.n	800d1ee <_printf_float+0xba>
 800d31e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d322:	f240 80dc 	bls.w	800d4de <_printf_float+0x3aa>
 800d326:	2200      	movs	r2, #0
 800d328:	2300      	movs	r3, #0
 800d32a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d32e:	f7f3 fbf3 	bl	8000b18 <__aeabi_dcmpeq>
 800d332:	2800      	cmp	r0, #0
 800d334:	d033      	beq.n	800d39e <_printf_float+0x26a>
 800d336:	2301      	movs	r3, #1
 800d338:	4a41      	ldr	r2, [pc, #260]	; (800d440 <_printf_float+0x30c>)
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	f43f af54 	beq.w	800d1ee <_printf_float+0xba>
 800d346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d34a:	429a      	cmp	r2, r3
 800d34c:	db02      	blt.n	800d354 <_printf_float+0x220>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	07d8      	lsls	r0, r3, #31
 800d352:	d50f      	bpl.n	800d374 <_printf_float+0x240>
 800d354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d358:	4631      	mov	r1, r6
 800d35a:	4628      	mov	r0, r5
 800d35c:	47b8      	blx	r7
 800d35e:	3001      	adds	r0, #1
 800d360:	f43f af45 	beq.w	800d1ee <_printf_float+0xba>
 800d364:	f04f 0800 	mov.w	r8, #0
 800d368:	f104 091a 	add.w	r9, r4, #26
 800d36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d36e:	3b01      	subs	r3, #1
 800d370:	4543      	cmp	r3, r8
 800d372:	dc09      	bgt.n	800d388 <_printf_float+0x254>
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	079b      	lsls	r3, r3, #30
 800d378:	f100 8103 	bmi.w	800d582 <_printf_float+0x44e>
 800d37c:	68e0      	ldr	r0, [r4, #12]
 800d37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d380:	4298      	cmp	r0, r3
 800d382:	bfb8      	it	lt
 800d384:	4618      	movlt	r0, r3
 800d386:	e734      	b.n	800d1f2 <_printf_float+0xbe>
 800d388:	2301      	movs	r3, #1
 800d38a:	464a      	mov	r2, r9
 800d38c:	4631      	mov	r1, r6
 800d38e:	4628      	mov	r0, r5
 800d390:	47b8      	blx	r7
 800d392:	3001      	adds	r0, #1
 800d394:	f43f af2b 	beq.w	800d1ee <_printf_float+0xba>
 800d398:	f108 0801 	add.w	r8, r8, #1
 800d39c:	e7e6      	b.n	800d36c <_printf_float+0x238>
 800d39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dc2b      	bgt.n	800d3fc <_printf_float+0x2c8>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	4a26      	ldr	r2, [pc, #152]	; (800d440 <_printf_float+0x30c>)
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	47b8      	blx	r7
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	f43f af1d 	beq.w	800d1ee <_printf_float+0xba>
 800d3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b6:	b923      	cbnz	r3, 800d3c2 <_printf_float+0x28e>
 800d3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ba:	b913      	cbnz	r3, 800d3c2 <_printf_float+0x28e>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	07d9      	lsls	r1, r3, #31
 800d3c0:	d5d8      	bpl.n	800d374 <_printf_float+0x240>
 800d3c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b8      	blx	r7
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	f43f af0e 	beq.w	800d1ee <_printf_float+0xba>
 800d3d2:	f04f 0900 	mov.w	r9, #0
 800d3d6:	f104 0a1a 	add.w	sl, r4, #26
 800d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3dc:	425b      	negs	r3, r3
 800d3de:	454b      	cmp	r3, r9
 800d3e0:	dc01      	bgt.n	800d3e6 <_printf_float+0x2b2>
 800d3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3e4:	e794      	b.n	800d310 <_printf_float+0x1dc>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4652      	mov	r2, sl
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f43f aefc 	beq.w	800d1ee <_printf_float+0xba>
 800d3f6:	f109 0901 	add.w	r9, r9, #1
 800d3fa:	e7ee      	b.n	800d3da <_printf_float+0x2a6>
 800d3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d400:	429a      	cmp	r2, r3
 800d402:	bfa8      	it	ge
 800d404:	461a      	movge	r2, r3
 800d406:	2a00      	cmp	r2, #0
 800d408:	4691      	mov	r9, r2
 800d40a:	dd07      	ble.n	800d41c <_printf_float+0x2e8>
 800d40c:	4613      	mov	r3, r2
 800d40e:	4631      	mov	r1, r6
 800d410:	4642      	mov	r2, r8
 800d412:	4628      	mov	r0, r5
 800d414:	47b8      	blx	r7
 800d416:	3001      	adds	r0, #1
 800d418:	f43f aee9 	beq.w	800d1ee <_printf_float+0xba>
 800d41c:	f104 031a 	add.w	r3, r4, #26
 800d420:	f04f 0b00 	mov.w	fp, #0
 800d424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d428:	9306      	str	r3, [sp, #24]
 800d42a:	e015      	b.n	800d458 <_printf_float+0x324>
 800d42c:	7fefffff 	.word	0x7fefffff
 800d430:	0800f8a4 	.word	0x0800f8a4
 800d434:	0800f8a0 	.word	0x0800f8a0
 800d438:	0800f8ac 	.word	0x0800f8ac
 800d43c:	0800f8a8 	.word	0x0800f8a8
 800d440:	0800f8b0 	.word	0x0800f8b0
 800d444:	2301      	movs	r3, #1
 800d446:	9a06      	ldr	r2, [sp, #24]
 800d448:	4631      	mov	r1, r6
 800d44a:	4628      	mov	r0, r5
 800d44c:	47b8      	blx	r7
 800d44e:	3001      	adds	r0, #1
 800d450:	f43f aecd 	beq.w	800d1ee <_printf_float+0xba>
 800d454:	f10b 0b01 	add.w	fp, fp, #1
 800d458:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d45c:	ebaa 0309 	sub.w	r3, sl, r9
 800d460:	455b      	cmp	r3, fp
 800d462:	dcef      	bgt.n	800d444 <_printf_float+0x310>
 800d464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d468:	429a      	cmp	r2, r3
 800d46a:	44d0      	add	r8, sl
 800d46c:	db15      	blt.n	800d49a <_printf_float+0x366>
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	07da      	lsls	r2, r3, #31
 800d472:	d412      	bmi.n	800d49a <_printf_float+0x366>
 800d474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d476:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d478:	eba3 020a 	sub.w	r2, r3, sl
 800d47c:	eba3 0a01 	sub.w	sl, r3, r1
 800d480:	4592      	cmp	sl, r2
 800d482:	bfa8      	it	ge
 800d484:	4692      	movge	sl, r2
 800d486:	f1ba 0f00 	cmp.w	sl, #0
 800d48a:	dc0e      	bgt.n	800d4aa <_printf_float+0x376>
 800d48c:	f04f 0800 	mov.w	r8, #0
 800d490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d494:	f104 091a 	add.w	r9, r4, #26
 800d498:	e019      	b.n	800d4ce <_printf_float+0x39a>
 800d49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d49e:	4631      	mov	r1, r6
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	47b8      	blx	r7
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d1e5      	bne.n	800d474 <_printf_float+0x340>
 800d4a8:	e6a1      	b.n	800d1ee <_printf_float+0xba>
 800d4aa:	4653      	mov	r3, sl
 800d4ac:	4642      	mov	r2, r8
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d1e9      	bne.n	800d48c <_printf_float+0x358>
 800d4b8:	e699      	b.n	800d1ee <_printf_float+0xba>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	464a      	mov	r2, r9
 800d4be:	4631      	mov	r1, r6
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	47b8      	blx	r7
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	f43f ae92 	beq.w	800d1ee <_printf_float+0xba>
 800d4ca:	f108 0801 	add.w	r8, r8, #1
 800d4ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	eba3 030a 	sub.w	r3, r3, sl
 800d4d8:	4543      	cmp	r3, r8
 800d4da:	dcee      	bgt.n	800d4ba <_printf_float+0x386>
 800d4dc:	e74a      	b.n	800d374 <_printf_float+0x240>
 800d4de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4e0:	2a01      	cmp	r2, #1
 800d4e2:	dc01      	bgt.n	800d4e8 <_printf_float+0x3b4>
 800d4e4:	07db      	lsls	r3, r3, #31
 800d4e6:	d53a      	bpl.n	800d55e <_printf_float+0x42a>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4642      	mov	r2, r8
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b8      	blx	r7
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	f43f ae7b 	beq.w	800d1ee <_printf_float+0xba>
 800d4f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	4628      	mov	r0, r5
 800d500:	47b8      	blx	r7
 800d502:	3001      	adds	r0, #1
 800d504:	f108 0801 	add.w	r8, r8, #1
 800d508:	f43f ae71 	beq.w	800d1ee <_printf_float+0xba>
 800d50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d50e:	2200      	movs	r2, #0
 800d510:	f103 3aff 	add.w	sl, r3, #4294967295
 800d514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d518:	2300      	movs	r3, #0
 800d51a:	f7f3 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800d51e:	b9c8      	cbnz	r0, 800d554 <_printf_float+0x420>
 800d520:	4653      	mov	r3, sl
 800d522:	4642      	mov	r2, r8
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	d10e      	bne.n	800d54c <_printf_float+0x418>
 800d52e:	e65e      	b.n	800d1ee <_printf_float+0xba>
 800d530:	2301      	movs	r3, #1
 800d532:	4652      	mov	r2, sl
 800d534:	4631      	mov	r1, r6
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	f43f ae57 	beq.w	800d1ee <_printf_float+0xba>
 800d540:	f108 0801 	add.w	r8, r8, #1
 800d544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d546:	3b01      	subs	r3, #1
 800d548:	4543      	cmp	r3, r8
 800d54a:	dcf1      	bgt.n	800d530 <_printf_float+0x3fc>
 800d54c:	464b      	mov	r3, r9
 800d54e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d552:	e6de      	b.n	800d312 <_printf_float+0x1de>
 800d554:	f04f 0800 	mov.w	r8, #0
 800d558:	f104 0a1a 	add.w	sl, r4, #26
 800d55c:	e7f2      	b.n	800d544 <_printf_float+0x410>
 800d55e:	2301      	movs	r3, #1
 800d560:	e7df      	b.n	800d522 <_printf_float+0x3ee>
 800d562:	2301      	movs	r3, #1
 800d564:	464a      	mov	r2, r9
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	f43f ae3e 	beq.w	800d1ee <_printf_float+0xba>
 800d572:	f108 0801 	add.w	r8, r8, #1
 800d576:	68e3      	ldr	r3, [r4, #12]
 800d578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d57a:	1a9b      	subs	r3, r3, r2
 800d57c:	4543      	cmp	r3, r8
 800d57e:	dcf0      	bgt.n	800d562 <_printf_float+0x42e>
 800d580:	e6fc      	b.n	800d37c <_printf_float+0x248>
 800d582:	f04f 0800 	mov.w	r8, #0
 800d586:	f104 0919 	add.w	r9, r4, #25
 800d58a:	e7f4      	b.n	800d576 <_printf_float+0x442>
 800d58c:	2900      	cmp	r1, #0
 800d58e:	f43f ae8b 	beq.w	800d2a8 <_printf_float+0x174>
 800d592:	2300      	movs	r3, #0
 800d594:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d598:	ab09      	add	r3, sp, #36	; 0x24
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	ec49 8b10 	vmov	d0, r8, r9
 800d5a0:	6022      	str	r2, [r4, #0]
 800d5a2:	f8cd a004 	str.w	sl, [sp, #4]
 800d5a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f7ff fd2d 	bl	800d00a <__cvt>
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	e648      	b.n	800d246 <_printf_float+0x112>

0800d5b4 <_printf_common>:
 800d5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b8:	4691      	mov	r9, r2
 800d5ba:	461f      	mov	r7, r3
 800d5bc:	688a      	ldr	r2, [r1, #8]
 800d5be:	690b      	ldr	r3, [r1, #16]
 800d5c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	bfb8      	it	lt
 800d5c8:	4613      	movlt	r3, r2
 800d5ca:	f8c9 3000 	str.w	r3, [r9]
 800d5ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	b112      	cbz	r2, 800d5de <_printf_common+0x2a>
 800d5d8:	3301      	adds	r3, #1
 800d5da:	f8c9 3000 	str.w	r3, [r9]
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	0699      	lsls	r1, r3, #26
 800d5e2:	bf42      	ittt	mi
 800d5e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d5e8:	3302      	addmi	r3, #2
 800d5ea:	f8c9 3000 	strmi.w	r3, [r9]
 800d5ee:	6825      	ldr	r5, [r4, #0]
 800d5f0:	f015 0506 	ands.w	r5, r5, #6
 800d5f4:	d107      	bne.n	800d606 <_printf_common+0x52>
 800d5f6:	f104 0a19 	add.w	sl, r4, #25
 800d5fa:	68e3      	ldr	r3, [r4, #12]
 800d5fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d600:	1a9b      	subs	r3, r3, r2
 800d602:	42ab      	cmp	r3, r5
 800d604:	dc28      	bgt.n	800d658 <_printf_common+0xa4>
 800d606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d60a:	6822      	ldr	r2, [r4, #0]
 800d60c:	3300      	adds	r3, #0
 800d60e:	bf18      	it	ne
 800d610:	2301      	movne	r3, #1
 800d612:	0692      	lsls	r2, r2, #26
 800d614:	d42d      	bmi.n	800d672 <_printf_common+0xbe>
 800d616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d61a:	4639      	mov	r1, r7
 800d61c:	4630      	mov	r0, r6
 800d61e:	47c0      	blx	r8
 800d620:	3001      	adds	r0, #1
 800d622:	d020      	beq.n	800d666 <_printf_common+0xb2>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	68e5      	ldr	r5, [r4, #12]
 800d628:	f8d9 2000 	ldr.w	r2, [r9]
 800d62c:	f003 0306 	and.w	r3, r3, #6
 800d630:	2b04      	cmp	r3, #4
 800d632:	bf08      	it	eq
 800d634:	1aad      	subeq	r5, r5, r2
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	6922      	ldr	r2, [r4, #16]
 800d63a:	bf0c      	ite	eq
 800d63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d640:	2500      	movne	r5, #0
 800d642:	4293      	cmp	r3, r2
 800d644:	bfc4      	itt	gt
 800d646:	1a9b      	subgt	r3, r3, r2
 800d648:	18ed      	addgt	r5, r5, r3
 800d64a:	f04f 0900 	mov.w	r9, #0
 800d64e:	341a      	adds	r4, #26
 800d650:	454d      	cmp	r5, r9
 800d652:	d11a      	bne.n	800d68a <_printf_common+0xd6>
 800d654:	2000      	movs	r0, #0
 800d656:	e008      	b.n	800d66a <_printf_common+0xb6>
 800d658:	2301      	movs	r3, #1
 800d65a:	4652      	mov	r2, sl
 800d65c:	4639      	mov	r1, r7
 800d65e:	4630      	mov	r0, r6
 800d660:	47c0      	blx	r8
 800d662:	3001      	adds	r0, #1
 800d664:	d103      	bne.n	800d66e <_printf_common+0xba>
 800d666:	f04f 30ff 	mov.w	r0, #4294967295
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	3501      	adds	r5, #1
 800d670:	e7c3      	b.n	800d5fa <_printf_common+0x46>
 800d672:	18e1      	adds	r1, r4, r3
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	2030      	movs	r0, #48	; 0x30
 800d678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d67c:	4422      	add	r2, r4
 800d67e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d686:	3302      	adds	r3, #2
 800d688:	e7c5      	b.n	800d616 <_printf_common+0x62>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4622      	mov	r2, r4
 800d68e:	4639      	mov	r1, r7
 800d690:	4630      	mov	r0, r6
 800d692:	47c0      	blx	r8
 800d694:	3001      	adds	r0, #1
 800d696:	d0e6      	beq.n	800d666 <_printf_common+0xb2>
 800d698:	f109 0901 	add.w	r9, r9, #1
 800d69c:	e7d8      	b.n	800d650 <_printf_common+0x9c>
	...

0800d6a0 <_printf_i>:
 800d6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	7e09      	ldrb	r1, [r1, #24]
 800d6ac:	b085      	sub	sp, #20
 800d6ae:	296e      	cmp	r1, #110	; 0x6e
 800d6b0:	4617      	mov	r7, r2
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	4698      	mov	r8, r3
 800d6b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6b8:	f000 80b3 	beq.w	800d822 <_printf_i+0x182>
 800d6bc:	d822      	bhi.n	800d704 <_printf_i+0x64>
 800d6be:	2963      	cmp	r1, #99	; 0x63
 800d6c0:	d036      	beq.n	800d730 <_printf_i+0x90>
 800d6c2:	d80a      	bhi.n	800d6da <_printf_i+0x3a>
 800d6c4:	2900      	cmp	r1, #0
 800d6c6:	f000 80b9 	beq.w	800d83c <_printf_i+0x19c>
 800d6ca:	2958      	cmp	r1, #88	; 0x58
 800d6cc:	f000 8083 	beq.w	800d7d6 <_printf_i+0x136>
 800d6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d6d8:	e032      	b.n	800d740 <_printf_i+0xa0>
 800d6da:	2964      	cmp	r1, #100	; 0x64
 800d6dc:	d001      	beq.n	800d6e2 <_printf_i+0x42>
 800d6de:	2969      	cmp	r1, #105	; 0x69
 800d6e0:	d1f6      	bne.n	800d6d0 <_printf_i+0x30>
 800d6e2:	6820      	ldr	r0, [r4, #0]
 800d6e4:	6813      	ldr	r3, [r2, #0]
 800d6e6:	0605      	lsls	r5, r0, #24
 800d6e8:	f103 0104 	add.w	r1, r3, #4
 800d6ec:	d52a      	bpl.n	800d744 <_printf_i+0xa4>
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6011      	str	r1, [r2, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	da03      	bge.n	800d6fe <_printf_i+0x5e>
 800d6f6:	222d      	movs	r2, #45	; 0x2d
 800d6f8:	425b      	negs	r3, r3
 800d6fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d6fe:	486f      	ldr	r0, [pc, #444]	; (800d8bc <_printf_i+0x21c>)
 800d700:	220a      	movs	r2, #10
 800d702:	e039      	b.n	800d778 <_printf_i+0xd8>
 800d704:	2973      	cmp	r1, #115	; 0x73
 800d706:	f000 809d 	beq.w	800d844 <_printf_i+0x1a4>
 800d70a:	d808      	bhi.n	800d71e <_printf_i+0x7e>
 800d70c:	296f      	cmp	r1, #111	; 0x6f
 800d70e:	d020      	beq.n	800d752 <_printf_i+0xb2>
 800d710:	2970      	cmp	r1, #112	; 0x70
 800d712:	d1dd      	bne.n	800d6d0 <_printf_i+0x30>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	f043 0320 	orr.w	r3, r3, #32
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	e003      	b.n	800d726 <_printf_i+0x86>
 800d71e:	2975      	cmp	r1, #117	; 0x75
 800d720:	d017      	beq.n	800d752 <_printf_i+0xb2>
 800d722:	2978      	cmp	r1, #120	; 0x78
 800d724:	d1d4      	bne.n	800d6d0 <_printf_i+0x30>
 800d726:	2378      	movs	r3, #120	; 0x78
 800d728:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d72c:	4864      	ldr	r0, [pc, #400]	; (800d8c0 <_printf_i+0x220>)
 800d72e:	e055      	b.n	800d7dc <_printf_i+0x13c>
 800d730:	6813      	ldr	r3, [r2, #0]
 800d732:	1d19      	adds	r1, r3, #4
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6011      	str	r1, [r2, #0]
 800d738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d73c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d740:	2301      	movs	r3, #1
 800d742:	e08c      	b.n	800d85e <_printf_i+0x1be>
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6011      	str	r1, [r2, #0]
 800d748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d74c:	bf18      	it	ne
 800d74e:	b21b      	sxthne	r3, r3
 800d750:	e7cf      	b.n	800d6f2 <_printf_i+0x52>
 800d752:	6813      	ldr	r3, [r2, #0]
 800d754:	6825      	ldr	r5, [r4, #0]
 800d756:	1d18      	adds	r0, r3, #4
 800d758:	6010      	str	r0, [r2, #0]
 800d75a:	0628      	lsls	r0, r5, #24
 800d75c:	d501      	bpl.n	800d762 <_printf_i+0xc2>
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	e002      	b.n	800d768 <_printf_i+0xc8>
 800d762:	0668      	lsls	r0, r5, #25
 800d764:	d5fb      	bpl.n	800d75e <_printf_i+0xbe>
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	4854      	ldr	r0, [pc, #336]	; (800d8bc <_printf_i+0x21c>)
 800d76a:	296f      	cmp	r1, #111	; 0x6f
 800d76c:	bf14      	ite	ne
 800d76e:	220a      	movne	r2, #10
 800d770:	2208      	moveq	r2, #8
 800d772:	2100      	movs	r1, #0
 800d774:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d778:	6865      	ldr	r5, [r4, #4]
 800d77a:	60a5      	str	r5, [r4, #8]
 800d77c:	2d00      	cmp	r5, #0
 800d77e:	f2c0 8095 	blt.w	800d8ac <_printf_i+0x20c>
 800d782:	6821      	ldr	r1, [r4, #0]
 800d784:	f021 0104 	bic.w	r1, r1, #4
 800d788:	6021      	str	r1, [r4, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d13d      	bne.n	800d80a <_printf_i+0x16a>
 800d78e:	2d00      	cmp	r5, #0
 800d790:	f040 808e 	bne.w	800d8b0 <_printf_i+0x210>
 800d794:	4665      	mov	r5, ip
 800d796:	2a08      	cmp	r2, #8
 800d798:	d10b      	bne.n	800d7b2 <_printf_i+0x112>
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	07db      	lsls	r3, r3, #31
 800d79e:	d508      	bpl.n	800d7b2 <_printf_i+0x112>
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	6862      	ldr	r2, [r4, #4]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	bfde      	ittt	le
 800d7a8:	2330      	movle	r3, #48	; 0x30
 800d7aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7b2:	ebac 0305 	sub.w	r3, ip, r5
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	f8cd 8000 	str.w	r8, [sp]
 800d7bc:	463b      	mov	r3, r7
 800d7be:	aa03      	add	r2, sp, #12
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f7ff fef6 	bl	800d5b4 <_printf_common>
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d14d      	bne.n	800d868 <_printf_i+0x1c8>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b005      	add	sp, #20
 800d7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7d6:	4839      	ldr	r0, [pc, #228]	; (800d8bc <_printf_i+0x21c>)
 800d7d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d7dc:	6813      	ldr	r3, [r2, #0]
 800d7de:	6821      	ldr	r1, [r4, #0]
 800d7e0:	1d1d      	adds	r5, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6015      	str	r5, [r2, #0]
 800d7e6:	060a      	lsls	r2, r1, #24
 800d7e8:	d50b      	bpl.n	800d802 <_printf_i+0x162>
 800d7ea:	07ca      	lsls	r2, r1, #31
 800d7ec:	bf44      	itt	mi
 800d7ee:	f041 0120 	orrmi.w	r1, r1, #32
 800d7f2:	6021      	strmi	r1, [r4, #0]
 800d7f4:	b91b      	cbnz	r3, 800d7fe <_printf_i+0x15e>
 800d7f6:	6822      	ldr	r2, [r4, #0]
 800d7f8:	f022 0220 	bic.w	r2, r2, #32
 800d7fc:	6022      	str	r2, [r4, #0]
 800d7fe:	2210      	movs	r2, #16
 800d800:	e7b7      	b.n	800d772 <_printf_i+0xd2>
 800d802:	064d      	lsls	r5, r1, #25
 800d804:	bf48      	it	mi
 800d806:	b29b      	uxthmi	r3, r3
 800d808:	e7ef      	b.n	800d7ea <_printf_i+0x14a>
 800d80a:	4665      	mov	r5, ip
 800d80c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d810:	fb02 3311 	mls	r3, r2, r1, r3
 800d814:	5cc3      	ldrb	r3, [r0, r3]
 800d816:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d81a:	460b      	mov	r3, r1
 800d81c:	2900      	cmp	r1, #0
 800d81e:	d1f5      	bne.n	800d80c <_printf_i+0x16c>
 800d820:	e7b9      	b.n	800d796 <_printf_i+0xf6>
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	6825      	ldr	r5, [r4, #0]
 800d826:	6961      	ldr	r1, [r4, #20]
 800d828:	1d18      	adds	r0, r3, #4
 800d82a:	6010      	str	r0, [r2, #0]
 800d82c:	0628      	lsls	r0, r5, #24
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	d501      	bpl.n	800d836 <_printf_i+0x196>
 800d832:	6019      	str	r1, [r3, #0]
 800d834:	e002      	b.n	800d83c <_printf_i+0x19c>
 800d836:	066a      	lsls	r2, r5, #25
 800d838:	d5fb      	bpl.n	800d832 <_printf_i+0x192>
 800d83a:	8019      	strh	r1, [r3, #0]
 800d83c:	2300      	movs	r3, #0
 800d83e:	6123      	str	r3, [r4, #16]
 800d840:	4665      	mov	r5, ip
 800d842:	e7b9      	b.n	800d7b8 <_printf_i+0x118>
 800d844:	6813      	ldr	r3, [r2, #0]
 800d846:	1d19      	adds	r1, r3, #4
 800d848:	6011      	str	r1, [r2, #0]
 800d84a:	681d      	ldr	r5, [r3, #0]
 800d84c:	6862      	ldr	r2, [r4, #4]
 800d84e:	2100      	movs	r1, #0
 800d850:	4628      	mov	r0, r5
 800d852:	f7f2 fced 	bl	8000230 <memchr>
 800d856:	b108      	cbz	r0, 800d85c <_printf_i+0x1bc>
 800d858:	1b40      	subs	r0, r0, r5
 800d85a:	6060      	str	r0, [r4, #4]
 800d85c:	6863      	ldr	r3, [r4, #4]
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	2300      	movs	r3, #0
 800d862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d866:	e7a7      	b.n	800d7b8 <_printf_i+0x118>
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	462a      	mov	r2, r5
 800d86c:	4639      	mov	r1, r7
 800d86e:	4630      	mov	r0, r6
 800d870:	47c0      	blx	r8
 800d872:	3001      	adds	r0, #1
 800d874:	d0aa      	beq.n	800d7cc <_printf_i+0x12c>
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	079b      	lsls	r3, r3, #30
 800d87a:	d413      	bmi.n	800d8a4 <_printf_i+0x204>
 800d87c:	68e0      	ldr	r0, [r4, #12]
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	4298      	cmp	r0, r3
 800d882:	bfb8      	it	lt
 800d884:	4618      	movlt	r0, r3
 800d886:	e7a3      	b.n	800d7d0 <_printf_i+0x130>
 800d888:	2301      	movs	r3, #1
 800d88a:	464a      	mov	r2, r9
 800d88c:	4639      	mov	r1, r7
 800d88e:	4630      	mov	r0, r6
 800d890:	47c0      	blx	r8
 800d892:	3001      	adds	r0, #1
 800d894:	d09a      	beq.n	800d7cc <_printf_i+0x12c>
 800d896:	3501      	adds	r5, #1
 800d898:	68e3      	ldr	r3, [r4, #12]
 800d89a:	9a03      	ldr	r2, [sp, #12]
 800d89c:	1a9b      	subs	r3, r3, r2
 800d89e:	42ab      	cmp	r3, r5
 800d8a0:	dcf2      	bgt.n	800d888 <_printf_i+0x1e8>
 800d8a2:	e7eb      	b.n	800d87c <_printf_i+0x1dc>
 800d8a4:	2500      	movs	r5, #0
 800d8a6:	f104 0919 	add.w	r9, r4, #25
 800d8aa:	e7f5      	b.n	800d898 <_printf_i+0x1f8>
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1ac      	bne.n	800d80a <_printf_i+0x16a>
 800d8b0:	7803      	ldrb	r3, [r0, #0]
 800d8b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8ba:	e76c      	b.n	800d796 <_printf_i+0xf6>
 800d8bc:	0800f8b2 	.word	0x0800f8b2
 800d8c0:	0800f8c3 	.word	0x0800f8c3

0800d8c4 <iprintf>:
 800d8c4:	b40f      	push	{r0, r1, r2, r3}
 800d8c6:	4b0a      	ldr	r3, [pc, #40]	; (800d8f0 <iprintf+0x2c>)
 800d8c8:	b513      	push	{r0, r1, r4, lr}
 800d8ca:	681c      	ldr	r4, [r3, #0]
 800d8cc:	b124      	cbz	r4, 800d8d8 <iprintf+0x14>
 800d8ce:	69a3      	ldr	r3, [r4, #24]
 800d8d0:	b913      	cbnz	r3, 800d8d8 <iprintf+0x14>
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f001 f87c 	bl	800e9d0 <__sinit>
 800d8d8:	ab05      	add	r3, sp, #20
 800d8da:	9a04      	ldr	r2, [sp, #16]
 800d8dc:	68a1      	ldr	r1, [r4, #8]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f001 fd35 	bl	800f350 <_vfiprintf_r>
 800d8e6:	b002      	add	sp, #8
 800d8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ec:	b004      	add	sp, #16
 800d8ee:	4770      	bx	lr
 800d8f0:	20000050 	.word	0x20000050

0800d8f4 <putchar>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4b08      	ldr	r3, [pc, #32]	; (800d918 <putchar+0x24>)
 800d8f8:	681c      	ldr	r4, [r3, #0]
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	b124      	cbz	r4, 800d908 <putchar+0x14>
 800d8fe:	69a3      	ldr	r3, [r4, #24]
 800d900:	b913      	cbnz	r3, 800d908 <putchar+0x14>
 800d902:	4620      	mov	r0, r4
 800d904:	f001 f864 	bl	800e9d0 <__sinit>
 800d908:	68a2      	ldr	r2, [r4, #8]
 800d90a:	4629      	mov	r1, r5
 800d90c:	4620      	mov	r0, r4
 800d90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d912:	f001 be33 	b.w	800f57c <_putc_r>
 800d916:	bf00      	nop
 800d918:	20000050 	.word	0x20000050

0800d91c <_puts_r>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	460e      	mov	r6, r1
 800d920:	4605      	mov	r5, r0
 800d922:	b118      	cbz	r0, 800d92c <_puts_r+0x10>
 800d924:	6983      	ldr	r3, [r0, #24]
 800d926:	b90b      	cbnz	r3, 800d92c <_puts_r+0x10>
 800d928:	f001 f852 	bl	800e9d0 <__sinit>
 800d92c:	69ab      	ldr	r3, [r5, #24]
 800d92e:	68ac      	ldr	r4, [r5, #8]
 800d930:	b913      	cbnz	r3, 800d938 <_puts_r+0x1c>
 800d932:	4628      	mov	r0, r5
 800d934:	f001 f84c 	bl	800e9d0 <__sinit>
 800d938:	4b23      	ldr	r3, [pc, #140]	; (800d9c8 <_puts_r+0xac>)
 800d93a:	429c      	cmp	r4, r3
 800d93c:	d117      	bne.n	800d96e <_puts_r+0x52>
 800d93e:	686c      	ldr	r4, [r5, #4]
 800d940:	89a3      	ldrh	r3, [r4, #12]
 800d942:	071b      	lsls	r3, r3, #28
 800d944:	d51d      	bpl.n	800d982 <_puts_r+0x66>
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	b1db      	cbz	r3, 800d982 <_puts_r+0x66>
 800d94a:	3e01      	subs	r6, #1
 800d94c:	68a3      	ldr	r3, [r4, #8]
 800d94e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d952:	3b01      	subs	r3, #1
 800d954:	60a3      	str	r3, [r4, #8]
 800d956:	b9e9      	cbnz	r1, 800d994 <_puts_r+0x78>
 800d958:	2b00      	cmp	r3, #0
 800d95a:	da2e      	bge.n	800d9ba <_puts_r+0x9e>
 800d95c:	4622      	mov	r2, r4
 800d95e:	210a      	movs	r1, #10
 800d960:	4628      	mov	r0, r5
 800d962:	f000 f83f 	bl	800d9e4 <__swbuf_r>
 800d966:	3001      	adds	r0, #1
 800d968:	d011      	beq.n	800d98e <_puts_r+0x72>
 800d96a:	200a      	movs	r0, #10
 800d96c:	e011      	b.n	800d992 <_puts_r+0x76>
 800d96e:	4b17      	ldr	r3, [pc, #92]	; (800d9cc <_puts_r+0xb0>)
 800d970:	429c      	cmp	r4, r3
 800d972:	d101      	bne.n	800d978 <_puts_r+0x5c>
 800d974:	68ac      	ldr	r4, [r5, #8]
 800d976:	e7e3      	b.n	800d940 <_puts_r+0x24>
 800d978:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <_puts_r+0xb4>)
 800d97a:	429c      	cmp	r4, r3
 800d97c:	bf08      	it	eq
 800d97e:	68ec      	ldreq	r4, [r5, #12]
 800d980:	e7de      	b.n	800d940 <_puts_r+0x24>
 800d982:	4621      	mov	r1, r4
 800d984:	4628      	mov	r0, r5
 800d986:	f000 f87f 	bl	800da88 <__swsetup_r>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0dd      	beq.n	800d94a <_puts_r+0x2e>
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	2b00      	cmp	r3, #0
 800d996:	da04      	bge.n	800d9a2 <_puts_r+0x86>
 800d998:	69a2      	ldr	r2, [r4, #24]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	dc06      	bgt.n	800d9ac <_puts_r+0x90>
 800d99e:	290a      	cmp	r1, #10
 800d9a0:	d004      	beq.n	800d9ac <_puts_r+0x90>
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	6022      	str	r2, [r4, #0]
 800d9a8:	7019      	strb	r1, [r3, #0]
 800d9aa:	e7cf      	b.n	800d94c <_puts_r+0x30>
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 f818 	bl	800d9e4 <__swbuf_r>
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d1c9      	bne.n	800d94c <_puts_r+0x30>
 800d9b8:	e7e9      	b.n	800d98e <_puts_r+0x72>
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	200a      	movs	r0, #10
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	6022      	str	r2, [r4, #0]
 800d9c2:	7018      	strb	r0, [r3, #0]
 800d9c4:	e7e5      	b.n	800d992 <_puts_r+0x76>
 800d9c6:	bf00      	nop
 800d9c8:	0800f904 	.word	0x0800f904
 800d9cc:	0800f924 	.word	0x0800f924
 800d9d0:	0800f8e4 	.word	0x0800f8e4

0800d9d4 <puts>:
 800d9d4:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <puts+0xc>)
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f7ff bf9f 	b.w	800d91c <_puts_r>
 800d9de:	bf00      	nop
 800d9e0:	20000050 	.word	0x20000050

0800d9e4 <__swbuf_r>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	460e      	mov	r6, r1
 800d9e8:	4614      	mov	r4, r2
 800d9ea:	4605      	mov	r5, r0
 800d9ec:	b118      	cbz	r0, 800d9f6 <__swbuf_r+0x12>
 800d9ee:	6983      	ldr	r3, [r0, #24]
 800d9f0:	b90b      	cbnz	r3, 800d9f6 <__swbuf_r+0x12>
 800d9f2:	f000 ffed 	bl	800e9d0 <__sinit>
 800d9f6:	4b21      	ldr	r3, [pc, #132]	; (800da7c <__swbuf_r+0x98>)
 800d9f8:	429c      	cmp	r4, r3
 800d9fa:	d12a      	bne.n	800da52 <__swbuf_r+0x6e>
 800d9fc:	686c      	ldr	r4, [r5, #4]
 800d9fe:	69a3      	ldr	r3, [r4, #24]
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	071a      	lsls	r2, r3, #28
 800da06:	d52e      	bpl.n	800da66 <__swbuf_r+0x82>
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	b363      	cbz	r3, 800da66 <__swbuf_r+0x82>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	6820      	ldr	r0, [r4, #0]
 800da10:	1ac0      	subs	r0, r0, r3
 800da12:	6963      	ldr	r3, [r4, #20]
 800da14:	b2f6      	uxtb	r6, r6
 800da16:	4283      	cmp	r3, r0
 800da18:	4637      	mov	r7, r6
 800da1a:	dc04      	bgt.n	800da26 <__swbuf_r+0x42>
 800da1c:	4621      	mov	r1, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 ff6c 	bl	800e8fc <_fflush_r>
 800da24:	bb28      	cbnz	r0, 800da72 <__swbuf_r+0x8e>
 800da26:	68a3      	ldr	r3, [r4, #8]
 800da28:	3b01      	subs	r3, #1
 800da2a:	60a3      	str	r3, [r4, #8]
 800da2c:	6823      	ldr	r3, [r4, #0]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	6022      	str	r2, [r4, #0]
 800da32:	701e      	strb	r6, [r3, #0]
 800da34:	6963      	ldr	r3, [r4, #20]
 800da36:	3001      	adds	r0, #1
 800da38:	4283      	cmp	r3, r0
 800da3a:	d004      	beq.n	800da46 <__swbuf_r+0x62>
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	07db      	lsls	r3, r3, #31
 800da40:	d519      	bpl.n	800da76 <__swbuf_r+0x92>
 800da42:	2e0a      	cmp	r6, #10
 800da44:	d117      	bne.n	800da76 <__swbuf_r+0x92>
 800da46:	4621      	mov	r1, r4
 800da48:	4628      	mov	r0, r5
 800da4a:	f000 ff57 	bl	800e8fc <_fflush_r>
 800da4e:	b190      	cbz	r0, 800da76 <__swbuf_r+0x92>
 800da50:	e00f      	b.n	800da72 <__swbuf_r+0x8e>
 800da52:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <__swbuf_r+0x9c>)
 800da54:	429c      	cmp	r4, r3
 800da56:	d101      	bne.n	800da5c <__swbuf_r+0x78>
 800da58:	68ac      	ldr	r4, [r5, #8]
 800da5a:	e7d0      	b.n	800d9fe <__swbuf_r+0x1a>
 800da5c:	4b09      	ldr	r3, [pc, #36]	; (800da84 <__swbuf_r+0xa0>)
 800da5e:	429c      	cmp	r4, r3
 800da60:	bf08      	it	eq
 800da62:	68ec      	ldreq	r4, [r5, #12]
 800da64:	e7cb      	b.n	800d9fe <__swbuf_r+0x1a>
 800da66:	4621      	mov	r1, r4
 800da68:	4628      	mov	r0, r5
 800da6a:	f000 f80d 	bl	800da88 <__swsetup_r>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d0cc      	beq.n	800da0c <__swbuf_r+0x28>
 800da72:	f04f 37ff 	mov.w	r7, #4294967295
 800da76:	4638      	mov	r0, r7
 800da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da7a:	bf00      	nop
 800da7c:	0800f904 	.word	0x0800f904
 800da80:	0800f924 	.word	0x0800f924
 800da84:	0800f8e4 	.word	0x0800f8e4

0800da88 <__swsetup_r>:
 800da88:	4b32      	ldr	r3, [pc, #200]	; (800db54 <__swsetup_r+0xcc>)
 800da8a:	b570      	push	{r4, r5, r6, lr}
 800da8c:	681d      	ldr	r5, [r3, #0]
 800da8e:	4606      	mov	r6, r0
 800da90:	460c      	mov	r4, r1
 800da92:	b125      	cbz	r5, 800da9e <__swsetup_r+0x16>
 800da94:	69ab      	ldr	r3, [r5, #24]
 800da96:	b913      	cbnz	r3, 800da9e <__swsetup_r+0x16>
 800da98:	4628      	mov	r0, r5
 800da9a:	f000 ff99 	bl	800e9d0 <__sinit>
 800da9e:	4b2e      	ldr	r3, [pc, #184]	; (800db58 <__swsetup_r+0xd0>)
 800daa0:	429c      	cmp	r4, r3
 800daa2:	d10f      	bne.n	800dac4 <__swsetup_r+0x3c>
 800daa4:	686c      	ldr	r4, [r5, #4]
 800daa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daaa:	b29a      	uxth	r2, r3
 800daac:	0715      	lsls	r5, r2, #28
 800daae:	d42c      	bmi.n	800db0a <__swsetup_r+0x82>
 800dab0:	06d0      	lsls	r0, r2, #27
 800dab2:	d411      	bmi.n	800dad8 <__swsetup_r+0x50>
 800dab4:	2209      	movs	r2, #9
 800dab6:	6032      	str	r2, [r6, #0]
 800dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	f04f 30ff 	mov.w	r0, #4294967295
 800dac2:	e03e      	b.n	800db42 <__swsetup_r+0xba>
 800dac4:	4b25      	ldr	r3, [pc, #148]	; (800db5c <__swsetup_r+0xd4>)
 800dac6:	429c      	cmp	r4, r3
 800dac8:	d101      	bne.n	800dace <__swsetup_r+0x46>
 800daca:	68ac      	ldr	r4, [r5, #8]
 800dacc:	e7eb      	b.n	800daa6 <__swsetup_r+0x1e>
 800dace:	4b24      	ldr	r3, [pc, #144]	; (800db60 <__swsetup_r+0xd8>)
 800dad0:	429c      	cmp	r4, r3
 800dad2:	bf08      	it	eq
 800dad4:	68ec      	ldreq	r4, [r5, #12]
 800dad6:	e7e6      	b.n	800daa6 <__swsetup_r+0x1e>
 800dad8:	0751      	lsls	r1, r2, #29
 800dada:	d512      	bpl.n	800db02 <__swsetup_r+0x7a>
 800dadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dade:	b141      	cbz	r1, 800daf2 <__swsetup_r+0x6a>
 800dae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dae4:	4299      	cmp	r1, r3
 800dae6:	d002      	beq.n	800daee <__swsetup_r+0x66>
 800dae8:	4630      	mov	r0, r6
 800daea:	f001 fb5f 	bl	800f1ac <_free_r>
 800daee:	2300      	movs	r3, #0
 800daf0:	6363      	str	r3, [r4, #52]	; 0x34
 800daf2:	89a3      	ldrh	r3, [r4, #12]
 800daf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800daf8:	81a3      	strh	r3, [r4, #12]
 800dafa:	2300      	movs	r3, #0
 800dafc:	6063      	str	r3, [r4, #4]
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f043 0308 	orr.w	r3, r3, #8
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	6923      	ldr	r3, [r4, #16]
 800db0c:	b94b      	cbnz	r3, 800db22 <__swsetup_r+0x9a>
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db18:	d003      	beq.n	800db22 <__swsetup_r+0x9a>
 800db1a:	4621      	mov	r1, r4
 800db1c:	4630      	mov	r0, r6
 800db1e:	f001 f813 	bl	800eb48 <__smakebuf_r>
 800db22:	89a2      	ldrh	r2, [r4, #12]
 800db24:	f012 0301 	ands.w	r3, r2, #1
 800db28:	d00c      	beq.n	800db44 <__swsetup_r+0xbc>
 800db2a:	2300      	movs	r3, #0
 800db2c:	60a3      	str	r3, [r4, #8]
 800db2e:	6963      	ldr	r3, [r4, #20]
 800db30:	425b      	negs	r3, r3
 800db32:	61a3      	str	r3, [r4, #24]
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	b953      	cbnz	r3, 800db4e <__swsetup_r+0xc6>
 800db38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800db40:	d1ba      	bne.n	800dab8 <__swsetup_r+0x30>
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	0792      	lsls	r2, r2, #30
 800db46:	bf58      	it	pl
 800db48:	6963      	ldrpl	r3, [r4, #20]
 800db4a:	60a3      	str	r3, [r4, #8]
 800db4c:	e7f2      	b.n	800db34 <__swsetup_r+0xac>
 800db4e:	2000      	movs	r0, #0
 800db50:	e7f7      	b.n	800db42 <__swsetup_r+0xba>
 800db52:	bf00      	nop
 800db54:	20000050 	.word	0x20000050
 800db58:	0800f904 	.word	0x0800f904
 800db5c:	0800f924 	.word	0x0800f924
 800db60:	0800f8e4 	.word	0x0800f8e4

0800db64 <quorem>:
 800db64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db68:	6903      	ldr	r3, [r0, #16]
 800db6a:	690c      	ldr	r4, [r1, #16]
 800db6c:	42a3      	cmp	r3, r4
 800db6e:	4680      	mov	r8, r0
 800db70:	f2c0 8082 	blt.w	800dc78 <quorem+0x114>
 800db74:	3c01      	subs	r4, #1
 800db76:	f101 0714 	add.w	r7, r1, #20
 800db7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800db7e:	f100 0614 	add.w	r6, r0, #20
 800db82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800db86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800db8a:	eb06 030c 	add.w	r3, r6, ip
 800db8e:	3501      	adds	r5, #1
 800db90:	eb07 090c 	add.w	r9, r7, ip
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	fbb0 f5f5 	udiv	r5, r0, r5
 800db9a:	b395      	cbz	r5, 800dc02 <quorem+0x9e>
 800db9c:	f04f 0a00 	mov.w	sl, #0
 800dba0:	4638      	mov	r0, r7
 800dba2:	46b6      	mov	lr, r6
 800dba4:	46d3      	mov	fp, sl
 800dba6:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbaa:	b293      	uxth	r3, r2
 800dbac:	fb05 a303 	mla	r3, r5, r3, sl
 800dbb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	ebab 0303 	sub.w	r3, fp, r3
 800dbba:	0c12      	lsrs	r2, r2, #16
 800dbbc:	f8de b000 	ldr.w	fp, [lr]
 800dbc0:	fb05 a202 	mla	r2, r5, r2, sl
 800dbc4:	fa13 f38b 	uxtah	r3, r3, fp
 800dbc8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dbcc:	fa1f fb82 	uxth.w	fp, r2
 800dbd0:	f8de 2000 	ldr.w	r2, [lr]
 800dbd4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dbd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbe2:	4581      	cmp	r9, r0
 800dbe4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dbe8:	f84e 3b04 	str.w	r3, [lr], #4
 800dbec:	d2db      	bcs.n	800dba6 <quorem+0x42>
 800dbee:	f856 300c 	ldr.w	r3, [r6, ip]
 800dbf2:	b933      	cbnz	r3, 800dc02 <quorem+0x9e>
 800dbf4:	9b01      	ldr	r3, [sp, #4]
 800dbf6:	3b04      	subs	r3, #4
 800dbf8:	429e      	cmp	r6, r3
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	d330      	bcc.n	800dc60 <quorem+0xfc>
 800dbfe:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc02:	4640      	mov	r0, r8
 800dc04:	f001 f9fe 	bl	800f004 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	db25      	blt.n	800dc58 <quorem+0xf4>
 800dc0c:	3501      	adds	r5, #1
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f04f 0c00 	mov.w	ip, #0
 800dc14:	f857 2b04 	ldr.w	r2, [r7], #4
 800dc18:	f8d0 e000 	ldr.w	lr, [r0]
 800dc1c:	b293      	uxth	r3, r2
 800dc1e:	ebac 0303 	sub.w	r3, ip, r3
 800dc22:	0c12      	lsrs	r2, r2, #16
 800dc24:	fa13 f38e 	uxtah	r3, r3, lr
 800dc28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dc2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc36:	45b9      	cmp	r9, r7
 800dc38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dc3c:	f840 3b04 	str.w	r3, [r0], #4
 800dc40:	d2e8      	bcs.n	800dc14 <quorem+0xb0>
 800dc42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dc46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dc4a:	b92a      	cbnz	r2, 800dc58 <quorem+0xf4>
 800dc4c:	3b04      	subs	r3, #4
 800dc4e:	429e      	cmp	r6, r3
 800dc50:	461a      	mov	r2, r3
 800dc52:	d30b      	bcc.n	800dc6c <quorem+0x108>
 800dc54:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc58:	4628      	mov	r0, r5
 800dc5a:	b003      	add	sp, #12
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	6812      	ldr	r2, [r2, #0]
 800dc62:	3b04      	subs	r3, #4
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	d1ca      	bne.n	800dbfe <quorem+0x9a>
 800dc68:	3c01      	subs	r4, #1
 800dc6a:	e7c5      	b.n	800dbf8 <quorem+0x94>
 800dc6c:	6812      	ldr	r2, [r2, #0]
 800dc6e:	3b04      	subs	r3, #4
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d1ef      	bne.n	800dc54 <quorem+0xf0>
 800dc74:	3c01      	subs	r4, #1
 800dc76:	e7ea      	b.n	800dc4e <quorem+0xea>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7ee      	b.n	800dc5a <quorem+0xf6>
 800dc7c:	0000      	movs	r0, r0
	...

0800dc80 <_dtoa_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	ec57 6b10 	vmov	r6, r7, d0
 800dc88:	b097      	sub	sp, #92	; 0x5c
 800dc8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc8c:	9106      	str	r1, [sp, #24]
 800dc8e:	4604      	mov	r4, r0
 800dc90:	920b      	str	r2, [sp, #44]	; 0x2c
 800dc92:	9312      	str	r3, [sp, #72]	; 0x48
 800dc94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc98:	e9cd 6700 	strd	r6, r7, [sp]
 800dc9c:	b93d      	cbnz	r5, 800dcae <_dtoa_r+0x2e>
 800dc9e:	2010      	movs	r0, #16
 800dca0:	f000 ff92 	bl	800ebc8 <malloc>
 800dca4:	6260      	str	r0, [r4, #36]	; 0x24
 800dca6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcaa:	6005      	str	r5, [r0, #0]
 800dcac:	60c5      	str	r5, [r0, #12]
 800dcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcb0:	6819      	ldr	r1, [r3, #0]
 800dcb2:	b151      	cbz	r1, 800dcca <_dtoa_r+0x4a>
 800dcb4:	685a      	ldr	r2, [r3, #4]
 800dcb6:	604a      	str	r2, [r1, #4]
 800dcb8:	2301      	movs	r3, #1
 800dcba:	4093      	lsls	r3, r2
 800dcbc:	608b      	str	r3, [r1, #8]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 ffbe 	bl	800ec40 <_Bfree>
 800dcc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	1e3b      	subs	r3, r7, #0
 800dccc:	bfbb      	ittet	lt
 800dcce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dcd2:	9301      	strlt	r3, [sp, #4]
 800dcd4:	2300      	movge	r3, #0
 800dcd6:	2201      	movlt	r2, #1
 800dcd8:	bfac      	ite	ge
 800dcda:	f8c8 3000 	strge.w	r3, [r8]
 800dcde:	f8c8 2000 	strlt.w	r2, [r8]
 800dce2:	4baf      	ldr	r3, [pc, #700]	; (800dfa0 <_dtoa_r+0x320>)
 800dce4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dce8:	ea33 0308 	bics.w	r3, r3, r8
 800dcec:	d114      	bne.n	800dd18 <_dtoa_r+0x98>
 800dcee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dcf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	b923      	cbnz	r3, 800dd04 <_dtoa_r+0x84>
 800dcfa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	f000 8542 	beq.w	800e788 <_dtoa_r+0xb08>
 800dd04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800dfb4 <_dtoa_r+0x334>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 8544 	beq.w	800e798 <_dtoa_r+0xb18>
 800dd10:	f10b 0303 	add.w	r3, fp, #3
 800dd14:	f000 bd3e 	b.w	800e794 <_dtoa_r+0xb14>
 800dd18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2300      	movs	r3, #0
 800dd20:	4630      	mov	r0, r6
 800dd22:	4639      	mov	r1, r7
 800dd24:	f7f2 fef8 	bl	8000b18 <__aeabi_dcmpeq>
 800dd28:	4681      	mov	r9, r0
 800dd2a:	b168      	cbz	r0, 800dd48 <_dtoa_r+0xc8>
 800dd2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd2e:	2301      	movs	r3, #1
 800dd30:	6013      	str	r3, [r2, #0]
 800dd32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 8524 	beq.w	800e782 <_dtoa_r+0xb02>
 800dd3a:	4b9a      	ldr	r3, [pc, #616]	; (800dfa4 <_dtoa_r+0x324>)
 800dd3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd3e:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	f000 bd28 	b.w	800e798 <_dtoa_r+0xb18>
 800dd48:	aa14      	add	r2, sp, #80	; 0x50
 800dd4a:	a915      	add	r1, sp, #84	; 0x54
 800dd4c:	ec47 6b10 	vmov	d0, r6, r7
 800dd50:	4620      	mov	r0, r4
 800dd52:	f001 f9ce 	bl	800f0f2 <__d2b>
 800dd56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dd5a:	9004      	str	r0, [sp, #16]
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	d07c      	beq.n	800de5a <_dtoa_r+0x1da>
 800dd60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dd68:	46b2      	mov	sl, r6
 800dd6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800dd6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dd76:	2200      	movs	r2, #0
 800dd78:	4b8b      	ldr	r3, [pc, #556]	; (800dfa8 <_dtoa_r+0x328>)
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4659      	mov	r1, fp
 800dd7e:	f7f2 faab 	bl	80002d8 <__aeabi_dsub>
 800dd82:	a381      	add	r3, pc, #516	; (adr r3, 800df88 <_dtoa_r+0x308>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fc5e 	bl	8000648 <__aeabi_dmul>
 800dd8c:	a380      	add	r3, pc, #512	; (adr r3, 800df90 <_dtoa_r+0x310>)
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	f7f2 faa3 	bl	80002dc <__adddf3>
 800dd96:	4606      	mov	r6, r0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	f7f2 fbea 	bl	8000574 <__aeabi_i2d>
 800dda0:	a37d      	add	r3, pc, #500	; (adr r3, 800df98 <_dtoa_r+0x318>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 fc4f 	bl	8000648 <__aeabi_dmul>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	460b      	mov	r3, r1
 800ddae:	4630      	mov	r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 fa93 	bl	80002dc <__adddf3>
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	460f      	mov	r7, r1
 800ddba:	f7f2 fef5 	bl	8000ba8 <__aeabi_d2iz>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4682      	mov	sl, r0
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	4639      	mov	r1, r7
 800ddc8:	f7f2 feb0 	bl	8000b2c <__aeabi_dcmplt>
 800ddcc:	b148      	cbz	r0, 800dde2 <_dtoa_r+0x162>
 800ddce:	4650      	mov	r0, sl
 800ddd0:	f7f2 fbd0 	bl	8000574 <__aeabi_i2d>
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	f7f2 fe9e 	bl	8000b18 <__aeabi_dcmpeq>
 800dddc:	b908      	cbnz	r0, 800dde2 <_dtoa_r+0x162>
 800ddde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dde2:	f1ba 0f16 	cmp.w	sl, #22
 800dde6:	d859      	bhi.n	800de9c <_dtoa_r+0x21c>
 800dde8:	4970      	ldr	r1, [pc, #448]	; (800dfac <_dtoa_r+0x32c>)
 800ddea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ddee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddf6:	f7f2 feb7 	bl	8000b68 <__aeabi_dcmpgt>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d050      	beq.n	800dea0 <_dtoa_r+0x220>
 800ddfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de02:	2300      	movs	r3, #0
 800de04:	930f      	str	r3, [sp, #60]	; 0x3c
 800de06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de08:	1b5d      	subs	r5, r3, r5
 800de0a:	f1b5 0801 	subs.w	r8, r5, #1
 800de0e:	bf49      	itett	mi
 800de10:	f1c5 0301 	rsbmi	r3, r5, #1
 800de14:	2300      	movpl	r3, #0
 800de16:	9305      	strmi	r3, [sp, #20]
 800de18:	f04f 0800 	movmi.w	r8, #0
 800de1c:	bf58      	it	pl
 800de1e:	9305      	strpl	r3, [sp, #20]
 800de20:	f1ba 0f00 	cmp.w	sl, #0
 800de24:	db3e      	blt.n	800dea4 <_dtoa_r+0x224>
 800de26:	2300      	movs	r3, #0
 800de28:	44d0      	add	r8, sl
 800de2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800de2e:	9307      	str	r3, [sp, #28]
 800de30:	9b06      	ldr	r3, [sp, #24]
 800de32:	2b09      	cmp	r3, #9
 800de34:	f200 8090 	bhi.w	800df58 <_dtoa_r+0x2d8>
 800de38:	2b05      	cmp	r3, #5
 800de3a:	bfc4      	itt	gt
 800de3c:	3b04      	subgt	r3, #4
 800de3e:	9306      	strgt	r3, [sp, #24]
 800de40:	9b06      	ldr	r3, [sp, #24]
 800de42:	f1a3 0302 	sub.w	r3, r3, #2
 800de46:	bfcc      	ite	gt
 800de48:	2500      	movgt	r5, #0
 800de4a:	2501      	movle	r5, #1
 800de4c:	2b03      	cmp	r3, #3
 800de4e:	f200 808f 	bhi.w	800df70 <_dtoa_r+0x2f0>
 800de52:	e8df f003 	tbb	[pc, r3]
 800de56:	7f7d      	.short	0x7f7d
 800de58:	7131      	.short	0x7131
 800de5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800de5e:	441d      	add	r5, r3
 800de60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800de64:	2820      	cmp	r0, #32
 800de66:	dd13      	ble.n	800de90 <_dtoa_r+0x210>
 800de68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800de6c:	9b00      	ldr	r3, [sp, #0]
 800de6e:	fa08 f800 	lsl.w	r8, r8, r0
 800de72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800de76:	fa23 f000 	lsr.w	r0, r3, r0
 800de7a:	ea48 0000 	orr.w	r0, r8, r0
 800de7e:	f7f2 fb69 	bl	8000554 <__aeabi_ui2d>
 800de82:	2301      	movs	r3, #1
 800de84:	4682      	mov	sl, r0
 800de86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800de8a:	3d01      	subs	r5, #1
 800de8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800de8e:	e772      	b.n	800dd76 <_dtoa_r+0xf6>
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	f1c0 0020 	rsb	r0, r0, #32
 800de96:	fa03 f000 	lsl.w	r0, r3, r0
 800de9a:	e7f0      	b.n	800de7e <_dtoa_r+0x1fe>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e7b1      	b.n	800de04 <_dtoa_r+0x184>
 800dea0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dea2:	e7b0      	b.n	800de06 <_dtoa_r+0x186>
 800dea4:	9b05      	ldr	r3, [sp, #20]
 800dea6:	eba3 030a 	sub.w	r3, r3, sl
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	f1ca 0300 	rsb	r3, sl, #0
 800deb0:	9307      	str	r3, [sp, #28]
 800deb2:	2300      	movs	r3, #0
 800deb4:	930e      	str	r3, [sp, #56]	; 0x38
 800deb6:	e7bb      	b.n	800de30 <_dtoa_r+0x1b0>
 800deb8:	2301      	movs	r3, #1
 800deba:	930a      	str	r3, [sp, #40]	; 0x28
 800debc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	dd59      	ble.n	800df76 <_dtoa_r+0x2f6>
 800dec2:	9302      	str	r3, [sp, #8]
 800dec4:	4699      	mov	r9, r3
 800dec6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dec8:	2200      	movs	r2, #0
 800deca:	6072      	str	r2, [r6, #4]
 800decc:	2204      	movs	r2, #4
 800dece:	f102 0014 	add.w	r0, r2, #20
 800ded2:	4298      	cmp	r0, r3
 800ded4:	6871      	ldr	r1, [r6, #4]
 800ded6:	d953      	bls.n	800df80 <_dtoa_r+0x300>
 800ded8:	4620      	mov	r0, r4
 800deda:	f000 fe7d 	bl	800ebd8 <_Balloc>
 800dede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dee0:	6030      	str	r0, [r6, #0]
 800dee2:	f1b9 0f0e 	cmp.w	r9, #14
 800dee6:	f8d3 b000 	ldr.w	fp, [r3]
 800deea:	f200 80e6 	bhi.w	800e0ba <_dtoa_r+0x43a>
 800deee:	2d00      	cmp	r5, #0
 800def0:	f000 80e3 	beq.w	800e0ba <_dtoa_r+0x43a>
 800def4:	ed9d 7b00 	vldr	d7, [sp]
 800def8:	f1ba 0f00 	cmp.w	sl, #0
 800defc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800df00:	dd74      	ble.n	800dfec <_dtoa_r+0x36c>
 800df02:	4a2a      	ldr	r2, [pc, #168]	; (800dfac <_dtoa_r+0x32c>)
 800df04:	f00a 030f 	and.w	r3, sl, #15
 800df08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df0c:	ed93 7b00 	vldr	d7, [r3]
 800df10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800df14:	06f0      	lsls	r0, r6, #27
 800df16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800df1a:	d565      	bpl.n	800dfe8 <_dtoa_r+0x368>
 800df1c:	4b24      	ldr	r3, [pc, #144]	; (800dfb0 <_dtoa_r+0x330>)
 800df1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df26:	f7f2 fcb9 	bl	800089c <__aeabi_ddiv>
 800df2a:	e9cd 0100 	strd	r0, r1, [sp]
 800df2e:	f006 060f 	and.w	r6, r6, #15
 800df32:	2503      	movs	r5, #3
 800df34:	4f1e      	ldr	r7, [pc, #120]	; (800dfb0 <_dtoa_r+0x330>)
 800df36:	e04c      	b.n	800dfd2 <_dtoa_r+0x352>
 800df38:	2301      	movs	r3, #1
 800df3a:	930a      	str	r3, [sp, #40]	; 0x28
 800df3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3e:	4453      	add	r3, sl
 800df40:	f103 0901 	add.w	r9, r3, #1
 800df44:	9302      	str	r3, [sp, #8]
 800df46:	464b      	mov	r3, r9
 800df48:	2b01      	cmp	r3, #1
 800df4a:	bfb8      	it	lt
 800df4c:	2301      	movlt	r3, #1
 800df4e:	e7ba      	b.n	800dec6 <_dtoa_r+0x246>
 800df50:	2300      	movs	r3, #0
 800df52:	e7b2      	b.n	800deba <_dtoa_r+0x23a>
 800df54:	2300      	movs	r3, #0
 800df56:	e7f0      	b.n	800df3a <_dtoa_r+0x2ba>
 800df58:	2501      	movs	r5, #1
 800df5a:	2300      	movs	r3, #0
 800df5c:	9306      	str	r3, [sp, #24]
 800df5e:	950a      	str	r5, [sp, #40]	; 0x28
 800df60:	f04f 33ff 	mov.w	r3, #4294967295
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	4699      	mov	r9, r3
 800df68:	2200      	movs	r2, #0
 800df6a:	2312      	movs	r3, #18
 800df6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800df6e:	e7aa      	b.n	800dec6 <_dtoa_r+0x246>
 800df70:	2301      	movs	r3, #1
 800df72:	930a      	str	r3, [sp, #40]	; 0x28
 800df74:	e7f4      	b.n	800df60 <_dtoa_r+0x2e0>
 800df76:	2301      	movs	r3, #1
 800df78:	9302      	str	r3, [sp, #8]
 800df7a:	4699      	mov	r9, r3
 800df7c:	461a      	mov	r2, r3
 800df7e:	e7f5      	b.n	800df6c <_dtoa_r+0x2ec>
 800df80:	3101      	adds	r1, #1
 800df82:	6071      	str	r1, [r6, #4]
 800df84:	0052      	lsls	r2, r2, #1
 800df86:	e7a2      	b.n	800dece <_dtoa_r+0x24e>
 800df88:	636f4361 	.word	0x636f4361
 800df8c:	3fd287a7 	.word	0x3fd287a7
 800df90:	8b60c8b3 	.word	0x8b60c8b3
 800df94:	3fc68a28 	.word	0x3fc68a28
 800df98:	509f79fb 	.word	0x509f79fb
 800df9c:	3fd34413 	.word	0x3fd34413
 800dfa0:	7ff00000 	.word	0x7ff00000
 800dfa4:	0800f8b1 	.word	0x0800f8b1
 800dfa8:	3ff80000 	.word	0x3ff80000
 800dfac:	0800f970 	.word	0x0800f970
 800dfb0:	0800f948 	.word	0x0800f948
 800dfb4:	0800f8dd 	.word	0x0800f8dd
 800dfb8:	07f1      	lsls	r1, r6, #31
 800dfba:	d508      	bpl.n	800dfce <_dtoa_r+0x34e>
 800dfbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc4:	f7f2 fb40 	bl	8000648 <__aeabi_dmul>
 800dfc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dfcc:	3501      	adds	r5, #1
 800dfce:	1076      	asrs	r6, r6, #1
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	2e00      	cmp	r6, #0
 800dfd4:	d1f0      	bne.n	800dfb8 <_dtoa_r+0x338>
 800dfd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dfda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfde:	f7f2 fc5d 	bl	800089c <__aeabi_ddiv>
 800dfe2:	e9cd 0100 	strd	r0, r1, [sp]
 800dfe6:	e01a      	b.n	800e01e <_dtoa_r+0x39e>
 800dfe8:	2502      	movs	r5, #2
 800dfea:	e7a3      	b.n	800df34 <_dtoa_r+0x2b4>
 800dfec:	f000 80a0 	beq.w	800e130 <_dtoa_r+0x4b0>
 800dff0:	f1ca 0600 	rsb	r6, sl, #0
 800dff4:	4b9f      	ldr	r3, [pc, #636]	; (800e274 <_dtoa_r+0x5f4>)
 800dff6:	4fa0      	ldr	r7, [pc, #640]	; (800e278 <_dtoa_r+0x5f8>)
 800dff8:	f006 020f 	and.w	r2, r6, #15
 800dffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e008:	f7f2 fb1e 	bl	8000648 <__aeabi_dmul>
 800e00c:	e9cd 0100 	strd	r0, r1, [sp]
 800e010:	1136      	asrs	r6, r6, #4
 800e012:	2300      	movs	r3, #0
 800e014:	2502      	movs	r5, #2
 800e016:	2e00      	cmp	r6, #0
 800e018:	d17f      	bne.n	800e11a <_dtoa_r+0x49a>
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1e1      	bne.n	800dfe2 <_dtoa_r+0x362>
 800e01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 8087 	beq.w	800e134 <_dtoa_r+0x4b4>
 800e026:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e02a:	2200      	movs	r2, #0
 800e02c:	4b93      	ldr	r3, [pc, #588]	; (800e27c <_dtoa_r+0x5fc>)
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 fd7b 	bl	8000b2c <__aeabi_dcmplt>
 800e036:	2800      	cmp	r0, #0
 800e038:	d07c      	beq.n	800e134 <_dtoa_r+0x4b4>
 800e03a:	f1b9 0f00 	cmp.w	r9, #0
 800e03e:	d079      	beq.n	800e134 <_dtoa_r+0x4b4>
 800e040:	9b02      	ldr	r3, [sp, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	dd35      	ble.n	800e0b2 <_dtoa_r+0x432>
 800e046:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e04a:	9308      	str	r3, [sp, #32]
 800e04c:	4639      	mov	r1, r7
 800e04e:	2200      	movs	r2, #0
 800e050:	4b8b      	ldr	r3, [pc, #556]	; (800e280 <_dtoa_r+0x600>)
 800e052:	4630      	mov	r0, r6
 800e054:	f7f2 faf8 	bl	8000648 <__aeabi_dmul>
 800e058:	e9cd 0100 	strd	r0, r1, [sp]
 800e05c:	9f02      	ldr	r7, [sp, #8]
 800e05e:	3501      	adds	r5, #1
 800e060:	4628      	mov	r0, r5
 800e062:	f7f2 fa87 	bl	8000574 <__aeabi_i2d>
 800e066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e06a:	f7f2 faed 	bl	8000648 <__aeabi_dmul>
 800e06e:	2200      	movs	r2, #0
 800e070:	4b84      	ldr	r3, [pc, #528]	; (800e284 <_dtoa_r+0x604>)
 800e072:	f7f2 f933 	bl	80002dc <__adddf3>
 800e076:	4605      	mov	r5, r0
 800e078:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e07c:	2f00      	cmp	r7, #0
 800e07e:	d15d      	bne.n	800e13c <_dtoa_r+0x4bc>
 800e080:	2200      	movs	r2, #0
 800e082:	4b81      	ldr	r3, [pc, #516]	; (800e288 <_dtoa_r+0x608>)
 800e084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e088:	f7f2 f926 	bl	80002d8 <__aeabi_dsub>
 800e08c:	462a      	mov	r2, r5
 800e08e:	4633      	mov	r3, r6
 800e090:	e9cd 0100 	strd	r0, r1, [sp]
 800e094:	f7f2 fd68 	bl	8000b68 <__aeabi_dcmpgt>
 800e098:	2800      	cmp	r0, #0
 800e09a:	f040 8288 	bne.w	800e5ae <_dtoa_r+0x92e>
 800e09e:	462a      	mov	r2, r5
 800e0a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0a8:	f7f2 fd40 	bl	8000b2c <__aeabi_dcmplt>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f040 827c 	bne.w	800e5aa <_dtoa_r+0x92a>
 800e0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0b6:	e9cd 2300 	strd	r2, r3, [sp]
 800e0ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f2c0 8150 	blt.w	800e362 <_dtoa_r+0x6e2>
 800e0c2:	f1ba 0f0e 	cmp.w	sl, #14
 800e0c6:	f300 814c 	bgt.w	800e362 <_dtoa_r+0x6e2>
 800e0ca:	4b6a      	ldr	r3, [pc, #424]	; (800e274 <_dtoa_r+0x5f4>)
 800e0cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e0d0:	ed93 7b00 	vldr	d7, [r3]
 800e0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0dc:	f280 80d8 	bge.w	800e290 <_dtoa_r+0x610>
 800e0e0:	f1b9 0f00 	cmp.w	r9, #0
 800e0e4:	f300 80d4 	bgt.w	800e290 <_dtoa_r+0x610>
 800e0e8:	f040 825e 	bne.w	800e5a8 <_dtoa_r+0x928>
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4b66      	ldr	r3, [pc, #408]	; (800e288 <_dtoa_r+0x608>)
 800e0f0:	ec51 0b17 	vmov	r0, r1, d7
 800e0f4:	f7f2 faa8 	bl	8000648 <__aeabi_dmul>
 800e0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0fc:	f7f2 fd2a 	bl	8000b54 <__aeabi_dcmpge>
 800e100:	464f      	mov	r7, r9
 800e102:	464e      	mov	r6, r9
 800e104:	2800      	cmp	r0, #0
 800e106:	f040 8234 	bne.w	800e572 <_dtoa_r+0x8f2>
 800e10a:	2331      	movs	r3, #49	; 0x31
 800e10c:	f10b 0501 	add.w	r5, fp, #1
 800e110:	f88b 3000 	strb.w	r3, [fp]
 800e114:	f10a 0a01 	add.w	sl, sl, #1
 800e118:	e22f      	b.n	800e57a <_dtoa_r+0x8fa>
 800e11a:	07f2      	lsls	r2, r6, #31
 800e11c:	d505      	bpl.n	800e12a <_dtoa_r+0x4aa>
 800e11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e122:	f7f2 fa91 	bl	8000648 <__aeabi_dmul>
 800e126:	3501      	adds	r5, #1
 800e128:	2301      	movs	r3, #1
 800e12a:	1076      	asrs	r6, r6, #1
 800e12c:	3708      	adds	r7, #8
 800e12e:	e772      	b.n	800e016 <_dtoa_r+0x396>
 800e130:	2502      	movs	r5, #2
 800e132:	e774      	b.n	800e01e <_dtoa_r+0x39e>
 800e134:	f8cd a020 	str.w	sl, [sp, #32]
 800e138:	464f      	mov	r7, r9
 800e13a:	e791      	b.n	800e060 <_dtoa_r+0x3e0>
 800e13c:	4b4d      	ldr	r3, [pc, #308]	; (800e274 <_dtoa_r+0x5f4>)
 800e13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e142:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d047      	beq.n	800e1dc <_dtoa_r+0x55c>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	2000      	movs	r0, #0
 800e152:	494e      	ldr	r1, [pc, #312]	; (800e28c <_dtoa_r+0x60c>)
 800e154:	f7f2 fba2 	bl	800089c <__aeabi_ddiv>
 800e158:	462a      	mov	r2, r5
 800e15a:	4633      	mov	r3, r6
 800e15c:	f7f2 f8bc 	bl	80002d8 <__aeabi_dsub>
 800e160:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e164:	465d      	mov	r5, fp
 800e166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e16a:	f7f2 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 800e16e:	4606      	mov	r6, r0
 800e170:	f7f2 fa00 	bl	8000574 <__aeabi_i2d>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e17c:	f7f2 f8ac 	bl	80002d8 <__aeabi_dsub>
 800e180:	3630      	adds	r6, #48	; 0x30
 800e182:	f805 6b01 	strb.w	r6, [r5], #1
 800e186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e18a:	e9cd 0100 	strd	r0, r1, [sp]
 800e18e:	f7f2 fccd 	bl	8000b2c <__aeabi_dcmplt>
 800e192:	2800      	cmp	r0, #0
 800e194:	d163      	bne.n	800e25e <_dtoa_r+0x5de>
 800e196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e19a:	2000      	movs	r0, #0
 800e19c:	4937      	ldr	r1, [pc, #220]	; (800e27c <_dtoa_r+0x5fc>)
 800e19e:	f7f2 f89b 	bl	80002d8 <__aeabi_dsub>
 800e1a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e1a6:	f7f2 fcc1 	bl	8000b2c <__aeabi_dcmplt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f040 80b7 	bne.w	800e31e <_dtoa_r+0x69e>
 800e1b0:	eba5 030b 	sub.w	r3, r5, fp
 800e1b4:	429f      	cmp	r7, r3
 800e1b6:	f77f af7c 	ble.w	800e0b2 <_dtoa_r+0x432>
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4b30      	ldr	r3, [pc, #192]	; (800e280 <_dtoa_r+0x600>)
 800e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1c2:	f7f2 fa41 	bl	8000648 <__aeabi_dmul>
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1cc:	4b2c      	ldr	r3, [pc, #176]	; (800e280 <_dtoa_r+0x600>)
 800e1ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1d2:	f7f2 fa39 	bl	8000648 <__aeabi_dmul>
 800e1d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e1da:	e7c4      	b.n	800e166 <_dtoa_r+0x4e6>
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4633      	mov	r3, r6
 800e1e0:	f7f2 fa32 	bl	8000648 <__aeabi_dmul>
 800e1e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1e8:	eb0b 0507 	add.w	r5, fp, r7
 800e1ec:	465e      	mov	r6, fp
 800e1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1f2:	f7f2 fcd9 	bl	8000ba8 <__aeabi_d2iz>
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	f7f2 f9bc 	bl	8000574 <__aeabi_i2d>
 800e1fc:	3730      	adds	r7, #48	; 0x30
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e206:	f7f2 f867 	bl	80002d8 <__aeabi_dsub>
 800e20a:	f806 7b01 	strb.w	r7, [r6], #1
 800e20e:	42ae      	cmp	r6, r5
 800e210:	e9cd 0100 	strd	r0, r1, [sp]
 800e214:	f04f 0200 	mov.w	r2, #0
 800e218:	d126      	bne.n	800e268 <_dtoa_r+0x5e8>
 800e21a:	4b1c      	ldr	r3, [pc, #112]	; (800e28c <_dtoa_r+0x60c>)
 800e21c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e220:	f7f2 f85c 	bl	80002dc <__adddf3>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e22c:	f7f2 fc9c 	bl	8000b68 <__aeabi_dcmpgt>
 800e230:	2800      	cmp	r0, #0
 800e232:	d174      	bne.n	800e31e <_dtoa_r+0x69e>
 800e234:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e238:	2000      	movs	r0, #0
 800e23a:	4914      	ldr	r1, [pc, #80]	; (800e28c <_dtoa_r+0x60c>)
 800e23c:	f7f2 f84c 	bl	80002d8 <__aeabi_dsub>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e248:	f7f2 fc70 	bl	8000b2c <__aeabi_dcmplt>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f43f af30 	beq.w	800e0b2 <_dtoa_r+0x432>
 800e252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e256:	2b30      	cmp	r3, #48	; 0x30
 800e258:	f105 32ff 	add.w	r2, r5, #4294967295
 800e25c:	d002      	beq.n	800e264 <_dtoa_r+0x5e4>
 800e25e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e262:	e04a      	b.n	800e2fa <_dtoa_r+0x67a>
 800e264:	4615      	mov	r5, r2
 800e266:	e7f4      	b.n	800e252 <_dtoa_r+0x5d2>
 800e268:	4b05      	ldr	r3, [pc, #20]	; (800e280 <_dtoa_r+0x600>)
 800e26a:	f7f2 f9ed 	bl	8000648 <__aeabi_dmul>
 800e26e:	e9cd 0100 	strd	r0, r1, [sp]
 800e272:	e7bc      	b.n	800e1ee <_dtoa_r+0x56e>
 800e274:	0800f970 	.word	0x0800f970
 800e278:	0800f948 	.word	0x0800f948
 800e27c:	3ff00000 	.word	0x3ff00000
 800e280:	40240000 	.word	0x40240000
 800e284:	401c0000 	.word	0x401c0000
 800e288:	40140000 	.word	0x40140000
 800e28c:	3fe00000 	.word	0x3fe00000
 800e290:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e294:	465d      	mov	r5, fp
 800e296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e29a:	4630      	mov	r0, r6
 800e29c:	4639      	mov	r1, r7
 800e29e:	f7f2 fafd 	bl	800089c <__aeabi_ddiv>
 800e2a2:	f7f2 fc81 	bl	8000ba8 <__aeabi_d2iz>
 800e2a6:	4680      	mov	r8, r0
 800e2a8:	f7f2 f964 	bl	8000574 <__aeabi_i2d>
 800e2ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2b0:	f7f2 f9ca 	bl	8000648 <__aeabi_dmul>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e2c0:	f7f2 f80a 	bl	80002d8 <__aeabi_dsub>
 800e2c4:	f805 6b01 	strb.w	r6, [r5], #1
 800e2c8:	eba5 060b 	sub.w	r6, r5, fp
 800e2cc:	45b1      	cmp	r9, r6
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	d139      	bne.n	800e348 <_dtoa_r+0x6c8>
 800e2d4:	f7f2 f802 	bl	80002dc <__adddf3>
 800e2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	f7f2 fc42 	bl	8000b68 <__aeabi_dcmpgt>
 800e2e4:	b9c8      	cbnz	r0, 800e31a <_dtoa_r+0x69a>
 800e2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	4639      	mov	r1, r7
 800e2ee:	f7f2 fc13 	bl	8000b18 <__aeabi_dcmpeq>
 800e2f2:	b110      	cbz	r0, 800e2fa <_dtoa_r+0x67a>
 800e2f4:	f018 0f01 	tst.w	r8, #1
 800e2f8:	d10f      	bne.n	800e31a <_dtoa_r+0x69a>
 800e2fa:	9904      	ldr	r1, [sp, #16]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f000 fc9f 	bl	800ec40 <_Bfree>
 800e302:	2300      	movs	r3, #0
 800e304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e306:	702b      	strb	r3, [r5, #0]
 800e308:	f10a 0301 	add.w	r3, sl, #1
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 8241 	beq.w	800e798 <_dtoa_r+0xb18>
 800e316:	601d      	str	r5, [r3, #0]
 800e318:	e23e      	b.n	800e798 <_dtoa_r+0xb18>
 800e31a:	f8cd a020 	str.w	sl, [sp, #32]
 800e31e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e322:	2a39      	cmp	r2, #57	; 0x39
 800e324:	f105 33ff 	add.w	r3, r5, #4294967295
 800e328:	d108      	bne.n	800e33c <_dtoa_r+0x6bc>
 800e32a:	459b      	cmp	fp, r3
 800e32c:	d10a      	bne.n	800e344 <_dtoa_r+0x6c4>
 800e32e:	9b08      	ldr	r3, [sp, #32]
 800e330:	3301      	adds	r3, #1
 800e332:	9308      	str	r3, [sp, #32]
 800e334:	2330      	movs	r3, #48	; 0x30
 800e336:	f88b 3000 	strb.w	r3, [fp]
 800e33a:	465b      	mov	r3, fp
 800e33c:	781a      	ldrb	r2, [r3, #0]
 800e33e:	3201      	adds	r2, #1
 800e340:	701a      	strb	r2, [r3, #0]
 800e342:	e78c      	b.n	800e25e <_dtoa_r+0x5de>
 800e344:	461d      	mov	r5, r3
 800e346:	e7ea      	b.n	800e31e <_dtoa_r+0x69e>
 800e348:	2200      	movs	r2, #0
 800e34a:	4b9b      	ldr	r3, [pc, #620]	; (800e5b8 <_dtoa_r+0x938>)
 800e34c:	f7f2 f97c 	bl	8000648 <__aeabi_dmul>
 800e350:	2200      	movs	r2, #0
 800e352:	2300      	movs	r3, #0
 800e354:	4606      	mov	r6, r0
 800e356:	460f      	mov	r7, r1
 800e358:	f7f2 fbde 	bl	8000b18 <__aeabi_dcmpeq>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d09a      	beq.n	800e296 <_dtoa_r+0x616>
 800e360:	e7cb      	b.n	800e2fa <_dtoa_r+0x67a>
 800e362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e364:	2a00      	cmp	r2, #0
 800e366:	f000 808b 	beq.w	800e480 <_dtoa_r+0x800>
 800e36a:	9a06      	ldr	r2, [sp, #24]
 800e36c:	2a01      	cmp	r2, #1
 800e36e:	dc6e      	bgt.n	800e44e <_dtoa_r+0x7ce>
 800e370:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e372:	2a00      	cmp	r2, #0
 800e374:	d067      	beq.n	800e446 <_dtoa_r+0x7c6>
 800e376:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e37a:	9f07      	ldr	r7, [sp, #28]
 800e37c:	9d05      	ldr	r5, [sp, #20]
 800e37e:	9a05      	ldr	r2, [sp, #20]
 800e380:	2101      	movs	r1, #1
 800e382:	441a      	add	r2, r3
 800e384:	4620      	mov	r0, r4
 800e386:	9205      	str	r2, [sp, #20]
 800e388:	4498      	add	r8, r3
 800e38a:	f000 fcf9 	bl	800ed80 <__i2b>
 800e38e:	4606      	mov	r6, r0
 800e390:	2d00      	cmp	r5, #0
 800e392:	dd0c      	ble.n	800e3ae <_dtoa_r+0x72e>
 800e394:	f1b8 0f00 	cmp.w	r8, #0
 800e398:	dd09      	ble.n	800e3ae <_dtoa_r+0x72e>
 800e39a:	4545      	cmp	r5, r8
 800e39c:	9a05      	ldr	r2, [sp, #20]
 800e39e:	462b      	mov	r3, r5
 800e3a0:	bfa8      	it	ge
 800e3a2:	4643      	movge	r3, r8
 800e3a4:	1ad2      	subs	r2, r2, r3
 800e3a6:	9205      	str	r2, [sp, #20]
 800e3a8:	1aed      	subs	r5, r5, r3
 800e3aa:	eba8 0803 	sub.w	r8, r8, r3
 800e3ae:	9b07      	ldr	r3, [sp, #28]
 800e3b0:	b1eb      	cbz	r3, 800e3ee <_dtoa_r+0x76e>
 800e3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d067      	beq.n	800e488 <_dtoa_r+0x808>
 800e3b8:	b18f      	cbz	r7, 800e3de <_dtoa_r+0x75e>
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	463a      	mov	r2, r7
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f000 fd7e 	bl	800eec0 <__pow5mult>
 800e3c4:	9a04      	ldr	r2, [sp, #16]
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f000 fce1 	bl	800ed92 <__multiply>
 800e3d0:	9904      	ldr	r1, [sp, #16]
 800e3d2:	9008      	str	r0, [sp, #32]
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 fc33 	bl	800ec40 <_Bfree>
 800e3da:	9b08      	ldr	r3, [sp, #32]
 800e3dc:	9304      	str	r3, [sp, #16]
 800e3de:	9b07      	ldr	r3, [sp, #28]
 800e3e0:	1bda      	subs	r2, r3, r7
 800e3e2:	d004      	beq.n	800e3ee <_dtoa_r+0x76e>
 800e3e4:	9904      	ldr	r1, [sp, #16]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 fd6a 	bl	800eec0 <__pow5mult>
 800e3ec:	9004      	str	r0, [sp, #16]
 800e3ee:	2101      	movs	r1, #1
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fcc5 	bl	800ed80 <__i2b>
 800e3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 81d0 	beq.w	800e7a0 <_dtoa_r+0xb20>
 800e400:	461a      	mov	r2, r3
 800e402:	4601      	mov	r1, r0
 800e404:	4620      	mov	r0, r4
 800e406:	f000 fd5b 	bl	800eec0 <__pow5mult>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	4607      	mov	r7, r0
 800e410:	dc40      	bgt.n	800e494 <_dtoa_r+0x814>
 800e412:	9b00      	ldr	r3, [sp, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d139      	bne.n	800e48c <_dtoa_r+0x80c>
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d136      	bne.n	800e490 <_dtoa_r+0x810>
 800e422:	9b01      	ldr	r3, [sp, #4]
 800e424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e428:	0d1b      	lsrs	r3, r3, #20
 800e42a:	051b      	lsls	r3, r3, #20
 800e42c:	b12b      	cbz	r3, 800e43a <_dtoa_r+0x7ba>
 800e42e:	9b05      	ldr	r3, [sp, #20]
 800e430:	3301      	adds	r3, #1
 800e432:	9305      	str	r3, [sp, #20]
 800e434:	f108 0801 	add.w	r8, r8, #1
 800e438:	2301      	movs	r3, #1
 800e43a:	9307      	str	r3, [sp, #28]
 800e43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d12a      	bne.n	800e498 <_dtoa_r+0x818>
 800e442:	2001      	movs	r0, #1
 800e444:	e030      	b.n	800e4a8 <_dtoa_r+0x828>
 800e446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e448:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e44c:	e795      	b.n	800e37a <_dtoa_r+0x6fa>
 800e44e:	9b07      	ldr	r3, [sp, #28]
 800e450:	f109 37ff 	add.w	r7, r9, #4294967295
 800e454:	42bb      	cmp	r3, r7
 800e456:	bfbf      	itttt	lt
 800e458:	9b07      	ldrlt	r3, [sp, #28]
 800e45a:	9707      	strlt	r7, [sp, #28]
 800e45c:	1afa      	sublt	r2, r7, r3
 800e45e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e460:	bfbb      	ittet	lt
 800e462:	189b      	addlt	r3, r3, r2
 800e464:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e466:	1bdf      	subge	r7, r3, r7
 800e468:	2700      	movlt	r7, #0
 800e46a:	f1b9 0f00 	cmp.w	r9, #0
 800e46e:	bfb5      	itete	lt
 800e470:	9b05      	ldrlt	r3, [sp, #20]
 800e472:	9d05      	ldrge	r5, [sp, #20]
 800e474:	eba3 0509 	sublt.w	r5, r3, r9
 800e478:	464b      	movge	r3, r9
 800e47a:	bfb8      	it	lt
 800e47c:	2300      	movlt	r3, #0
 800e47e:	e77e      	b.n	800e37e <_dtoa_r+0x6fe>
 800e480:	9f07      	ldr	r7, [sp, #28]
 800e482:	9d05      	ldr	r5, [sp, #20]
 800e484:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e486:	e783      	b.n	800e390 <_dtoa_r+0x710>
 800e488:	9a07      	ldr	r2, [sp, #28]
 800e48a:	e7ab      	b.n	800e3e4 <_dtoa_r+0x764>
 800e48c:	2300      	movs	r3, #0
 800e48e:	e7d4      	b.n	800e43a <_dtoa_r+0x7ba>
 800e490:	9b00      	ldr	r3, [sp, #0]
 800e492:	e7d2      	b.n	800e43a <_dtoa_r+0x7ba>
 800e494:	2300      	movs	r3, #0
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e49e:	6918      	ldr	r0, [r3, #16]
 800e4a0:	f000 fc20 	bl	800ece4 <__hi0bits>
 800e4a4:	f1c0 0020 	rsb	r0, r0, #32
 800e4a8:	4440      	add	r0, r8
 800e4aa:	f010 001f 	ands.w	r0, r0, #31
 800e4ae:	d047      	beq.n	800e540 <_dtoa_r+0x8c0>
 800e4b0:	f1c0 0320 	rsb	r3, r0, #32
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	dd3b      	ble.n	800e530 <_dtoa_r+0x8b0>
 800e4b8:	9b05      	ldr	r3, [sp, #20]
 800e4ba:	f1c0 001c 	rsb	r0, r0, #28
 800e4be:	4403      	add	r3, r0
 800e4c0:	9305      	str	r3, [sp, #20]
 800e4c2:	4405      	add	r5, r0
 800e4c4:	4480      	add	r8, r0
 800e4c6:	9b05      	ldr	r3, [sp, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd05      	ble.n	800e4d8 <_dtoa_r+0x858>
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	9904      	ldr	r1, [sp, #16]
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 fd43 	bl	800ef5c <__lshift>
 800e4d6:	9004      	str	r0, [sp, #16]
 800e4d8:	f1b8 0f00 	cmp.w	r8, #0
 800e4dc:	dd05      	ble.n	800e4ea <_dtoa_r+0x86a>
 800e4de:	4639      	mov	r1, r7
 800e4e0:	4642      	mov	r2, r8
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 fd3a 	bl	800ef5c <__lshift>
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4ec:	b353      	cbz	r3, 800e544 <_dtoa_r+0x8c4>
 800e4ee:	4639      	mov	r1, r7
 800e4f0:	9804      	ldr	r0, [sp, #16]
 800e4f2:	f000 fd87 	bl	800f004 <__mcmp>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	da24      	bge.n	800e544 <_dtoa_r+0x8c4>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	9904      	ldr	r1, [sp, #16]
 800e500:	4620      	mov	r0, r4
 800e502:	f000 fbb4 	bl	800ec6e <__multadd>
 800e506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e508:	9004      	str	r0, [sp, #16]
 800e50a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 814d 	beq.w	800e7ae <_dtoa_r+0xb2e>
 800e514:	2300      	movs	r3, #0
 800e516:	4631      	mov	r1, r6
 800e518:	220a      	movs	r2, #10
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 fba7 	bl	800ec6e <__multadd>
 800e520:	9b02      	ldr	r3, [sp, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	4606      	mov	r6, r0
 800e526:	dc4f      	bgt.n	800e5c8 <_dtoa_r+0x948>
 800e528:	9b06      	ldr	r3, [sp, #24]
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	dd4c      	ble.n	800e5c8 <_dtoa_r+0x948>
 800e52e:	e011      	b.n	800e554 <_dtoa_r+0x8d4>
 800e530:	d0c9      	beq.n	800e4c6 <_dtoa_r+0x846>
 800e532:	9a05      	ldr	r2, [sp, #20]
 800e534:	331c      	adds	r3, #28
 800e536:	441a      	add	r2, r3
 800e538:	9205      	str	r2, [sp, #20]
 800e53a:	441d      	add	r5, r3
 800e53c:	4498      	add	r8, r3
 800e53e:	e7c2      	b.n	800e4c6 <_dtoa_r+0x846>
 800e540:	4603      	mov	r3, r0
 800e542:	e7f6      	b.n	800e532 <_dtoa_r+0x8b2>
 800e544:	f1b9 0f00 	cmp.w	r9, #0
 800e548:	dc38      	bgt.n	800e5bc <_dtoa_r+0x93c>
 800e54a:	9b06      	ldr	r3, [sp, #24]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	dd35      	ble.n	800e5bc <_dtoa_r+0x93c>
 800e550:	f8cd 9008 	str.w	r9, [sp, #8]
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	b963      	cbnz	r3, 800e572 <_dtoa_r+0x8f2>
 800e558:	4639      	mov	r1, r7
 800e55a:	2205      	movs	r2, #5
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 fb86 	bl	800ec6e <__multadd>
 800e562:	4601      	mov	r1, r0
 800e564:	4607      	mov	r7, r0
 800e566:	9804      	ldr	r0, [sp, #16]
 800e568:	f000 fd4c 	bl	800f004 <__mcmp>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f73f adcc 	bgt.w	800e10a <_dtoa_r+0x48a>
 800e572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e574:	465d      	mov	r5, fp
 800e576:	ea6f 0a03 	mvn.w	sl, r3
 800e57a:	f04f 0900 	mov.w	r9, #0
 800e57e:	4639      	mov	r1, r7
 800e580:	4620      	mov	r0, r4
 800e582:	f000 fb5d 	bl	800ec40 <_Bfree>
 800e586:	2e00      	cmp	r6, #0
 800e588:	f43f aeb7 	beq.w	800e2fa <_dtoa_r+0x67a>
 800e58c:	f1b9 0f00 	cmp.w	r9, #0
 800e590:	d005      	beq.n	800e59e <_dtoa_r+0x91e>
 800e592:	45b1      	cmp	r9, r6
 800e594:	d003      	beq.n	800e59e <_dtoa_r+0x91e>
 800e596:	4649      	mov	r1, r9
 800e598:	4620      	mov	r0, r4
 800e59a:	f000 fb51 	bl	800ec40 <_Bfree>
 800e59e:	4631      	mov	r1, r6
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f000 fb4d 	bl	800ec40 <_Bfree>
 800e5a6:	e6a8      	b.n	800e2fa <_dtoa_r+0x67a>
 800e5a8:	2700      	movs	r7, #0
 800e5aa:	463e      	mov	r6, r7
 800e5ac:	e7e1      	b.n	800e572 <_dtoa_r+0x8f2>
 800e5ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e5b2:	463e      	mov	r6, r7
 800e5b4:	e5a9      	b.n	800e10a <_dtoa_r+0x48a>
 800e5b6:	bf00      	nop
 800e5b8:	40240000 	.word	0x40240000
 800e5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5be:	f8cd 9008 	str.w	r9, [sp, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 80fa 	beq.w	800e7bc <_dtoa_r+0xb3c>
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	dd05      	ble.n	800e5d8 <_dtoa_r+0x958>
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 fcc3 	bl	800ef5c <__lshift>
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	9b07      	ldr	r3, [sp, #28]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d04c      	beq.n	800e678 <_dtoa_r+0x9f8>
 800e5de:	6871      	ldr	r1, [r6, #4]
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 faf9 	bl	800ebd8 <_Balloc>
 800e5e6:	6932      	ldr	r2, [r6, #16]
 800e5e8:	3202      	adds	r2, #2
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	0092      	lsls	r2, r2, #2
 800e5ee:	f106 010c 	add.w	r1, r6, #12
 800e5f2:	300c      	adds	r0, #12
 800e5f4:	f7fe fcf6 	bl	800cfe4 <memcpy>
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 fcad 	bl	800ef5c <__lshift>
 800e602:	9b00      	ldr	r3, [sp, #0]
 800e604:	f8cd b014 	str.w	fp, [sp, #20]
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	46b1      	mov	r9, r6
 800e60e:	9307      	str	r3, [sp, #28]
 800e610:	4606      	mov	r6, r0
 800e612:	4639      	mov	r1, r7
 800e614:	9804      	ldr	r0, [sp, #16]
 800e616:	f7ff faa5 	bl	800db64 <quorem>
 800e61a:	4649      	mov	r1, r9
 800e61c:	4605      	mov	r5, r0
 800e61e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e622:	9804      	ldr	r0, [sp, #16]
 800e624:	f000 fcee 	bl	800f004 <__mcmp>
 800e628:	4632      	mov	r2, r6
 800e62a:	9000      	str	r0, [sp, #0]
 800e62c:	4639      	mov	r1, r7
 800e62e:	4620      	mov	r0, r4
 800e630:	f000 fd02 	bl	800f038 <__mdiff>
 800e634:	68c3      	ldr	r3, [r0, #12]
 800e636:	4602      	mov	r2, r0
 800e638:	bb03      	cbnz	r3, 800e67c <_dtoa_r+0x9fc>
 800e63a:	4601      	mov	r1, r0
 800e63c:	9008      	str	r0, [sp, #32]
 800e63e:	9804      	ldr	r0, [sp, #16]
 800e640:	f000 fce0 	bl	800f004 <__mcmp>
 800e644:	9a08      	ldr	r2, [sp, #32]
 800e646:	4603      	mov	r3, r0
 800e648:	4611      	mov	r1, r2
 800e64a:	4620      	mov	r0, r4
 800e64c:	9308      	str	r3, [sp, #32]
 800e64e:	f000 faf7 	bl	800ec40 <_Bfree>
 800e652:	9b08      	ldr	r3, [sp, #32]
 800e654:	b9a3      	cbnz	r3, 800e680 <_dtoa_r+0xa00>
 800e656:	9a06      	ldr	r2, [sp, #24]
 800e658:	b992      	cbnz	r2, 800e680 <_dtoa_r+0xa00>
 800e65a:	9a07      	ldr	r2, [sp, #28]
 800e65c:	b982      	cbnz	r2, 800e680 <_dtoa_r+0xa00>
 800e65e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e662:	d029      	beq.n	800e6b8 <_dtoa_r+0xa38>
 800e664:	9b00      	ldr	r3, [sp, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	dd01      	ble.n	800e66e <_dtoa_r+0x9ee>
 800e66a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	1c5d      	adds	r5, r3, #1
 800e672:	f883 8000 	strb.w	r8, [r3]
 800e676:	e782      	b.n	800e57e <_dtoa_r+0x8fe>
 800e678:	4630      	mov	r0, r6
 800e67a:	e7c2      	b.n	800e602 <_dtoa_r+0x982>
 800e67c:	2301      	movs	r3, #1
 800e67e:	e7e3      	b.n	800e648 <_dtoa_r+0x9c8>
 800e680:	9a00      	ldr	r2, [sp, #0]
 800e682:	2a00      	cmp	r2, #0
 800e684:	db04      	blt.n	800e690 <_dtoa_r+0xa10>
 800e686:	d125      	bne.n	800e6d4 <_dtoa_r+0xa54>
 800e688:	9a06      	ldr	r2, [sp, #24]
 800e68a:	bb1a      	cbnz	r2, 800e6d4 <_dtoa_r+0xa54>
 800e68c:	9a07      	ldr	r2, [sp, #28]
 800e68e:	bb0a      	cbnz	r2, 800e6d4 <_dtoa_r+0xa54>
 800e690:	2b00      	cmp	r3, #0
 800e692:	ddec      	ble.n	800e66e <_dtoa_r+0x9ee>
 800e694:	2201      	movs	r2, #1
 800e696:	9904      	ldr	r1, [sp, #16]
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 fc5f 	bl	800ef5c <__lshift>
 800e69e:	4639      	mov	r1, r7
 800e6a0:	9004      	str	r0, [sp, #16]
 800e6a2:	f000 fcaf 	bl	800f004 <__mcmp>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	dc03      	bgt.n	800e6b2 <_dtoa_r+0xa32>
 800e6aa:	d1e0      	bne.n	800e66e <_dtoa_r+0x9ee>
 800e6ac:	f018 0f01 	tst.w	r8, #1
 800e6b0:	d0dd      	beq.n	800e66e <_dtoa_r+0x9ee>
 800e6b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e6b6:	d1d8      	bne.n	800e66a <_dtoa_r+0x9ea>
 800e6b8:	9b05      	ldr	r3, [sp, #20]
 800e6ba:	9a05      	ldr	r2, [sp, #20]
 800e6bc:	1c5d      	adds	r5, r3, #1
 800e6be:	2339      	movs	r3, #57	; 0x39
 800e6c0:	7013      	strb	r3, [r2, #0]
 800e6c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e6c6:	2b39      	cmp	r3, #57	; 0x39
 800e6c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e6cc:	d04f      	beq.n	800e76e <_dtoa_r+0xaee>
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	7013      	strb	r3, [r2, #0]
 800e6d2:	e754      	b.n	800e57e <_dtoa_r+0x8fe>
 800e6d4:	9a05      	ldr	r2, [sp, #20]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f102 0501 	add.w	r5, r2, #1
 800e6dc:	dd06      	ble.n	800e6ec <_dtoa_r+0xa6c>
 800e6de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e6e2:	d0e9      	beq.n	800e6b8 <_dtoa_r+0xa38>
 800e6e4:	f108 0801 	add.w	r8, r8, #1
 800e6e8:	9b05      	ldr	r3, [sp, #20]
 800e6ea:	e7c2      	b.n	800e672 <_dtoa_r+0x9f2>
 800e6ec:	9a02      	ldr	r2, [sp, #8]
 800e6ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e6f2:	eba5 030b 	sub.w	r3, r5, fp
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d021      	beq.n	800e73e <_dtoa_r+0xabe>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	220a      	movs	r2, #10
 800e6fe:	9904      	ldr	r1, [sp, #16]
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fab4 	bl	800ec6e <__multadd>
 800e706:	45b1      	cmp	r9, r6
 800e708:	9004      	str	r0, [sp, #16]
 800e70a:	f04f 0300 	mov.w	r3, #0
 800e70e:	f04f 020a 	mov.w	r2, #10
 800e712:	4649      	mov	r1, r9
 800e714:	4620      	mov	r0, r4
 800e716:	d105      	bne.n	800e724 <_dtoa_r+0xaa4>
 800e718:	f000 faa9 	bl	800ec6e <__multadd>
 800e71c:	4681      	mov	r9, r0
 800e71e:	4606      	mov	r6, r0
 800e720:	9505      	str	r5, [sp, #20]
 800e722:	e776      	b.n	800e612 <_dtoa_r+0x992>
 800e724:	f000 faa3 	bl	800ec6e <__multadd>
 800e728:	4631      	mov	r1, r6
 800e72a:	4681      	mov	r9, r0
 800e72c:	2300      	movs	r3, #0
 800e72e:	220a      	movs	r2, #10
 800e730:	4620      	mov	r0, r4
 800e732:	f000 fa9c 	bl	800ec6e <__multadd>
 800e736:	4606      	mov	r6, r0
 800e738:	e7f2      	b.n	800e720 <_dtoa_r+0xaa0>
 800e73a:	f04f 0900 	mov.w	r9, #0
 800e73e:	2201      	movs	r2, #1
 800e740:	9904      	ldr	r1, [sp, #16]
 800e742:	4620      	mov	r0, r4
 800e744:	f000 fc0a 	bl	800ef5c <__lshift>
 800e748:	4639      	mov	r1, r7
 800e74a:	9004      	str	r0, [sp, #16]
 800e74c:	f000 fc5a 	bl	800f004 <__mcmp>
 800e750:	2800      	cmp	r0, #0
 800e752:	dcb6      	bgt.n	800e6c2 <_dtoa_r+0xa42>
 800e754:	d102      	bne.n	800e75c <_dtoa_r+0xadc>
 800e756:	f018 0f01 	tst.w	r8, #1
 800e75a:	d1b2      	bne.n	800e6c2 <_dtoa_r+0xa42>
 800e75c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e760:	2b30      	cmp	r3, #48	; 0x30
 800e762:	f105 32ff 	add.w	r2, r5, #4294967295
 800e766:	f47f af0a 	bne.w	800e57e <_dtoa_r+0x8fe>
 800e76a:	4615      	mov	r5, r2
 800e76c:	e7f6      	b.n	800e75c <_dtoa_r+0xadc>
 800e76e:	4593      	cmp	fp, r2
 800e770:	d105      	bne.n	800e77e <_dtoa_r+0xafe>
 800e772:	2331      	movs	r3, #49	; 0x31
 800e774:	f10a 0a01 	add.w	sl, sl, #1
 800e778:	f88b 3000 	strb.w	r3, [fp]
 800e77c:	e6ff      	b.n	800e57e <_dtoa_r+0x8fe>
 800e77e:	4615      	mov	r5, r2
 800e780:	e79f      	b.n	800e6c2 <_dtoa_r+0xa42>
 800e782:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e7e8 <_dtoa_r+0xb68>
 800e786:	e007      	b.n	800e798 <_dtoa_r+0xb18>
 800e788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e78a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e7ec <_dtoa_r+0xb6c>
 800e78e:	b11b      	cbz	r3, 800e798 <_dtoa_r+0xb18>
 800e790:	f10b 0308 	add.w	r3, fp, #8
 800e794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e796:	6013      	str	r3, [r2, #0]
 800e798:	4658      	mov	r0, fp
 800e79a:	b017      	add	sp, #92	; 0x5c
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	9b06      	ldr	r3, [sp, #24]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	f77f ae35 	ble.w	800e412 <_dtoa_r+0x792>
 800e7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7aa:	9307      	str	r3, [sp, #28]
 800e7ac:	e649      	b.n	800e442 <_dtoa_r+0x7c2>
 800e7ae:	9b02      	ldr	r3, [sp, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dc03      	bgt.n	800e7bc <_dtoa_r+0xb3c>
 800e7b4:	9b06      	ldr	r3, [sp, #24]
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	f73f aecc 	bgt.w	800e554 <_dtoa_r+0x8d4>
 800e7bc:	465d      	mov	r5, fp
 800e7be:	4639      	mov	r1, r7
 800e7c0:	9804      	ldr	r0, [sp, #16]
 800e7c2:	f7ff f9cf 	bl	800db64 <quorem>
 800e7c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e7ca:	f805 8b01 	strb.w	r8, [r5], #1
 800e7ce:	9a02      	ldr	r2, [sp, #8]
 800e7d0:	eba5 030b 	sub.w	r3, r5, fp
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	ddb0      	ble.n	800e73a <_dtoa_r+0xaba>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	220a      	movs	r2, #10
 800e7dc:	9904      	ldr	r1, [sp, #16]
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fa45 	bl	800ec6e <__multadd>
 800e7e4:	9004      	str	r0, [sp, #16]
 800e7e6:	e7ea      	b.n	800e7be <_dtoa_r+0xb3e>
 800e7e8:	0800f8b0 	.word	0x0800f8b0
 800e7ec:	0800f8d4 	.word	0x0800f8d4

0800e7f0 <__sflush_r>:
 800e7f0:	898a      	ldrh	r2, [r1, #12]
 800e7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	0710      	lsls	r0, r2, #28
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	d458      	bmi.n	800e8b0 <__sflush_r+0xc0>
 800e7fe:	684b      	ldr	r3, [r1, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	dc05      	bgt.n	800e810 <__sflush_r+0x20>
 800e804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e806:	2b00      	cmp	r3, #0
 800e808:	dc02      	bgt.n	800e810 <__sflush_r+0x20>
 800e80a:	2000      	movs	r0, #0
 800e80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e812:	2e00      	cmp	r6, #0
 800e814:	d0f9      	beq.n	800e80a <__sflush_r+0x1a>
 800e816:	2300      	movs	r3, #0
 800e818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e81c:	682f      	ldr	r7, [r5, #0]
 800e81e:	6a21      	ldr	r1, [r4, #32]
 800e820:	602b      	str	r3, [r5, #0]
 800e822:	d032      	beq.n	800e88a <__sflush_r+0x9a>
 800e824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	075a      	lsls	r2, r3, #29
 800e82a:	d505      	bpl.n	800e838 <__sflush_r+0x48>
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	1ac0      	subs	r0, r0, r3
 800e830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e832:	b10b      	cbz	r3, 800e838 <__sflush_r+0x48>
 800e834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e836:	1ac0      	subs	r0, r0, r3
 800e838:	2300      	movs	r3, #0
 800e83a:	4602      	mov	r2, r0
 800e83c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e83e:	6a21      	ldr	r1, [r4, #32]
 800e840:	4628      	mov	r0, r5
 800e842:	47b0      	blx	r6
 800e844:	1c43      	adds	r3, r0, #1
 800e846:	89a3      	ldrh	r3, [r4, #12]
 800e848:	d106      	bne.n	800e858 <__sflush_r+0x68>
 800e84a:	6829      	ldr	r1, [r5, #0]
 800e84c:	291d      	cmp	r1, #29
 800e84e:	d848      	bhi.n	800e8e2 <__sflush_r+0xf2>
 800e850:	4a29      	ldr	r2, [pc, #164]	; (800e8f8 <__sflush_r+0x108>)
 800e852:	40ca      	lsrs	r2, r1
 800e854:	07d6      	lsls	r6, r2, #31
 800e856:	d544      	bpl.n	800e8e2 <__sflush_r+0xf2>
 800e858:	2200      	movs	r2, #0
 800e85a:	6062      	str	r2, [r4, #4]
 800e85c:	04d9      	lsls	r1, r3, #19
 800e85e:	6922      	ldr	r2, [r4, #16]
 800e860:	6022      	str	r2, [r4, #0]
 800e862:	d504      	bpl.n	800e86e <__sflush_r+0x7e>
 800e864:	1c42      	adds	r2, r0, #1
 800e866:	d101      	bne.n	800e86c <__sflush_r+0x7c>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b903      	cbnz	r3, 800e86e <__sflush_r+0x7e>
 800e86c:	6560      	str	r0, [r4, #84]	; 0x54
 800e86e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e870:	602f      	str	r7, [r5, #0]
 800e872:	2900      	cmp	r1, #0
 800e874:	d0c9      	beq.n	800e80a <__sflush_r+0x1a>
 800e876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d002      	beq.n	800e884 <__sflush_r+0x94>
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fc94 	bl	800f1ac <_free_r>
 800e884:	2000      	movs	r0, #0
 800e886:	6360      	str	r0, [r4, #52]	; 0x34
 800e888:	e7c0      	b.n	800e80c <__sflush_r+0x1c>
 800e88a:	2301      	movs	r3, #1
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b0      	blx	r6
 800e890:	1c41      	adds	r1, r0, #1
 800e892:	d1c8      	bne.n	800e826 <__sflush_r+0x36>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0c5      	beq.n	800e826 <__sflush_r+0x36>
 800e89a:	2b1d      	cmp	r3, #29
 800e89c:	d001      	beq.n	800e8a2 <__sflush_r+0xb2>
 800e89e:	2b16      	cmp	r3, #22
 800e8a0:	d101      	bne.n	800e8a6 <__sflush_r+0xb6>
 800e8a2:	602f      	str	r7, [r5, #0]
 800e8a4:	e7b1      	b.n	800e80a <__sflush_r+0x1a>
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ac:	81a3      	strh	r3, [r4, #12]
 800e8ae:	e7ad      	b.n	800e80c <__sflush_r+0x1c>
 800e8b0:	690f      	ldr	r7, [r1, #16]
 800e8b2:	2f00      	cmp	r7, #0
 800e8b4:	d0a9      	beq.n	800e80a <__sflush_r+0x1a>
 800e8b6:	0793      	lsls	r3, r2, #30
 800e8b8:	680e      	ldr	r6, [r1, #0]
 800e8ba:	bf08      	it	eq
 800e8bc:	694b      	ldreq	r3, [r1, #20]
 800e8be:	600f      	str	r7, [r1, #0]
 800e8c0:	bf18      	it	ne
 800e8c2:	2300      	movne	r3, #0
 800e8c4:	eba6 0807 	sub.w	r8, r6, r7
 800e8c8:	608b      	str	r3, [r1, #8]
 800e8ca:	f1b8 0f00 	cmp.w	r8, #0
 800e8ce:	dd9c      	ble.n	800e80a <__sflush_r+0x1a>
 800e8d0:	4643      	mov	r3, r8
 800e8d2:	463a      	mov	r2, r7
 800e8d4:	6a21      	ldr	r1, [r4, #32]
 800e8d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8d8:	4628      	mov	r0, r5
 800e8da:	47b0      	blx	r6
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	dc06      	bgt.n	800e8ee <__sflush_r+0xfe>
 800e8e0:	89a3      	ldrh	r3, [r4, #12]
 800e8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ec:	e78e      	b.n	800e80c <__sflush_r+0x1c>
 800e8ee:	4407      	add	r7, r0
 800e8f0:	eba8 0800 	sub.w	r8, r8, r0
 800e8f4:	e7e9      	b.n	800e8ca <__sflush_r+0xda>
 800e8f6:	bf00      	nop
 800e8f8:	20400001 	.word	0x20400001

0800e8fc <_fflush_r>:
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	690b      	ldr	r3, [r1, #16]
 800e900:	4605      	mov	r5, r0
 800e902:	460c      	mov	r4, r1
 800e904:	b1db      	cbz	r3, 800e93e <_fflush_r+0x42>
 800e906:	b118      	cbz	r0, 800e910 <_fflush_r+0x14>
 800e908:	6983      	ldr	r3, [r0, #24]
 800e90a:	b90b      	cbnz	r3, 800e910 <_fflush_r+0x14>
 800e90c:	f000 f860 	bl	800e9d0 <__sinit>
 800e910:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <_fflush_r+0x48>)
 800e912:	429c      	cmp	r4, r3
 800e914:	d109      	bne.n	800e92a <_fflush_r+0x2e>
 800e916:	686c      	ldr	r4, [r5, #4]
 800e918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e91c:	b17b      	cbz	r3, 800e93e <_fflush_r+0x42>
 800e91e:	4621      	mov	r1, r4
 800e920:	4628      	mov	r0, r5
 800e922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e926:	f7ff bf63 	b.w	800e7f0 <__sflush_r>
 800e92a:	4b07      	ldr	r3, [pc, #28]	; (800e948 <_fflush_r+0x4c>)
 800e92c:	429c      	cmp	r4, r3
 800e92e:	d101      	bne.n	800e934 <_fflush_r+0x38>
 800e930:	68ac      	ldr	r4, [r5, #8]
 800e932:	e7f1      	b.n	800e918 <_fflush_r+0x1c>
 800e934:	4b05      	ldr	r3, [pc, #20]	; (800e94c <_fflush_r+0x50>)
 800e936:	429c      	cmp	r4, r3
 800e938:	bf08      	it	eq
 800e93a:	68ec      	ldreq	r4, [r5, #12]
 800e93c:	e7ec      	b.n	800e918 <_fflush_r+0x1c>
 800e93e:	2000      	movs	r0, #0
 800e940:	bd38      	pop	{r3, r4, r5, pc}
 800e942:	bf00      	nop
 800e944:	0800f904 	.word	0x0800f904
 800e948:	0800f924 	.word	0x0800f924
 800e94c:	0800f8e4 	.word	0x0800f8e4

0800e950 <std>:
 800e950:	2300      	movs	r3, #0
 800e952:	b510      	push	{r4, lr}
 800e954:	4604      	mov	r4, r0
 800e956:	e9c0 3300 	strd	r3, r3, [r0]
 800e95a:	6083      	str	r3, [r0, #8]
 800e95c:	8181      	strh	r1, [r0, #12]
 800e95e:	6643      	str	r3, [r0, #100]	; 0x64
 800e960:	81c2      	strh	r2, [r0, #14]
 800e962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e966:	6183      	str	r3, [r0, #24]
 800e968:	4619      	mov	r1, r3
 800e96a:	2208      	movs	r2, #8
 800e96c:	305c      	adds	r0, #92	; 0x5c
 800e96e:	f7fe fb44 	bl	800cffa <memset>
 800e972:	4b05      	ldr	r3, [pc, #20]	; (800e988 <std+0x38>)
 800e974:	6263      	str	r3, [r4, #36]	; 0x24
 800e976:	4b05      	ldr	r3, [pc, #20]	; (800e98c <std+0x3c>)
 800e978:	62a3      	str	r3, [r4, #40]	; 0x28
 800e97a:	4b05      	ldr	r3, [pc, #20]	; (800e990 <std+0x40>)
 800e97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e97e:	4b05      	ldr	r3, [pc, #20]	; (800e994 <std+0x44>)
 800e980:	6224      	str	r4, [r4, #32]
 800e982:	6323      	str	r3, [r4, #48]	; 0x30
 800e984:	bd10      	pop	{r4, pc}
 800e986:	bf00      	nop
 800e988:	0800f609 	.word	0x0800f609
 800e98c:	0800f62b 	.word	0x0800f62b
 800e990:	0800f663 	.word	0x0800f663
 800e994:	0800f687 	.word	0x0800f687

0800e998 <_cleanup_r>:
 800e998:	4901      	ldr	r1, [pc, #4]	; (800e9a0 <_cleanup_r+0x8>)
 800e99a:	f000 b885 	b.w	800eaa8 <_fwalk_reent>
 800e99e:	bf00      	nop
 800e9a0:	0800e8fd 	.word	0x0800e8fd

0800e9a4 <__sfmoreglue>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	1e4a      	subs	r2, r1, #1
 800e9a8:	2568      	movs	r5, #104	; 0x68
 800e9aa:	4355      	muls	r5, r2
 800e9ac:	460e      	mov	r6, r1
 800e9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9b2:	f000 fc49 	bl	800f248 <_malloc_r>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b140      	cbz	r0, 800e9cc <__sfmoreglue+0x28>
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800e9c0:	300c      	adds	r0, #12
 800e9c2:	60a0      	str	r0, [r4, #8]
 800e9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9c8:	f7fe fb17 	bl	800cffa <memset>
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}

0800e9d0 <__sinit>:
 800e9d0:	6983      	ldr	r3, [r0, #24]
 800e9d2:	b510      	push	{r4, lr}
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	bb33      	cbnz	r3, 800ea26 <__sinit+0x56>
 800e9d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e9dc:	6503      	str	r3, [r0, #80]	; 0x50
 800e9de:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <__sinit+0x58>)
 800e9e0:	4a12      	ldr	r2, [pc, #72]	; (800ea2c <__sinit+0x5c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	6282      	str	r2, [r0, #40]	; 0x28
 800e9e6:	4298      	cmp	r0, r3
 800e9e8:	bf04      	itt	eq
 800e9ea:	2301      	moveq	r3, #1
 800e9ec:	6183      	streq	r3, [r0, #24]
 800e9ee:	f000 f81f 	bl	800ea30 <__sfp>
 800e9f2:	6060      	str	r0, [r4, #4]
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 f81b 	bl	800ea30 <__sfp>
 800e9fa:	60a0      	str	r0, [r4, #8]
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 f817 	bl	800ea30 <__sfp>
 800ea02:	2200      	movs	r2, #0
 800ea04:	60e0      	str	r0, [r4, #12]
 800ea06:	2104      	movs	r1, #4
 800ea08:	6860      	ldr	r0, [r4, #4]
 800ea0a:	f7ff ffa1 	bl	800e950 <std>
 800ea0e:	2201      	movs	r2, #1
 800ea10:	2109      	movs	r1, #9
 800ea12:	68a0      	ldr	r0, [r4, #8]
 800ea14:	f7ff ff9c 	bl	800e950 <std>
 800ea18:	2202      	movs	r2, #2
 800ea1a:	2112      	movs	r1, #18
 800ea1c:	68e0      	ldr	r0, [r4, #12]
 800ea1e:	f7ff ff97 	bl	800e950 <std>
 800ea22:	2301      	movs	r3, #1
 800ea24:	61a3      	str	r3, [r4, #24]
 800ea26:	bd10      	pop	{r4, pc}
 800ea28:	0800f89c 	.word	0x0800f89c
 800ea2c:	0800e999 	.word	0x0800e999

0800ea30 <__sfp>:
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <__sfp+0x70>)
 800ea34:	681e      	ldr	r6, [r3, #0]
 800ea36:	69b3      	ldr	r3, [r6, #24]
 800ea38:	4607      	mov	r7, r0
 800ea3a:	b913      	cbnz	r3, 800ea42 <__sfp+0x12>
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff ffc7 	bl	800e9d0 <__sinit>
 800ea42:	3648      	adds	r6, #72	; 0x48
 800ea44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea48:	3b01      	subs	r3, #1
 800ea4a:	d503      	bpl.n	800ea54 <__sfp+0x24>
 800ea4c:	6833      	ldr	r3, [r6, #0]
 800ea4e:	b133      	cbz	r3, 800ea5e <__sfp+0x2e>
 800ea50:	6836      	ldr	r6, [r6, #0]
 800ea52:	e7f7      	b.n	800ea44 <__sfp+0x14>
 800ea54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea58:	b16d      	cbz	r5, 800ea76 <__sfp+0x46>
 800ea5a:	3468      	adds	r4, #104	; 0x68
 800ea5c:	e7f4      	b.n	800ea48 <__sfp+0x18>
 800ea5e:	2104      	movs	r1, #4
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7ff ff9f 	bl	800e9a4 <__sfmoreglue>
 800ea66:	6030      	str	r0, [r6, #0]
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d1f1      	bne.n	800ea50 <__sfp+0x20>
 800ea6c:	230c      	movs	r3, #12
 800ea6e:	603b      	str	r3, [r7, #0]
 800ea70:	4604      	mov	r4, r0
 800ea72:	4620      	mov	r0, r4
 800ea74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea76:	4b0b      	ldr	r3, [pc, #44]	; (800eaa4 <__sfp+0x74>)
 800ea78:	6665      	str	r5, [r4, #100]	; 0x64
 800ea7a:	e9c4 5500 	strd	r5, r5, [r4]
 800ea7e:	60a5      	str	r5, [r4, #8]
 800ea80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ea84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ea88:	2208      	movs	r2, #8
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea90:	f7fe fab3 	bl	800cffa <memset>
 800ea94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea9c:	e7e9      	b.n	800ea72 <__sfp+0x42>
 800ea9e:	bf00      	nop
 800eaa0:	0800f89c 	.word	0x0800f89c
 800eaa4:	ffff0001 	.word	0xffff0001

0800eaa8 <_fwalk_reent>:
 800eaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaac:	4680      	mov	r8, r0
 800eaae:	4689      	mov	r9, r1
 800eab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eab4:	2600      	movs	r6, #0
 800eab6:	b914      	cbnz	r4, 800eabe <_fwalk_reent+0x16>
 800eab8:	4630      	mov	r0, r6
 800eaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eabe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800eac2:	3f01      	subs	r7, #1
 800eac4:	d501      	bpl.n	800eaca <_fwalk_reent+0x22>
 800eac6:	6824      	ldr	r4, [r4, #0]
 800eac8:	e7f5      	b.n	800eab6 <_fwalk_reent+0xe>
 800eaca:	89ab      	ldrh	r3, [r5, #12]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d907      	bls.n	800eae0 <_fwalk_reent+0x38>
 800ead0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ead4:	3301      	adds	r3, #1
 800ead6:	d003      	beq.n	800eae0 <_fwalk_reent+0x38>
 800ead8:	4629      	mov	r1, r5
 800eada:	4640      	mov	r0, r8
 800eadc:	47c8      	blx	r9
 800eade:	4306      	orrs	r6, r0
 800eae0:	3568      	adds	r5, #104	; 0x68
 800eae2:	e7ee      	b.n	800eac2 <_fwalk_reent+0x1a>

0800eae4 <_localeconv_r>:
 800eae4:	4b04      	ldr	r3, [pc, #16]	; (800eaf8 <_localeconv_r+0x14>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6a18      	ldr	r0, [r3, #32]
 800eaea:	4b04      	ldr	r3, [pc, #16]	; (800eafc <_localeconv_r+0x18>)
 800eaec:	2800      	cmp	r0, #0
 800eaee:	bf08      	it	eq
 800eaf0:	4618      	moveq	r0, r3
 800eaf2:	30f0      	adds	r0, #240	; 0xf0
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	20000050 	.word	0x20000050
 800eafc:	200000b4 	.word	0x200000b4

0800eb00 <__swhatbuf_r>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	460e      	mov	r6, r1
 800eb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb08:	2900      	cmp	r1, #0
 800eb0a:	b096      	sub	sp, #88	; 0x58
 800eb0c:	4614      	mov	r4, r2
 800eb0e:	461d      	mov	r5, r3
 800eb10:	da07      	bge.n	800eb22 <__swhatbuf_r+0x22>
 800eb12:	2300      	movs	r3, #0
 800eb14:	602b      	str	r3, [r5, #0]
 800eb16:	89b3      	ldrh	r3, [r6, #12]
 800eb18:	061a      	lsls	r2, r3, #24
 800eb1a:	d410      	bmi.n	800eb3e <__swhatbuf_r+0x3e>
 800eb1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb20:	e00e      	b.n	800eb40 <__swhatbuf_r+0x40>
 800eb22:	466a      	mov	r2, sp
 800eb24:	f000 fdd6 	bl	800f6d4 <_fstat_r>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	dbf2      	blt.n	800eb12 <__swhatbuf_r+0x12>
 800eb2c:	9a01      	ldr	r2, [sp, #4]
 800eb2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb36:	425a      	negs	r2, r3
 800eb38:	415a      	adcs	r2, r3
 800eb3a:	602a      	str	r2, [r5, #0]
 800eb3c:	e7ee      	b.n	800eb1c <__swhatbuf_r+0x1c>
 800eb3e:	2340      	movs	r3, #64	; 0x40
 800eb40:	2000      	movs	r0, #0
 800eb42:	6023      	str	r3, [r4, #0]
 800eb44:	b016      	add	sp, #88	; 0x58
 800eb46:	bd70      	pop	{r4, r5, r6, pc}

0800eb48 <__smakebuf_r>:
 800eb48:	898b      	ldrh	r3, [r1, #12]
 800eb4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb4c:	079d      	lsls	r5, r3, #30
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460c      	mov	r4, r1
 800eb52:	d507      	bpl.n	800eb64 <__smakebuf_r+0x1c>
 800eb54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	6123      	str	r3, [r4, #16]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	6163      	str	r3, [r4, #20]
 800eb60:	b002      	add	sp, #8
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
 800eb64:	ab01      	add	r3, sp, #4
 800eb66:	466a      	mov	r2, sp
 800eb68:	f7ff ffca 	bl	800eb00 <__swhatbuf_r>
 800eb6c:	9900      	ldr	r1, [sp, #0]
 800eb6e:	4605      	mov	r5, r0
 800eb70:	4630      	mov	r0, r6
 800eb72:	f000 fb69 	bl	800f248 <_malloc_r>
 800eb76:	b948      	cbnz	r0, 800eb8c <__smakebuf_r+0x44>
 800eb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb7c:	059a      	lsls	r2, r3, #22
 800eb7e:	d4ef      	bmi.n	800eb60 <__smakebuf_r+0x18>
 800eb80:	f023 0303 	bic.w	r3, r3, #3
 800eb84:	f043 0302 	orr.w	r3, r3, #2
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	e7e3      	b.n	800eb54 <__smakebuf_r+0xc>
 800eb8c:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <__smakebuf_r+0x7c>)
 800eb8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	6020      	str	r0, [r4, #0]
 800eb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb98:	81a3      	strh	r3, [r4, #12]
 800eb9a:	9b00      	ldr	r3, [sp, #0]
 800eb9c:	6163      	str	r3, [r4, #20]
 800eb9e:	9b01      	ldr	r3, [sp, #4]
 800eba0:	6120      	str	r0, [r4, #16]
 800eba2:	b15b      	cbz	r3, 800ebbc <__smakebuf_r+0x74>
 800eba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f000 fda5 	bl	800f6f8 <_isatty_r>
 800ebae:	b128      	cbz	r0, 800ebbc <__smakebuf_r+0x74>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f023 0303 	bic.w	r3, r3, #3
 800ebb6:	f043 0301 	orr.w	r3, r3, #1
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	431d      	orrs	r5, r3
 800ebc0:	81a5      	strh	r5, [r4, #12]
 800ebc2:	e7cd      	b.n	800eb60 <__smakebuf_r+0x18>
 800ebc4:	0800e999 	.word	0x0800e999

0800ebc8 <malloc>:
 800ebc8:	4b02      	ldr	r3, [pc, #8]	; (800ebd4 <malloc+0xc>)
 800ebca:	4601      	mov	r1, r0
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	f000 bb3b 	b.w	800f248 <_malloc_r>
 800ebd2:	bf00      	nop
 800ebd4:	20000050 	.word	0x20000050

0800ebd8 <_Balloc>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ebdc:	4604      	mov	r4, r0
 800ebde:	460e      	mov	r6, r1
 800ebe0:	b93d      	cbnz	r5, 800ebf2 <_Balloc+0x1a>
 800ebe2:	2010      	movs	r0, #16
 800ebe4:	f7ff fff0 	bl	800ebc8 <malloc>
 800ebe8:	6260      	str	r0, [r4, #36]	; 0x24
 800ebea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ebee:	6005      	str	r5, [r0, #0]
 800ebf0:	60c5      	str	r5, [r0, #12]
 800ebf2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ebf4:	68eb      	ldr	r3, [r5, #12]
 800ebf6:	b183      	cbz	r3, 800ec1a <_Balloc+0x42>
 800ebf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ec00:	b9b8      	cbnz	r0, 800ec32 <_Balloc+0x5a>
 800ec02:	2101      	movs	r1, #1
 800ec04:	fa01 f506 	lsl.w	r5, r1, r6
 800ec08:	1d6a      	adds	r2, r5, #5
 800ec0a:	0092      	lsls	r2, r2, #2
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f000 fabf 	bl	800f190 <_calloc_r>
 800ec12:	b160      	cbz	r0, 800ec2e <_Balloc+0x56>
 800ec14:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ec18:	e00e      	b.n	800ec38 <_Balloc+0x60>
 800ec1a:	2221      	movs	r2, #33	; 0x21
 800ec1c:	2104      	movs	r1, #4
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fab6 	bl	800f190 <_calloc_r>
 800ec24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec26:	60e8      	str	r0, [r5, #12]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e4      	bne.n	800ebf8 <_Balloc+0x20>
 800ec2e:	2000      	movs	r0, #0
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	6802      	ldr	r2, [r0, #0]
 800ec34:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ec38:	2300      	movs	r3, #0
 800ec3a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec3e:	e7f7      	b.n	800ec30 <_Balloc+0x58>

0800ec40 <_Bfree>:
 800ec40:	b570      	push	{r4, r5, r6, lr}
 800ec42:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ec44:	4606      	mov	r6, r0
 800ec46:	460d      	mov	r5, r1
 800ec48:	b93c      	cbnz	r4, 800ec5a <_Bfree+0x1a>
 800ec4a:	2010      	movs	r0, #16
 800ec4c:	f7ff ffbc 	bl	800ebc8 <malloc>
 800ec50:	6270      	str	r0, [r6, #36]	; 0x24
 800ec52:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec56:	6004      	str	r4, [r0, #0]
 800ec58:	60c4      	str	r4, [r0, #12]
 800ec5a:	b13d      	cbz	r5, 800ec6c <_Bfree+0x2c>
 800ec5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ec5e:	686a      	ldr	r2, [r5, #4]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec66:	6029      	str	r1, [r5, #0]
 800ec68:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}

0800ec6e <__multadd>:
 800ec6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec72:	690d      	ldr	r5, [r1, #16]
 800ec74:	461f      	mov	r7, r3
 800ec76:	4606      	mov	r6, r0
 800ec78:	460c      	mov	r4, r1
 800ec7a:	f101 0c14 	add.w	ip, r1, #20
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f8dc 0000 	ldr.w	r0, [ip]
 800ec84:	b281      	uxth	r1, r0
 800ec86:	fb02 7101 	mla	r1, r2, r1, r7
 800ec8a:	0c0f      	lsrs	r7, r1, #16
 800ec8c:	0c00      	lsrs	r0, r0, #16
 800ec8e:	fb02 7000 	mla	r0, r2, r0, r7
 800ec92:	b289      	uxth	r1, r1
 800ec94:	3301      	adds	r3, #1
 800ec96:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ec9a:	429d      	cmp	r5, r3
 800ec9c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800eca0:	f84c 1b04 	str.w	r1, [ip], #4
 800eca4:	dcec      	bgt.n	800ec80 <__multadd+0x12>
 800eca6:	b1d7      	cbz	r7, 800ecde <__multadd+0x70>
 800eca8:	68a3      	ldr	r3, [r4, #8]
 800ecaa:	42ab      	cmp	r3, r5
 800ecac:	dc12      	bgt.n	800ecd4 <__multadd+0x66>
 800ecae:	6861      	ldr	r1, [r4, #4]
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	3101      	adds	r1, #1
 800ecb4:	f7ff ff90 	bl	800ebd8 <_Balloc>
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	3202      	adds	r2, #2
 800ecbc:	f104 010c 	add.w	r1, r4, #12
 800ecc0:	4680      	mov	r8, r0
 800ecc2:	0092      	lsls	r2, r2, #2
 800ecc4:	300c      	adds	r0, #12
 800ecc6:	f7fe f98d 	bl	800cfe4 <memcpy>
 800ecca:	4621      	mov	r1, r4
 800eccc:	4630      	mov	r0, r6
 800ecce:	f7ff ffb7 	bl	800ec40 <_Bfree>
 800ecd2:	4644      	mov	r4, r8
 800ecd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ecd8:	3501      	adds	r5, #1
 800ecda:	615f      	str	r7, [r3, #20]
 800ecdc:	6125      	str	r5, [r4, #16]
 800ecde:	4620      	mov	r0, r4
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ece4 <__hi0bits>:
 800ece4:	0c02      	lsrs	r2, r0, #16
 800ece6:	0412      	lsls	r2, r2, #16
 800ece8:	4603      	mov	r3, r0
 800ecea:	b9b2      	cbnz	r2, 800ed1a <__hi0bits+0x36>
 800ecec:	0403      	lsls	r3, r0, #16
 800ecee:	2010      	movs	r0, #16
 800ecf0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ecf4:	bf04      	itt	eq
 800ecf6:	021b      	lsleq	r3, r3, #8
 800ecf8:	3008      	addeq	r0, #8
 800ecfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ecfe:	bf04      	itt	eq
 800ed00:	011b      	lsleq	r3, r3, #4
 800ed02:	3004      	addeq	r0, #4
 800ed04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ed08:	bf04      	itt	eq
 800ed0a:	009b      	lsleq	r3, r3, #2
 800ed0c:	3002      	addeq	r0, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	db06      	blt.n	800ed20 <__hi0bits+0x3c>
 800ed12:	005b      	lsls	r3, r3, #1
 800ed14:	d503      	bpl.n	800ed1e <__hi0bits+0x3a>
 800ed16:	3001      	adds	r0, #1
 800ed18:	4770      	bx	lr
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	e7e8      	b.n	800ecf0 <__hi0bits+0xc>
 800ed1e:	2020      	movs	r0, #32
 800ed20:	4770      	bx	lr

0800ed22 <__lo0bits>:
 800ed22:	6803      	ldr	r3, [r0, #0]
 800ed24:	f013 0207 	ands.w	r2, r3, #7
 800ed28:	4601      	mov	r1, r0
 800ed2a:	d00b      	beq.n	800ed44 <__lo0bits+0x22>
 800ed2c:	07da      	lsls	r2, r3, #31
 800ed2e:	d423      	bmi.n	800ed78 <__lo0bits+0x56>
 800ed30:	0798      	lsls	r0, r3, #30
 800ed32:	bf49      	itett	mi
 800ed34:	085b      	lsrmi	r3, r3, #1
 800ed36:	089b      	lsrpl	r3, r3, #2
 800ed38:	2001      	movmi	r0, #1
 800ed3a:	600b      	strmi	r3, [r1, #0]
 800ed3c:	bf5c      	itt	pl
 800ed3e:	600b      	strpl	r3, [r1, #0]
 800ed40:	2002      	movpl	r0, #2
 800ed42:	4770      	bx	lr
 800ed44:	b298      	uxth	r0, r3
 800ed46:	b9a8      	cbnz	r0, 800ed74 <__lo0bits+0x52>
 800ed48:	0c1b      	lsrs	r3, r3, #16
 800ed4a:	2010      	movs	r0, #16
 800ed4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ed50:	bf04      	itt	eq
 800ed52:	0a1b      	lsreq	r3, r3, #8
 800ed54:	3008      	addeq	r0, #8
 800ed56:	071a      	lsls	r2, r3, #28
 800ed58:	bf04      	itt	eq
 800ed5a:	091b      	lsreq	r3, r3, #4
 800ed5c:	3004      	addeq	r0, #4
 800ed5e:	079a      	lsls	r2, r3, #30
 800ed60:	bf04      	itt	eq
 800ed62:	089b      	lsreq	r3, r3, #2
 800ed64:	3002      	addeq	r0, #2
 800ed66:	07da      	lsls	r2, r3, #31
 800ed68:	d402      	bmi.n	800ed70 <__lo0bits+0x4e>
 800ed6a:	085b      	lsrs	r3, r3, #1
 800ed6c:	d006      	beq.n	800ed7c <__lo0bits+0x5a>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	600b      	str	r3, [r1, #0]
 800ed72:	4770      	bx	lr
 800ed74:	4610      	mov	r0, r2
 800ed76:	e7e9      	b.n	800ed4c <__lo0bits+0x2a>
 800ed78:	2000      	movs	r0, #0
 800ed7a:	4770      	bx	lr
 800ed7c:	2020      	movs	r0, #32
 800ed7e:	4770      	bx	lr

0800ed80 <__i2b>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	460c      	mov	r4, r1
 800ed84:	2101      	movs	r1, #1
 800ed86:	f7ff ff27 	bl	800ebd8 <_Balloc>
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	6144      	str	r4, [r0, #20]
 800ed8e:	6102      	str	r2, [r0, #16]
 800ed90:	bd10      	pop	{r4, pc}

0800ed92 <__multiply>:
 800ed92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed96:	4614      	mov	r4, r2
 800ed98:	690a      	ldr	r2, [r1, #16]
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	bfb8      	it	lt
 800eda0:	460b      	movlt	r3, r1
 800eda2:	4688      	mov	r8, r1
 800eda4:	bfbc      	itt	lt
 800eda6:	46a0      	movlt	r8, r4
 800eda8:	461c      	movlt	r4, r3
 800edaa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800edae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800edb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edb6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800edba:	eb07 0609 	add.w	r6, r7, r9
 800edbe:	42b3      	cmp	r3, r6
 800edc0:	bfb8      	it	lt
 800edc2:	3101      	addlt	r1, #1
 800edc4:	f7ff ff08 	bl	800ebd8 <_Balloc>
 800edc8:	f100 0514 	add.w	r5, r0, #20
 800edcc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800edd0:	462b      	mov	r3, r5
 800edd2:	2200      	movs	r2, #0
 800edd4:	4573      	cmp	r3, lr
 800edd6:	d316      	bcc.n	800ee06 <__multiply+0x74>
 800edd8:	f104 0214 	add.w	r2, r4, #20
 800eddc:	f108 0114 	add.w	r1, r8, #20
 800ede0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ede4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	9b00      	ldr	r3, [sp, #0]
 800edec:	9201      	str	r2, [sp, #4]
 800edee:	4293      	cmp	r3, r2
 800edf0:	d80c      	bhi.n	800ee0c <__multiply+0x7a>
 800edf2:	2e00      	cmp	r6, #0
 800edf4:	dd03      	ble.n	800edfe <__multiply+0x6c>
 800edf6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d05d      	beq.n	800eeba <__multiply+0x128>
 800edfe:	6106      	str	r6, [r0, #16]
 800ee00:	b003      	add	sp, #12
 800ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee06:	f843 2b04 	str.w	r2, [r3], #4
 800ee0a:	e7e3      	b.n	800edd4 <__multiply+0x42>
 800ee0c:	f8b2 b000 	ldrh.w	fp, [r2]
 800ee10:	f1bb 0f00 	cmp.w	fp, #0
 800ee14:	d023      	beq.n	800ee5e <__multiply+0xcc>
 800ee16:	4689      	mov	r9, r1
 800ee18:	46ac      	mov	ip, r5
 800ee1a:	f04f 0800 	mov.w	r8, #0
 800ee1e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ee22:	f8dc a000 	ldr.w	sl, [ip]
 800ee26:	b2a3      	uxth	r3, r4
 800ee28:	fa1f fa8a 	uxth.w	sl, sl
 800ee2c:	fb0b a303 	mla	r3, fp, r3, sl
 800ee30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ee34:	f8dc 4000 	ldr.w	r4, [ip]
 800ee38:	4443      	add	r3, r8
 800ee3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ee3e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ee42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ee46:	46e2      	mov	sl, ip
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ee4e:	454f      	cmp	r7, r9
 800ee50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ee54:	f84a 3b04 	str.w	r3, [sl], #4
 800ee58:	d82b      	bhi.n	800eeb2 <__multiply+0x120>
 800ee5a:	f8cc 8004 	str.w	r8, [ip, #4]
 800ee5e:	9b01      	ldr	r3, [sp, #4]
 800ee60:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ee64:	3204      	adds	r2, #4
 800ee66:	f1ba 0f00 	cmp.w	sl, #0
 800ee6a:	d020      	beq.n	800eeae <__multiply+0x11c>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	4689      	mov	r9, r1
 800ee70:	46a8      	mov	r8, r5
 800ee72:	f04f 0b00 	mov.w	fp, #0
 800ee76:	f8b9 c000 	ldrh.w	ip, [r9]
 800ee7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ee7e:	fb0a 440c 	mla	r4, sl, ip, r4
 800ee82:	445c      	add	r4, fp
 800ee84:	46c4      	mov	ip, r8
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ee8c:	f84c 3b04 	str.w	r3, [ip], #4
 800ee90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ee98:	0c1b      	lsrs	r3, r3, #16
 800ee9a:	fb0a b303 	mla	r3, sl, r3, fp
 800ee9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800eea2:	454f      	cmp	r7, r9
 800eea4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800eea8:	d805      	bhi.n	800eeb6 <__multiply+0x124>
 800eeaa:	f8c8 3004 	str.w	r3, [r8, #4]
 800eeae:	3504      	adds	r5, #4
 800eeb0:	e79b      	b.n	800edea <__multiply+0x58>
 800eeb2:	46d4      	mov	ip, sl
 800eeb4:	e7b3      	b.n	800ee1e <__multiply+0x8c>
 800eeb6:	46e0      	mov	r8, ip
 800eeb8:	e7dd      	b.n	800ee76 <__multiply+0xe4>
 800eeba:	3e01      	subs	r6, #1
 800eebc:	e799      	b.n	800edf2 <__multiply+0x60>
	...

0800eec0 <__pow5mult>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4615      	mov	r5, r2
 800eec6:	f012 0203 	ands.w	r2, r2, #3
 800eeca:	4606      	mov	r6, r0
 800eecc:	460f      	mov	r7, r1
 800eece:	d007      	beq.n	800eee0 <__pow5mult+0x20>
 800eed0:	3a01      	subs	r2, #1
 800eed2:	4c21      	ldr	r4, [pc, #132]	; (800ef58 <__pow5mult+0x98>)
 800eed4:	2300      	movs	r3, #0
 800eed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeda:	f7ff fec8 	bl	800ec6e <__multadd>
 800eede:	4607      	mov	r7, r0
 800eee0:	10ad      	asrs	r5, r5, #2
 800eee2:	d035      	beq.n	800ef50 <__pow5mult+0x90>
 800eee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eee6:	b93c      	cbnz	r4, 800eef8 <__pow5mult+0x38>
 800eee8:	2010      	movs	r0, #16
 800eeea:	f7ff fe6d 	bl	800ebc8 <malloc>
 800eeee:	6270      	str	r0, [r6, #36]	; 0x24
 800eef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eef4:	6004      	str	r4, [r0, #0]
 800eef6:	60c4      	str	r4, [r0, #12]
 800eef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eefc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef00:	b94c      	cbnz	r4, 800ef16 <__pow5mult+0x56>
 800ef02:	f240 2171 	movw	r1, #625	; 0x271
 800ef06:	4630      	mov	r0, r6
 800ef08:	f7ff ff3a 	bl	800ed80 <__i2b>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef12:	4604      	mov	r4, r0
 800ef14:	6003      	str	r3, [r0, #0]
 800ef16:	f04f 0800 	mov.w	r8, #0
 800ef1a:	07eb      	lsls	r3, r5, #31
 800ef1c:	d50a      	bpl.n	800ef34 <__pow5mult+0x74>
 800ef1e:	4639      	mov	r1, r7
 800ef20:	4622      	mov	r2, r4
 800ef22:	4630      	mov	r0, r6
 800ef24:	f7ff ff35 	bl	800ed92 <__multiply>
 800ef28:	4639      	mov	r1, r7
 800ef2a:	4681      	mov	r9, r0
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7ff fe87 	bl	800ec40 <_Bfree>
 800ef32:	464f      	mov	r7, r9
 800ef34:	106d      	asrs	r5, r5, #1
 800ef36:	d00b      	beq.n	800ef50 <__pow5mult+0x90>
 800ef38:	6820      	ldr	r0, [r4, #0]
 800ef3a:	b938      	cbnz	r0, 800ef4c <__pow5mult+0x8c>
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4630      	mov	r0, r6
 800ef42:	f7ff ff26 	bl	800ed92 <__multiply>
 800ef46:	6020      	str	r0, [r4, #0]
 800ef48:	f8c0 8000 	str.w	r8, [r0]
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	e7e4      	b.n	800ef1a <__pow5mult+0x5a>
 800ef50:	4638      	mov	r0, r7
 800ef52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef56:	bf00      	nop
 800ef58:	0800fa38 	.word	0x0800fa38

0800ef5c <__lshift>:
 800ef5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef60:	460c      	mov	r4, r1
 800ef62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	6849      	ldr	r1, [r1, #4]
 800ef6a:	eb0a 0903 	add.w	r9, sl, r3
 800ef6e:	68a3      	ldr	r3, [r4, #8]
 800ef70:	4607      	mov	r7, r0
 800ef72:	4616      	mov	r6, r2
 800ef74:	f109 0501 	add.w	r5, r9, #1
 800ef78:	42ab      	cmp	r3, r5
 800ef7a:	db32      	blt.n	800efe2 <__lshift+0x86>
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	f7ff fe2b 	bl	800ebd8 <_Balloc>
 800ef82:	2300      	movs	r3, #0
 800ef84:	4680      	mov	r8, r0
 800ef86:	f100 0114 	add.w	r1, r0, #20
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4553      	cmp	r3, sl
 800ef8e:	db2b      	blt.n	800efe8 <__lshift+0x8c>
 800ef90:	6920      	ldr	r0, [r4, #16]
 800ef92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef96:	f104 0314 	add.w	r3, r4, #20
 800ef9a:	f016 021f 	ands.w	r2, r6, #31
 800ef9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efa2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800efa6:	d025      	beq.n	800eff4 <__lshift+0x98>
 800efa8:	f1c2 0e20 	rsb	lr, r2, #32
 800efac:	2000      	movs	r0, #0
 800efae:	681e      	ldr	r6, [r3, #0]
 800efb0:	468a      	mov	sl, r1
 800efb2:	4096      	lsls	r6, r2
 800efb4:	4330      	orrs	r0, r6
 800efb6:	f84a 0b04 	str.w	r0, [sl], #4
 800efba:	f853 0b04 	ldr.w	r0, [r3], #4
 800efbe:	459c      	cmp	ip, r3
 800efc0:	fa20 f00e 	lsr.w	r0, r0, lr
 800efc4:	d814      	bhi.n	800eff0 <__lshift+0x94>
 800efc6:	6048      	str	r0, [r1, #4]
 800efc8:	b108      	cbz	r0, 800efce <__lshift+0x72>
 800efca:	f109 0502 	add.w	r5, r9, #2
 800efce:	3d01      	subs	r5, #1
 800efd0:	4638      	mov	r0, r7
 800efd2:	f8c8 5010 	str.w	r5, [r8, #16]
 800efd6:	4621      	mov	r1, r4
 800efd8:	f7ff fe32 	bl	800ec40 <_Bfree>
 800efdc:	4640      	mov	r0, r8
 800efde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe2:	3101      	adds	r1, #1
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	e7c7      	b.n	800ef78 <__lshift+0x1c>
 800efe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800efec:	3301      	adds	r3, #1
 800efee:	e7cd      	b.n	800ef8c <__lshift+0x30>
 800eff0:	4651      	mov	r1, sl
 800eff2:	e7dc      	b.n	800efae <__lshift+0x52>
 800eff4:	3904      	subs	r1, #4
 800eff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800effa:	f841 2f04 	str.w	r2, [r1, #4]!
 800effe:	459c      	cmp	ip, r3
 800f000:	d8f9      	bhi.n	800eff6 <__lshift+0x9a>
 800f002:	e7e4      	b.n	800efce <__lshift+0x72>

0800f004 <__mcmp>:
 800f004:	6903      	ldr	r3, [r0, #16]
 800f006:	690a      	ldr	r2, [r1, #16]
 800f008:	1a9b      	subs	r3, r3, r2
 800f00a:	b530      	push	{r4, r5, lr}
 800f00c:	d10c      	bne.n	800f028 <__mcmp+0x24>
 800f00e:	0092      	lsls	r2, r2, #2
 800f010:	3014      	adds	r0, #20
 800f012:	3114      	adds	r1, #20
 800f014:	1884      	adds	r4, r0, r2
 800f016:	4411      	add	r1, r2
 800f018:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f01c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f020:	4295      	cmp	r5, r2
 800f022:	d003      	beq.n	800f02c <__mcmp+0x28>
 800f024:	d305      	bcc.n	800f032 <__mcmp+0x2e>
 800f026:	2301      	movs	r3, #1
 800f028:	4618      	mov	r0, r3
 800f02a:	bd30      	pop	{r4, r5, pc}
 800f02c:	42a0      	cmp	r0, r4
 800f02e:	d3f3      	bcc.n	800f018 <__mcmp+0x14>
 800f030:	e7fa      	b.n	800f028 <__mcmp+0x24>
 800f032:	f04f 33ff 	mov.w	r3, #4294967295
 800f036:	e7f7      	b.n	800f028 <__mcmp+0x24>

0800f038 <__mdiff>:
 800f038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f03c:	460d      	mov	r5, r1
 800f03e:	4607      	mov	r7, r0
 800f040:	4611      	mov	r1, r2
 800f042:	4628      	mov	r0, r5
 800f044:	4614      	mov	r4, r2
 800f046:	f7ff ffdd 	bl	800f004 <__mcmp>
 800f04a:	1e06      	subs	r6, r0, #0
 800f04c:	d108      	bne.n	800f060 <__mdiff+0x28>
 800f04e:	4631      	mov	r1, r6
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff fdc1 	bl	800ebd8 <_Balloc>
 800f056:	2301      	movs	r3, #1
 800f058:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	bfa4      	itt	ge
 800f062:	4623      	movge	r3, r4
 800f064:	462c      	movge	r4, r5
 800f066:	4638      	mov	r0, r7
 800f068:	6861      	ldr	r1, [r4, #4]
 800f06a:	bfa6      	itte	ge
 800f06c:	461d      	movge	r5, r3
 800f06e:	2600      	movge	r6, #0
 800f070:	2601      	movlt	r6, #1
 800f072:	f7ff fdb1 	bl	800ebd8 <_Balloc>
 800f076:	692b      	ldr	r3, [r5, #16]
 800f078:	60c6      	str	r6, [r0, #12]
 800f07a:	6926      	ldr	r6, [r4, #16]
 800f07c:	f105 0914 	add.w	r9, r5, #20
 800f080:	f104 0214 	add.w	r2, r4, #20
 800f084:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f088:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f08c:	f100 0514 	add.w	r5, r0, #20
 800f090:	f04f 0e00 	mov.w	lr, #0
 800f094:	f852 ab04 	ldr.w	sl, [r2], #4
 800f098:	f859 4b04 	ldr.w	r4, [r9], #4
 800f09c:	fa1e f18a 	uxtah	r1, lr, sl
 800f0a0:	b2a3      	uxth	r3, r4
 800f0a2:	1ac9      	subs	r1, r1, r3
 800f0a4:	0c23      	lsrs	r3, r4, #16
 800f0a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f0aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f0ae:	b289      	uxth	r1, r1
 800f0b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f0b4:	45c8      	cmp	r8, r9
 800f0b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f0ba:	4694      	mov	ip, r2
 800f0bc:	f845 3b04 	str.w	r3, [r5], #4
 800f0c0:	d8e8      	bhi.n	800f094 <__mdiff+0x5c>
 800f0c2:	45bc      	cmp	ip, r7
 800f0c4:	d304      	bcc.n	800f0d0 <__mdiff+0x98>
 800f0c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f0ca:	b183      	cbz	r3, 800f0ee <__mdiff+0xb6>
 800f0cc:	6106      	str	r6, [r0, #16]
 800f0ce:	e7c5      	b.n	800f05c <__mdiff+0x24>
 800f0d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f0d4:	fa1e f381 	uxtah	r3, lr, r1
 800f0d8:	141a      	asrs	r2, r3, #16
 800f0da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f0e8:	f845 3b04 	str.w	r3, [r5], #4
 800f0ec:	e7e9      	b.n	800f0c2 <__mdiff+0x8a>
 800f0ee:	3e01      	subs	r6, #1
 800f0f0:	e7e9      	b.n	800f0c6 <__mdiff+0x8e>

0800f0f2 <__d2b>:
 800f0f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0f6:	460e      	mov	r6, r1
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	ec59 8b10 	vmov	r8, r9, d0
 800f0fe:	4615      	mov	r5, r2
 800f100:	f7ff fd6a 	bl	800ebd8 <_Balloc>
 800f104:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f108:	4607      	mov	r7, r0
 800f10a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f10e:	bb34      	cbnz	r4, 800f15e <__d2b+0x6c>
 800f110:	9301      	str	r3, [sp, #4]
 800f112:	f1b8 0300 	subs.w	r3, r8, #0
 800f116:	d027      	beq.n	800f168 <__d2b+0x76>
 800f118:	a802      	add	r0, sp, #8
 800f11a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f11e:	f7ff fe00 	bl	800ed22 <__lo0bits>
 800f122:	9900      	ldr	r1, [sp, #0]
 800f124:	b1f0      	cbz	r0, 800f164 <__d2b+0x72>
 800f126:	9a01      	ldr	r2, [sp, #4]
 800f128:	f1c0 0320 	rsb	r3, r0, #32
 800f12c:	fa02 f303 	lsl.w	r3, r2, r3
 800f130:	430b      	orrs	r3, r1
 800f132:	40c2      	lsrs	r2, r0
 800f134:	617b      	str	r3, [r7, #20]
 800f136:	9201      	str	r2, [sp, #4]
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	61bb      	str	r3, [r7, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	bf14      	ite	ne
 800f140:	2102      	movne	r1, #2
 800f142:	2101      	moveq	r1, #1
 800f144:	6139      	str	r1, [r7, #16]
 800f146:	b1c4      	cbz	r4, 800f17a <__d2b+0x88>
 800f148:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f14c:	4404      	add	r4, r0
 800f14e:	6034      	str	r4, [r6, #0]
 800f150:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f154:	6028      	str	r0, [r5, #0]
 800f156:	4638      	mov	r0, r7
 800f158:	b003      	add	sp, #12
 800f15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f15e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f162:	e7d5      	b.n	800f110 <__d2b+0x1e>
 800f164:	6179      	str	r1, [r7, #20]
 800f166:	e7e7      	b.n	800f138 <__d2b+0x46>
 800f168:	a801      	add	r0, sp, #4
 800f16a:	f7ff fdda 	bl	800ed22 <__lo0bits>
 800f16e:	9b01      	ldr	r3, [sp, #4]
 800f170:	617b      	str	r3, [r7, #20]
 800f172:	2101      	movs	r1, #1
 800f174:	6139      	str	r1, [r7, #16]
 800f176:	3020      	adds	r0, #32
 800f178:	e7e5      	b.n	800f146 <__d2b+0x54>
 800f17a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f17e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f182:	6030      	str	r0, [r6, #0]
 800f184:	6918      	ldr	r0, [r3, #16]
 800f186:	f7ff fdad 	bl	800ece4 <__hi0bits>
 800f18a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f18e:	e7e1      	b.n	800f154 <__d2b+0x62>

0800f190 <_calloc_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	fb02 f401 	mul.w	r4, r2, r1
 800f196:	4621      	mov	r1, r4
 800f198:	f000 f856 	bl	800f248 <_malloc_r>
 800f19c:	4605      	mov	r5, r0
 800f19e:	b118      	cbz	r0, 800f1a8 <_calloc_r+0x18>
 800f1a0:	4622      	mov	r2, r4
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	f7fd ff29 	bl	800cffa <memset>
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	bd38      	pop	{r3, r4, r5, pc}

0800f1ac <_free_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	d045      	beq.n	800f240 <_free_r+0x94>
 800f1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1b8:	1f0c      	subs	r4, r1, #4
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bfb8      	it	lt
 800f1be:	18e4      	addlt	r4, r4, r3
 800f1c0:	f000 face 	bl	800f760 <__malloc_lock>
 800f1c4:	4a1f      	ldr	r2, [pc, #124]	; (800f244 <_free_r+0x98>)
 800f1c6:	6813      	ldr	r3, [r2, #0]
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	b933      	cbnz	r3, 800f1da <_free_r+0x2e>
 800f1cc:	6063      	str	r3, [r4, #4]
 800f1ce:	6014      	str	r4, [r2, #0]
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1d6:	f000 bac4 	b.w	800f762 <__malloc_unlock>
 800f1da:	42a3      	cmp	r3, r4
 800f1dc:	d90c      	bls.n	800f1f8 <_free_r+0x4c>
 800f1de:	6821      	ldr	r1, [r4, #0]
 800f1e0:	1862      	adds	r2, r4, r1
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	bf04      	itt	eq
 800f1e6:	681a      	ldreq	r2, [r3, #0]
 800f1e8:	685b      	ldreq	r3, [r3, #4]
 800f1ea:	6063      	str	r3, [r4, #4]
 800f1ec:	bf04      	itt	eq
 800f1ee:	1852      	addeq	r2, r2, r1
 800f1f0:	6022      	streq	r2, [r4, #0]
 800f1f2:	6004      	str	r4, [r0, #0]
 800f1f4:	e7ec      	b.n	800f1d0 <_free_r+0x24>
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	b10a      	cbz	r2, 800f200 <_free_r+0x54>
 800f1fc:	42a2      	cmp	r2, r4
 800f1fe:	d9fa      	bls.n	800f1f6 <_free_r+0x4a>
 800f200:	6819      	ldr	r1, [r3, #0]
 800f202:	1858      	adds	r0, r3, r1
 800f204:	42a0      	cmp	r0, r4
 800f206:	d10b      	bne.n	800f220 <_free_r+0x74>
 800f208:	6820      	ldr	r0, [r4, #0]
 800f20a:	4401      	add	r1, r0
 800f20c:	1858      	adds	r0, r3, r1
 800f20e:	4282      	cmp	r2, r0
 800f210:	6019      	str	r1, [r3, #0]
 800f212:	d1dd      	bne.n	800f1d0 <_free_r+0x24>
 800f214:	6810      	ldr	r0, [r2, #0]
 800f216:	6852      	ldr	r2, [r2, #4]
 800f218:	605a      	str	r2, [r3, #4]
 800f21a:	4401      	add	r1, r0
 800f21c:	6019      	str	r1, [r3, #0]
 800f21e:	e7d7      	b.n	800f1d0 <_free_r+0x24>
 800f220:	d902      	bls.n	800f228 <_free_r+0x7c>
 800f222:	230c      	movs	r3, #12
 800f224:	602b      	str	r3, [r5, #0]
 800f226:	e7d3      	b.n	800f1d0 <_free_r+0x24>
 800f228:	6820      	ldr	r0, [r4, #0]
 800f22a:	1821      	adds	r1, r4, r0
 800f22c:	428a      	cmp	r2, r1
 800f22e:	bf04      	itt	eq
 800f230:	6811      	ldreq	r1, [r2, #0]
 800f232:	6852      	ldreq	r2, [r2, #4]
 800f234:	6062      	str	r2, [r4, #4]
 800f236:	bf04      	itt	eq
 800f238:	1809      	addeq	r1, r1, r0
 800f23a:	6021      	streq	r1, [r4, #0]
 800f23c:	605c      	str	r4, [r3, #4]
 800f23e:	e7c7      	b.n	800f1d0 <_free_r+0x24>
 800f240:	bd38      	pop	{r3, r4, r5, pc}
 800f242:	bf00      	nop
 800f244:	200006d0 	.word	0x200006d0

0800f248 <_malloc_r>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	1ccd      	adds	r5, r1, #3
 800f24c:	f025 0503 	bic.w	r5, r5, #3
 800f250:	3508      	adds	r5, #8
 800f252:	2d0c      	cmp	r5, #12
 800f254:	bf38      	it	cc
 800f256:	250c      	movcc	r5, #12
 800f258:	2d00      	cmp	r5, #0
 800f25a:	4606      	mov	r6, r0
 800f25c:	db01      	blt.n	800f262 <_malloc_r+0x1a>
 800f25e:	42a9      	cmp	r1, r5
 800f260:	d903      	bls.n	800f26a <_malloc_r+0x22>
 800f262:	230c      	movs	r3, #12
 800f264:	6033      	str	r3, [r6, #0]
 800f266:	2000      	movs	r0, #0
 800f268:	bd70      	pop	{r4, r5, r6, pc}
 800f26a:	f000 fa79 	bl	800f760 <__malloc_lock>
 800f26e:	4a21      	ldr	r2, [pc, #132]	; (800f2f4 <_malloc_r+0xac>)
 800f270:	6814      	ldr	r4, [r2, #0]
 800f272:	4621      	mov	r1, r4
 800f274:	b991      	cbnz	r1, 800f29c <_malloc_r+0x54>
 800f276:	4c20      	ldr	r4, [pc, #128]	; (800f2f8 <_malloc_r+0xb0>)
 800f278:	6823      	ldr	r3, [r4, #0]
 800f27a:	b91b      	cbnz	r3, 800f284 <_malloc_r+0x3c>
 800f27c:	4630      	mov	r0, r6
 800f27e:	f000 f9b3 	bl	800f5e8 <_sbrk_r>
 800f282:	6020      	str	r0, [r4, #0]
 800f284:	4629      	mov	r1, r5
 800f286:	4630      	mov	r0, r6
 800f288:	f000 f9ae 	bl	800f5e8 <_sbrk_r>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d124      	bne.n	800f2da <_malloc_r+0x92>
 800f290:	230c      	movs	r3, #12
 800f292:	6033      	str	r3, [r6, #0]
 800f294:	4630      	mov	r0, r6
 800f296:	f000 fa64 	bl	800f762 <__malloc_unlock>
 800f29a:	e7e4      	b.n	800f266 <_malloc_r+0x1e>
 800f29c:	680b      	ldr	r3, [r1, #0]
 800f29e:	1b5b      	subs	r3, r3, r5
 800f2a0:	d418      	bmi.n	800f2d4 <_malloc_r+0x8c>
 800f2a2:	2b0b      	cmp	r3, #11
 800f2a4:	d90f      	bls.n	800f2c6 <_malloc_r+0x7e>
 800f2a6:	600b      	str	r3, [r1, #0]
 800f2a8:	50cd      	str	r5, [r1, r3]
 800f2aa:	18cc      	adds	r4, r1, r3
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f000 fa58 	bl	800f762 <__malloc_unlock>
 800f2b2:	f104 000b 	add.w	r0, r4, #11
 800f2b6:	1d23      	adds	r3, r4, #4
 800f2b8:	f020 0007 	bic.w	r0, r0, #7
 800f2bc:	1ac3      	subs	r3, r0, r3
 800f2be:	d0d3      	beq.n	800f268 <_malloc_r+0x20>
 800f2c0:	425a      	negs	r2, r3
 800f2c2:	50e2      	str	r2, [r4, r3]
 800f2c4:	e7d0      	b.n	800f268 <_malloc_r+0x20>
 800f2c6:	428c      	cmp	r4, r1
 800f2c8:	684b      	ldr	r3, [r1, #4]
 800f2ca:	bf16      	itet	ne
 800f2cc:	6063      	strne	r3, [r4, #4]
 800f2ce:	6013      	streq	r3, [r2, #0]
 800f2d0:	460c      	movne	r4, r1
 800f2d2:	e7eb      	b.n	800f2ac <_malloc_r+0x64>
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	6849      	ldr	r1, [r1, #4]
 800f2d8:	e7cc      	b.n	800f274 <_malloc_r+0x2c>
 800f2da:	1cc4      	adds	r4, r0, #3
 800f2dc:	f024 0403 	bic.w	r4, r4, #3
 800f2e0:	42a0      	cmp	r0, r4
 800f2e2:	d005      	beq.n	800f2f0 <_malloc_r+0xa8>
 800f2e4:	1a21      	subs	r1, r4, r0
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f000 f97e 	bl	800f5e8 <_sbrk_r>
 800f2ec:	3001      	adds	r0, #1
 800f2ee:	d0cf      	beq.n	800f290 <_malloc_r+0x48>
 800f2f0:	6025      	str	r5, [r4, #0]
 800f2f2:	e7db      	b.n	800f2ac <_malloc_r+0x64>
 800f2f4:	200006d0 	.word	0x200006d0
 800f2f8:	200006d4 	.word	0x200006d4

0800f2fc <__sfputc_r>:
 800f2fc:	6893      	ldr	r3, [r2, #8]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	b410      	push	{r4}
 800f304:	6093      	str	r3, [r2, #8]
 800f306:	da08      	bge.n	800f31a <__sfputc_r+0x1e>
 800f308:	6994      	ldr	r4, [r2, #24]
 800f30a:	42a3      	cmp	r3, r4
 800f30c:	db01      	blt.n	800f312 <__sfputc_r+0x16>
 800f30e:	290a      	cmp	r1, #10
 800f310:	d103      	bne.n	800f31a <__sfputc_r+0x1e>
 800f312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f316:	f7fe bb65 	b.w	800d9e4 <__swbuf_r>
 800f31a:	6813      	ldr	r3, [r2, #0]
 800f31c:	1c58      	adds	r0, r3, #1
 800f31e:	6010      	str	r0, [r2, #0]
 800f320:	7019      	strb	r1, [r3, #0]
 800f322:	4608      	mov	r0, r1
 800f324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <__sfputs_r>:
 800f32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32c:	4606      	mov	r6, r0
 800f32e:	460f      	mov	r7, r1
 800f330:	4614      	mov	r4, r2
 800f332:	18d5      	adds	r5, r2, r3
 800f334:	42ac      	cmp	r4, r5
 800f336:	d101      	bne.n	800f33c <__sfputs_r+0x12>
 800f338:	2000      	movs	r0, #0
 800f33a:	e007      	b.n	800f34c <__sfputs_r+0x22>
 800f33c:	463a      	mov	r2, r7
 800f33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f342:	4630      	mov	r0, r6
 800f344:	f7ff ffda 	bl	800f2fc <__sfputc_r>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d1f3      	bne.n	800f334 <__sfputs_r+0xa>
 800f34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f350 <_vfiprintf_r>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	460c      	mov	r4, r1
 800f356:	b09d      	sub	sp, #116	; 0x74
 800f358:	4617      	mov	r7, r2
 800f35a:	461d      	mov	r5, r3
 800f35c:	4606      	mov	r6, r0
 800f35e:	b118      	cbz	r0, 800f368 <_vfiprintf_r+0x18>
 800f360:	6983      	ldr	r3, [r0, #24]
 800f362:	b90b      	cbnz	r3, 800f368 <_vfiprintf_r+0x18>
 800f364:	f7ff fb34 	bl	800e9d0 <__sinit>
 800f368:	4b7c      	ldr	r3, [pc, #496]	; (800f55c <_vfiprintf_r+0x20c>)
 800f36a:	429c      	cmp	r4, r3
 800f36c:	d158      	bne.n	800f420 <_vfiprintf_r+0xd0>
 800f36e:	6874      	ldr	r4, [r6, #4]
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	0718      	lsls	r0, r3, #28
 800f374:	d55e      	bpl.n	800f434 <_vfiprintf_r+0xe4>
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d05b      	beq.n	800f434 <_vfiprintf_r+0xe4>
 800f37c:	2300      	movs	r3, #0
 800f37e:	9309      	str	r3, [sp, #36]	; 0x24
 800f380:	2320      	movs	r3, #32
 800f382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f386:	2330      	movs	r3, #48	; 0x30
 800f388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f38c:	9503      	str	r5, [sp, #12]
 800f38e:	f04f 0b01 	mov.w	fp, #1
 800f392:	46b8      	mov	r8, r7
 800f394:	4645      	mov	r5, r8
 800f396:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f39a:	b10b      	cbz	r3, 800f3a0 <_vfiprintf_r+0x50>
 800f39c:	2b25      	cmp	r3, #37	; 0x25
 800f39e:	d154      	bne.n	800f44a <_vfiprintf_r+0xfa>
 800f3a0:	ebb8 0a07 	subs.w	sl, r8, r7
 800f3a4:	d00b      	beq.n	800f3be <_vfiprintf_r+0x6e>
 800f3a6:	4653      	mov	r3, sl
 800f3a8:	463a      	mov	r2, r7
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f7ff ffbc 	bl	800f32a <__sfputs_r>
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	f000 80c2 	beq.w	800f53c <_vfiprintf_r+0x1ec>
 800f3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ba:	4453      	add	r3, sl
 800f3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3be:	f898 3000 	ldrb.w	r3, [r8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 80ba 	beq.w	800f53c <_vfiprintf_r+0x1ec>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d2:	9304      	str	r3, [sp, #16]
 800f3d4:	9307      	str	r3, [sp, #28]
 800f3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3da:	931a      	str	r3, [sp, #104]	; 0x68
 800f3dc:	46a8      	mov	r8, r5
 800f3de:	2205      	movs	r2, #5
 800f3e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f3e4:	485e      	ldr	r0, [pc, #376]	; (800f560 <_vfiprintf_r+0x210>)
 800f3e6:	f7f0 ff23 	bl	8000230 <memchr>
 800f3ea:	9b04      	ldr	r3, [sp, #16]
 800f3ec:	bb78      	cbnz	r0, 800f44e <_vfiprintf_r+0xfe>
 800f3ee:	06d9      	lsls	r1, r3, #27
 800f3f0:	bf44      	itt	mi
 800f3f2:	2220      	movmi	r2, #32
 800f3f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3f8:	071a      	lsls	r2, r3, #28
 800f3fa:	bf44      	itt	mi
 800f3fc:	222b      	movmi	r2, #43	; 0x2b
 800f3fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f402:	782a      	ldrb	r2, [r5, #0]
 800f404:	2a2a      	cmp	r2, #42	; 0x2a
 800f406:	d02a      	beq.n	800f45e <_vfiprintf_r+0x10e>
 800f408:	9a07      	ldr	r2, [sp, #28]
 800f40a:	46a8      	mov	r8, r5
 800f40c:	2000      	movs	r0, #0
 800f40e:	250a      	movs	r5, #10
 800f410:	4641      	mov	r1, r8
 800f412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f416:	3b30      	subs	r3, #48	; 0x30
 800f418:	2b09      	cmp	r3, #9
 800f41a:	d969      	bls.n	800f4f0 <_vfiprintf_r+0x1a0>
 800f41c:	b360      	cbz	r0, 800f478 <_vfiprintf_r+0x128>
 800f41e:	e024      	b.n	800f46a <_vfiprintf_r+0x11a>
 800f420:	4b50      	ldr	r3, [pc, #320]	; (800f564 <_vfiprintf_r+0x214>)
 800f422:	429c      	cmp	r4, r3
 800f424:	d101      	bne.n	800f42a <_vfiprintf_r+0xda>
 800f426:	68b4      	ldr	r4, [r6, #8]
 800f428:	e7a2      	b.n	800f370 <_vfiprintf_r+0x20>
 800f42a:	4b4f      	ldr	r3, [pc, #316]	; (800f568 <_vfiprintf_r+0x218>)
 800f42c:	429c      	cmp	r4, r3
 800f42e:	bf08      	it	eq
 800f430:	68f4      	ldreq	r4, [r6, #12]
 800f432:	e79d      	b.n	800f370 <_vfiprintf_r+0x20>
 800f434:	4621      	mov	r1, r4
 800f436:	4630      	mov	r0, r6
 800f438:	f7fe fb26 	bl	800da88 <__swsetup_r>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d09d      	beq.n	800f37c <_vfiprintf_r+0x2c>
 800f440:	f04f 30ff 	mov.w	r0, #4294967295
 800f444:	b01d      	add	sp, #116	; 0x74
 800f446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44a:	46a8      	mov	r8, r5
 800f44c:	e7a2      	b.n	800f394 <_vfiprintf_r+0x44>
 800f44e:	4a44      	ldr	r2, [pc, #272]	; (800f560 <_vfiprintf_r+0x210>)
 800f450:	1a80      	subs	r0, r0, r2
 800f452:	fa0b f000 	lsl.w	r0, fp, r0
 800f456:	4318      	orrs	r0, r3
 800f458:	9004      	str	r0, [sp, #16]
 800f45a:	4645      	mov	r5, r8
 800f45c:	e7be      	b.n	800f3dc <_vfiprintf_r+0x8c>
 800f45e:	9a03      	ldr	r2, [sp, #12]
 800f460:	1d11      	adds	r1, r2, #4
 800f462:	6812      	ldr	r2, [r2, #0]
 800f464:	9103      	str	r1, [sp, #12]
 800f466:	2a00      	cmp	r2, #0
 800f468:	db01      	blt.n	800f46e <_vfiprintf_r+0x11e>
 800f46a:	9207      	str	r2, [sp, #28]
 800f46c:	e004      	b.n	800f478 <_vfiprintf_r+0x128>
 800f46e:	4252      	negs	r2, r2
 800f470:	f043 0302 	orr.w	r3, r3, #2
 800f474:	9207      	str	r2, [sp, #28]
 800f476:	9304      	str	r3, [sp, #16]
 800f478:	f898 3000 	ldrb.w	r3, [r8]
 800f47c:	2b2e      	cmp	r3, #46	; 0x2e
 800f47e:	d10e      	bne.n	800f49e <_vfiprintf_r+0x14e>
 800f480:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f484:	2b2a      	cmp	r3, #42	; 0x2a
 800f486:	d138      	bne.n	800f4fa <_vfiprintf_r+0x1aa>
 800f488:	9b03      	ldr	r3, [sp, #12]
 800f48a:	1d1a      	adds	r2, r3, #4
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	9203      	str	r2, [sp, #12]
 800f490:	2b00      	cmp	r3, #0
 800f492:	bfb8      	it	lt
 800f494:	f04f 33ff 	movlt.w	r3, #4294967295
 800f498:	f108 0802 	add.w	r8, r8, #2
 800f49c:	9305      	str	r3, [sp, #20]
 800f49e:	4d33      	ldr	r5, [pc, #204]	; (800f56c <_vfiprintf_r+0x21c>)
 800f4a0:	f898 1000 	ldrb.w	r1, [r8]
 800f4a4:	2203      	movs	r2, #3
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f7f0 fec2 	bl	8000230 <memchr>
 800f4ac:	b140      	cbz	r0, 800f4c0 <_vfiprintf_r+0x170>
 800f4ae:	2340      	movs	r3, #64	; 0x40
 800f4b0:	1b40      	subs	r0, r0, r5
 800f4b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f4b6:	9b04      	ldr	r3, [sp, #16]
 800f4b8:	4303      	orrs	r3, r0
 800f4ba:	f108 0801 	add.w	r8, r8, #1
 800f4be:	9304      	str	r3, [sp, #16]
 800f4c0:	f898 1000 	ldrb.w	r1, [r8]
 800f4c4:	482a      	ldr	r0, [pc, #168]	; (800f570 <_vfiprintf_r+0x220>)
 800f4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ca:	2206      	movs	r2, #6
 800f4cc:	f108 0701 	add.w	r7, r8, #1
 800f4d0:	f7f0 feae 	bl	8000230 <memchr>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d037      	beq.n	800f548 <_vfiprintf_r+0x1f8>
 800f4d8:	4b26      	ldr	r3, [pc, #152]	; (800f574 <_vfiprintf_r+0x224>)
 800f4da:	bb1b      	cbnz	r3, 800f524 <_vfiprintf_r+0x1d4>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	3307      	adds	r3, #7
 800f4e0:	f023 0307 	bic.w	r3, r3, #7
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	9303      	str	r3, [sp, #12]
 800f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ea:	444b      	add	r3, r9
 800f4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ee:	e750      	b.n	800f392 <_vfiprintf_r+0x42>
 800f4f0:	fb05 3202 	mla	r2, r5, r2, r3
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	4688      	mov	r8, r1
 800f4f8:	e78a      	b.n	800f410 <_vfiprintf_r+0xc0>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f108 0801 	add.w	r8, r8, #1
 800f500:	9305      	str	r3, [sp, #20]
 800f502:	4619      	mov	r1, r3
 800f504:	250a      	movs	r5, #10
 800f506:	4640      	mov	r0, r8
 800f508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f50c:	3a30      	subs	r2, #48	; 0x30
 800f50e:	2a09      	cmp	r2, #9
 800f510:	d903      	bls.n	800f51a <_vfiprintf_r+0x1ca>
 800f512:	2b00      	cmp	r3, #0
 800f514:	d0c3      	beq.n	800f49e <_vfiprintf_r+0x14e>
 800f516:	9105      	str	r1, [sp, #20]
 800f518:	e7c1      	b.n	800f49e <_vfiprintf_r+0x14e>
 800f51a:	fb05 2101 	mla	r1, r5, r1, r2
 800f51e:	2301      	movs	r3, #1
 800f520:	4680      	mov	r8, r0
 800f522:	e7f0      	b.n	800f506 <_vfiprintf_r+0x1b6>
 800f524:	ab03      	add	r3, sp, #12
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	4622      	mov	r2, r4
 800f52a:	4b13      	ldr	r3, [pc, #76]	; (800f578 <_vfiprintf_r+0x228>)
 800f52c:	a904      	add	r1, sp, #16
 800f52e:	4630      	mov	r0, r6
 800f530:	f7fd fe00 	bl	800d134 <_printf_float>
 800f534:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f538:	4681      	mov	r9, r0
 800f53a:	d1d5      	bne.n	800f4e8 <_vfiprintf_r+0x198>
 800f53c:	89a3      	ldrh	r3, [r4, #12]
 800f53e:	065b      	lsls	r3, r3, #25
 800f540:	f53f af7e 	bmi.w	800f440 <_vfiprintf_r+0xf0>
 800f544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f546:	e77d      	b.n	800f444 <_vfiprintf_r+0xf4>
 800f548:	ab03      	add	r3, sp, #12
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	4622      	mov	r2, r4
 800f54e:	4b0a      	ldr	r3, [pc, #40]	; (800f578 <_vfiprintf_r+0x228>)
 800f550:	a904      	add	r1, sp, #16
 800f552:	4630      	mov	r0, r6
 800f554:	f7fe f8a4 	bl	800d6a0 <_printf_i>
 800f558:	e7ec      	b.n	800f534 <_vfiprintf_r+0x1e4>
 800f55a:	bf00      	nop
 800f55c:	0800f904 	.word	0x0800f904
 800f560:	0800fa44 	.word	0x0800fa44
 800f564:	0800f924 	.word	0x0800f924
 800f568:	0800f8e4 	.word	0x0800f8e4
 800f56c:	0800fa4a 	.word	0x0800fa4a
 800f570:	0800fa4e 	.word	0x0800fa4e
 800f574:	0800d135 	.word	0x0800d135
 800f578:	0800f32b 	.word	0x0800f32b

0800f57c <_putc_r>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	460d      	mov	r5, r1
 800f580:	4614      	mov	r4, r2
 800f582:	4606      	mov	r6, r0
 800f584:	b118      	cbz	r0, 800f58e <_putc_r+0x12>
 800f586:	6983      	ldr	r3, [r0, #24]
 800f588:	b90b      	cbnz	r3, 800f58e <_putc_r+0x12>
 800f58a:	f7ff fa21 	bl	800e9d0 <__sinit>
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <_putc_r+0x60>)
 800f590:	429c      	cmp	r4, r3
 800f592:	d112      	bne.n	800f5ba <_putc_r+0x3e>
 800f594:	6874      	ldr	r4, [r6, #4]
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	3b01      	subs	r3, #1
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	da16      	bge.n	800f5ce <_putc_r+0x52>
 800f5a0:	69a2      	ldr	r2, [r4, #24]
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	db02      	blt.n	800f5ac <_putc_r+0x30>
 800f5a6:	b2eb      	uxtb	r3, r5
 800f5a8:	2b0a      	cmp	r3, #10
 800f5aa:	d110      	bne.n	800f5ce <_putc_r+0x52>
 800f5ac:	4622      	mov	r2, r4
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5b6:	f7fe ba15 	b.w	800d9e4 <__swbuf_r>
 800f5ba:	4b09      	ldr	r3, [pc, #36]	; (800f5e0 <_putc_r+0x64>)
 800f5bc:	429c      	cmp	r4, r3
 800f5be:	d101      	bne.n	800f5c4 <_putc_r+0x48>
 800f5c0:	68b4      	ldr	r4, [r6, #8]
 800f5c2:	e7e8      	b.n	800f596 <_putc_r+0x1a>
 800f5c4:	4b07      	ldr	r3, [pc, #28]	; (800f5e4 <_putc_r+0x68>)
 800f5c6:	429c      	cmp	r4, r3
 800f5c8:	bf08      	it	eq
 800f5ca:	68f4      	ldreq	r4, [r6, #12]
 800f5cc:	e7e3      	b.n	800f596 <_putc_r+0x1a>
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	6022      	str	r2, [r4, #0]
 800f5d4:	701d      	strb	r5, [r3, #0]
 800f5d6:	b2e8      	uxtb	r0, r5
 800f5d8:	bd70      	pop	{r4, r5, r6, pc}
 800f5da:	bf00      	nop
 800f5dc:	0800f904 	.word	0x0800f904
 800f5e0:	0800f924 	.word	0x0800f924
 800f5e4:	0800f8e4 	.word	0x0800f8e4

0800f5e8 <_sbrk_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4c06      	ldr	r4, [pc, #24]	; (800f604 <_sbrk_r+0x1c>)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	6023      	str	r3, [r4, #0]
 800f5f4:	f7fc feee 	bl	800c3d4 <_sbrk>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d102      	bne.n	800f602 <_sbrk_r+0x1a>
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	b103      	cbz	r3, 800f602 <_sbrk_r+0x1a>
 800f600:	602b      	str	r3, [r5, #0]
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	20032470 	.word	0x20032470

0800f608 <__sread>:
 800f608:	b510      	push	{r4, lr}
 800f60a:	460c      	mov	r4, r1
 800f60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f610:	f000 f8a8 	bl	800f764 <_read_r>
 800f614:	2800      	cmp	r0, #0
 800f616:	bfab      	itete	ge
 800f618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f61a:	89a3      	ldrhlt	r3, [r4, #12]
 800f61c:	181b      	addge	r3, r3, r0
 800f61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f622:	bfac      	ite	ge
 800f624:	6563      	strge	r3, [r4, #84]	; 0x54
 800f626:	81a3      	strhlt	r3, [r4, #12]
 800f628:	bd10      	pop	{r4, pc}

0800f62a <__swrite>:
 800f62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	461f      	mov	r7, r3
 800f630:	898b      	ldrh	r3, [r1, #12]
 800f632:	05db      	lsls	r3, r3, #23
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	4616      	mov	r6, r2
 800f63a:	d505      	bpl.n	800f648 <__swrite+0x1e>
 800f63c:	2302      	movs	r3, #2
 800f63e:	2200      	movs	r2, #0
 800f640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f644:	f000 f868 	bl	800f718 <_lseek_r>
 800f648:	89a3      	ldrh	r3, [r4, #12]
 800f64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f64e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f652:	81a3      	strh	r3, [r4, #12]
 800f654:	4632      	mov	r2, r6
 800f656:	463b      	mov	r3, r7
 800f658:	4628      	mov	r0, r5
 800f65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f65e:	f000 b817 	b.w	800f690 <_write_r>

0800f662 <__sseek>:
 800f662:	b510      	push	{r4, lr}
 800f664:	460c      	mov	r4, r1
 800f666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f66a:	f000 f855 	bl	800f718 <_lseek_r>
 800f66e:	1c43      	adds	r3, r0, #1
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	bf15      	itete	ne
 800f674:	6560      	strne	r0, [r4, #84]	; 0x54
 800f676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f67a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f67e:	81a3      	strheq	r3, [r4, #12]
 800f680:	bf18      	it	ne
 800f682:	81a3      	strhne	r3, [r4, #12]
 800f684:	bd10      	pop	{r4, pc}

0800f686 <__sclose>:
 800f686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68a:	f000 b813 	b.w	800f6b4 <_close_r>
	...

0800f690 <_write_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4c07      	ldr	r4, [pc, #28]	; (800f6b0 <_write_r+0x20>)
 800f694:	4605      	mov	r5, r0
 800f696:	4608      	mov	r0, r1
 800f698:	4611      	mov	r1, r2
 800f69a:	2200      	movs	r2, #0
 800f69c:	6022      	str	r2, [r4, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f7fc fe53 	bl	800c34a <_write>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_write_r+0x1e>
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_write_r+0x1e>
 800f6ac:	602b      	str	r3, [r5, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	20032470 	.word	0x20032470

0800f6b4 <_close_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4c06      	ldr	r4, [pc, #24]	; (800f6d0 <_close_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4605      	mov	r5, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	f7fc fe54 	bl	800c36c <_close>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_close_r+0x1a>
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_close_r+0x1a>
 800f6cc:	602b      	str	r3, [r5, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	20032470 	.word	0x20032470

0800f6d4 <_fstat_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4c07      	ldr	r4, [pc, #28]	; (800f6f4 <_fstat_r+0x20>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4605      	mov	r5, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	4611      	mov	r1, r2
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	f7fc fe4f 	bl	800c384 <_fstat>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d102      	bne.n	800f6f0 <_fstat_r+0x1c>
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	b103      	cbz	r3, 800f6f0 <_fstat_r+0x1c>
 800f6ee:	602b      	str	r3, [r5, #0]
 800f6f0:	bd38      	pop	{r3, r4, r5, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20032470 	.word	0x20032470

0800f6f8 <_isatty_r>:
 800f6f8:	b538      	push	{r3, r4, r5, lr}
 800f6fa:	4c06      	ldr	r4, [pc, #24]	; (800f714 <_isatty_r+0x1c>)
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	4605      	mov	r5, r0
 800f700:	4608      	mov	r0, r1
 800f702:	6023      	str	r3, [r4, #0]
 800f704:	f7fc fe4e 	bl	800c3a4 <_isatty>
 800f708:	1c43      	adds	r3, r0, #1
 800f70a:	d102      	bne.n	800f712 <_isatty_r+0x1a>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	b103      	cbz	r3, 800f712 <_isatty_r+0x1a>
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	20032470 	.word	0x20032470

0800f718 <_lseek_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4c07      	ldr	r4, [pc, #28]	; (800f738 <_lseek_r+0x20>)
 800f71c:	4605      	mov	r5, r0
 800f71e:	4608      	mov	r0, r1
 800f720:	4611      	mov	r1, r2
 800f722:	2200      	movs	r2, #0
 800f724:	6022      	str	r2, [r4, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	f7fc fe47 	bl	800c3ba <_lseek>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d102      	bne.n	800f736 <_lseek_r+0x1e>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	b103      	cbz	r3, 800f736 <_lseek_r+0x1e>
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	20032470 	.word	0x20032470

0800f73c <__ascii_mbtowc>:
 800f73c:	b082      	sub	sp, #8
 800f73e:	b901      	cbnz	r1, 800f742 <__ascii_mbtowc+0x6>
 800f740:	a901      	add	r1, sp, #4
 800f742:	b142      	cbz	r2, 800f756 <__ascii_mbtowc+0x1a>
 800f744:	b14b      	cbz	r3, 800f75a <__ascii_mbtowc+0x1e>
 800f746:	7813      	ldrb	r3, [r2, #0]
 800f748:	600b      	str	r3, [r1, #0]
 800f74a:	7812      	ldrb	r2, [r2, #0]
 800f74c:	1c10      	adds	r0, r2, #0
 800f74e:	bf18      	it	ne
 800f750:	2001      	movne	r0, #1
 800f752:	b002      	add	sp, #8
 800f754:	4770      	bx	lr
 800f756:	4610      	mov	r0, r2
 800f758:	e7fb      	b.n	800f752 <__ascii_mbtowc+0x16>
 800f75a:	f06f 0001 	mvn.w	r0, #1
 800f75e:	e7f8      	b.n	800f752 <__ascii_mbtowc+0x16>

0800f760 <__malloc_lock>:
 800f760:	4770      	bx	lr

0800f762 <__malloc_unlock>:
 800f762:	4770      	bx	lr

0800f764 <_read_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4c07      	ldr	r4, [pc, #28]	; (800f784 <_read_r+0x20>)
 800f768:	4605      	mov	r5, r0
 800f76a:	4608      	mov	r0, r1
 800f76c:	4611      	mov	r1, r2
 800f76e:	2200      	movs	r2, #0
 800f770:	6022      	str	r2, [r4, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	f7fc fdcc 	bl	800c310 <_read>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d102      	bne.n	800f782 <_read_r+0x1e>
 800f77c:	6823      	ldr	r3, [r4, #0]
 800f77e:	b103      	cbz	r3, 800f782 <_read_r+0x1e>
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	20032470 	.word	0x20032470

0800f788 <__ascii_wctomb>:
 800f788:	b149      	cbz	r1, 800f79e <__ascii_wctomb+0x16>
 800f78a:	2aff      	cmp	r2, #255	; 0xff
 800f78c:	bf85      	ittet	hi
 800f78e:	238a      	movhi	r3, #138	; 0x8a
 800f790:	6003      	strhi	r3, [r0, #0]
 800f792:	700a      	strbls	r2, [r1, #0]
 800f794:	f04f 30ff 	movhi.w	r0, #4294967295
 800f798:	bf98      	it	ls
 800f79a:	2001      	movls	r0, #1
 800f79c:	4770      	bx	lr
 800f79e:	4608      	mov	r0, r1
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <_init>:
 800f7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a6:	bf00      	nop
 800f7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7aa:	bc08      	pop	{r3}
 800f7ac:	469e      	mov	lr, r3
 800f7ae:	4770      	bx	lr

0800f7b0 <_fini>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	bf00      	nop
 800f7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7b6:	bc08      	pop	{r3}
 800f7b8:	469e      	mov	lr, r3
 800f7ba:	4770      	bx	lr
