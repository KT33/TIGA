
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006680  08006680  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006688  08006688  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  20000074  08006704  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08006704  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171d9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031c2  00000000  00000000  0003727d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  0003b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d68  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd47  00000000  00000000  000611a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2dc3  00000000  00000000  00070eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  00143d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006540 	.word	0x08006540

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006540 	.word	0x08006540

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 fd29 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f004 f822 	bl	8004e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fd41 	bl	80018e6 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 fd09 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	200004b4 	.word	0x200004b4

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200004b4 	.word	0x200004b4

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_Delay+0x40>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e033      	b.n	8000fa2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d109      	bne.n	8000f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f003 f938 	bl	80041b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6a:	f023 0302 	bic.w	r3, r3, #2
 8000f6e:	f043 0202 	orr.w	r2, r3, #2
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fa32 	bl	80013e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f023 0303 	bic.w	r3, r3, #3
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	641a      	str	r2, [r3, #64]	; 0x40
 8000f92:	e001      	b.n	8000f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Start_DMA+0x1e>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e0b1      	b.n	800112e <HAL_ADC_Start_DMA+0x182>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d018      	beq.n	8001012 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff0:	4b51      	ldr	r3, [pc, #324]	; (8001138 <HAL_ADC_Start_DMA+0x18c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <HAL_ADC_Start_DMA+0x190>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9a      	lsrs	r2, r3, #18
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001004:	e002      	b.n	800100c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3b01      	subs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	f040 8085 	bne.w	800112c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800104c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001060:	d106      	bne.n	8001070 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f023 0206 	bic.w	r2, r3, #6
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
 800106e:	e002      	b.n	8001076 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <HAL_ADC_Start_DMA+0x194>)
 8001080:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <HAL_ADC_Start_DMA+0x198>)
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <HAL_ADC_Start_DMA+0x19c>)
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	4a2d      	ldr	r2, [pc, #180]	; (800114c <HAL_ADC_Start_DMA+0x1a0>)
 8001098:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	334c      	adds	r3, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f000 fcc2 	bl	8001a5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10f      	bne.n	8001104 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d11c      	bne.n	800112c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	e013      	b.n	800112c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_ADC_Start_DMA+0x1a4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d10e      	bne.n	800112c <HAL_ADC_Start_DMA+0x180>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800112a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	431bde83 	.word	0x431bde83
 8001140:	40012300 	.word	0x40012300
 8001144:	080015d9 	.word	0x080015d9
 8001148:	08001693 	.word	0x08001693
 800114c:	080016af 	.word	0x080016af
 8001150:	40012000 	.word	0x40012000

08001154 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1c>
 8001194:	2302      	movs	r3, #2
 8001196:	e113      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x244>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b09      	cmp	r3, #9
 80011a6:	d925      	bls.n	80011f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68d9      	ldr	r1, [r3, #12]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	3b1e      	subs	r3, #30
 80011be:	2207      	movs	r2, #7
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43da      	mvns	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68d9      	ldr	r1, [r3, #12]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4403      	add	r3, r0
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	409a      	lsls	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	e022      	b.n	800123a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6919      	ldr	r1, [r3, #16]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	2207      	movs	r2, #7
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	4603      	mov	r3, r0
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4403      	add	r3, r0
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d824      	bhi.n	800128c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	221f      	movs	r2, #31
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b05      	subs	r3, #5
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	e04c      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d824      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b23      	subs	r3, #35	; 0x23
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b23      	subs	r3, #35	; 0x23
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
 80012dc:	e023      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b41      	subs	r3, #65	; 0x41
 80012f0:	221f      	movs	r2, #31
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b41      	subs	r3, #65	; 0x41
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_ADC_ConfigChannel+0x250>)
 8001328:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <HAL_ADC_ConfigChannel+0x254>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d10f      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1d8>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d10b      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_ADC_ConfigChannel+0x254>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12b      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x23a>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_ADC_ConfigChannel+0x258>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_ADC_ConfigChannel+0x1f4>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b11      	cmp	r3, #17
 800136e:	d122      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_ADC_ConfigChannel+0x258>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d111      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_ADC_ConfigChannel+0x260>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9a      	lsrs	r2, r3, #18
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40012300 	.word	0x40012300
 80013d0:	40012000 	.word	0x40012000
 80013d4:	10000012 	.word	0x10000012
 80013d8:	20000008 	.word	0x20000008
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <ADC_Init+0x1f0>)
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6899      	ldr	r1, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <ADC_Init+0x1f4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d022      	beq.n	80014be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6899      	ldr	r1, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e00f      	b.n	80014de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0202 	bic.w	r2, r2, #2
 80014ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7e1b      	ldrb	r3, [r3, #24]
 80014f8:	005a      	lsls	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01b      	beq.n	8001544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800152a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6859      	ldr	r1, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	3b01      	subs	r3, #1
 8001538:	035a      	lsls	r2, r3, #13
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	e007      	b.n	8001554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	3b01      	subs	r3, #1
 8001570:	051a      	lsls	r2, r3, #20
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6899      	ldr	r1, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001596:	025a      	lsls	r2, r3, #9
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	029a      	lsls	r2, r3, #10
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40012300 	.word	0x40012300
 80015d4:	0f000001 	.word	0x0f000001

080015d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d13c      	bne.n	800166c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12b      	bne.n	8001664 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001610:	2b00      	cmp	r3, #0
 8001612:	d127      	bne.n	8001664 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800162c:	2b00      	cmp	r3, #0
 800162e:	d119      	bne.n	8001664 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0220 	bic.w	r2, r2, #32
 800163e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f002 fe3b 	bl	80042e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800166a:	e00e      	b.n	800168a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fd75 	bl	8001168 <HAL_ADC_ErrorCallback>
}
 800167e:	e004      	b.n	800168a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fd57 	bl	8001154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fd4a 	bl	8001168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff fadc 	bl	8000ec8 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e099      	b.n	8001a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193c:	e00f      	b.n	800195e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800193e:	f7ff fac3 	bl	8000ec8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b05      	cmp	r3, #5
 800194a:	d908      	bls.n	800195e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e078      	b.n	8001a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e8      	bne.n	800193e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_DMA_Init+0x158>)
 8001978:	4013      	ands	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4313      	orrs	r3, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f023 0307 	bic.w	r3, r3, #7
 80019de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d117      	bne.n	8001a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00e      	beq.n	8001a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fa77 	bl	8001ef8 <DMA_CheckFifoParam>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e016      	b.n	8001a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fa2e 	bl	8001e8c <DMA_CalcBaseAndBitshift>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	223f      	movs	r2, #63	; 0x3f
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	e010803f 	.word	0xe010803f

08001a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Start_IT+0x26>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e048      	b.n	8001b14 <HAL_DMA_Start_IT+0xb8>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d137      	bne.n	8001b06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f9c0 	bl	8001e30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0216 	orr.w	r2, r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0208 	orr.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e005      	b.n	8001b12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_DMA_IRQHandler+0x258>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_DMA_IRQHandler+0x25c>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2208      	movs	r2, #8
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01a      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0204 	bic.w	r2, r2, #4
 8001b6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2208      	movs	r2, #8
 8001b76:	409a      	lsls	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d012      	beq.n	8001bbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	2201      	movs	r2, #1
 8001bac:	409a      	lsls	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2204      	movs	r2, #4
 8001be2:	409a      	lsls	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f043 0204 	orr.w	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d043      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03c      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	2210      	movs	r2, #16
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d018      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d108      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d024      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
 8001c4a:	e01f      	b.n	8001c8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e016      	b.n	8001c8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0208 	bic.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2220      	movs	r2, #32
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 808e 	beq.w	8001dba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8086 	beq.w	8001dba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d136      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0216 	bic.w	r2, r2, #22
 8001cd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <HAL_DMA_IRQHandler+0x1da>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0208 	bic.w	r2, r2, #8
 8001d04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	223f      	movs	r2, #63	; 0x3f
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d07d      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
        }
        return;
 8001d32:	e078      	b.n	8001e26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01c      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d030      	beq.n	8001dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
 8001d60:	e02b      	b.n	8001dba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d027      	beq.n	8001dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
 8001d72:	e022      	b.n	8001dba <HAL_DMA_IRQHandler+0x29e>
 8001d74:	20000008 	.word	0x20000008
 8001d78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0210 	bic.w	r2, r2, #16
 8001d98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d032      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d022      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d307      	bcc.n	8001e02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f2      	bne.n	8001de6 <HAL_DMA_IRQHandler+0x2ca>
 8001e00:	e000      	b.n	8001e04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e000      	b.n	8001e28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e26:	bf00      	nop
    }
  }
}
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop

08001e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d108      	bne.n	8001e70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e6e:	e007      	b.n	8001e80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3b10      	subs	r3, #16
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d909      	bls.n	8001ece <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	1d1a      	adds	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	; 0x58
 8001ecc:	e007      	b.n	8001ede <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	aaaaaaab 	.word	0xaaaaaaab
 8001ef4:	080065d0 	.word	0x080065d0

08001ef8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d11f      	bne.n	8001f52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d855      	bhi.n	8001fc4 <DMA_CheckFifoParam+0xcc>
 8001f18:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <DMA_CheckFifoParam+0x28>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f43 	.word	0x08001f43
 8001f28:	08001f31 	.word	0x08001f31
 8001f2c:	08001fc5 	.word	0x08001fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d045      	beq.n	8001fc8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f40:	e042      	b.n	8001fc8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4a:	d13f      	bne.n	8001fcc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f50:	e03c      	b.n	8001fcc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5a:	d121      	bne.n	8001fa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d836      	bhi.n	8001fd0 <DMA_CheckFifoParam+0xd8>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <DMA_CheckFifoParam+0x70>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f7f 	.word	0x08001f7f
 8001f70:	08001f79 	.word	0x08001f79
 8001f74:	08001f91 	.word	0x08001f91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f7c:	e02f      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8e:	e021      	b.n	8001fd4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f98:	d11e      	bne.n	8001fd8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f9e:	e01b      	b.n	8001fd8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d902      	bls.n	8001fac <DMA_CheckFifoParam+0xb4>
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d003      	beq.n	8001fb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001faa:	e018      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e015      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00e      	beq.n	8001fdc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc2:	e00b      	b.n	8001fdc <DMA_CheckFifoParam+0xe4>
      break;
 8001fc4:	bf00      	nop
 8001fc6:	e00a      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;
 8001fc8:	bf00      	nop
 8001fca:	e008      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;
 8001fcc:	bf00      	nop
 8001fce:	e006      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;
 8001fd0:	bf00      	nop
 8001fd2:	e004      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;
 8001fd4:	bf00      	nop
 8001fd6:	e002      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;   
 8001fd8:	bf00      	nop
 8001fda:	e000      	b.n	8001fde <DMA_CheckFifoParam+0xe6>
      break;
 8001fdc:	bf00      	nop
    }
  } 
  
  return status; 
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e165      	b.n	80022d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8154 	bne.w	80022ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x4a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	69b9      	ldr	r1, [r7, #24]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d00b      	beq.n	80020d2 <HAL_GPIO_Init+0xe6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c6:	2b11      	cmp	r3, #17
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d130      	bne.n	8002134 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0201 	and.w	r2, r3, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80ae 	beq.w	80022ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a5b      	ldr	r2, [pc, #364]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_GPIO_Init+0x300>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_GPIO_Init+0x304>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x308>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x30c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_GPIO_Init+0x310>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x314>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x20a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x318>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x206>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x31c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x202>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4934      	ldr	r1, [pc, #208]	; (80022ec <HAL_GPIO_Init+0x300>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_GPIO_Init+0x320>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_GPIO_Init+0x320>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_GPIO_Init+0x320>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <HAL_GPIO_Init+0x320>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_GPIO_Init+0x320>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_GPIO_Init+0x320>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_GPIO_Init+0x320>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_GPIO_Init+0x320>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae96 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	; 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40013c00 	.word	0x40013c00

08002310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e001      	b.n	8002332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	401a      	ands	r2, r3
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	429a      	cmp	r2, r3
 800238a:	d104      	bne.n	8002396 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002394:	e002      	b.n	800239c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0ca      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b6      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b52      	ldr	r3, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494c      	ldr	r1, [pc, #304]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07d      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3e      	ldr	r3, [pc, #248]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06d      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e065      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4933      	ldr	r1, [pc, #204]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe fd16 	bl	8000ec8 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fd12 	bl	8000ec8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04d      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e030      	b.n	8002552 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4915      	ldr	r1, [pc, #84]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490d      	ldr	r1, [pc, #52]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f81d 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002532:	4601      	mov	r1, r0
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	fa21 f303 	lsr.w	r3, r1, r3
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe fc78 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00
 8002560:	40023800 	.word	0x40023800
 8002564:	080065d8 	.word	0x080065d8
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d007      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x32>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d008      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x38>
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 80b4 	bne.w	8002700 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800259a:	60bb      	str	r3, [r7, #8]
       break;
 800259c:	e0b3      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025a0:	60bb      	str	r3, [r7, #8]
      break;
 80025a2:	e0b0      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ae:	4b58      	ldr	r3, [pc, #352]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04a      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b55      	ldr	r3, [pc, #340]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	f04f 0400 	mov.w	r4, #0
 80025c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	ea03 0501 	and.w	r5, r3, r1
 80025d0:	ea04 0602 	and.w	r6, r4, r2
 80025d4:	4629      	mov	r1, r5
 80025d6:	4632      	mov	r2, r6
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f04f 0400 	mov.w	r4, #0
 80025e0:	0154      	lsls	r4, r2, #5
 80025e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e6:	014b      	lsls	r3, r1, #5
 80025e8:	4619      	mov	r1, r3
 80025ea:	4622      	mov	r2, r4
 80025ec:	1b49      	subs	r1, r1, r5
 80025ee:	eb62 0206 	sbc.w	r2, r2, r6
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	0194      	lsls	r4, r2, #6
 80025fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	1a5b      	subs	r3, r3, r1
 8002604:	eb64 0402 	sbc.w	r4, r4, r2
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	00e2      	lsls	r2, r4, #3
 8002612:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002616:	00d9      	lsls	r1, r3, #3
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	195b      	adds	r3, r3, r5
 800261e:	eb44 0406 	adc.w	r4, r4, r6
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	02a2      	lsls	r2, r4, #10
 800262c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002630:	0299      	lsls	r1, r3, #10
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	4618      	mov	r0, r3
 8002638:	4621      	mov	r1, r4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 0400 	mov.w	r4, #0
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f7fe fa5a 	bl	8000afc <__aeabi_uldivmod>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e049      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	f04f 0400 	mov.w	r4, #0
 800265a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	ea03 0501 	and.w	r5, r3, r1
 8002666:	ea04 0602 	and.w	r6, r4, r2
 800266a:	4629      	mov	r1, r5
 800266c:	4632      	mov	r2, r6
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f04f 0400 	mov.w	r4, #0
 8002676:	0154      	lsls	r4, r2, #5
 8002678:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800267c:	014b      	lsls	r3, r1, #5
 800267e:	4619      	mov	r1, r3
 8002680:	4622      	mov	r2, r4
 8002682:	1b49      	subs	r1, r1, r5
 8002684:	eb62 0206 	sbc.w	r2, r2, r6
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	0194      	lsls	r4, r2, #6
 8002692:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002696:	018b      	lsls	r3, r1, #6
 8002698:	1a5b      	subs	r3, r3, r1
 800269a:	eb64 0402 	sbc.w	r4, r4, r2
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	00e2      	lsls	r2, r4, #3
 80026a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026ac:	00d9      	lsls	r1, r3, #3
 80026ae:	460b      	mov	r3, r1
 80026b0:	4614      	mov	r4, r2
 80026b2:	195b      	adds	r3, r3, r5
 80026b4:	eb44 0406 	adc.w	r4, r4, r6
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	02a2      	lsls	r2, r4, #10
 80026c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026c6:	0299      	lsls	r1, r3, #10
 80026c8:	460b      	mov	r3, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	4621      	mov	r1, r4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0400 	mov.w	r4, #0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4623      	mov	r3, r4
 80026da:	f7fe fa0f 	bl	8000afc <__aeabi_uldivmod>
 80026de:	4603      	mov	r3, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	60bb      	str	r3, [r7, #8]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002702:	60bb      	str	r3, [r7, #8]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	68bb      	ldr	r3, [r7, #8]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	00f42400 	.word	0x00f42400

08002718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d075      	beq.n	800281c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002730:	4ba2      	ldr	r3, [pc, #648]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273c:	4b9f      	ldr	r3, [pc, #636]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002744:	2b08      	cmp	r3, #8
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002748:	4b9c      	ldr	r3, [pc, #624]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d10b      	bne.n	800276e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	4b99      	ldr	r3, [pc, #612]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05b      	beq.n	800281a <HAL_RCC_OscConfig+0x102>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d157      	bne.n	800281a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e20b      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x6e>
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a8f      	ldr	r2, [pc, #572]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e01d      	b.n	80027c2 <HAL_RCC_OscConfig+0xaa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x92>
 8002790:	4b8a      	ldr	r3, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a89      	ldr	r2, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a86      	ldr	r2, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0xaa>
 80027aa:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a83      	ldr	r2, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b81      	ldr	r3, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d013      	beq.n	80027f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fb7d 	bl	8000ec8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d2:	f7fe fb79 	bl	8000ec8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1d0      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0xba>
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fb69 	bl	8000ec8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fa:	f7fe fb65 	bl	8000ec8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1bc      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0xe2>
 8002818:	e000      	b.n	800281c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d063      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002828:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800283c:	2b08      	cmp	r3, #8
 800283e:	d11c      	bne.n	800287a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002840:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x14c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e190      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b55      	ldr	r3, [pc, #340]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4952      	ldr	r1, [pc, #328]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002878:	e03a      	b.n	80028f0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d020      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCC_OscConfig+0x2a8>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fb1e 	bl	8000ec8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe fb1a 	bl	8000ec8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e171      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	493f      	ldr	r1, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
 80028c2:	e015      	b.n	80028f0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_RCC_OscConfig+0x2a8>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fafd 	bl	8000ec8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe faf9 	bl	8000ec8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e150      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d030      	beq.n	800295e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d016      	beq.n	8002932 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fadd 	bl	8000ec8 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe fad9 	bl	8000ec8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e130      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x1fa>
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fac6 	bl	8000ec8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fac2 	bl	8000ec8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e119      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 809f 	beq.w	8002aaa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x2a4>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d120      	bne.n	80029ea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fa88 	bl	8000ec8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	e010      	b.n	80029de <HAL_RCC_OscConfig+0x2c6>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
 80029c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029cc:	f7fe fa7c 	bl	8000ec8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e0d3      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2e8>
 80029f2:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6713      	str	r3, [r2, #112]	; 0x70
 80029fe:	e01c      	b.n	8002a3a <HAL_RCC_OscConfig+0x322>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d10c      	bne.n	8002a22 <HAL_RCC_OscConfig+0x30a>
 8002a08:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a5e      	ldr	r2, [pc, #376]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	e00b      	b.n	8002a3a <HAL_RCC_OscConfig+0x322>
 8002a22:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d015      	beq.n	8002a6e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe fa41 	bl	8000ec8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe fa3d 	bl	8000ec8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e092      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ee      	beq.n	8002a4a <HAL_RCC_OscConfig+0x332>
 8002a6c:	e014      	b.n	8002a98 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fa2b 	bl	8000ec8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fa27 	bl	8000ec8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e07c      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ee      	bne.n	8002a76 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d068      	beq.n	8002b84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d145      	bne.n	8002b52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x480>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe f9fc 	bl	8000ec8 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f9f8 	bl	8000ec8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e04f      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	491d      	ldr	r1, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_RCC_OscConfig+0x480>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f9cd 	bl	8000ec8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f9c9 	bl	8000ec8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e020      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x41a>
 8002b50:	e018      	b.n	8002b84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCC_OscConfig+0x480>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f9b6 	bl	8000ec8 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f9b2 	bl	8000ec8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_RCC_OscConfig+0x47c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x448>
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000
 8002b94:	40023800 	.word	0x40023800
 8002b98:	42470060 	.word	0x42470060

08002b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e056      	b.n	8002c5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f002 f8c7 	bl	8004d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	f003 0104 	and.w	r1, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c72:	2301      	movs	r3, #1
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x26>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e18a      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x33c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c92:	f7fe f919 	bl	8000ec8 <HAL_GetTick>
 8002c96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x70>
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cba:	d107      	bne.n	8002ccc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <HAL_SPI_TransmitReceive+0x68>
 8002cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d003      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cd2:	e15b      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x82>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x82>
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cec:	e14e      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	887a      	ldrh	r2, [r7, #2]
 8002d2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d007      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5e:	d178      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x10a>
 8002d68:	8b7b      	ldrh	r3, [r7, #26]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d166      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	1c9a      	adds	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d92:	e053      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d11b      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x176>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x176>
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d113      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	1c9a      	adds	r2, r3, #2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d119      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x1b8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d014      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e1c:	f7fe f854 	bl	8000ec8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d807      	bhi.n	8002e3c <HAL_SPI_TransmitReceive+0x1d8>
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d003      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e3a:	e0a7      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1a6      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x130>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1a1      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x130>
 8002e50:	e07c      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x1fc>
 8002e5a:	8b7b      	ldrh	r3, [r7, #26]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d16b      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e86:	e057      	b.n	8002f38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d11c      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x26c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x26c>
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d114      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d119      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x2ae>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d014      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f12:	f7fd ffd9 	bl	8000ec8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d803      	bhi.n	8002f2a <HAL_SPI_TransmitReceive+0x2c6>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d102      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2cc>
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f36:	e029      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1a2      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x224>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d19d      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f893 	bl	800307c <SPI_EndRxTxTransaction>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f68:	e010      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	e000      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3730      	adds	r7, #48	; 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb8:	e04c      	b.n	8003054 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d048      	beq.n	8003054 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fc2:	f7fd ff81 	bl	8000ec8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d902      	bls.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13d      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff0:	d111      	bne.n	8003016 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffa:	d004      	beq.n	8003006 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003004:	d107      	bne.n	8003016 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003014:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301e:	d10f      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e00f      	b.n	8003074 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4013      	ands	r3, r2
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	429a      	cmp	r2, r3
 8003070:	d1a3      	bne.n	8002fba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <SPI_EndRxTxTransaction+0x7c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1b      	ldr	r2, [pc, #108]	; (80030fc <SPI_EndRxTxTransaction+0x80>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0d5b      	lsrs	r3, r3, #21
 8003094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a6:	d112      	bne.n	80030ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff ff78 	bl	8002fa8 <SPI_WaitFlagStateUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e00f      	b.n	80030ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d0f2      	beq.n	80030ce <SPI_EndRxTxTransaction+0x52>
 80030e8:	e000      	b.n	80030ec <SPI_EndRxTxTransaction+0x70>
        break;
 80030ea:	bf00      	nop
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000008 	.word	0x20000008
 80030fc:	165e9f81 	.word	0x165e9f81

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e01d      	b.n	800314e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f002 f8fe 	bl	8005328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 faee 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d007      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e01d      	b.n	80031ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f002 f879 	bl	80052bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fa9f 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fcda 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a15      	ldr	r2, [pc, #84]	; (8003268 <HAL_TIM_PWM_Start+0x74>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_TIM_PWM_Start+0x2c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_TIM_PWM_Start+0x78>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_TIM_PWM_Start+0x30>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_TIM_PWM_Start+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b06      	cmp	r3, #6
 800324a:	d007      	beq.n	800325c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fc9c 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_TIM_PWM_Stop+0xa8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_TIM_PWM_Stop+0x2c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_TIM_PWM_Stop+0xac>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_PWM_Stop+0x30>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_TIM_PWM_Stop+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_TIM_PWM_Stop+0x66>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	f240 4344 	movw	r3, #1092	; 0x444
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_PWM_Stop+0x66>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <HAL_TIM_PWM_Stop+0x96>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	f240 4344 	movw	r3, #1092	; 0x444
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_PWM_Stop+0x96>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40010000 	.word	0x40010000
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9be 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9b0 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9c1 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f994 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f986 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f997 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f96a 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f95c 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f96d 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f940 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f932 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f943 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f90c 	bl	80036bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fbec 	bl	8003ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f908 	bl	800370c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0220 	mvn.w	r2, #32
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fbb6 	bl	8003c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003546:	2302      	movs	r3, #2
 8003548:	e0b4      	b.n	80036b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	f200 809f 	bhi.w	80036a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080036a1 	.word	0x080036a1
 8003570:	080036a1 	.word	0x080036a1
 8003574:	080036a1 	.word	0x080036a1
 8003578:	080035dd 	.word	0x080035dd
 800357c:	080036a1 	.word	0x080036a1
 8003580:	080036a1 	.word	0x080036a1
 8003584:	080036a1 	.word	0x080036a1
 8003588:	0800361f 	.word	0x0800361f
 800358c:	080036a1 	.word	0x080036a1
 8003590:	080036a1 	.word	0x080036a1
 8003594:	080036a1 	.word	0x080036a1
 8003598:	0800365f 	.word	0x0800365f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f95c 	bl	8003860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6999      	ldr	r1, [r3, #24]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
      break;
 80035da:	e062      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f9ac 	bl	8003940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	619a      	str	r2, [r3, #24]
      break;
 800361c:	e041      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fa01 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0208 	orr.w	r2, r2, #8
 8003638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0204 	bic.w	r2, r2, #4
 8003648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69d9      	ldr	r1, [r3, #28]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	61da      	str	r2, [r3, #28]
      break;
 800365c:	e021      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fa55 	bl	8003b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69d9      	ldr	r1, [r3, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	021a      	lsls	r2, r3, #8
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	61da      	str	r2, [r3, #28]
      break;
 800369e:	e000      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80036a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a40      	ldr	r2, [pc, #256]	; (8003834 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3d      	ldr	r2, [pc, #244]	; (8003838 <TIM_Base_SetConfig+0x118>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3c      	ldr	r2, [pc, #240]	; (800383c <TIM_Base_SetConfig+0x11c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <TIM_Base_SetConfig+0x120>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <TIM_Base_SetConfig+0x124>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <TIM_Base_SetConfig+0x114>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d027      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <TIM_Base_SetConfig+0x118>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d023      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <TIM_Base_SetConfig+0x11c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <TIM_Base_SetConfig+0x120>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <TIM_Base_SetConfig+0x124>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d017      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <TIM_Base_SetConfig+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <TIM_Base_SetConfig+0x12c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a26      	ldr	r2, [pc, #152]	; (8003850 <TIM_Base_SetConfig+0x130>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a25      	ldr	r2, [pc, #148]	; (8003854 <TIM_Base_SetConfig+0x134>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <TIM_Base_SetConfig+0x138>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a23      	ldr	r2, [pc, #140]	; (800385c <TIM_Base_SetConfig+0x13c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <TIM_Base_SetConfig+0x114>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <TIM_Base_SetConfig+0x124>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40010400 	.word	0x40010400
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	40001800 	.word	0x40001800
 8003858:	40001c00 	.word	0x40001c00
 800385c:	40002000 	.word	0x40002000

08003860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 0302 	bic.w	r3, r3, #2
 80038a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a20      	ldr	r2, [pc, #128]	; (8003938 <TIM_OC1_SetConfig+0xd8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC1_SetConfig+0x64>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <TIM_OC1_SetConfig+0xdc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0308 	bic.w	r3, r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <TIM_OC1_SetConfig+0xd8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC1_SetConfig+0x8e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <TIM_OC1_SetConfig+0xdc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <TIM_OC2_SetConfig+0xe4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC2_SetConfig+0x68>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <TIM_OC2_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <TIM_OC2_SetConfig+0xe4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0x94>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <TIM_OC2_SetConfig+0xe8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40010400 	.word	0x40010400

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <TIM_OC3_SetConfig+0xe0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC3_SetConfig+0x66>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <TIM_OC3_SetConfig+0xe4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10d      	bne.n	8003aae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <TIM_OC3_SetConfig+0xe0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_OC3_SetConfig+0x92>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <TIM_OC3_SetConfig+0xe4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d113      	bne.n	8003ae6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <TIM_OC4_SetConfig+0xa4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC4_SetConfig+0x68>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <TIM_OC4_SetConfig+0xa8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d109      	bne.n	8003b90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e032      	b.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <_DoInit+0x8c>)
 8003cc4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <_DoInit+0x90>)
 8003cd6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <_DoInit+0x94>)
 8003cdc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <_DoInit+0x90>)
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <_DoInit+0x98>)
 8003d02:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2210      	movs	r2, #16
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3307      	adds	r3, #7
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <_DoInit+0x9c>)
 8003d22:	6810      	ldr	r0, [r2, #0]
 8003d24:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <_DoInit+0xa0>)
 8003d2a:	6810      	ldr	r0, [r2, #0]
 8003d2c:	6018      	str	r0, [r3, #0]
 8003d2e:	8891      	ldrh	r1, [r2, #4]
 8003d30:	7992      	ldrb	r2, [r2, #6]
 8003d32:	8099      	strh	r1, [r3, #4]
 8003d34:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	719a      	strb	r2, [r3, #6]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	200004b8 	.word	0x200004b8
 8003d4c:	08006558 	.word	0x08006558
 8003d50:	20000090 	.word	0x20000090
 8003d54:	20000490 	.word	0x20000490
 8003d58:	08006564 	.word	0x08006564
 8003d5c:	08006568 	.word	0x08006568

08003d60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d905      	bls.n	8003d90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	e007      	b.n	8003da0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	6939      	ldr	r1, [r7, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1acb      	subs	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	4293      	cmp	r3, r2
 8003dac:	bf28      	it	cs
 8003dae:	4613      	movcs	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4293      	cmp	r3, r2
 8003db8:	bf28      	it	cs
 8003dba:	4613      	movcs	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fc12 	bl	80055f4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d101      	bne.n	8003dfe <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1b5      	bne.n	8003d76 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d90e      	bls.n	8003e56 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fbd5 	bl	80055f4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	441a      	add	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003e54:	e01a      	b.n	8003e8c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fbc4 	bl	80055f4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6858      	ldr	r0, [r3, #4]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f001 fbb7 	bl	80055f4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d808      	bhi.n	8003ec2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad2      	subs	r2, r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e004      	b.n	8003ecc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003ecc:	697b      	ldr	r3, [r7, #20]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <SEGGER_RTT_WriteNoLock+0x98>)
 8003efa:	4413      	add	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d017      	beq.n	8003f36 <SEGGER_RTT_WriteNoLock+0x5a>
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d302      	bcc.n	8003f10 <SEGGER_RTT_WriteNoLock+0x34>
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d023      	beq.n	8003f56 <SEGGER_RTT_WriteNoLock+0x7a>
 8003f0e:	e029      	b.n	8003f64 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7ff ffbf 	bl	8003e94 <_GetAvailWriteSpace>
 8003f16:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d202      	bcs.n	8003f26 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f24:	e021      	b.n	8003f6a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff ff70 	bl	8003e14 <_WriteNoCheck>
    break;
 8003f34:	e019      	b.n	8003f6a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ffac 	bl	8003e94 <_GetAvailWriteSpace>
 8003f3c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bf28      	it	cs
 8003f46:	4613      	movcs	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff60 	bl	8003e14 <_WriteNoCheck>
    break;
 8003f54:	e009      	b.n	8003f6a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff00 	bl	8003d60 <_WriteBlocking>
 8003f60:	61f8      	str	r0, [r7, #28]
    break;
 8003f62:	e002      	b.n	8003f6a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
    break;
 8003f68:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200004b8 	.word	0x200004b8

08003f78 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <SEGGER_RTT_Write+0x44>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <SEGGER_RTT_Write+0x18>
 8003f8c:	f7ff fe96 	bl	8003cbc <_DoInit>
  SEGGER_RTT_LOCK();
 8003f90:	f3ef 8311 	mrs	r3, BASEPRI
 8003f94:	f04f 0120 	mov.w	r1, #32
 8003f98:	f381 8811 	msr	BASEPRI, r1
 8003f9c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff9a 	bl	8003edc <SEGGER_RTT_WriteNoLock>
 8003fa8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8003fb0:	693b      	ldr	r3, [r7, #16]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200004b8 	.word	0x200004b8

08003fc0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003fce:	4b30      	ldr	r3, [pc, #192]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003fd6:	f7ff fe71 	bl	8003cbc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003fda:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d24c      	bcs.n	8004080 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fea:	f04f 0120 	mov.w	r1, #32
 8003fee:	f381 8811 	msr	BASEPRI, r1
 8003ff2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d032      	beq.n	8004060 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003ffa:	4925      	ldr	r1, [pc, #148]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800400e:	4920      	ldr	r1, [pc, #128]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	3304      	adds	r3, #4
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004024:	491a      	ldr	r1, [pc, #104]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	440b      	add	r3, r1
 8004032:	3320      	adds	r3, #32
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004038:	4915      	ldr	r1, [pc, #84]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3328      	adds	r3, #40	; 0x28
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800404c:	4910      	ldr	r1, [pc, #64]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004060:	490b      	ldr	r1, [pc, #44]	; (8004090 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	332c      	adds	r3, #44	; 0x2c
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e002      	b.n	8004086 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004086:	697b      	ldr	r3, [r7, #20]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200004b8 	.word	0x200004b8

08004094 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  _DoInit();
 8004098:	f7ff fe10 	bl	8003cbc <_DoInit>
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80040a6:	463b      	mov	r3, r7
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80040b2:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040b4:	4a3e      	ldr	r2, [pc, #248]	; (80041b0 <MX_ADC1_Init+0x110>)
 80040b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040c0:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040cc:	4b37      	ldr	r3, [pc, #220]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040da:	4b34      	ldr	r3, [pc, #208]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040e0:	4b32      	ldr	r3, [pc, #200]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040e2:	4a34      	ldr	r2, [pc, #208]	; (80041b4 <MX_ADC1_Init+0x114>)
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80040ec:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040ee:	2205      	movs	r2, #5
 80040f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040f2:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040fa:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <MX_ADC1_Init+0x10c>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004100:	482a      	ldr	r0, [pc, #168]	; (80041ac <MX_ADC1_Init+0x10c>)
 8004102:	f7fc ff0f 	bl	8000f24 <HAL_ADC_Init>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800410c:	f000 fbec 	bl	80048e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004110:	2309      	movs	r3, #9
 8004112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004114:	2301      	movs	r3, #1
 8004116:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004118:	2302      	movs	r3, #2
 800411a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800411c:	463b      	mov	r3, r7
 800411e:	4619      	mov	r1, r3
 8004120:	4822      	ldr	r0, [pc, #136]	; (80041ac <MX_ADC1_Init+0x10c>)
 8004122:	f7fd f82b 	bl	800117c <HAL_ADC_ConfigChannel>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800412c:	f000 fbdc 	bl	80048e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004130:	2300      	movs	r3, #0
 8004132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004134:	2302      	movs	r3, #2
 8004136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004138:	2301      	movs	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800413c:	463b      	mov	r3, r7
 800413e:	4619      	mov	r1, r3
 8004140:	481a      	ldr	r0, [pc, #104]	; (80041ac <MX_ADC1_Init+0x10c>)
 8004142:	f7fd f81b 	bl	800117c <HAL_ADC_ConfigChannel>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800414c:	f000 fbcc 	bl	80048e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004150:	2301      	movs	r3, #1
 8004152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004154:	2303      	movs	r3, #3
 8004156:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004158:	463b      	mov	r3, r7
 800415a:	4619      	mov	r1, r3
 800415c:	4813      	ldr	r0, [pc, #76]	; (80041ac <MX_ADC1_Init+0x10c>)
 800415e:	f7fd f80d 	bl	800117c <HAL_ADC_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004168:	f000 fbbe 	bl	80048e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800416c:	2302      	movs	r3, #2
 800416e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004170:	2304      	movs	r3, #4
 8004172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004174:	463b      	mov	r3, r7
 8004176:	4619      	mov	r1, r3
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <MX_ADC1_Init+0x10c>)
 800417a:	f7fc ffff 	bl	800117c <HAL_ADC_ConfigChannel>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8004184:	f000 fbb0 	bl	80048e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004188:	2303      	movs	r3, #3
 800418a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800418c:	2305      	movs	r3, #5
 800418e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004190:	463b      	mov	r3, r7
 8004192:	4619      	mov	r1, r3
 8004194:	4805      	ldr	r0, [pc, #20]	; (80041ac <MX_ADC1_Init+0x10c>)
 8004196:	f7fc fff1 	bl	800117c <HAL_ADC_ConfigChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80041a0:	f000 fba2 	bl	80048e8 <Error_Handler>
  }

}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000560 	.word	0x20000560
 80041b0:	40012000 	.word	0x40012000
 80041b4:	0f000001 	.word	0x0f000001

080041b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <HAL_ADC_MspInit+0x10c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d170      	bne.n	80042bc <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <HAL_ADC_MspInit+0x110>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 800422e:	230f      	movs	r3, #15
 8004230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004232:	2303      	movs	r3, #3
 8004234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	4619      	mov	r1, r3
 8004240:	4822      	ldr	r0, [pc, #136]	; (80042cc <HAL_ADC_MspInit+0x114>)
 8004242:	f7fd fed3 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8004246:	2302      	movs	r3, #2
 8004248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800424a:	2303      	movs	r3, #3
 800424c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8004252:	f107 0314 	add.w	r3, r7, #20
 8004256:	4619      	mov	r1, r3
 8004258:	481d      	ldr	r0, [pc, #116]	; (80042d0 <HAL_ADC_MspInit+0x118>)
 800425a:	f7fd fec7 	bl	8001fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_ADC_MspInit+0x120>)
 8004262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004266:	2200      	movs	r2, #0
 8004268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800426a:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004270:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800427c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004284:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800428c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004290:	2200      	movs	r2, #0
 8004292:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 8004296:	2200      	movs	r2, #0
 8004298:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 800429c:	2200      	movs	r2, #0
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80042a0:	480c      	ldr	r0, [pc, #48]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 80042a2:	f7fd fb2d 	bl	8001900 <HAL_DMA_Init>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80042ac:	f000 fb1c 	bl	80048e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
 80042b6:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <HAL_ADC_MspInit+0x11c>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80042bc:	bf00      	nop
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40012000 	.word	0x40012000
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40020000 	.word	0x40020000
 80042d0:	40020400 	.word	0x40020400
 80042d4:	200005a8 	.word	0x200005a8
 80042d8:	40026410 	.word	0x40026410
 80042dc:	00000000 	.word	0x00000000

080042e0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 80042f0:	885b      	ldrh	r3, [r3, #2]
 80042f2:	4618      	mov	r0, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 80042f6:	889b      	ldrh	r3, [r3, #4]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80042f8:	461c      	mov	r4, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 80042fc:	88db      	ldrh	r3, [r3, #6]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80042fe:	461a      	mov	r2, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 8004300:	4b25      	ldr	r3, [pc, #148]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 8004302:	891b      	ldrh	r3, [r3, #8]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	9200      	str	r2, [sp, #0]
 8004308:	4623      	mov	r3, r4
 800430a:	4602      	mov	r2, r0
 800430c:	4823      	ldr	r0, [pc, #140]	; (800439c <HAL_ADC_ConvCpltCallback+0xbc>)
 800430e:	f001 f985 	bl	800561c <iprintf>

	printf("%d\n", g_ADCBuffer[0]);
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	4821      	ldr	r0, [pc, #132]	; (80043a0 <HAL_ADC_ConvCpltCallback+0xc0>)
 800431a:	f001 f97f 	bl	800561c <iprintf>
	Batt = (float) g_ADCBuffer[0] / 4095 * 3.3 * 2;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_ADC_ConvCpltCallback+0xb8>)
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80043a4 <HAL_ADC_ConvCpltCallback+0xc4>
 800432e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004332:	ee16 0a90 	vmov	r0, s13
 8004336:	f7fc f927 	bl	8000588 <__aeabi_f2d>
 800433a:	a315      	add	r3, pc, #84	; (adr r3, 8004390 <HAL_ADC_ConvCpltCallback+0xb0>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc f97a 	bl	8000638 <__aeabi_dmul>
 8004344:	4603      	mov	r3, r0
 8004346:	460c      	mov	r4, r1
 8004348:	4618      	mov	r0, r3
 800434a:	4621      	mov	r1, r4
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	f7fb ffbc 	bl	80002cc <__adddf3>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	4618      	mov	r0, r3
 800435a:	4621      	mov	r1, r4
 800435c:	f7fc fb7e 	bl	8000a5c <__aeabi_d2f>
 8004360:	4602      	mov	r2, r0
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8004364:	601a      	str	r2, [r3, #0]
	printf("Batt=%.4f\n", Batt);
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f90c 	bl	8000588 <__aeabi_f2d>
 8004370:	4603      	mov	r3, r0
 8004372:	460c      	mov	r4, r1
 8004374:	461a      	mov	r2, r3
 8004376:	4623      	mov	r3, r4
 8004378:	480c      	ldr	r0, [pc, #48]	; (80043ac <HAL_ADC_ConvCpltCallback+0xcc>)
 800437a:	f001 f94f 	bl	800561c <iprintf>
	printf("\n");
 800437e:	200a      	movs	r0, #10
 8004380:	f001 f964 	bl	800564c <putchar>

}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	f3af 8000 	nop.w
 8004390:	66666666 	.word	0x66666666
 8004394:	400a6666 	.word	0x400a6666
 8004398:	20000b1c 	.word	0x20000b1c
 800439c:	08006570 	.word	0x08006570
 80043a0:	08006588 	.word	0x08006588
 80043a4:	457ff000 	.word	0x457ff000
 80043a8:	20000844 	.word	0x20000844
 80043ac:	0800658c 	.word	0x0800658c

080043b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <MX_DMA_Init+0x3c>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <MX_DMA_Init+0x3c>)
 80043c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <MX_DMA_Init+0x3c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80043d2:	2200      	movs	r2, #0
 80043d4:	2100      	movs	r1, #0
 80043d6:	2038      	movs	r0, #56	; 0x38
 80043d8:	f7fd fa5b 	bl	8001892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80043dc:	2038      	movs	r0, #56	; 0x38
 80043de:	f7fd fa74 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800

080043f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	4b48      	ldr	r3, [pc, #288]	; (800452c <MX_GPIO_Init+0x13c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4a47      	ldr	r2, [pc, #284]	; (800452c <MX_GPIO_Init+0x13c>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
 8004416:	4b45      	ldr	r3, [pc, #276]	; (800452c <MX_GPIO_Init+0x13c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <MX_GPIO_Init+0x13c>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <MX_GPIO_Init+0x13c>)
 800442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b3e      	ldr	r3, [pc, #248]	; (800452c <MX_GPIO_Init+0x13c>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <MX_GPIO_Init+0x13c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a39      	ldr	r2, [pc, #228]	; (800452c <MX_GPIO_Init+0x13c>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <MX_GPIO_Init+0x13c>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	4b33      	ldr	r3, [pc, #204]	; (800452c <MX_GPIO_Init+0x13c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <MX_GPIO_Init+0x13c>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <MX_GPIO_Init+0x13c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UI_LED_CENTER_Pin|SENLED_R_Pin, GPIO_PIN_RESET);
 8004476:	2200      	movs	r2, #0
 8004478:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800447c:	482c      	ldr	r0, [pc, #176]	; (8004530 <MX_GPIO_Init+0x140>)
 800447e:	f7fd ff5f 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|FLAG_LED_Pin 
 8004482:	2200      	movs	r2, #0
 8004484:	f641 2170 	movw	r1, #6768	; 0x1a70
 8004488:	482a      	ldr	r0, [pc, #168]	; (8004534 <MX_GPIO_Init+0x144>)
 800448a:	f7fd ff59 	bl	8002340 <HAL_GPIO_WritePin>
                          |UI_LED_RIGHT_Pin|SEN_LED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED_LEFT_Pin|MOTER_R_CWCCW_Pin|MOTER_L_CWCCW_Pin, GPIO_PIN_RESET);
 800448e:	2200      	movs	r2, #0
 8004490:	f240 3101 	movw	r1, #769	; 0x301
 8004494:	4828      	ldr	r0, [pc, #160]	; (8004538 <MX_GPIO_Init+0x148>)
 8004496:	f7fd ff53 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 800449a:	2201      	movs	r2, #1
 800449c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a0:	4824      	ldr	r0, [pc, #144]	; (8004534 <MX_GPIO_Init+0x144>)
 80044a2:	f7fd ff4d 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_R_EN_Pin|CS_L_EN_Pin, GPIO_PIN_SET);
 80044a6:	2201      	movs	r2, #1
 80044a8:	21c0      	movs	r1, #192	; 0xc0
 80044aa:	4823      	ldr	r0, [pc, #140]	; (8004538 <MX_GPIO_Init+0x148>)
 80044ac:	f7fd ff48 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UI_LED_CENTER_Pin|SENLED_R_Pin;
 80044b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80044b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	4619      	mov	r1, r3
 80044c8:	4819      	ldr	r0, [pc, #100]	; (8004530 <MX_GPIO_Init+0x140>)
 80044ca:	f7fd fd8f 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 80044ce:	f641 3370 	movw	r3, #7024	; 0x1b70
 80044d2:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|UI_LED_RIGHT_Pin|SEN_LED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	4619      	mov	r1, r3
 80044e6:	4813      	ldr	r0, [pc, #76]	; (8004534 <MX_GPIO_Init+0x144>)
 80044e8:	f7fd fd80 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 80044ec:	f240 33c1 	movw	r3, #961	; 0x3c1
 80044f0:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fe:	f107 0314 	add.w	r3, r7, #20
 8004502:	4619      	mov	r1, r3
 8004504:	480c      	ldr	r0, [pc, #48]	; (8004538 <MX_GPIO_Init+0x148>)
 8004506:	f7fd fd71 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 800450a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800450e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004514:	2301      	movs	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4619      	mov	r1, r3
 800451e:	4806      	ldr	r0, [pc, #24]	; (8004538 <MX_GPIO_Init+0x148>)
 8004520:	f7fd fd64 	bl	8001fec <HAL_GPIO_Init>

}
 8004524:	bf00      	nop
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	40020800 	.word	0x40020800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400

0800453c <interrupt_1ms>:
#include "interrupt.h"
#include "tim.h"
#include "stm32f4xx_hal_tim.h"
#include "other.h"

void interrupt_1ms(void) {
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0

	//buzzer
	if (buzzer[buzzer_index].autoreload != 0xffff && buzzer_flag == 1) {
 8004540:	4b38      	ldr	r3, [pc, #224]	; (8004624 <interrupt_1ms+0xe8>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b38      	ldr	r3, [pc, #224]	; (8004628 <interrupt_1ms+0xec>)
 8004548:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800454c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004550:	4293      	cmp	r3, r2
 8004552:	d040      	beq.n	80045d6 <interrupt_1ms+0x9a>
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <interrupt_1ms+0xf0>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d13c      	bne.n	80045d6 <interrupt_1ms+0x9a>
		if (buzzer_count == 0) {
 800455c:	4b34      	ldr	r3, [pc, #208]	; (8004630 <interrupt_1ms+0xf4>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d131      	bne.n	80045c8 <interrupt_1ms+0x8c>
			if (buzzer[buzzer_index].autoreload != 0) {
 8004564:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <interrupt_1ms+0xe8>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <interrupt_1ms+0xec>)
 800456c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d025      	beq.n	80045c0 <interrupt_1ms+0x84>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8004574:	2104      	movs	r1, #4
 8004576:	482f      	ldr	r0, [pc, #188]	; (8004634 <interrupt_1ms+0xf8>)
 8004578:	f7fe fe7a 	bl	8003270 <HAL_TIM_PWM_Stop>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <interrupt_1ms+0xe8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b29      	ldr	r3, [pc, #164]	; (8004628 <interrupt_1ms+0xec>)
 8004584:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	4b29      	ldr	r3, [pc, #164]	; (8004634 <interrupt_1ms+0xf8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
						buzzer[buzzer_index].autoreload / 2);
				__HAL_TIM_SET_AUTORELOAD(&htim3,
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <interrupt_1ms+0xe8>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <interrupt_1ms+0xec>)
 800459a:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <interrupt_1ms+0xf8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80045a4:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <interrupt_1ms+0xe8>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <interrupt_1ms+0xec>)
 80045ac:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <interrupt_1ms+0xf8>)
 80045b4:	60da      	str	r2, [r3, #12]
						buzzer[buzzer_index].autoreload);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80045b6:	2104      	movs	r1, #4
 80045b8:	481e      	ldr	r0, [pc, #120]	; (8004634 <interrupt_1ms+0xf8>)
 80045ba:	f7fe fe1b 	bl	80031f4 <HAL_TIM_PWM_Start>
 80045be:	e003      	b.n	80045c8 <interrupt_1ms+0x8c>
			} else {
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80045c0:	2104      	movs	r1, #4
 80045c2:	481c      	ldr	r0, [pc, #112]	; (8004634 <interrupt_1ms+0xf8>)
 80045c4:	f7fe fe54 	bl	8003270 <HAL_TIM_PWM_Stop>
			}
		}
		buzzer_count++;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <interrupt_1ms+0xf4>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <interrupt_1ms+0xf4>)
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e006      	b.n	80045e4 <interrupt_1ms+0xa8>
	} else {
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80045d6:	2104      	movs	r1, #4
 80045d8:	4816      	ldr	r0, [pc, #88]	; (8004634 <interrupt_1ms+0xf8>)
 80045da:	f7fe fe49 	bl	8003270 <HAL_TIM_PWM_Stop>
		buzzer_count = 0;
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <interrupt_1ms+0xf4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	801a      	strh	r2, [r3, #0]
	}

	if (buzzer_count == buzzer[buzzer_index].ms) {
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <interrupt_1ms+0xe8>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <interrupt_1ms+0xec>)
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	885a      	ldrh	r2, [r3, #2]
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <interrupt_1ms+0xf4>)
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d108      	bne.n	800460a <interrupt_1ms+0xce>
		buzzer_count = 0;
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <interrupt_1ms+0xf4>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	801a      	strh	r2, [r3, #0]
		buzzer_index++;
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <interrupt_1ms+0xe8>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <interrupt_1ms+0xe8>)
 8004608:	701a      	strb	r2, [r3, #0]
	}

	read_gyro();
 800460a:	f000 fa45 	bl	8004a98 <read_gyro>

	g_test=read_spi_en(RIGHT, 0xFFFc);
 800460e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8004612:	2001      	movs	r0, #1
 8004614:	f000 fa78 	bl	8004b08 <read_spi_en>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <interrupt_1ms+0xfc>)
 800461e:	801a      	strh	r2, [r3, #0]

}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200004a7 	.word	0x200004a7
 8004628:	20000a4c 	.word	0x20000a4c
 800462c:	200004a8 	.word	0x200004a8
 8004630:	2000000c 	.word	0x2000000c
 8004634:	200006b8 	.word	0x200006b8
 8004638:	200004a4 	.word	0x200004a4

0800463c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004642:	f7fc fbdb 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004646:	f000 f8e5 	bl	8004814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800464a:	f7ff fed1 	bl	80043f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800464e:	f7ff feaf 	bl	80043b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8004652:	f7ff fd25 	bl	80040a0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004656:	f000 fb13 	bl	8004c80 <MX_SPI2_Init>
  MX_SPI3_Init();
 800465a:	f000 fb47 	bl	8004cec <MX_SPI3_Init>
  MX_TIM2_Init();
 800465e:	f000 fd3b 	bl	80050d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004662:	f000 fd9b 	bl	800519c <MX_TIM3_Init>
  MX_TIM6_Init();
 8004666:	f000 fdf3 	bl	8005250 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800466a:	485d      	ldr	r0, [pc, #372]	; (80047e0 <main+0x1a4>)
 800466c:	f7fe fd73 	bl	8003156 <HAL_TIM_Base_Start_IT>
	SEGGER_RTT_Init();
 8004670:	f7ff fd10 	bl	8004094 <SEGGER_RTT_Init>
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	2200      	movs	r2, #0
 800467c:	2100      	movs	r1, #0
 800467e:	2000      	movs	r0, #0
 8004680:	f7ff fc9e 	bl	8003fc0 <SEGGER_RTT_ConfigUpBuffer>
	printf("\x1b[0m");
 8004684:	4857      	ldr	r0, [pc, #348]	; (80047e4 <main+0x1a8>)
 8004686:	f000 ffc9 	bl	800561c <iprintf>
	init_walldata();
 800468a:	f000 ff4b 	bl	8005524 <init_walldata>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, SET);
 800468e:	2201      	movs	r2, #1
 8004690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004694:	4854      	ldr	r0, [pc, #336]	; (80047e8 <main+0x1ac>)
 8004696:	f7fd fe53 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 800469a:	2201      	movs	r2, #1
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	4853      	ldr	r0, [pc, #332]	; (80047ec <main+0x1b0>)
 80046a0:	f7fd fe4e 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 80046a4:	2201      	movs	r2, #1
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	4850      	ldr	r0, [pc, #320]	; (80047ec <main+0x1b0>)
 80046aa:	f7fd fe49 	bl	8002340 <HAL_GPIO_WritePin>
	init_gyro();
 80046ae:	f000 f9a5 	bl	80049fc <init_gyro>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = -1, j;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	60fb      	str	r3, [r7, #12]
	uint8_t test = 1;
 80046b8:	2301      	movs	r3, #1
 80046ba:	71fb      	strb	r3, [r7, #7]
//	float pi = 3.14;
	uint16_t en_test = 1234;
 80046bc:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80046c0:	80bb      	strh	r3, [r7, #4]
//	walldata.real.column[1]++;

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 80046c2:	2205      	movs	r2, #5
 80046c4:	494a      	ldr	r1, [pc, #296]	; (80047f0 <main+0x1b4>)
 80046c6:	484b      	ldr	r0, [pc, #300]	; (80047f4 <main+0x1b8>)
 80046c8:	f7fc fc70 	bl	8000fac <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	for (i = 0; i < 17; i++) {
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e026      	b.n	8004720 <main+0xe4>
		for (j = 0; j < 17; j++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	e012      	b.n	80046fe <main+0xc2>
			step_map[i][j] = i + j * 16;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	b298      	uxth	r0, r3
 80046e8:	4943      	ldr	r1, [pc, #268]	; (80047f8 <main+0x1bc>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4413      	add	r3, r2
 80046f2:	4602      	mov	r2, r0
 80046f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < 17; j++) {
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b10      	cmp	r3, #16
 8004702:	dde9      	ble.n	80046d8 <main+0x9c>
		}
		printf("i=%d,pari=%d\n",i,check_parity(i));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	b29b      	uxth	r3, r3
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa39 	bl	8004b80 <check_parity>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	4839      	ldr	r0, [pc, #228]	; (80047fc <main+0x1c0>)
 8004716:	f000 ff81 	bl	800561c <iprintf>
	for (i = 0; i < 17; i++) {
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b10      	cmp	r3, #16
 8004724:	ddd5      	ble.n	80046d2 <main+0x96>
	}
//	output_Walldata(REAL);
	while (1) {
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8004726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800472a:	4830      	ldr	r0, [pc, #192]	; (80047ec <main+0x1b0>)
 800472c:	f7fd fdf0 	bl	8002310 <HAL_GPIO_ReadPin>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d128      	bne.n	8004788 <main+0x14c>
			mode++;
 8004736:	4b32      	ldr	r3, [pc, #200]	; (8004800 <main+0x1c4>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <main+0x1c4>)
 8004740:	701a      	strb	r2, [r3, #0]
			mode = mode % 8;
 8004742:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <main+0x1c4>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	b2da      	uxtb	r2, r3
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <main+0x1c4>)
 800474e:	701a      	strb	r2, [r3, #0]
			printf("%d\n", mode);
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <main+0x1c4>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	482b      	ldr	r0, [pc, #172]	; (8004804 <main+0x1c8>)
 8004758:	f000 ff60 	bl	800561c <iprintf>
			chattering();
 800475c:	f000 f8cc 	bl	80048f8 <chattering>
			set_led(mode);
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <main+0x1c4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fa33 	bl	8004bd0 <set_led>
//			set_buzzer_mode(mode);
			en_test=(uint16_t)mode;
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <main+0x1c4>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	80bb      	strh	r3, [r7, #4]
			en_test = read_spi_en(RIGHT, 0x3FFF);
 8004770:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8004774:	2001      	movs	r0, #1
 8004776:	f000 f9c7 	bl	8004b08 <read_spi_en>
 800477a:	4603      	mov	r3, r0
 800477c:	80bb      	strh	r3, [r7, #4]
			printf("RIGHT=%x\n", en_test);
 800477e:	88bb      	ldrh	r3, [r7, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	4821      	ldr	r0, [pc, #132]	; (8004808 <main+0x1cc>)
 8004784:	f000 ff4a 	bl	800561c <iprintf>
		}

		HAL_GPIO_TogglePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin);
 8004788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800478c:	481f      	ldr	r0, [pc, #124]	; (800480c <main+0x1d0>)
 800478e:	f7fd fdf0 	bl	8002372 <HAL_GPIO_TogglePin>

//		en_test = read_spi_en(RIGHT, 0x3FFE);
		printf("RIGHT=%x\n", g_test);
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <main+0x1d4>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	481b      	ldr	r0, [pc, #108]	; (8004808 <main+0x1cc>)
 800479a:	f000 ff3f 	bl	800561c <iprintf>

		HAL_Delay(500);
 800479e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047a2:	f7fc fb9d 	bl	8000ee0 <HAL_Delay>

		if (mode == 0) {
 80047a6:	4b16      	ldr	r3, [pc, #88]	; (8004800 <main+0x1c4>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0bb      	beq.n	8004726 <main+0xea>

		} else if (mode == 1) {
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <main+0x1c4>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d0b7      	beq.n	8004726 <main+0xea>

		} else if (mode == 2) {
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <main+0x1c4>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d0b3      	beq.n	8004726 <main+0xea>

		} else if (mode == 3) {
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <main+0x1c4>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d0af      	beq.n	8004726 <main+0xea>

		} else if (mode == 4) {
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <main+0x1c4>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d0ab      	beq.n	8004726 <main+0xea>

		} else if (mode == 5) {
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <main+0x1c4>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d0a7      	beq.n	8004726 <main+0xea>

		} else if (mode == 6) {
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <main+0x1c4>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b06      	cmp	r3, #6
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 80047dc:	e7a3      	b.n	8004726 <main+0xea>
 80047de:	bf00      	nop
 80047e0:	200006f8 	.word	0x200006f8
 80047e4:	08006598 	.word	0x08006598
 80047e8:	40020000 	.word	0x40020000
 80047ec:	40020400 	.word	0x40020400
 80047f0:	20000b1c 	.word	0x20000b1c
 80047f4:	20000560 	.word	0x20000560
 80047f8:	2000084c 	.word	0x2000084c
 80047fc:	080065a0 	.word	0x080065a0
 8004800:	200004a6 	.word	0x200004a6
 8004804:	080065b0 	.word	0x080065b0
 8004808:	080065b4 	.word	0x080065b4
 800480c:	40020800 	.word	0x40020800
 8004810:	200004a4 	.word	0x200004a4

08004814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b094      	sub	sp, #80	; 0x50
 8004818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800481a:	f107 031c 	add.w	r3, r7, #28
 800481e:	2234      	movs	r2, #52	; 0x34
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fef1 	bl	800560a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	2300      	movs	r3, #0
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <SystemClock_Config+0xcc>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <SystemClock_Config+0xcc>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	6413      	str	r3, [r2, #64]	; 0x40
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <SystemClock_Config+0xcc>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <SystemClock_Config+0xd0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <SystemClock_Config+0xd0>)
 800485e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <SystemClock_Config+0xd0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004870:	2301      	movs	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800487a:	2302      	movs	r3, #2
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800487e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004884:	2308      	movs	r3, #8
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004888:	2364      	movs	r3, #100	; 0x64
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800488c:	2302      	movs	r3, #2
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004890:	2302      	movs	r3, #2
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004894:	2302      	movs	r3, #2
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004898:	f107 031c 	add.w	r3, r7, #28
 800489c:	4618      	mov	r0, r3
 800489e:	f7fd ff3b 	bl	8002718 <HAL_RCC_OscConfig>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80048a8:	f000 f81e 	bl	80048e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048ac:	230f      	movs	r3, #15
 80048ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048b0:	2302      	movs	r3, #2
 80048b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	2103      	movs	r1, #3
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd fd6d 	bl	80023a8 <HAL_RCC_ClockConfig>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80048d4:	f000 f808 	bl	80048e8 <Error_Handler>
  }
}
 80048d8:	bf00      	nop
 80048da:	3750      	adds	r7, #80	; 0x50
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40007000 	.word	0x40007000

080048e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <chattering>:
#include "gpio.h"

#define CHATT 10000
#define SECTOR_BASE_ADRR 0x08160000ul

void chattering(void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	int i = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004902:	e002      	b.n	800490a <chattering+0x12>
		i++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3301      	adds	r3, #1
 8004908:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004910:	4293      	cmp	r3, r2
 8004912:	ddf7      	ble.n	8004904 <chattering+0xc>
	}
	while (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8004914:	bf00      	nop
 8004916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800491a:	480a      	ldr	r0, [pc, #40]	; (8004944 <chattering+0x4c>)
 800491c:	f7fd fcf8 	bl	8002310 <HAL_GPIO_ReadPin>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f7      	beq.n	8004916 <chattering+0x1e>
	}
	i = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 800492a:	e002      	b.n	8004932 <chattering+0x3a>
		i++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3301      	adds	r3, #1
 8004930:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f242 720f 	movw	r2, #9999	; 0x270f
 8004938:	4293      	cmp	r3, r2
 800493a:	ddf7      	ble.n	800492c <chattering+0x34>
	}
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40020400 	.word	0x40020400

08004948 <read_spi>:

void read_all_walldata(void) {
	read_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
}

uint8_t read_spi(uint8_t addr) { //addrのデータを読み取る
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
	uint8_t data_tx[2], data_rx[2];
	data_tx[0] = (0x80 | addr); //readのMSB(1)とアドレス
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004958:	b2db      	uxtb	r3, r3
 800495a:	733b      	strb	r3, [r7, #12]
	data_tx[1] = 0x00; //dummy
 800495c:	2300      	movs	r3, #0
 800495e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 8004960:	2200      	movs	r2, #0
 8004962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004966:	480c      	ldr	r0, [pc, #48]	; (8004998 <read_spi+0x50>)
 8004968:	f7fd fcea 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 800496c:	f107 0208 	add.w	r2, r7, #8
 8004970:	f107 010c 	add.w	r1, r7, #12
 8004974:	2301      	movs	r3, #1
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2302      	movs	r3, #2
 800497a:	4808      	ldr	r0, [pc, #32]	; (800499c <read_spi+0x54>)
 800497c:	f7fe f972 	bl	8002c64 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 8004980:	2201      	movs	r2, #1
 8004982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004986:	4804      	ldr	r0, [pc, #16]	; (8004998 <read_spi+0x50>)
 8004988:	f7fd fcda 	bl	8002340 <HAL_GPIO_WritePin>

	return data_rx[1];
 800498c:	7a7b      	ldrb	r3, [r7, #9]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40020000 	.word	0x40020000
 800499c:	20000608 	.word	0x20000608

080049a0 <write_spi>:

void write_spi(uint8_t addr, uint8_t data) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	4603      	mov	r3, r0
 80049a8:	460a      	mov	r2, r1
 80049aa:	71fb      	strb	r3, [r7, #7]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71bb      	strb	r3, [r7, #6]
	uint8_t data_rx[2], data_tx[2];
	data_tx[0] = 0x7f & addr;
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	723b      	strb	r3, [r7, #8]
	data_tx[1] = data;
 80049ba:	79bb      	ldrb	r3, [r7, #6]
 80049bc:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049c4:	480b      	ldr	r0, [pc, #44]	; (80049f4 <write_spi+0x54>)
 80049c6:	f7fd fcbb 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 80049ca:	f107 020c 	add.w	r2, r7, #12
 80049ce:	f107 0108 	add.w	r1, r7, #8
 80049d2:	2301      	movs	r3, #1
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2302      	movs	r3, #2
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <write_spi+0x58>)
 80049da:	f7fe f943 	bl	8002c64 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 80049de:	2201      	movs	r2, #1
 80049e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <write_spi+0x54>)
 80049e6:	f7fd fcab 	bl	8002340 <HAL_GPIO_WritePin>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40020000 	.word	0x40020000
 80049f8:	20000608 	.word	0x20000608

080049fc <init_gyro>:

void init_gyro(void) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
	read_spi(WHO_AM_I);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7ff ffa1 	bl	8004948 <read_spi>
	HAL_Delay(10);
 8004a06:	200a      	movs	r0, #10
 8004a08:	f7fc fa6a 	bl	8000ee0 <HAL_Delay>
	if (read_spi(WHO_AM_I) != 0xe0) {
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7ff ff9b 	bl	8004948 <read_spi>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2be0      	cmp	r3, #224	; 0xe0
 8004a16:	d002      	beq.n	8004a1e <init_gyro+0x22>
		printf("gyro init error\n");
 8004a18:	481e      	ldr	r0, [pc, #120]	; (8004a94 <init_gyro+0x98>)
 8004a1a:	f000 fe87 	bl	800572c <puts>
	}
	HAL_Delay(10);
 8004a1e:	200a      	movs	r0, #10
 8004a20:	f7fc fa5e 	bl	8000ee0 <HAL_Delay>
	write_spi(0x05, 0x00); //USER_CTRL いろんな機能をoffに
 8004a24:	2100      	movs	r1, #0
 8004a26:	2005      	movs	r0, #5
 8004a28:	f7ff ffba 	bl	80049a0 <write_spi>
	HAL_Delay(10);
 8004a2c:	200a      	movs	r0, #10
 8004a2e:	f7fc fa57 	bl	8000ee0 <HAL_Delay>
	write_spi(0x06, 0x09); //PWRMGMT_1 温度センサoff クロックを自動設定 スリープ解除
 8004a32:	2109      	movs	r1, #9
 8004a34:	2006      	movs	r0, #6
 8004a36:	f7ff ffb3 	bl	80049a0 <write_spi>
	HAL_Delay(10);
 8004a3a:	200a      	movs	r0, #10
 8004a3c:	f7fc fa50 	bl	8000ee0 <HAL_Delay>
	write_spi(0x07, 0x3f); //PWRMGMT_2 ジャイロ・加速度センサoff
 8004a40:	213f      	movs	r1, #63	; 0x3f
 8004a42:	2007      	movs	r0, #7
 8004a44:	f7ff ffac 	bl	80049a0 <write_spi>

	HAL_Delay(10);
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7fc fa49 	bl	8000ee0 <HAL_Delay>
	write_spi(0x7f, 0x20); //REG_BANK_SEL bank2に移動
 8004a4e:	2120      	movs	r1, #32
 8004a50:	207f      	movs	r0, #127	; 0x7f
 8004a52:	f7ff ffa5 	bl	80049a0 <write_spi>

	HAL_Delay(10);
 8004a56:	200a      	movs	r0, #10
 8004a58:	f7fc fa42 	bl	8000ee0 <HAL_Delay>
	write_spi(0x01, 0x06); //GYRO_CONFIG_1 +-2000dps non-filter
 8004a5c:	2106      	movs	r1, #6
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f7ff ff9e 	bl	80049a0 <write_spi>
	HAL_Delay(10);
 8004a64:	200a      	movs	r0, #10
 8004a66:	f7fc fa3b 	bl	8000ee0 <HAL_Delay>
	write_spi(0x14, 0x04); //ACCEL_CONFIG +-8g non-filter
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	2014      	movs	r0, #20
 8004a6e:	f7ff ff97 	bl	80049a0 <write_spi>

	HAL_Delay(10);
 8004a72:	200a      	movs	r0, #10
 8004a74:	f7fc fa34 	bl	8000ee0 <HAL_Delay>
	write_spi(0x7f, 0x00); //REG_BANK_SEL bank0に移動
 8004a78:	2100      	movs	r1, #0
 8004a7a:	207f      	movs	r0, #127	; 0x7f
 8004a7c:	f7ff ff90 	bl	80049a0 <write_spi>

	HAL_Delay(10);
 8004a80:	200a      	movs	r0, #10
 8004a82:	f7fc fa2d 	bl	8000ee0 <HAL_Delay>
	write_spi(0x07, 0x00); //PWRMGMT_2 ジャイロ・加速度センサon
 8004a86:	2100      	movs	r1, #0
 8004a88:	2007      	movs	r0, #7
 8004a8a:	f7ff ff89 	bl	80049a0 <write_spi>
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	080065c0 	.word	0x080065c0

08004a98 <read_gyro>:

float read_gyro(void) {
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
	uint8_t data_l;
	int8_t data_h;
	int16_t value;
	data_h = read_spi(0x37);
 8004a9e:	2037      	movs	r0, #55	; 0x37
 8004aa0:	f7ff ff52 	bl	8004948 <read_spi>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x38);
 8004aa8:	2038      	movs	r0, #56	; 0x38
 8004aaa:	f7ff ff4d 	bl	8004948 <read_spi>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	b21a      	sxth	r2, r3
 8004aba:	79bb      	ldrb	r3, [r7, #6]
 8004abc:	b21b      	sxth	r3, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	80bb      	strh	r3, [r7, #4]
	return (float) value * 0.0610370189; //*2000/(2^15-1) return deg
 8004ac2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	ee17 0a90 	vmov	r0, s15
 8004ad2:	f7fb fd59 	bl	8000588 <__aeabi_f2d>
 8004ad6:	a30a      	add	r3, pc, #40	; (adr r3, 8004b00 <read_gyro+0x68>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fdac 	bl	8000638 <__aeabi_dmul>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	f7fb ffb8 	bl	8000a5c <__aeabi_d2f>
 8004aec:	4603      	mov	r3, r0
 8004aee:	ee07 3a90 	vmov	s15, r3
}
 8004af2:	eeb0 0a67 	vmov.f32	s0, s15
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd90      	pop	{r4, r7, pc}
 8004afc:	f3af 8000 	nop.w
 8004b00:	800aaabd 	.word	0x800aaabd
 8004b04:	3faf403e 	.word	0x3faf403e

08004b08 <read_spi_en>:
	data_l = read_spi(0x32);
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
	return (float) value * 0.00239427472762; //*9.8...*8/(2^15-1) return m/s^2
}

uint16_t read_spi_en(uint8_t le_ri, uint16_t addr) { //addrのデータを読み取る
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	4603      	mov	r3, r0
 8004b10:	460a      	mov	r2, r1
 8004b12:	71fb      	strb	r3, [r7, #7]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80bb      	strh	r3, [r7, #4]
	uint16_t data_tx;
	uint16_t data_rx = 7;
 8004b18:	2307      	movs	r3, #7
 8004b1a:	81bb      	strh	r3, [r7, #12]

	data_tx = 0xfffc;
 8004b1c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004b20:	81fb      	strh	r3, [r7, #14]
	//data_tx[0] = data_tx[0] || (check_parity(data_tx[0]) << 15);

//	printf("data_tx[0]=%x,%x\n", data_tx[0], data_tx[1]);

//	data_tx[1] = 0x0000; //dummy
	if (le_ri == LEFT) {
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <read_spi_en+0x2c>
		HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 0);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	4812      	ldr	r0, [pc, #72]	; (8004b78 <read_spi_en+0x70>)
 8004b2e:	f7fd fc07 	bl	8002340 <HAL_GPIO_WritePin>
 8004b32:	e007      	b.n	8004b44 <read_spi_en+0x3c>
	} else if (le_ri == RIGHT) {
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d104      	bne.n	8004b44 <read_spi_en+0x3c>
		HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	480e      	ldr	r0, [pc, #56]	; (8004b78 <read_spi_en+0x70>)
 8004b40:	f7fd fbfe 	bl	8002340 <HAL_GPIO_WritePin>
	}
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &data_tx, (uint8_t*) &data_rx, 2,
 8004b44:	f107 020c 	add.w	r2, r7, #12
 8004b48:	f107 010e 	add.w	r1, r7, #14
 8004b4c:	2364      	movs	r3, #100	; 0x64
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2302      	movs	r3, #2
 8004b52:	480a      	ldr	r0, [pc, #40]	; (8004b7c <read_spi_en+0x74>)
 8004b54:	f7fe f886 	bl	8002c64 <HAL_SPI_TransmitReceive>
			100);

	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	4806      	ldr	r0, [pc, #24]	; (8004b78 <read_spi_en+0x70>)
 8004b5e:	f7fd fbef 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 8004b62:	2201      	movs	r2, #1
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	4804      	ldr	r0, [pc, #16]	; (8004b78 <read_spi_en+0x70>)
 8004b68:	f7fd fbea 	bl	8002340 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
//	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
//	printf("2nd rx0=%d,rx1=%d\n", data_rx[0], data_rx[1]);

//	return (uint16_t) ((uint16_t) (data_rx[0] << 8) + (uint16_t) data_rx[1]);
	return data_rx;
 8004b6c:	89bb      	ldrh	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	20000660 	.word	0x20000660

08004b80 <check_parity>:
	} else {

	}
}

uint16_t check_parity(uint16_t val) {
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 8;
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	4053      	eors	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 4;
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	4053      	eors	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 2;
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	4053      	eors	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 1;
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	4053      	eors	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
	return val & 0x0001;
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	b29b      	uxth	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <set_led>:

void set_led(uint8_t num) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
	if ((0x01 & num) != 0) {
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <set_led+0x24>
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, SET);
 8004be6:	2201      	movs	r2, #1
 8004be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bec:	4821      	ldr	r0, [pc, #132]	; (8004c74 <set_led+0xa4>)
 8004bee:	f7fd fba7 	bl	8002340 <HAL_GPIO_WritePin>
 8004bf2:	e005      	b.n	8004c00 <set_led+0x30>
	} else {
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, RESET);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bfa:	481e      	ldr	r0, [pc, #120]	; (8004c74 <set_led+0xa4>)
 8004bfc:	f7fd fba0 	bl	8002340 <HAL_GPIO_WritePin>
	}
	if ((0x02 & num) != 0) {
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <set_led+0x4a>
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, SET);
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c12:	4819      	ldr	r0, [pc, #100]	; (8004c78 <set_led+0xa8>)
 8004c14:	f7fd fb94 	bl	8002340 <HAL_GPIO_WritePin>
 8004c18:	e005      	b.n	8004c26 <set_led+0x56>
	} else {
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, RESET);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c20:	4815      	ldr	r0, [pc, #84]	; (8004c78 <set_led+0xa8>)
 8004c22:	f7fd fb8d 	bl	8002340 <HAL_GPIO_WritePin>
	}
	if ((0x04 & num) != 0) {
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <set_led+0x6e>
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, SET);
 8004c32:	2201      	movs	r2, #1
 8004c34:	2101      	movs	r1, #1
 8004c36:	4811      	ldr	r0, [pc, #68]	; (8004c7c <set_led+0xac>)
 8004c38:	f7fd fb82 	bl	8002340 <HAL_GPIO_WritePin>
 8004c3c:	e004      	b.n	8004c48 <set_led+0x78>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, RESET);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2101      	movs	r1, #1
 8004c42:	480e      	ldr	r0, [pc, #56]	; (8004c7c <set_led+0xac>)
 8004c44:	f7fd fb7c 	bl	8002340 <HAL_GPIO_WritePin>
	}
	if ((0x08 & num) != 0) {
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <set_led+0x90>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, SET);
 8004c54:	2201      	movs	r2, #1
 8004c56:	2110      	movs	r1, #16
 8004c58:	4806      	ldr	r0, [pc, #24]	; (8004c74 <set_led+0xa4>)
 8004c5a:	f7fd fb71 	bl	8002340 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
	}
}
 8004c5e:	e004      	b.n	8004c6a <set_led+0x9a>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2110      	movs	r1, #16
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <set_led+0xa4>)
 8004c66:	f7fd fb6b 	bl	8002340 <HAL_GPIO_WritePin>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020800 	.word	0x40020800
 8004c7c:	40020400 	.word	0x40020400

08004c80 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <MX_SPI2_Init+0x68>)
 8004c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cb4:	2218      	movs	r2, #24
 8004cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ccc:	220a      	movs	r2, #10
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004cd0:	4804      	ldr	r0, [pc, #16]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cd2:	f7fd ff63 	bl	8002b9c <HAL_SPI_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004cdc:	f7ff fe04 	bl	80048e8 <Error_Handler>
  }

}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000608 	.word	0x20000608
 8004ce8:	40003800 	.word	0x40003800

08004cec <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004cf0:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004cf2:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <MX_SPI3_Init+0x6c>)
 8004cf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d22:	2218      	movs	r2, #24
 8004d24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d3a:	220a      	movs	r2, #10
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_SPI3_Init+0x68>)
 8004d40:	f7fd ff2c 	bl	8002b9c <HAL_SPI_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8004d4a:	f7ff fdcd 	bl	80048e8 <Error_Handler>
  }

}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000660 	.word	0x20000660
 8004d58:	40003c00 	.word	0x40003c00

08004d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	; 0x30
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	f107 031c 	add.w	r3, r7, #28
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <HAL_SPI_MspInit+0x10c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d12d      	bne.n	8004dda <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a39      	ldr	r2, [pc, #228]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6313      	str	r3, [r2, #48]	; 0x30
 8004daa:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 8004db6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004dc8:	2305      	movs	r3, #5
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dcc:	f107 031c 	add.w	r3, r7, #28
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4827      	ldr	r0, [pc, #156]	; (8004e70 <HAL_SPI_MspInit+0x114>)
 8004dd4:	f7fd f90a 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004dd8:	e041      	b.n	8004e5e <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <HAL_SPI_MspInit+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d13c      	bne.n	8004e5e <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
 8004df4:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <HAL_SPI_MspInit+0x110>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 8004e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004e2e:	2307      	movs	r3, #7
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 8004e32:	f107 031c 	add.w	r3, r7, #28
 8004e36:	4619      	mov	r1, r3
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <HAL_SPI_MspInit+0x114>)
 8004e3a:	f7fd f8d7 	bl	8001fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 8004e3e:	2330      	movs	r3, #48	; 0x30
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	2302      	movs	r3, #2
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e4e:	2306      	movs	r3, #6
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4805      	ldr	r0, [pc, #20]	; (8004e70 <HAL_SPI_MspInit+0x114>)
 8004e5a:	f7fd f8c7 	bl	8001fec <HAL_GPIO_Init>
}
 8004e5e:	bf00      	nop
 8004e60:	3730      	adds	r7, #48	; 0x30
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40003800 	.word	0x40003800
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020400 	.word	0x40020400
 8004e74:	40003c00 	.word	0x40003c00

08004e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	4a0f      	ldr	r2, [pc, #60]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_MspInit+0x4c>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800

08004ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eda:	e7fe      	b.n	8004eda <HardFault_Handler+0x4>

08004edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ee0:	e7fe      	b.n	8004ee0 <MemManage_Handler+0x4>

08004ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ee6:	e7fe      	b.n	8004ee6 <BusFault_Handler+0x4>

08004ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004eec:	e7fe      	b.n	8004eec <UsageFault_Handler+0x4>

08004eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f1c:	f7fb ffc0 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f28:	4803      	ldr	r0, [pc, #12]	; (8004f38 <TIM6_DAC_IRQHandler+0x14>)
 8004f2a:	f7fe f9f9 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_1ms();
 8004f2e:	f7ff fb05 	bl	800453c <interrupt_1ms>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200006f8 	.word	0x200006f8

08004f3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f40:	4802      	ldr	r0, [pc, #8]	; (8004f4c <DMA2_Stream0_IRQHandler+0x10>)
 8004f42:	f7fc fdeb 	bl	8001b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200005a8 	.word	0x200005a8

08004f50 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e00a      	b.n	8004f78 <_read+0x28>
		*ptr++ = __io_getchar();
 8004f62:	f3af 8000 	nop.w
 8004f66:	4601      	mov	r1, r0
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	60ba      	str	r2, [r7, #8]
 8004f6e:	b2ca      	uxtb	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dbf0      	blt.n	8004f62 <_read+0x12>
	}

	return len;
 8004f80:	687b      	ldr	r3, [r7, #4]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

	(void) file; /* Not used, avoid warning */
	SEGGER_RTT_Write(0, ptr, len);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fe ffeb 	bl	8003f78 <SEGGER_RTT_Write>
	return len;
 8004fa2:	687b      	ldr	r3, [r7, #4]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <_close>:

int _close(int file) {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	return -1;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fd4:	605a      	str	r2, [r3, #4]
	return 0;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <_isatty>:

int _isatty(int file) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	return 1;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
	return 0;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <_sbrk+0x50>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <_sbrk+0x16>
		heap_end = &end;
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <_sbrk+0x50>)
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <_sbrk+0x54>)
 8005028:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <_sbrk+0x50>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <_sbrk+0x50>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	466a      	mov	r2, sp
 800503a:	4293      	cmp	r3, r2
 800503c:	d907      	bls.n	800504e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800503e:	f000 faaf 	bl	80055a0 <__errno>
 8005042:	4602      	mov	r2, r0
 8005044:	230c      	movs	r3, #12
 8005046:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	e006      	b.n	800505c <_sbrk+0x48>
	}

	heap_end += incr;
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <_sbrk+0x50>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	4a03      	ldr	r2, [pc, #12]	; (8005064 <_sbrk+0x50>)
 8005058:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200004a0 	.word	0x200004a0
 8005068:	20000b68 	.word	0x20000b68

0800506c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005070:	4b16      	ldr	r3, [pc, #88]	; (80050cc <SystemInit+0x60>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <SystemInit+0x60>)
 8005078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800507c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <SystemInit+0x64>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a12      	ldr	r2, [pc, #72]	; (80050d0 <SystemInit+0x64>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <SystemInit+0x64>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <SystemInit+0x64>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <SystemInit+0x64>)
 8005098:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <SystemInit+0x64>)
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <SystemInit+0x68>)
 80050a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <SystemInit+0x64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <SystemInit+0x64>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <SystemInit+0x64>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <SystemInit+0x60>)
 80050bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050c0:	609a      	str	r2, [r3, #8]
#endif
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000ed00 	.word	0xe000ed00
 80050d0:	40023800 	.word	0x40023800
 80050d4:	24003010 	.word	0x24003010

080050d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050de:	f107 0320 	add.w	r3, r7, #32
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	611a      	str	r2, [r3, #16]
 80050f6:	615a      	str	r2, [r3, #20]
 80050f8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80050fa:	4b27      	ldr	r3, [pc, #156]	; (8005198 <MX_TIM2_Init+0xc0>)
 80050fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005100:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005102:	4b25      	ldr	r3, [pc, #148]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005104:	2200      	movs	r2, #0
 8005106:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <MX_TIM2_Init+0xc0>)
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005110:	2200      	movs	r2, #0
 8005112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005114:	4b20      	ldr	r3, [pc, #128]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800511a:	4b1f      	ldr	r3, [pc, #124]	; (8005198 <MX_TIM2_Init+0xc0>)
 800511c:	2200      	movs	r2, #0
 800511e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005120:	481d      	ldr	r0, [pc, #116]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005122:	f7fe f83c 	bl	800319e <HAL_TIM_PWM_Init>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800512c:	f7ff fbdc 	bl	80048e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005138:	f107 0320 	add.w	r3, r7, #32
 800513c:	4619      	mov	r1, r3
 800513e:	4816      	ldr	r0, [pc, #88]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005140:	f7fe fd63 	bl	8003c0a <HAL_TIMEx_MasterConfigSynchronization>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800514a:	f7ff fbcd 	bl	80048e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800514e:	2360      	movs	r3, #96	; 0x60
 8005150:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	2200      	movs	r2, #0
 8005162:	4619      	mov	r1, r3
 8005164:	480c      	ldr	r0, [pc, #48]	; (8005198 <MX_TIM2_Init+0xc0>)
 8005166:	f7fe f9e3 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005170:	f7ff fbba 	bl	80048e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	2204      	movs	r2, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4807      	ldr	r0, [pc, #28]	; (8005198 <MX_TIM2_Init+0xc0>)
 800517c:	f7fe f9d8 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005186:	f7ff fbaf 	bl	80048e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800518a:	4803      	ldr	r0, [pc, #12]	; (8005198 <MX_TIM2_Init+0xc0>)
 800518c:	f000 f8f4 	bl	8005378 <HAL_TIM_MspPostInit>

}
 8005190:	bf00      	nop
 8005192:	3728      	adds	r7, #40	; 0x28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000738 	.word	0x20000738

0800519c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a2:	f107 0320 	add.w	r3, r7, #32
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051ac:	1d3b      	adds	r3, r7, #4
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	615a      	str	r2, [r3, #20]
 80051bc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <MX_TIM3_Init+0xac>)
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <MX_TIM3_Init+0xb0>)
 80051c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <MX_TIM3_Init+0xac>)
 80051c6:	2263      	movs	r2, #99	; 0x63
 80051c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <MX_TIM3_Init+0xac>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3822-1;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <MX_TIM3_Init+0xac>)
 80051d2:	f640 62ed 	movw	r2, #3821	; 0xeed
 80051d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <MX_TIM3_Init+0xac>)
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051de:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <MX_TIM3_Init+0xac>)
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80051e4:	4818      	ldr	r0, [pc, #96]	; (8005248 <MX_TIM3_Init+0xac>)
 80051e6:	f7fd ffda 	bl	800319e <HAL_TIM_PWM_Init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80051f0:	f7ff fb7a 	bl	80048e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051fc:	f107 0320 	add.w	r3, r7, #32
 8005200:	4619      	mov	r1, r3
 8005202:	4811      	ldr	r0, [pc, #68]	; (8005248 <MX_TIM3_Init+0xac>)
 8005204:	f7fe fd01 	bl	8003c0a <HAL_TIMEx_MasterConfigSynchronization>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800520e:	f7ff fb6b 	bl	80048e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005212:	2360      	movs	r3, #96	; 0x60
 8005214:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1600;
 8005216:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800521a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	2204      	movs	r2, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4807      	ldr	r0, [pc, #28]	; (8005248 <MX_TIM3_Init+0xac>)
 800522c:	f7fe f980 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005236:	f7ff fb57 	bl	80048e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800523a:	4803      	ldr	r0, [pc, #12]	; (8005248 <MX_TIM3_Init+0xac>)
 800523c:	f000 f89c 	bl	8005378 <HAL_TIM_MspPostInit>

}
 8005240:	bf00      	nop
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	200006b8 	.word	0x200006b8
 800524c:	40000400 	.word	0x40000400

08005250 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005256:	463b      	mov	r3, r7
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <MX_TIM6_Init+0x64>)
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <MX_TIM6_Init+0x68>)
 8005262:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <MX_TIM6_Init+0x64>)
 8005266:	2263      	movs	r2, #99	; 0x63
 8005268:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <MX_TIM6_Init+0x64>)
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <MX_TIM6_Init+0x64>)
 8005272:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005276:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005278:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <MX_TIM6_Init+0x64>)
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800527e:	480d      	ldr	r0, [pc, #52]	; (80052b4 <MX_TIM6_Init+0x64>)
 8005280:	f7fd ff3e 	bl	8003100 <HAL_TIM_Base_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800528a:	f7ff fb2d 	bl	80048e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005296:	463b      	mov	r3, r7
 8005298:	4619      	mov	r1, r3
 800529a:	4806      	ldr	r0, [pc, #24]	; (80052b4 <MX_TIM6_Init+0x64>)
 800529c:	f7fe fcb5 	bl	8003c0a <HAL_TIMEx_MasterConfigSynchronization>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80052a6:	f7ff fb1f 	bl	80048e8 <Error_Handler>
  }

}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200006f8 	.word	0x200006f8
 80052b8:	40001000 	.word	0x40001000

080052bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80052ea:	e012      	b.n	8005312 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <HAL_TIM_PWM_MspInit+0x68>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10d      	bne.n	8005312 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6413      	str	r3, [r2, #64]	; 0x40
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_TIM_PWM_MspInit+0x64>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	40000400 	.word	0x40000400

08005328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <HAL_TIM_Base_MspInit+0x48>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d115      	bne.n	8005366 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <HAL_TIM_Base_MspInit+0x4c>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <HAL_TIM_Base_MspInit+0x4c>)
 8005344:	f043 0310 	orr.w	r3, r3, #16
 8005348:	6413      	str	r3, [r2, #64]	; 0x40
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_TIM_Base_MspInit+0x4c>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005356:	2200      	movs	r2, #0
 8005358:	2100      	movs	r1, #0
 800535a:	2036      	movs	r0, #54	; 0x36
 800535c:	f7fc fa99 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005360:	2036      	movs	r0, #54	; 0x36
 8005362:	f7fc fab2 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40001000 	.word	0x40001000
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d13d      	bne.n	8005416 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a30      	ldr	r2, [pc, #192]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	4a29      	ldr	r2, [pc, #164]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	6313      	str	r3, [r2, #48]	; 0x30
 80053c6:	4b27      	ldr	r3, [pc, #156]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 80053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d8:	2302      	movs	r3, #2
 80053da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e0:	2300      	movs	r3, #0
 80053e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053e4:	2301      	movs	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	4619      	mov	r1, r3
 80053ee:	481e      	ldr	r0, [pc, #120]	; (8005468 <HAL_TIM_MspPostInit+0xf0>)
 80053f0:	f7fc fdfc 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 80053f4:	2308      	movs	r3, #8
 80053f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f8:	2302      	movs	r3, #2
 80053fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005404:	2301      	movs	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	4619      	mov	r1, r3
 800540e:	4817      	ldr	r0, [pc, #92]	; (800546c <HAL_TIM_MspPostInit+0xf4>)
 8005410:	f7fc fdec 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005414:	e022      	b.n	800545c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <HAL_TIM_MspPostInit+0xf8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d11d      	bne.n	800545c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6313      	str	r3, [r2, #48]	; 0x30
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_TIM_MspPostInit+0xec>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800544c:	2302      	movs	r3, #2
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	4804      	ldr	r0, [pc, #16]	; (8005468 <HAL_TIM_MspPostInit+0xf0>)
 8005458:	f7fc fdc8 	bl	8001fec <HAL_GPIO_Init>
}
 800545c:	bf00      	nop
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	40020000 	.word	0x40020000
 800546c:	40020400 	.word	0x40020400
 8005470:	40000400 	.word	0x40000400

08005474 <clear_Map>:
		}

	}
}

void clear_Map(singlewalldata_t *walldate) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 16; i++) {
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e00e      	b.n	80054a0 <clear_Map+0x2c>
		walldate->column[i] = 0;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	3310      	adds	r3, #16
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	2200      	movs	r2, #0
 800548e:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0;
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2100      	movs	r1, #0
 8005496:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 16; i++) {
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	3301      	adds	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d9ed      	bls.n	8005482 <clear_Map+0xe>
	}
	walldate->column[0] = 0xffff;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ac:	845a      	strh	r2, [r3, #34]	; 0x22
	walldate->row[0] = 0xffff;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054b4:	801a      	strh	r2, [r3, #0]
	walldate->column[16] = 0xffff;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walldate->row[16] = 0xffff;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054c6:	841a      	strh	r2, [r3, #32]
	walldate->column[1] = 0x0001;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <clear_adachiMap>:

void clear_adachiMap(singlewalldata_t *walldate) {
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 17; i++) {
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
 80054e6:	e014      	b.n	8005512 <clear_adachiMap+0x38>
		walldate->column[i] = 0xffff;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	3310      	adds	r3, #16
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f6:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0xffff;
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005500:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		walldate->row[1] = 0xfffe;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800550a:	805a      	strh	r2, [r3, #2]
	for (i = 0; i < 17; i++) {
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	3301      	adds	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b10      	cmp	r3, #16
 8005516:	d9e7      	bls.n	80054e8 <clear_adachiMap+0xe>
	}
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <init_walldata>:

void init_walldata(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
	clear_Map(&walldata.real);
 8005528:	4805      	ldr	r0, [pc, #20]	; (8005540 <init_walldata+0x1c>)
 800552a:	f7ff ffa3 	bl	8005474 <clear_Map>
	clear_Map(&walldata.checked);
 800552e:	4805      	ldr	r0, [pc, #20]	; (8005544 <init_walldata+0x20>)
 8005530:	f7ff ffa0 	bl	8005474 <clear_Map>
	clear_adachiMap(&walldata.adachi);
 8005534:	4804      	ldr	r0, [pc, #16]	; (8005548 <init_walldata+0x24>)
 8005536:	f7ff ffd0 	bl	80054da <clear_adachiMap>
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000778 	.word	0x20000778
 8005544:	200007bc 	.word	0x200007bc
 8005548:	20000800 	.word	0x20000800

0800554c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800554c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005584 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005550:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005552:	e003      	b.n	800555c <LoopCopyDataInit>

08005554 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005556:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005558:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800555a:	3104      	adds	r1, #4

0800555c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800555c:	480b      	ldr	r0, [pc, #44]	; (800558c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005560:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005562:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005564:	d3f6      	bcc.n	8005554 <CopyDataInit>
  ldr  r2, =_sbss
 8005566:	4a0b      	ldr	r2, [pc, #44]	; (8005594 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005568:	e002      	b.n	8005570 <LoopFillZerobss>

0800556a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800556a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800556c:	f842 3b04 	str.w	r3, [r2], #4

08005570 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005572:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005574:	d3f9      	bcc.n	800556a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005576:	f7ff fd79 	bl	800506c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800557a:	f000 f817 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800557e:	f7ff f85d 	bl	800463c <main>
  bx  lr    
 8005582:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005584:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005588:	08006690 	.word	0x08006690
  ldr  r0, =_sdata
 800558c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005590:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8005594:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005598:	20000b64 	.word	0x20000b64

0800559c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800559c:	e7fe      	b.n	800559c <ADC_IRQHandler>
	...

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	; (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000010 	.word	0x20000010

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4e0d      	ldr	r6, [pc, #52]	; (80055e4 <__libc_init_array+0x38>)
 80055b0:	4c0d      	ldr	r4, [pc, #52]	; (80055e8 <__libc_init_array+0x3c>)
 80055b2:	1ba4      	subs	r4, r4, r6
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	2500      	movs	r5, #0
 80055b8:	42a5      	cmp	r5, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	4e0b      	ldr	r6, [pc, #44]	; (80055ec <__libc_init_array+0x40>)
 80055be:	4c0c      	ldr	r4, [pc, #48]	; (80055f0 <__libc_init_array+0x44>)
 80055c0:	f000 ffbe 	bl	8006540 <_init>
 80055c4:	1ba4      	subs	r4, r4, r6
 80055c6:	10a4      	asrs	r4, r4, #2
 80055c8:	2500      	movs	r5, #0
 80055ca:	42a5      	cmp	r5, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d4:	4798      	blx	r3
 80055d6:	3501      	adds	r5, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055de:	4798      	blx	r3
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	08006688 	.word	0x08006688
 80055e8:	08006688 	.word	0x08006688
 80055ec:	08006688 	.word	0x08006688
 80055f0:	0800668c 	.word	0x0800668c

080055f4 <memcpy>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	1e43      	subs	r3, r0, #1
 80055f8:	440a      	add	r2, r1
 80055fa:	4291      	cmp	r1, r2
 80055fc:	d100      	bne.n	8005600 <memcpy+0xc>
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005608:	e7f7      	b.n	80055fa <memcpy+0x6>

0800560a <memset>:
 800560a:	4402      	add	r2, r0
 800560c:	4603      	mov	r3, r0
 800560e:	4293      	cmp	r3, r2
 8005610:	d100      	bne.n	8005614 <memset+0xa>
 8005612:	4770      	bx	lr
 8005614:	f803 1b01 	strb.w	r1, [r3], #1
 8005618:	e7f9      	b.n	800560e <memset+0x4>
	...

0800561c <iprintf>:
 800561c:	b40f      	push	{r0, r1, r2, r3}
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <iprintf+0x2c>)
 8005620:	b513      	push	{r0, r1, r4, lr}
 8005622:	681c      	ldr	r4, [r3, #0]
 8005624:	b124      	cbz	r4, 8005630 <iprintf+0x14>
 8005626:	69a3      	ldr	r3, [r4, #24]
 8005628:	b913      	cbnz	r3, 8005630 <iprintf+0x14>
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fa36 	bl	8005a9c <__sinit>
 8005630:	ab05      	add	r3, sp, #20
 8005632:	9a04      	ldr	r2, [sp, #16]
 8005634:	68a1      	ldr	r1, [r4, #8]
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fbef 	bl	8005e1c <_vfiprintf_r>
 800563e:	b002      	add	sp, #8
 8005640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005644:	b004      	add	sp, #16
 8005646:	4770      	bx	lr
 8005648:	20000010 	.word	0x20000010

0800564c <putchar>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <putchar+0x24>)
 8005650:	681c      	ldr	r4, [r3, #0]
 8005652:	4605      	mov	r5, r0
 8005654:	b124      	cbz	r4, 8005660 <putchar+0x14>
 8005656:	69a3      	ldr	r3, [r4, #24]
 8005658:	b913      	cbnz	r3, 8005660 <putchar+0x14>
 800565a:	4620      	mov	r0, r4
 800565c:	f000 fa1e 	bl	8005a9c <__sinit>
 8005660:	68a2      	ldr	r2, [r4, #8]
 8005662:	4629      	mov	r1, r5
 8005664:	4620      	mov	r0, r4
 8005666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566a:	f000 be75 	b.w	8006358 <_putc_r>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010

08005674 <_puts_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	4605      	mov	r5, r0
 800567a:	b118      	cbz	r0, 8005684 <_puts_r+0x10>
 800567c:	6983      	ldr	r3, [r0, #24]
 800567e:	b90b      	cbnz	r3, 8005684 <_puts_r+0x10>
 8005680:	f000 fa0c 	bl	8005a9c <__sinit>
 8005684:	69ab      	ldr	r3, [r5, #24]
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	b913      	cbnz	r3, 8005690 <_puts_r+0x1c>
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fa06 	bl	8005a9c <__sinit>
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <_puts_r+0xac>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d117      	bne.n	80056c6 <_puts_r+0x52>
 8005696:	686c      	ldr	r4, [r5, #4]
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	071b      	lsls	r3, r3, #28
 800569c:	d51d      	bpl.n	80056da <_puts_r+0x66>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	b1db      	cbz	r3, 80056da <_puts_r+0x66>
 80056a2:	3e01      	subs	r6, #1
 80056a4:	68a3      	ldr	r3, [r4, #8]
 80056a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056aa:	3b01      	subs	r3, #1
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	b9e9      	cbnz	r1, 80056ec <_puts_r+0x78>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da2e      	bge.n	8005712 <_puts_r+0x9e>
 80056b4:	4622      	mov	r2, r4
 80056b6:	210a      	movs	r1, #10
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f83f 	bl	800573c <__swbuf_r>
 80056be:	3001      	adds	r0, #1
 80056c0:	d011      	beq.n	80056e6 <_puts_r+0x72>
 80056c2:	200a      	movs	r0, #10
 80056c4:	e011      	b.n	80056ea <_puts_r+0x76>
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <_puts_r+0xb0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d101      	bne.n	80056d0 <_puts_r+0x5c>
 80056cc:	68ac      	ldr	r4, [r5, #8]
 80056ce:	e7e3      	b.n	8005698 <_puts_r+0x24>
 80056d0:	4b15      	ldr	r3, [pc, #84]	; (8005728 <_puts_r+0xb4>)
 80056d2:	429c      	cmp	r4, r3
 80056d4:	bf08      	it	eq
 80056d6:	68ec      	ldreq	r4, [r5, #12]
 80056d8:	e7de      	b.n	8005698 <_puts_r+0x24>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f87f 	bl	80057e0 <__swsetup_r>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0dd      	beq.n	80056a2 <_puts_r+0x2e>
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da04      	bge.n	80056fa <_puts_r+0x86>
 80056f0:	69a2      	ldr	r2, [r4, #24]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	dc06      	bgt.n	8005704 <_puts_r+0x90>
 80056f6:	290a      	cmp	r1, #10
 80056f8:	d004      	beq.n	8005704 <_puts_r+0x90>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	6022      	str	r2, [r4, #0]
 8005700:	7019      	strb	r1, [r3, #0]
 8005702:	e7cf      	b.n	80056a4 <_puts_r+0x30>
 8005704:	4622      	mov	r2, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f818 	bl	800573c <__swbuf_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d1c9      	bne.n	80056a4 <_puts_r+0x30>
 8005710:	e7e9      	b.n	80056e6 <_puts_r+0x72>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	200a      	movs	r0, #10
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	7018      	strb	r0, [r3, #0]
 800571c:	e7e5      	b.n	80056ea <_puts_r+0x76>
 800571e:	bf00      	nop
 8005720:	0800660c 	.word	0x0800660c
 8005724:	0800662c 	.word	0x0800662c
 8005728:	080065ec 	.word	0x080065ec

0800572c <puts>:
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <puts+0xc>)
 800572e:	4601      	mov	r1, r0
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	f7ff bf9f 	b.w	8005674 <_puts_r>
 8005736:	bf00      	nop
 8005738:	20000010 	.word	0x20000010

0800573c <__swbuf_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	4614      	mov	r4, r2
 8005742:	4605      	mov	r5, r0
 8005744:	b118      	cbz	r0, 800574e <__swbuf_r+0x12>
 8005746:	6983      	ldr	r3, [r0, #24]
 8005748:	b90b      	cbnz	r3, 800574e <__swbuf_r+0x12>
 800574a:	f000 f9a7 	bl	8005a9c <__sinit>
 800574e:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <__swbuf_r+0x98>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d12a      	bne.n	80057aa <__swbuf_r+0x6e>
 8005754:	686c      	ldr	r4, [r5, #4]
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	071a      	lsls	r2, r3, #28
 800575e:	d52e      	bpl.n	80057be <__swbuf_r+0x82>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	b363      	cbz	r3, 80057be <__swbuf_r+0x82>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1ac0      	subs	r0, r0, r3
 800576a:	6963      	ldr	r3, [r4, #20]
 800576c:	b2f6      	uxtb	r6, r6
 800576e:	4283      	cmp	r3, r0
 8005770:	4637      	mov	r7, r6
 8005772:	dc04      	bgt.n	800577e <__swbuf_r+0x42>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f926 	bl	80059c8 <_fflush_r>
 800577c:	bb28      	cbnz	r0, 80057ca <__swbuf_r+0x8e>
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	3b01      	subs	r3, #1
 8005782:	60a3      	str	r3, [r4, #8]
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	701e      	strb	r6, [r3, #0]
 800578c:	6963      	ldr	r3, [r4, #20]
 800578e:	3001      	adds	r0, #1
 8005790:	4283      	cmp	r3, r0
 8005792:	d004      	beq.n	800579e <__swbuf_r+0x62>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	07db      	lsls	r3, r3, #31
 8005798:	d519      	bpl.n	80057ce <__swbuf_r+0x92>
 800579a:	2e0a      	cmp	r6, #10
 800579c:	d117      	bne.n	80057ce <__swbuf_r+0x92>
 800579e:	4621      	mov	r1, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	f000 f911 	bl	80059c8 <_fflush_r>
 80057a6:	b190      	cbz	r0, 80057ce <__swbuf_r+0x92>
 80057a8:	e00f      	b.n	80057ca <__swbuf_r+0x8e>
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <__swbuf_r+0x9c>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d101      	bne.n	80057b4 <__swbuf_r+0x78>
 80057b0:	68ac      	ldr	r4, [r5, #8]
 80057b2:	e7d0      	b.n	8005756 <__swbuf_r+0x1a>
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <__swbuf_r+0xa0>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	bf08      	it	eq
 80057ba:	68ec      	ldreq	r4, [r5, #12]
 80057bc:	e7cb      	b.n	8005756 <__swbuf_r+0x1a>
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 f80d 	bl	80057e0 <__swsetup_r>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0cc      	beq.n	8005764 <__swbuf_r+0x28>
 80057ca:	f04f 37ff 	mov.w	r7, #4294967295
 80057ce:	4638      	mov	r0, r7
 80057d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	0800660c 	.word	0x0800660c
 80057d8:	0800662c 	.word	0x0800662c
 80057dc:	080065ec 	.word	0x080065ec

080057e0 <__swsetup_r>:
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <__swsetup_r+0xcc>)
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	681d      	ldr	r5, [r3, #0]
 80057e6:	4606      	mov	r6, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	b125      	cbz	r5, 80057f6 <__swsetup_r+0x16>
 80057ec:	69ab      	ldr	r3, [r5, #24]
 80057ee:	b913      	cbnz	r3, 80057f6 <__swsetup_r+0x16>
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f953 	bl	8005a9c <__sinit>
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <__swsetup_r+0xd0>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d10f      	bne.n	800581c <__swsetup_r+0x3c>
 80057fc:	686c      	ldr	r4, [r5, #4]
 80057fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005802:	b29a      	uxth	r2, r3
 8005804:	0715      	lsls	r5, r2, #28
 8005806:	d42c      	bmi.n	8005862 <__swsetup_r+0x82>
 8005808:	06d0      	lsls	r0, r2, #27
 800580a:	d411      	bmi.n	8005830 <__swsetup_r+0x50>
 800580c:	2209      	movs	r2, #9
 800580e:	6032      	str	r2, [r6, #0]
 8005810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	e03e      	b.n	800589a <__swsetup_r+0xba>
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <__swsetup_r+0xd4>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d101      	bne.n	8005826 <__swsetup_r+0x46>
 8005822:	68ac      	ldr	r4, [r5, #8]
 8005824:	e7eb      	b.n	80057fe <__swsetup_r+0x1e>
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <__swsetup_r+0xd8>)
 8005828:	429c      	cmp	r4, r3
 800582a:	bf08      	it	eq
 800582c:	68ec      	ldreq	r4, [r5, #12]
 800582e:	e7e6      	b.n	80057fe <__swsetup_r+0x1e>
 8005830:	0751      	lsls	r1, r2, #29
 8005832:	d512      	bpl.n	800585a <__swsetup_r+0x7a>
 8005834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005836:	b141      	cbz	r1, 800584a <__swsetup_r+0x6a>
 8005838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <__swsetup_r+0x66>
 8005840:	4630      	mov	r0, r6
 8005842:	f000 fa19 	bl	8005c78 <_free_r>
 8005846:	2300      	movs	r3, #0
 8005848:	6363      	str	r3, [r4, #52]	; 0x34
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	6063      	str	r3, [r4, #4]
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f043 0308 	orr.w	r3, r3, #8
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	b94b      	cbnz	r3, 800587a <__swsetup_r+0x9a>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d003      	beq.n	800587a <__swsetup_r+0x9a>
 8005872:	4621      	mov	r1, r4
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f9bf 	bl	8005bf8 <__smakebuf_r>
 800587a:	89a2      	ldrh	r2, [r4, #12]
 800587c:	f012 0301 	ands.w	r3, r2, #1
 8005880:	d00c      	beq.n	800589c <__swsetup_r+0xbc>
 8005882:	2300      	movs	r3, #0
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	6963      	ldr	r3, [r4, #20]
 8005888:	425b      	negs	r3, r3
 800588a:	61a3      	str	r3, [r4, #24]
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	b953      	cbnz	r3, 80058a6 <__swsetup_r+0xc6>
 8005890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005894:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005898:	d1ba      	bne.n	8005810 <__swsetup_r+0x30>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	0792      	lsls	r2, r2, #30
 800589e:	bf58      	it	pl
 80058a0:	6963      	ldrpl	r3, [r4, #20]
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	e7f2      	b.n	800588c <__swsetup_r+0xac>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e7f7      	b.n	800589a <__swsetup_r+0xba>
 80058aa:	bf00      	nop
 80058ac:	20000010 	.word	0x20000010
 80058b0:	0800660c 	.word	0x0800660c
 80058b4:	0800662c 	.word	0x0800662c
 80058b8:	080065ec 	.word	0x080065ec

080058bc <__sflush_r>:
 80058bc:	898a      	ldrh	r2, [r1, #12]
 80058be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	4605      	mov	r5, r0
 80058c4:	0710      	lsls	r0, r2, #28
 80058c6:	460c      	mov	r4, r1
 80058c8:	d458      	bmi.n	800597c <__sflush_r+0xc0>
 80058ca:	684b      	ldr	r3, [r1, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc05      	bgt.n	80058dc <__sflush_r+0x20>
 80058d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dc02      	bgt.n	80058dc <__sflush_r+0x20>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d0f9      	beq.n	80058d6 <__sflush_r+0x1a>
 80058e2:	2300      	movs	r3, #0
 80058e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e8:	682f      	ldr	r7, [r5, #0]
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	d032      	beq.n	8005956 <__sflush_r+0x9a>
 80058f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	075a      	lsls	r2, r3, #29
 80058f6:	d505      	bpl.n	8005904 <__sflush_r+0x48>
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	1ac0      	subs	r0, r0, r3
 80058fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058fe:	b10b      	cbz	r3, 8005904 <__sflush_r+0x48>
 8005900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005902:	1ac0      	subs	r0, r0, r3
 8005904:	2300      	movs	r3, #0
 8005906:	4602      	mov	r2, r0
 8005908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800590a:	6a21      	ldr	r1, [r4, #32]
 800590c:	4628      	mov	r0, r5
 800590e:	47b0      	blx	r6
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	d106      	bne.n	8005924 <__sflush_r+0x68>
 8005916:	6829      	ldr	r1, [r5, #0]
 8005918:	291d      	cmp	r1, #29
 800591a:	d848      	bhi.n	80059ae <__sflush_r+0xf2>
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <__sflush_r+0x108>)
 800591e:	40ca      	lsrs	r2, r1
 8005920:	07d6      	lsls	r6, r2, #31
 8005922:	d544      	bpl.n	80059ae <__sflush_r+0xf2>
 8005924:	2200      	movs	r2, #0
 8005926:	6062      	str	r2, [r4, #4]
 8005928:	04d9      	lsls	r1, r3, #19
 800592a:	6922      	ldr	r2, [r4, #16]
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	d504      	bpl.n	800593a <__sflush_r+0x7e>
 8005930:	1c42      	adds	r2, r0, #1
 8005932:	d101      	bne.n	8005938 <__sflush_r+0x7c>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b903      	cbnz	r3, 800593a <__sflush_r+0x7e>
 8005938:	6560      	str	r0, [r4, #84]	; 0x54
 800593a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593c:	602f      	str	r7, [r5, #0]
 800593e:	2900      	cmp	r1, #0
 8005940:	d0c9      	beq.n	80058d6 <__sflush_r+0x1a>
 8005942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005946:	4299      	cmp	r1, r3
 8005948:	d002      	beq.n	8005950 <__sflush_r+0x94>
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f994 	bl	8005c78 <_free_r>
 8005950:	2000      	movs	r0, #0
 8005952:	6360      	str	r0, [r4, #52]	; 0x34
 8005954:	e7c0      	b.n	80058d8 <__sflush_r+0x1c>
 8005956:	2301      	movs	r3, #1
 8005958:	4628      	mov	r0, r5
 800595a:	47b0      	blx	r6
 800595c:	1c41      	adds	r1, r0, #1
 800595e:	d1c8      	bne.n	80058f2 <__sflush_r+0x36>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0c5      	beq.n	80058f2 <__sflush_r+0x36>
 8005966:	2b1d      	cmp	r3, #29
 8005968:	d001      	beq.n	800596e <__sflush_r+0xb2>
 800596a:	2b16      	cmp	r3, #22
 800596c:	d101      	bne.n	8005972 <__sflush_r+0xb6>
 800596e:	602f      	str	r7, [r5, #0]
 8005970:	e7b1      	b.n	80058d6 <__sflush_r+0x1a>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	e7ad      	b.n	80058d8 <__sflush_r+0x1c>
 800597c:	690f      	ldr	r7, [r1, #16]
 800597e:	2f00      	cmp	r7, #0
 8005980:	d0a9      	beq.n	80058d6 <__sflush_r+0x1a>
 8005982:	0793      	lsls	r3, r2, #30
 8005984:	680e      	ldr	r6, [r1, #0]
 8005986:	bf08      	it	eq
 8005988:	694b      	ldreq	r3, [r1, #20]
 800598a:	600f      	str	r7, [r1, #0]
 800598c:	bf18      	it	ne
 800598e:	2300      	movne	r3, #0
 8005990:	eba6 0807 	sub.w	r8, r6, r7
 8005994:	608b      	str	r3, [r1, #8]
 8005996:	f1b8 0f00 	cmp.w	r8, #0
 800599a:	dd9c      	ble.n	80058d6 <__sflush_r+0x1a>
 800599c:	4643      	mov	r3, r8
 800599e:	463a      	mov	r2, r7
 80059a0:	6a21      	ldr	r1, [r4, #32]
 80059a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b0      	blx	r6
 80059a8:	2800      	cmp	r0, #0
 80059aa:	dc06      	bgt.n	80059ba <__sflush_r+0xfe>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	e78e      	b.n	80058d8 <__sflush_r+0x1c>
 80059ba:	4407      	add	r7, r0
 80059bc:	eba8 0800 	sub.w	r8, r8, r0
 80059c0:	e7e9      	b.n	8005996 <__sflush_r+0xda>
 80059c2:	bf00      	nop
 80059c4:	20400001 	.word	0x20400001

080059c8 <_fflush_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	4605      	mov	r5, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b1db      	cbz	r3, 8005a0a <_fflush_r+0x42>
 80059d2:	b118      	cbz	r0, 80059dc <_fflush_r+0x14>
 80059d4:	6983      	ldr	r3, [r0, #24]
 80059d6:	b90b      	cbnz	r3, 80059dc <_fflush_r+0x14>
 80059d8:	f000 f860 	bl	8005a9c <__sinit>
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <_fflush_r+0x48>)
 80059de:	429c      	cmp	r4, r3
 80059e0:	d109      	bne.n	80059f6 <_fflush_r+0x2e>
 80059e2:	686c      	ldr	r4, [r5, #4]
 80059e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e8:	b17b      	cbz	r3, 8005a0a <_fflush_r+0x42>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059f2:	f7ff bf63 	b.w	80058bc <__sflush_r>
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <_fflush_r+0x4c>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d101      	bne.n	8005a00 <_fflush_r+0x38>
 80059fc:	68ac      	ldr	r4, [r5, #8]
 80059fe:	e7f1      	b.n	80059e4 <_fflush_r+0x1c>
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <_fflush_r+0x50>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	bf08      	it	eq
 8005a06:	68ec      	ldreq	r4, [r5, #12]
 8005a08:	e7ec      	b.n	80059e4 <_fflush_r+0x1c>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800660c 	.word	0x0800660c
 8005a14:	0800662c 	.word	0x0800662c
 8005a18:	080065ec 	.word	0x080065ec

08005a1c <std>:
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	4604      	mov	r4, r0
 8005a22:	e9c0 3300 	strd	r3, r3, [r0]
 8005a26:	6083      	str	r3, [r0, #8]
 8005a28:	8181      	strh	r1, [r0, #12]
 8005a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a2c:	81c2      	strh	r2, [r0, #14]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6183      	str	r3, [r0, #24]
 8005a34:	4619      	mov	r1, r3
 8005a36:	2208      	movs	r2, #8
 8005a38:	305c      	adds	r0, #92	; 0x5c
 8005a3a:	f7ff fde6 	bl	800560a <memset>
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <std+0x38>)
 8005a40:	6263      	str	r3, [r4, #36]	; 0x24
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <std+0x3c>)
 8005a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <std+0x40>)
 8005a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <std+0x44>)
 8005a4c:	6224      	str	r4, [r4, #32]
 8005a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8005a50:	bd10      	pop	{r4, pc}
 8005a52:	bf00      	nop
 8005a54:	080063e5 	.word	0x080063e5
 8005a58:	08006407 	.word	0x08006407
 8005a5c:	0800643f 	.word	0x0800643f
 8005a60:	08006463 	.word	0x08006463

08005a64 <_cleanup_r>:
 8005a64:	4901      	ldr	r1, [pc, #4]	; (8005a6c <_cleanup_r+0x8>)
 8005a66:	f000 b885 	b.w	8005b74 <_fwalk_reent>
 8005a6a:	bf00      	nop
 8005a6c:	080059c9 	.word	0x080059c9

08005a70 <__sfmoreglue>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	1e4a      	subs	r2, r1, #1
 8005a74:	2568      	movs	r5, #104	; 0x68
 8005a76:	4355      	muls	r5, r2
 8005a78:	460e      	mov	r6, r1
 8005a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a7e:	f000 f949 	bl	8005d14 <_malloc_r>
 8005a82:	4604      	mov	r4, r0
 8005a84:	b140      	cbz	r0, 8005a98 <__sfmoreglue+0x28>
 8005a86:	2100      	movs	r1, #0
 8005a88:	e9c0 1600 	strd	r1, r6, [r0]
 8005a8c:	300c      	adds	r0, #12
 8005a8e:	60a0      	str	r0, [r4, #8]
 8005a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a94:	f7ff fdb9 	bl	800560a <memset>
 8005a98:	4620      	mov	r0, r4
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}

08005a9c <__sinit>:
 8005a9c:	6983      	ldr	r3, [r0, #24]
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	bb33      	cbnz	r3, 8005af2 <__sinit+0x56>
 8005aa4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005aa8:	6503      	str	r3, [r0, #80]	; 0x50
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <__sinit+0x58>)
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <__sinit+0x5c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6282      	str	r2, [r0, #40]	; 0x28
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bf04      	itt	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	6183      	streq	r3, [r0, #24]
 8005aba:	f000 f81f 	bl	8005afc <__sfp>
 8005abe:	6060      	str	r0, [r4, #4]
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 f81b 	bl	8005afc <__sfp>
 8005ac6:	60a0      	str	r0, [r4, #8]
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f817 	bl	8005afc <__sfp>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	60e0      	str	r0, [r4, #12]
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	6860      	ldr	r0, [r4, #4]
 8005ad6:	f7ff ffa1 	bl	8005a1c <std>
 8005ada:	2201      	movs	r2, #1
 8005adc:	2109      	movs	r1, #9
 8005ade:	68a0      	ldr	r0, [r4, #8]
 8005ae0:	f7ff ff9c 	bl	8005a1c <std>
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	2112      	movs	r1, #18
 8005ae8:	68e0      	ldr	r0, [r4, #12]
 8005aea:	f7ff ff97 	bl	8005a1c <std>
 8005aee:	2301      	movs	r3, #1
 8005af0:	61a3      	str	r3, [r4, #24]
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	080065e8 	.word	0x080065e8
 8005af8:	08005a65 	.word	0x08005a65

08005afc <__sfp>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <__sfp+0x70>)
 8005b00:	681e      	ldr	r6, [r3, #0]
 8005b02:	69b3      	ldr	r3, [r6, #24]
 8005b04:	4607      	mov	r7, r0
 8005b06:	b913      	cbnz	r3, 8005b0e <__sfp+0x12>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7ff ffc7 	bl	8005a9c <__sinit>
 8005b0e:	3648      	adds	r6, #72	; 0x48
 8005b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	d503      	bpl.n	8005b20 <__sfp+0x24>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	b133      	cbz	r3, 8005b2a <__sfp+0x2e>
 8005b1c:	6836      	ldr	r6, [r6, #0]
 8005b1e:	e7f7      	b.n	8005b10 <__sfp+0x14>
 8005b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b24:	b16d      	cbz	r5, 8005b42 <__sfp+0x46>
 8005b26:	3468      	adds	r4, #104	; 0x68
 8005b28:	e7f4      	b.n	8005b14 <__sfp+0x18>
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f7ff ff9f 	bl	8005a70 <__sfmoreglue>
 8005b32:	6030      	str	r0, [r6, #0]
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d1f1      	bne.n	8005b1c <__sfp+0x20>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4620      	mov	r0, r4
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <__sfp+0x74>)
 8005b44:	6665      	str	r5, [r4, #100]	; 0x64
 8005b46:	e9c4 5500 	strd	r5, r5, [r4]
 8005b4a:	60a5      	str	r5, [r4, #8]
 8005b4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005b50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4629      	mov	r1, r5
 8005b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b5c:	f7ff fd55 	bl	800560a <memset>
 8005b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b68:	e7e9      	b.n	8005b3e <__sfp+0x42>
 8005b6a:	bf00      	nop
 8005b6c:	080065e8 	.word	0x080065e8
 8005b70:	ffff0001 	.word	0xffff0001

08005b74 <_fwalk_reent>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b80:	2600      	movs	r6, #0
 8005b82:	b914      	cbnz	r4, 8005b8a <_fwalk_reent+0x16>
 8005b84:	4630      	mov	r0, r6
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005b8e:	3f01      	subs	r7, #1
 8005b90:	d501      	bpl.n	8005b96 <_fwalk_reent+0x22>
 8005b92:	6824      	ldr	r4, [r4, #0]
 8005b94:	e7f5      	b.n	8005b82 <_fwalk_reent+0xe>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d907      	bls.n	8005bac <_fwalk_reent+0x38>
 8005b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	d003      	beq.n	8005bac <_fwalk_reent+0x38>
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	47c8      	blx	r9
 8005baa:	4306      	orrs	r6, r0
 8005bac:	3568      	adds	r5, #104	; 0x68
 8005bae:	e7ee      	b.n	8005b8e <_fwalk_reent+0x1a>

08005bb0 <__swhatbuf_r>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	da07      	bge.n	8005bd2 <__swhatbuf_r+0x22>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	89b3      	ldrh	r3, [r6, #12]
 8005bc8:	061a      	lsls	r2, r3, #24
 8005bca:	d410      	bmi.n	8005bee <__swhatbuf_r+0x3e>
 8005bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd0:	e00e      	b.n	8005bf0 <__swhatbuf_r+0x40>
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f000 fc6c 	bl	80064b0 <_fstat_r>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	dbf2      	blt.n	8005bc2 <__swhatbuf_r+0x12>
 8005bdc:	9a01      	ldr	r2, [sp, #4]
 8005bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005be6:	425a      	negs	r2, r3
 8005be8:	415a      	adcs	r2, r3
 8005bea:	602a      	str	r2, [r5, #0]
 8005bec:	e7ee      	b.n	8005bcc <__swhatbuf_r+0x1c>
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	b016      	add	sp, #88	; 0x58
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}

08005bf8 <__smakebuf_r>:
 8005bf8:	898b      	ldrh	r3, [r1, #12]
 8005bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bfc:	079d      	lsls	r5, r3, #30
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	d507      	bpl.n	8005c14 <__smakebuf_r+0x1c>
 8005c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	6163      	str	r3, [r4, #20]
 8005c10:	b002      	add	sp, #8
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	ab01      	add	r3, sp, #4
 8005c16:	466a      	mov	r2, sp
 8005c18:	f7ff ffca 	bl	8005bb0 <__swhatbuf_r>
 8005c1c:	9900      	ldr	r1, [sp, #0]
 8005c1e:	4605      	mov	r5, r0
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f877 	bl	8005d14 <_malloc_r>
 8005c26:	b948      	cbnz	r0, 8005c3c <__smakebuf_r+0x44>
 8005c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2c:	059a      	lsls	r2, r3, #22
 8005c2e:	d4ef      	bmi.n	8005c10 <__smakebuf_r+0x18>
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	e7e3      	b.n	8005c04 <__smakebuf_r+0xc>
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <__smakebuf_r+0x7c>)
 8005c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	6020      	str	r0, [r4, #0]
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	6163      	str	r3, [r4, #20]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	6120      	str	r0, [r4, #16]
 8005c52:	b15b      	cbz	r3, 8005c6c <__smakebuf_r+0x74>
 8005c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 fc3b 	bl	80064d4 <_isatty_r>
 8005c5e:	b128      	cbz	r0, 8005c6c <__smakebuf_r+0x74>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	431d      	orrs	r5, r3
 8005c70:	81a5      	strh	r5, [r4, #12]
 8005c72:	e7cd      	b.n	8005c10 <__smakebuf_r+0x18>
 8005c74:	08005a65 	.word	0x08005a65

08005c78 <_free_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d045      	beq.n	8005d0c <_free_r+0x94>
 8005c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c84:	1f0c      	subs	r4, r1, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfb8      	it	lt
 8005c8a:	18e4      	addlt	r4, r4, r3
 8005c8c:	f000 fc44 	bl	8006518 <__malloc_lock>
 8005c90:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <_free_r+0x98>)
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	4610      	mov	r0, r2
 8005c96:	b933      	cbnz	r3, 8005ca6 <_free_r+0x2e>
 8005c98:	6063      	str	r3, [r4, #4]
 8005c9a:	6014      	str	r4, [r2, #0]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ca2:	f000 bc3a 	b.w	800651a <__malloc_unlock>
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	d90c      	bls.n	8005cc4 <_free_r+0x4c>
 8005caa:	6821      	ldr	r1, [r4, #0]
 8005cac:	1862      	adds	r2, r4, r1
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	bf04      	itt	eq
 8005cb2:	681a      	ldreq	r2, [r3, #0]
 8005cb4:	685b      	ldreq	r3, [r3, #4]
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	bf04      	itt	eq
 8005cba:	1852      	addeq	r2, r2, r1
 8005cbc:	6022      	streq	r2, [r4, #0]
 8005cbe:	6004      	str	r4, [r0, #0]
 8005cc0:	e7ec      	b.n	8005c9c <_free_r+0x24>
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	b10a      	cbz	r2, 8005ccc <_free_r+0x54>
 8005cc8:	42a2      	cmp	r2, r4
 8005cca:	d9fa      	bls.n	8005cc2 <_free_r+0x4a>
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	1858      	adds	r0, r3, r1
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d10b      	bne.n	8005cec <_free_r+0x74>
 8005cd4:	6820      	ldr	r0, [r4, #0]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	1858      	adds	r0, r3, r1
 8005cda:	4282      	cmp	r2, r0
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	d1dd      	bne.n	8005c9c <_free_r+0x24>
 8005ce0:	6810      	ldr	r0, [r2, #0]
 8005ce2:	6852      	ldr	r2, [r2, #4]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	4401      	add	r1, r0
 8005ce8:	6019      	str	r1, [r3, #0]
 8005cea:	e7d7      	b.n	8005c9c <_free_r+0x24>
 8005cec:	d902      	bls.n	8005cf4 <_free_r+0x7c>
 8005cee:	230c      	movs	r3, #12
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	e7d3      	b.n	8005c9c <_free_r+0x24>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	1821      	adds	r1, r4, r0
 8005cf8:	428a      	cmp	r2, r1
 8005cfa:	bf04      	itt	eq
 8005cfc:	6811      	ldreq	r1, [r2, #0]
 8005cfe:	6852      	ldreq	r2, [r2, #4]
 8005d00:	6062      	str	r2, [r4, #4]
 8005d02:	bf04      	itt	eq
 8005d04:	1809      	addeq	r1, r1, r0
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	605c      	str	r4, [r3, #4]
 8005d0a:	e7c7      	b.n	8005c9c <_free_r+0x24>
 8005d0c:	bd38      	pop	{r3, r4, r5, pc}
 8005d0e:	bf00      	nop
 8005d10:	200004ac 	.word	0x200004ac

08005d14 <_malloc_r>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	1ccd      	adds	r5, r1, #3
 8005d18:	f025 0503 	bic.w	r5, r5, #3
 8005d1c:	3508      	adds	r5, #8
 8005d1e:	2d0c      	cmp	r5, #12
 8005d20:	bf38      	it	cc
 8005d22:	250c      	movcc	r5, #12
 8005d24:	2d00      	cmp	r5, #0
 8005d26:	4606      	mov	r6, r0
 8005d28:	db01      	blt.n	8005d2e <_malloc_r+0x1a>
 8005d2a:	42a9      	cmp	r1, r5
 8005d2c:	d903      	bls.n	8005d36 <_malloc_r+0x22>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	2000      	movs	r0, #0
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	f000 fbef 	bl	8006518 <__malloc_lock>
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <_malloc_r+0xac>)
 8005d3c:	6814      	ldr	r4, [r2, #0]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	b991      	cbnz	r1, 8005d68 <_malloc_r+0x54>
 8005d42:	4c20      	ldr	r4, [pc, #128]	; (8005dc4 <_malloc_r+0xb0>)
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	b91b      	cbnz	r3, 8005d50 <_malloc_r+0x3c>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fb3b 	bl	80063c4 <_sbrk_r>
 8005d4e:	6020      	str	r0, [r4, #0]
 8005d50:	4629      	mov	r1, r5
 8005d52:	4630      	mov	r0, r6
 8005d54:	f000 fb36 	bl	80063c4 <_sbrk_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d124      	bne.n	8005da6 <_malloc_r+0x92>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	6033      	str	r3, [r6, #0]
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 fbda 	bl	800651a <__malloc_unlock>
 8005d66:	e7e4      	b.n	8005d32 <_malloc_r+0x1e>
 8005d68:	680b      	ldr	r3, [r1, #0]
 8005d6a:	1b5b      	subs	r3, r3, r5
 8005d6c:	d418      	bmi.n	8005da0 <_malloc_r+0x8c>
 8005d6e:	2b0b      	cmp	r3, #11
 8005d70:	d90f      	bls.n	8005d92 <_malloc_r+0x7e>
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	50cd      	str	r5, [r1, r3]
 8005d76:	18cc      	adds	r4, r1, r3
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 fbce 	bl	800651a <__malloc_unlock>
 8005d7e:	f104 000b 	add.w	r0, r4, #11
 8005d82:	1d23      	adds	r3, r4, #4
 8005d84:	f020 0007 	bic.w	r0, r0, #7
 8005d88:	1ac3      	subs	r3, r0, r3
 8005d8a:	d0d3      	beq.n	8005d34 <_malloc_r+0x20>
 8005d8c:	425a      	negs	r2, r3
 8005d8e:	50e2      	str	r2, [r4, r3]
 8005d90:	e7d0      	b.n	8005d34 <_malloc_r+0x20>
 8005d92:	428c      	cmp	r4, r1
 8005d94:	684b      	ldr	r3, [r1, #4]
 8005d96:	bf16      	itet	ne
 8005d98:	6063      	strne	r3, [r4, #4]
 8005d9a:	6013      	streq	r3, [r2, #0]
 8005d9c:	460c      	movne	r4, r1
 8005d9e:	e7eb      	b.n	8005d78 <_malloc_r+0x64>
 8005da0:	460c      	mov	r4, r1
 8005da2:	6849      	ldr	r1, [r1, #4]
 8005da4:	e7cc      	b.n	8005d40 <_malloc_r+0x2c>
 8005da6:	1cc4      	adds	r4, r0, #3
 8005da8:	f024 0403 	bic.w	r4, r4, #3
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d005      	beq.n	8005dbc <_malloc_r+0xa8>
 8005db0:	1a21      	subs	r1, r4, r0
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fb06 	bl	80063c4 <_sbrk_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0cf      	beq.n	8005d5c <_malloc_r+0x48>
 8005dbc:	6025      	str	r5, [r4, #0]
 8005dbe:	e7db      	b.n	8005d78 <_malloc_r+0x64>
 8005dc0:	200004ac 	.word	0x200004ac
 8005dc4:	200004b0 	.word	0x200004b0

08005dc8 <__sfputc_r>:
 8005dc8:	6893      	ldr	r3, [r2, #8]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	b410      	push	{r4}
 8005dd0:	6093      	str	r3, [r2, #8]
 8005dd2:	da08      	bge.n	8005de6 <__sfputc_r+0x1e>
 8005dd4:	6994      	ldr	r4, [r2, #24]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	db01      	blt.n	8005dde <__sfputc_r+0x16>
 8005dda:	290a      	cmp	r1, #10
 8005ddc:	d103      	bne.n	8005de6 <__sfputc_r+0x1e>
 8005dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de2:	f7ff bcab 	b.w	800573c <__swbuf_r>
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	1c58      	adds	r0, r3, #1
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	7019      	strb	r1, [r3, #0]
 8005dee:	4608      	mov	r0, r1
 8005df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <__sfputs_r>:
 8005df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	18d5      	adds	r5, r2, r3
 8005e00:	42ac      	cmp	r4, r5
 8005e02:	d101      	bne.n	8005e08 <__sfputs_r+0x12>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e007      	b.n	8005e18 <__sfputs_r+0x22>
 8005e08:	463a      	mov	r2, r7
 8005e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ffda 	bl	8005dc8 <__sfputc_r>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d1f3      	bne.n	8005e00 <__sfputs_r+0xa>
 8005e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e1c <_vfiprintf_r>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	460c      	mov	r4, r1
 8005e22:	b09d      	sub	sp, #116	; 0x74
 8005e24:	4617      	mov	r7, r2
 8005e26:	461d      	mov	r5, r3
 8005e28:	4606      	mov	r6, r0
 8005e2a:	b118      	cbz	r0, 8005e34 <_vfiprintf_r+0x18>
 8005e2c:	6983      	ldr	r3, [r0, #24]
 8005e2e:	b90b      	cbnz	r3, 8005e34 <_vfiprintf_r+0x18>
 8005e30:	f7ff fe34 	bl	8005a9c <__sinit>
 8005e34:	4b7c      	ldr	r3, [pc, #496]	; (8006028 <_vfiprintf_r+0x20c>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d158      	bne.n	8005eec <_vfiprintf_r+0xd0>
 8005e3a:	6874      	ldr	r4, [r6, #4]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	0718      	lsls	r0, r3, #28
 8005e40:	d55e      	bpl.n	8005f00 <_vfiprintf_r+0xe4>
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05b      	beq.n	8005f00 <_vfiprintf_r+0xe4>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e52:	2330      	movs	r3, #48	; 0x30
 8005e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e58:	9503      	str	r5, [sp, #12]
 8005e5a:	f04f 0b01 	mov.w	fp, #1
 8005e5e:	46b8      	mov	r8, r7
 8005e60:	4645      	mov	r5, r8
 8005e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e66:	b10b      	cbz	r3, 8005e6c <_vfiprintf_r+0x50>
 8005e68:	2b25      	cmp	r3, #37	; 0x25
 8005e6a:	d154      	bne.n	8005f16 <_vfiprintf_r+0xfa>
 8005e6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e70:	d00b      	beq.n	8005e8a <_vfiprintf_r+0x6e>
 8005e72:	4653      	mov	r3, sl
 8005e74:	463a      	mov	r2, r7
 8005e76:	4621      	mov	r1, r4
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbc 	bl	8005df6 <__sfputs_r>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f000 80c2 	beq.w	8006008 <_vfiprintf_r+0x1ec>
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	4453      	add	r3, sl
 8005e88:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8a:	f898 3000 	ldrb.w	r3, [r8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 80ba 	beq.w	8006008 <_vfiprintf_r+0x1ec>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ea8:	46a8      	mov	r8, r5
 8005eaa:	2205      	movs	r2, #5
 8005eac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005eb0:	485e      	ldr	r0, [pc, #376]	; (800602c <_vfiprintf_r+0x210>)
 8005eb2:	f7fa f9b5 	bl	8000220 <memchr>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	bb78      	cbnz	r0, 8005f1a <_vfiprintf_r+0xfe>
 8005eba:	06d9      	lsls	r1, r3, #27
 8005ebc:	bf44      	itt	mi
 8005ebe:	2220      	movmi	r2, #32
 8005ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ec4:	071a      	lsls	r2, r3, #28
 8005ec6:	bf44      	itt	mi
 8005ec8:	222b      	movmi	r2, #43	; 0x2b
 8005eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ece:	782a      	ldrb	r2, [r5, #0]
 8005ed0:	2a2a      	cmp	r2, #42	; 0x2a
 8005ed2:	d02a      	beq.n	8005f2a <_vfiprintf_r+0x10e>
 8005ed4:	9a07      	ldr	r2, [sp, #28]
 8005ed6:	46a8      	mov	r8, r5
 8005ed8:	2000      	movs	r0, #0
 8005eda:	250a      	movs	r5, #10
 8005edc:	4641      	mov	r1, r8
 8005ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee2:	3b30      	subs	r3, #48	; 0x30
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d969      	bls.n	8005fbc <_vfiprintf_r+0x1a0>
 8005ee8:	b360      	cbz	r0, 8005f44 <_vfiprintf_r+0x128>
 8005eea:	e024      	b.n	8005f36 <_vfiprintf_r+0x11a>
 8005eec:	4b50      	ldr	r3, [pc, #320]	; (8006030 <_vfiprintf_r+0x214>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d101      	bne.n	8005ef6 <_vfiprintf_r+0xda>
 8005ef2:	68b4      	ldr	r4, [r6, #8]
 8005ef4:	e7a2      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <_vfiprintf_r+0x218>)
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	bf08      	it	eq
 8005efc:	68f4      	ldreq	r4, [r6, #12]
 8005efe:	e79d      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff fc6c 	bl	80057e0 <__swsetup_r>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d09d      	beq.n	8005e48 <_vfiprintf_r+0x2c>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	b01d      	add	sp, #116	; 0x74
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	46a8      	mov	r8, r5
 8005f18:	e7a2      	b.n	8005e60 <_vfiprintf_r+0x44>
 8005f1a:	4a44      	ldr	r2, [pc, #272]	; (800602c <_vfiprintf_r+0x210>)
 8005f1c:	1a80      	subs	r0, r0, r2
 8005f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8005f22:	4318      	orrs	r0, r3
 8005f24:	9004      	str	r0, [sp, #16]
 8005f26:	4645      	mov	r5, r8
 8005f28:	e7be      	b.n	8005ea8 <_vfiprintf_r+0x8c>
 8005f2a:	9a03      	ldr	r2, [sp, #12]
 8005f2c:	1d11      	adds	r1, r2, #4
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	db01      	blt.n	8005f3a <_vfiprintf_r+0x11e>
 8005f36:	9207      	str	r2, [sp, #28]
 8005f38:	e004      	b.n	8005f44 <_vfiprintf_r+0x128>
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	9207      	str	r2, [sp, #28]
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	f898 3000 	ldrb.w	r3, [r8]
 8005f48:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4a:	d10e      	bne.n	8005f6a <_vfiprintf_r+0x14e>
 8005f4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d138      	bne.n	8005fc6 <_vfiprintf_r+0x1aa>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9203      	str	r2, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfb8      	it	lt
 8005f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f64:	f108 0802 	add.w	r8, r8, #2
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	4d33      	ldr	r5, [pc, #204]	; (8006038 <_vfiprintf_r+0x21c>)
 8005f6c:	f898 1000 	ldrb.w	r1, [r8]
 8005f70:	2203      	movs	r2, #3
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7fa f954 	bl	8000220 <memchr>
 8005f78:	b140      	cbz	r0, 8005f8c <_vfiprintf_r+0x170>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f82:	9b04      	ldr	r3, [sp, #16]
 8005f84:	4303      	orrs	r3, r0
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f898 1000 	ldrb.w	r1, [r8]
 8005f90:	482a      	ldr	r0, [pc, #168]	; (800603c <_vfiprintf_r+0x220>)
 8005f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f96:	2206      	movs	r2, #6
 8005f98:	f108 0701 	add.w	r7, r8, #1
 8005f9c:	f7fa f940 	bl	8000220 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d037      	beq.n	8006014 <_vfiprintf_r+0x1f8>
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <_vfiprintf_r+0x224>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_vfiprintf_r+0x1d4>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	444b      	add	r3, r9
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	e750      	b.n	8005e5e <_vfiprintf_r+0x42>
 8005fbc:	fb05 3202 	mla	r2, r5, r2, r3
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	4688      	mov	r8, r1
 8005fc4:	e78a      	b.n	8005edc <_vfiprintf_r+0xc0>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f108 0801 	add.w	r8, r8, #1
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	250a      	movs	r5, #10
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	; 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_vfiprintf_r+0x1ca>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c3      	beq.n	8005f6a <_vfiprintf_r+0x14e>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c1      	b.n	8005f6a <_vfiprintf_r+0x14e>
 8005fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8005fea:	2301      	movs	r3, #1
 8005fec:	4680      	mov	r8, r0
 8005fee:	e7f0      	b.n	8005fd2 <_vfiprintf_r+0x1b6>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <_vfiprintf_r+0x228>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f3af 8000 	nop.w
 8006000:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006004:	4681      	mov	r9, r0
 8006006:	d1d5      	bne.n	8005fb4 <_vfiprintf_r+0x198>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	065b      	lsls	r3, r3, #25
 800600c:	f53f af7e 	bmi.w	8005f0c <_vfiprintf_r+0xf0>
 8006010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006012:	e77d      	b.n	8005f10 <_vfiprintf_r+0xf4>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4622      	mov	r2, r4
 800601a:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <_vfiprintf_r+0x228>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4630      	mov	r0, r6
 8006020:	f000 f888 	bl	8006134 <_printf_i>
 8006024:	e7ec      	b.n	8006000 <_vfiprintf_r+0x1e4>
 8006026:	bf00      	nop
 8006028:	0800660c 	.word	0x0800660c
 800602c:	0800664c 	.word	0x0800664c
 8006030:	0800662c 	.word	0x0800662c
 8006034:	080065ec 	.word	0x080065ec
 8006038:	08006652 	.word	0x08006652
 800603c:	08006656 	.word	0x08006656
 8006040:	00000000 	.word	0x00000000
 8006044:	08005df7 	.word	0x08005df7

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4691      	mov	r9, r2
 800604e:	461f      	mov	r7, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	f8c9 3000 	str.w	r3, [r9]
 8006062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	b112      	cbz	r2, 8006072 <_printf_common+0x2a>
 800606c:	3301      	adds	r3, #1
 800606e:	f8c9 3000 	str.w	r3, [r9]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	0699      	lsls	r1, r3, #26
 8006076:	bf42      	ittt	mi
 8006078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800607c:	3302      	addmi	r3, #2
 800607e:	f8c9 3000 	strmi.w	r3, [r9]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d107      	bne.n	800609a <_printf_common+0x52>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	f8d9 2000 	ldr.w	r2, [r9]
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	42ab      	cmp	r3, r5
 8006098:	dc28      	bgt.n	80060ec <_printf_common+0xa4>
 800609a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	3300      	adds	r3, #0
 80060a2:	bf18      	it	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	0692      	lsls	r2, r2, #26
 80060a8:	d42d      	bmi.n	8006106 <_printf_common+0xbe>
 80060aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ae:	4639      	mov	r1, r7
 80060b0:	4630      	mov	r0, r6
 80060b2:	47c0      	blx	r8
 80060b4:	3001      	adds	r0, #1
 80060b6:	d020      	beq.n	80060fa <_printf_common+0xb2>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	68e5      	ldr	r5, [r4, #12]
 80060bc:	f8d9 2000 	ldr.w	r2, [r9]
 80060c0:	f003 0306 	and.w	r3, r3, #6
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	bf08      	it	eq
 80060c8:	1aad      	subeq	r5, r5, r2
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	bf0c      	ite	eq
 80060d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d4:	2500      	movne	r5, #0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfc4      	itt	gt
 80060da:	1a9b      	subgt	r3, r3, r2
 80060dc:	18ed      	addgt	r5, r5, r3
 80060de:	f04f 0900 	mov.w	r9, #0
 80060e2:	341a      	adds	r4, #26
 80060e4:	454d      	cmp	r5, r9
 80060e6:	d11a      	bne.n	800611e <_printf_common+0xd6>
 80060e8:	2000      	movs	r0, #0
 80060ea:	e008      	b.n	80060fe <_printf_common+0xb6>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4652      	mov	r2, sl
 80060f0:	4639      	mov	r1, r7
 80060f2:	4630      	mov	r0, r6
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d103      	bne.n	8006102 <_printf_common+0xba>
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	3501      	adds	r5, #1
 8006104:	e7c3      	b.n	800608e <_printf_common+0x46>
 8006106:	18e1      	adds	r1, r4, r3
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	2030      	movs	r0, #48	; 0x30
 800610c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006110:	4422      	add	r2, r4
 8006112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611a:	3302      	adds	r3, #2
 800611c:	e7c5      	b.n	80060aa <_printf_common+0x62>
 800611e:	2301      	movs	r3, #1
 8006120:	4622      	mov	r2, r4
 8006122:	4639      	mov	r1, r7
 8006124:	4630      	mov	r0, r6
 8006126:	47c0      	blx	r8
 8006128:	3001      	adds	r0, #1
 800612a:	d0e6      	beq.n	80060fa <_printf_common+0xb2>
 800612c:	f109 0901 	add.w	r9, r9, #1
 8006130:	e7d8      	b.n	80060e4 <_printf_common+0x9c>
	...

08006134 <_printf_i>:
 8006134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800613c:	460c      	mov	r4, r1
 800613e:	7e09      	ldrb	r1, [r1, #24]
 8006140:	b085      	sub	sp, #20
 8006142:	296e      	cmp	r1, #110	; 0x6e
 8006144:	4617      	mov	r7, r2
 8006146:	4606      	mov	r6, r0
 8006148:	4698      	mov	r8, r3
 800614a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614c:	f000 80b3 	beq.w	80062b6 <_printf_i+0x182>
 8006150:	d822      	bhi.n	8006198 <_printf_i+0x64>
 8006152:	2963      	cmp	r1, #99	; 0x63
 8006154:	d036      	beq.n	80061c4 <_printf_i+0x90>
 8006156:	d80a      	bhi.n	800616e <_printf_i+0x3a>
 8006158:	2900      	cmp	r1, #0
 800615a:	f000 80b9 	beq.w	80062d0 <_printf_i+0x19c>
 800615e:	2958      	cmp	r1, #88	; 0x58
 8006160:	f000 8083 	beq.w	800626a <_printf_i+0x136>
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800616c:	e032      	b.n	80061d4 <_printf_i+0xa0>
 800616e:	2964      	cmp	r1, #100	; 0x64
 8006170:	d001      	beq.n	8006176 <_printf_i+0x42>
 8006172:	2969      	cmp	r1, #105	; 0x69
 8006174:	d1f6      	bne.n	8006164 <_printf_i+0x30>
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	0605      	lsls	r5, r0, #24
 800617c:	f103 0104 	add.w	r1, r3, #4
 8006180:	d52a      	bpl.n	80061d8 <_printf_i+0xa4>
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da03      	bge.n	8006192 <_printf_i+0x5e>
 800618a:	222d      	movs	r2, #45	; 0x2d
 800618c:	425b      	negs	r3, r3
 800618e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006192:	486f      	ldr	r0, [pc, #444]	; (8006350 <_printf_i+0x21c>)
 8006194:	220a      	movs	r2, #10
 8006196:	e039      	b.n	800620c <_printf_i+0xd8>
 8006198:	2973      	cmp	r1, #115	; 0x73
 800619a:	f000 809d 	beq.w	80062d8 <_printf_i+0x1a4>
 800619e:	d808      	bhi.n	80061b2 <_printf_i+0x7e>
 80061a0:	296f      	cmp	r1, #111	; 0x6f
 80061a2:	d020      	beq.n	80061e6 <_printf_i+0xb2>
 80061a4:	2970      	cmp	r1, #112	; 0x70
 80061a6:	d1dd      	bne.n	8006164 <_printf_i+0x30>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	f043 0320 	orr.w	r3, r3, #32
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	e003      	b.n	80061ba <_printf_i+0x86>
 80061b2:	2975      	cmp	r1, #117	; 0x75
 80061b4:	d017      	beq.n	80061e6 <_printf_i+0xb2>
 80061b6:	2978      	cmp	r1, #120	; 0x78
 80061b8:	d1d4      	bne.n	8006164 <_printf_i+0x30>
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c0:	4864      	ldr	r0, [pc, #400]	; (8006354 <_printf_i+0x220>)
 80061c2:	e055      	b.n	8006270 <_printf_i+0x13c>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1d19      	adds	r1, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6011      	str	r1, [r2, #0]
 80061cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e08c      	b.n	80062f2 <_printf_i+0x1be>
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061e0:	bf18      	it	ne
 80061e2:	b21b      	sxthne	r3, r3
 80061e4:	e7cf      	b.n	8006186 <_printf_i+0x52>
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1d18      	adds	r0, r3, #4
 80061ec:	6010      	str	r0, [r2, #0]
 80061ee:	0628      	lsls	r0, r5, #24
 80061f0:	d501      	bpl.n	80061f6 <_printf_i+0xc2>
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	e002      	b.n	80061fc <_printf_i+0xc8>
 80061f6:	0668      	lsls	r0, r5, #25
 80061f8:	d5fb      	bpl.n	80061f2 <_printf_i+0xbe>
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	4854      	ldr	r0, [pc, #336]	; (8006350 <_printf_i+0x21c>)
 80061fe:	296f      	cmp	r1, #111	; 0x6f
 8006200:	bf14      	ite	ne
 8006202:	220a      	movne	r2, #10
 8006204:	2208      	moveq	r2, #8
 8006206:	2100      	movs	r1, #0
 8006208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620c:	6865      	ldr	r5, [r4, #4]
 800620e:	60a5      	str	r5, [r4, #8]
 8006210:	2d00      	cmp	r5, #0
 8006212:	f2c0 8095 	blt.w	8006340 <_printf_i+0x20c>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	f021 0104 	bic.w	r1, r1, #4
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d13d      	bne.n	800629e <_printf_i+0x16a>
 8006222:	2d00      	cmp	r5, #0
 8006224:	f040 808e 	bne.w	8006344 <_printf_i+0x210>
 8006228:	4665      	mov	r5, ip
 800622a:	2a08      	cmp	r2, #8
 800622c:	d10b      	bne.n	8006246 <_printf_i+0x112>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d508      	bpl.n	8006246 <_printf_i+0x112>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	429a      	cmp	r2, r3
 800623a:	bfde      	ittt	le
 800623c:	2330      	movle	r3, #48	; 0x30
 800623e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006242:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006246:	ebac 0305 	sub.w	r3, ip, r5
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	f8cd 8000 	str.w	r8, [sp]
 8006250:	463b      	mov	r3, r7
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff fef6 	bl	8006048 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14d      	bne.n	80062fc <_printf_i+0x1c8>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b005      	add	sp, #20
 8006266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800626a:	4839      	ldr	r0, [pc, #228]	; (8006350 <_printf_i+0x21c>)
 800626c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	6821      	ldr	r1, [r4, #0]
 8006274:	1d1d      	adds	r5, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6015      	str	r5, [r2, #0]
 800627a:	060a      	lsls	r2, r1, #24
 800627c:	d50b      	bpl.n	8006296 <_printf_i+0x162>
 800627e:	07ca      	lsls	r2, r1, #31
 8006280:	bf44      	itt	mi
 8006282:	f041 0120 	orrmi.w	r1, r1, #32
 8006286:	6021      	strmi	r1, [r4, #0]
 8006288:	b91b      	cbnz	r3, 8006292 <_printf_i+0x15e>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	f022 0220 	bic.w	r2, r2, #32
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	2210      	movs	r2, #16
 8006294:	e7b7      	b.n	8006206 <_printf_i+0xd2>
 8006296:	064d      	lsls	r5, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b29b      	uxthmi	r3, r3
 800629c:	e7ef      	b.n	800627e <_printf_i+0x14a>
 800629e:	4665      	mov	r5, ip
 80062a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a4:	fb02 3311 	mls	r3, r2, r1, r3
 80062a8:	5cc3      	ldrb	r3, [r0, r3]
 80062aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062ae:	460b      	mov	r3, r1
 80062b0:	2900      	cmp	r1, #0
 80062b2:	d1f5      	bne.n	80062a0 <_printf_i+0x16c>
 80062b4:	e7b9      	b.n	800622a <_printf_i+0xf6>
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	6825      	ldr	r5, [r4, #0]
 80062ba:	6961      	ldr	r1, [r4, #20]
 80062bc:	1d18      	adds	r0, r3, #4
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	0628      	lsls	r0, r5, #24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	d501      	bpl.n	80062ca <_printf_i+0x196>
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <_printf_i+0x19c>
 80062ca:	066a      	lsls	r2, r5, #25
 80062cc:	d5fb      	bpl.n	80062c6 <_printf_i+0x192>
 80062ce:	8019      	strh	r1, [r3, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	4665      	mov	r5, ip
 80062d6:	e7b9      	b.n	800624c <_printf_i+0x118>
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	1d19      	adds	r1, r3, #4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	681d      	ldr	r5, [r3, #0]
 80062e0:	6862      	ldr	r2, [r4, #4]
 80062e2:	2100      	movs	r1, #0
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7f9 ff9b 	bl	8000220 <memchr>
 80062ea:	b108      	cbz	r0, 80062f0 <_printf_i+0x1bc>
 80062ec:	1b40      	subs	r0, r0, r5
 80062ee:	6060      	str	r0, [r4, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2300      	movs	r3, #0
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	e7a7      	b.n	800624c <_printf_i+0x118>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	462a      	mov	r2, r5
 8006300:	4639      	mov	r1, r7
 8006302:	4630      	mov	r0, r6
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0aa      	beq.n	8006260 <_printf_i+0x12c>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d413      	bmi.n	8006338 <_printf_i+0x204>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e7a3      	b.n	8006264 <_printf_i+0x130>
 800631c:	2301      	movs	r3, #1
 800631e:	464a      	mov	r2, r9
 8006320:	4639      	mov	r1, r7
 8006322:	4630      	mov	r0, r6
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d09a      	beq.n	8006260 <_printf_i+0x12c>
 800632a:	3501      	adds	r5, #1
 800632c:	68e3      	ldr	r3, [r4, #12]
 800632e:	9a03      	ldr	r2, [sp, #12]
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	42ab      	cmp	r3, r5
 8006334:	dcf2      	bgt.n	800631c <_printf_i+0x1e8>
 8006336:	e7eb      	b.n	8006310 <_printf_i+0x1dc>
 8006338:	2500      	movs	r5, #0
 800633a:	f104 0919 	add.w	r9, r4, #25
 800633e:	e7f5      	b.n	800632c <_printf_i+0x1f8>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ac      	bne.n	800629e <_printf_i+0x16a>
 8006344:	7803      	ldrb	r3, [r0, #0]
 8006346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634e:	e76c      	b.n	800622a <_printf_i+0xf6>
 8006350:	0800665d 	.word	0x0800665d
 8006354:	0800666e 	.word	0x0800666e

08006358 <_putc_r>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	460d      	mov	r5, r1
 800635c:	4614      	mov	r4, r2
 800635e:	4606      	mov	r6, r0
 8006360:	b118      	cbz	r0, 800636a <_putc_r+0x12>
 8006362:	6983      	ldr	r3, [r0, #24]
 8006364:	b90b      	cbnz	r3, 800636a <_putc_r+0x12>
 8006366:	f7ff fb99 	bl	8005a9c <__sinit>
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <_putc_r+0x60>)
 800636c:	429c      	cmp	r4, r3
 800636e:	d112      	bne.n	8006396 <_putc_r+0x3e>
 8006370:	6874      	ldr	r4, [r6, #4]
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	60a3      	str	r3, [r4, #8]
 800637a:	da16      	bge.n	80063aa <_putc_r+0x52>
 800637c:	69a2      	ldr	r2, [r4, #24]
 800637e:	4293      	cmp	r3, r2
 8006380:	db02      	blt.n	8006388 <_putc_r+0x30>
 8006382:	b2eb      	uxtb	r3, r5
 8006384:	2b0a      	cmp	r3, #10
 8006386:	d110      	bne.n	80063aa <_putc_r+0x52>
 8006388:	4622      	mov	r2, r4
 800638a:	4629      	mov	r1, r5
 800638c:	4630      	mov	r0, r6
 800638e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006392:	f7ff b9d3 	b.w	800573c <__swbuf_r>
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <_putc_r+0x64>)
 8006398:	429c      	cmp	r4, r3
 800639a:	d101      	bne.n	80063a0 <_putc_r+0x48>
 800639c:	68b4      	ldr	r4, [r6, #8]
 800639e:	e7e8      	b.n	8006372 <_putc_r+0x1a>
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <_putc_r+0x68>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	bf08      	it	eq
 80063a6:	68f4      	ldreq	r4, [r6, #12]
 80063a8:	e7e3      	b.n	8006372 <_putc_r+0x1a>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	6022      	str	r2, [r4, #0]
 80063b0:	701d      	strb	r5, [r3, #0]
 80063b2:	b2e8      	uxtb	r0, r5
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	bf00      	nop
 80063b8:	0800660c 	.word	0x0800660c
 80063bc:	0800662c 	.word	0x0800662c
 80063c0:	080065ec 	.word	0x080065ec

080063c4 <_sbrk_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4c06      	ldr	r4, [pc, #24]	; (80063e0 <_sbrk_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4605      	mov	r5, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f7fe fe20 	bl	8005014 <_sbrk>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_sbrk_r+0x1a>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b103      	cbz	r3, 80063de <_sbrk_r+0x1a>
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000b60 	.word	0x20000b60

080063e4 <__sread>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ec:	f000 f896 	bl	800651c <_read_r>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	bfab      	itete	ge
 80063f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063f6:	89a3      	ldrhlt	r3, [r4, #12]
 80063f8:	181b      	addge	r3, r3, r0
 80063fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063fe:	bfac      	ite	ge
 8006400:	6563      	strge	r3, [r4, #84]	; 0x54
 8006402:	81a3      	strhlt	r3, [r4, #12]
 8006404:	bd10      	pop	{r4, pc}

08006406 <__swrite>:
 8006406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640a:	461f      	mov	r7, r3
 800640c:	898b      	ldrh	r3, [r1, #12]
 800640e:	05db      	lsls	r3, r3, #23
 8006410:	4605      	mov	r5, r0
 8006412:	460c      	mov	r4, r1
 8006414:	4616      	mov	r6, r2
 8006416:	d505      	bpl.n	8006424 <__swrite+0x1e>
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	f000 f868 	bl	80064f4 <_lseek_r>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800642a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	4632      	mov	r2, r6
 8006432:	463b      	mov	r3, r7
 8006434:	4628      	mov	r0, r5
 8006436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	f000 b817 	b.w	800646c <_write_r>

0800643e <__sseek>:
 800643e:	b510      	push	{r4, lr}
 8006440:	460c      	mov	r4, r1
 8006442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006446:	f000 f855 	bl	80064f4 <_lseek_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	bf15      	itete	ne
 8006450:	6560      	strne	r0, [r4, #84]	; 0x54
 8006452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800645a:	81a3      	strheq	r3, [r4, #12]
 800645c:	bf18      	it	ne
 800645e:	81a3      	strhne	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__sclose>:
 8006462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006466:	f000 b813 	b.w	8006490 <_close_r>
	...

0800646c <_write_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4c07      	ldr	r4, [pc, #28]	; (800648c <_write_r+0x20>)
 8006470:	4605      	mov	r5, r0
 8006472:	4608      	mov	r0, r1
 8006474:	4611      	mov	r1, r2
 8006476:	2200      	movs	r2, #0
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f7fe fd85 	bl	8004f8a <_write>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_write_r+0x1e>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	b103      	cbz	r3, 800648a <_write_r+0x1e>
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20000b60 	.word	0x20000b60

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4c06      	ldr	r4, [pc, #24]	; (80064ac <_close_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4605      	mov	r5, r0
 8006498:	4608      	mov	r0, r1
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	f7fe fd86 	bl	8004fac <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000b60 	.word	0x20000b60

080064b0 <_fstat_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4c07      	ldr	r4, [pc, #28]	; (80064d0 <_fstat_r+0x20>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4605      	mov	r5, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	f7fe fd81 	bl	8004fc4 <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_fstat_r+0x1c>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_fstat_r+0x1c>
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	20000b60 	.word	0x20000b60

080064d4 <_isatty_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4c06      	ldr	r4, [pc, #24]	; (80064f0 <_isatty_r+0x1c>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4605      	mov	r5, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	f7fe fd80 	bl	8004fe4 <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_isatty_r+0x1a>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_isatty_r+0x1a>
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20000b60 	.word	0x20000b60

080064f4 <_lseek_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4c07      	ldr	r4, [pc, #28]	; (8006514 <_lseek_r+0x20>)
 80064f8:	4605      	mov	r5, r0
 80064fa:	4608      	mov	r0, r1
 80064fc:	4611      	mov	r1, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	f7fe fd79 	bl	8004ffa <_lseek>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_lseek_r+0x1e>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	b103      	cbz	r3, 8006512 <_lseek_r+0x1e>
 8006510:	602b      	str	r3, [r5, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20000b60 	.word	0x20000b60

08006518 <__malloc_lock>:
 8006518:	4770      	bx	lr

0800651a <__malloc_unlock>:
 800651a:	4770      	bx	lr

0800651c <_read_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4c07      	ldr	r4, [pc, #28]	; (800653c <_read_r+0x20>)
 8006520:	4605      	mov	r5, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fe fd10 	bl	8004f50 <_read>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_read_r+0x1e>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	b103      	cbz	r3, 800653a <_read_r+0x1e>
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000b60 	.word	0x20000b60

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
