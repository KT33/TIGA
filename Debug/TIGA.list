
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006798  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a6c  08006a6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a74  08006a74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  20000074  08006af0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08006af0  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180c7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033be  00000000  00000000  0003816b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003b530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  0003c638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025248  00000000  00000000  0003d580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010699  00000000  00000000  000627c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2e09  00000000  00000000  00072e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145c6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d74  00000000  00000000  00145ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006960 	.word	0x08006960

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006960 	.word	0x08006960

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b972 	b.w	8000f08 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	4688      	mov	r8, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14b      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	d967      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0720 	rsb	r7, r2, #32
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c62:	4095      	lsls	r5, r2
 8000c64:	ea47 0803 	orr.w	r8, r7, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c74:	fa1f fc85 	uxth.w	ip, r5
 8000c78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c80:	fb07 f10c 	mul.w	r1, r7, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8e:	f080 811b 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8118 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000c98:	3f02      	subs	r7, #2
 8000c9a:	442b      	add	r3, r5
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x290>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x290>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	442c      	add	r4, r5
 8000cc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ccc:	eba4 040c 	sub.w	r4, r4, ip
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xbe>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80eb 	beq.w	8000ec2 <__udivmoddi4+0x286>
 8000cec:	2700      	movs	r7, #0
 8000cee:	e9c6 0100 	strd	r0, r1, [r6]
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f783 	clz	r7, r3
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d147      	bne.n	8000d92 <__udivmoddi4+0x156>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd0>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2c4>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xe8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 808f 	bne.w	8000e4c <__udivmoddi4+0x210>
 8000d2e:	1b49      	subs	r1, r1, r5
 8000d30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d34:	fa1f f885 	uxth.w	r8, r5
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb08 f10c 	mul.w	r1, r8, ip
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d50:	18eb      	adds	r3, r5, r3
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	f200 80cd 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x14c>
 8000d78:	192c      	adds	r4, r5, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x14a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80b6 	bhi.w	8000ef2 <__udivmoddi4+0x2b6>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e79f      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d92:	f1c7 0c20 	rsb	ip, r7, #32
 8000d96:	40bb      	lsls	r3, r7
 8000d98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000da0:	fa01 f407 	lsl.w	r4, r1, r7
 8000da4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000db0:	4325      	orrs	r5, r4
 8000db2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db6:	0c2c      	lsrs	r4, r5, #16
 8000db8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dbc:	fa1f fa8e 	uxth.w	sl, lr
 8000dc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	fa02 f207 	lsl.w	r2, r2, r7
 8000dce:	fa00 f107 	lsl.w	r1, r0, r7
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	f080 8087 	bcs.w	8000eee <__udivmoddi4+0x2b2>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f240 8084 	bls.w	8000eee <__udivmoddi4+0x2b2>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4473      	add	r3, lr
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	b2ad      	uxth	r5, r5
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e00:	45a2      	cmp	sl, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1e 0404 	adds.w	r4, lr, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d26b      	bcs.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e0e:	45a2      	cmp	sl, r4
 8000e10:	d969      	bls.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4474      	add	r4, lr
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	eba4 040a 	sub.w	r4, r4, sl
 8000e22:	454c      	cmp	r4, r9
 8000e24:	46c2      	mov	sl, r8
 8000e26:	464b      	mov	r3, r9
 8000e28:	d354      	bcc.n	8000ed4 <__udivmoddi4+0x298>
 8000e2a:	d051      	beq.n	8000ed0 <__udivmoddi4+0x294>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d069      	beq.n	8000f04 <__udivmoddi4+0x2c8>
 8000e30:	ebb1 050a 	subs.w	r5, r1, sl
 8000e34:	eb64 0403 	sbc.w	r4, r4, r3
 8000e38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e3c:	40fd      	lsrs	r5, r7
 8000e3e:	40fc      	lsrs	r4, r7
 8000e40:	ea4c 0505 	orr.w	r5, ip, r5
 8000e44:	e9c6 5400 	strd	r5, r4, [r6]
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e747      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f703 	lsr.w	r7, r0, r3
 8000e54:	4095      	lsls	r5, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e62:	4338      	orrs	r0, r7
 8000e64:	0c01      	lsrs	r1, r0, #16
 8000e66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e6a:	fa1f f885 	uxth.w	r8, r5
 8000e6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb07 f308 	mul.w	r3, r7, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x256>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e88:	d22f      	bcs.n	8000eea <__udivmoddi4+0x2ae>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d92d      	bls.n	8000eea <__udivmoddi4+0x2ae>
 8000e8e:	3f02      	subs	r7, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	b281      	uxth	r1, r0
 8000e96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb00 f308 	mul.w	r3, r0, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x27e>
 8000eaa:	1869      	adds	r1, r5, r1
 8000eac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb0:	d217      	bcs.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d915      	bls.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4429      	add	r1, r5
 8000eba:	1ac9      	subs	r1, r1, r3
 8000ebc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ec0:	e73b      	b.n	8000d3a <__udivmoddi4+0xfe>
 8000ec2:	4637      	mov	r7, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e709      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	e6e7      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ed0:	4541      	cmp	r1, r8
 8000ed2:	d2ab      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed8:	eb69 020e 	sbc.w	r2, r9, lr
 8000edc:	3801      	subs	r0, #1
 8000ede:	4613      	mov	r3, r2
 8000ee0:	e7a4      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	e7e9      	b.n	8000eba <__udivmoddi4+0x27e>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e795      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eea:	4667      	mov	r7, ip
 8000eec:	e7d1      	b.n	8000e92 <__udivmoddi4+0x256>
 8000eee:	4681      	mov	r9, r0
 8000ef0:	e77c      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	442c      	add	r4, r5
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0x14c>
 8000ef8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000efc:	442b      	add	r3, r5
 8000efe:	e72f      	b.n	8000d60 <__udivmoddi4+0x124>
 8000f00:	4638      	mov	r0, r7
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xda>
 8000f04:	4637      	mov	r7, r6
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0xa0>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 fd29 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f004 f9f2 	bl	8005328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fd41 	bl	80019f6 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 fd09 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	200004b4 	.word	0x200004b4

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200004b4 	.word	0x200004b4

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e033      	b.n	80010b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f003 f938 	bl	80042c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fa32 	bl	80014f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0201 	orr.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	e001      	b.n	80010a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Start_DMA+0x1e>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e0b1      	b.n	800123e <HAL_ADC_Start_DMA+0x182>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d018      	beq.n	8001122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001100:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_ADC_Start_DMA+0x18c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_ADC_Start_DMA+0x190>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9a      	lsrs	r2, r3, #18
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3b01      	subs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 8085 	bne.w	800123c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001170:	d106      	bne.n	8001180 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f023 0206 	bic.w	r2, r3, #6
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
 800117e:	e002      	b.n	8001186 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_ADC_Start_DMA+0x194>)
 8001190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_ADC_Start_DMA+0x198>)
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_ADC_Start_DMA+0x19c>)
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_ADC_Start_DMA+0x1a0>)
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	334c      	adds	r3, #76	; 0x4c
 80011de:	4619      	mov	r1, r3
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f000 fcc2 	bl	8001b6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10f      	bne.n	8001214 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11c      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e013      	b.n	800123c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_ADC_Start_DMA+0x1a4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	431bde83 	.word	0x431bde83
 8001250:	40012300 	.word	0x40012300
 8001254:	080016e9 	.word	0x080016e9
 8001258:	080017a3 	.word	0x080017a3
 800125c:	080017bf 	.word	0x080017bf
 8001260:	40012000 	.word	0x40012000

08001264 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x1c>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e113      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x244>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b09      	cmp	r3, #9
 80012b6:	d925      	bls.n	8001304 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68d9      	ldr	r1, [r3, #12]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	3b1e      	subs	r3, #30
 80012ce:	2207      	movs	r2, #7
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43da      	mvns	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	400a      	ands	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d9      	ldr	r1, [r3, #12]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4403      	add	r3, r0
 80012f6:	3b1e      	subs	r3, #30
 80012f8:	409a      	lsls	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	e022      	b.n	800134a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	2207      	movs	r2, #7
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	400a      	ands	r2, r1
 8001326:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6919      	ldr	r1, [r3, #16]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	4603      	mov	r3, r0
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4403      	add	r3, r0
 8001340:	409a      	lsls	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b06      	cmp	r3, #6
 8001350:	d824      	bhi.n	800139c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	3b05      	subs	r3, #5
 8001364:	221f      	movs	r2, #31
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	400a      	ands	r2, r1
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b05      	subs	r3, #5
 800138e:	fa00 f203 	lsl.w	r2, r0, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
 800139a:	e04c      	b.n	8001436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d824      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b23      	subs	r3, #35	; 0x23
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43da      	mvns	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b23      	subs	r3, #35	; 0x23
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	e023      	b.n	8001436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b41      	subs	r3, #65	; 0x41
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b41      	subs	r3, #65	; 0x41
 800142a:	fa00 f203 	lsl.w	r2, r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_ADC_ConfigChannel+0x250>)
 8001438:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <HAL_ADC_ConfigChannel+0x254>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d10f      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d8>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b12      	cmp	r3, #18
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_ADC_ConfigChannel+0x254>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x23a>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_ADC_ConfigChannel+0x258>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x1f4>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d122      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_ADC_ConfigChannel+0x258>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d111      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_ADC_ConfigChannel+0x25c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_ADC_ConfigChannel+0x260>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9a      	lsrs	r2, r3, #18
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40012300 	.word	0x40012300
 80014e0:	40012000 	.word	0x40012000
 80014e4:	10000012 	.word	0x10000012
 80014e8:	20000008 	.word	0x20000008
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f8:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <ADC_Init+0x1f0>)
 80014fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	021a      	lsls	r2, r3, #8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800156a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <ADC_Init+0x1f4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d022      	beq.n	80015ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e00f      	b.n	80015ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0202 	bic.w	r2, r2, #2
 80015fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
 8001608:	005a      	lsls	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800162a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800163a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	3b01      	subs	r3, #1
 8001648:	035a      	lsls	r2, r3, #13
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	e007      	b.n	8001664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001662:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	3b01      	subs	r3, #1
 8001680:	051a      	lsls	r2, r3, #20
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016a6:	025a      	lsls	r2, r3, #9
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	029a      	lsls	r2, r3, #10
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	609a      	str	r2, [r3, #8]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40012300 	.word	0x40012300
 80016e4:	0f000001 	.word	0x0f000001

080016e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d13c      	bne.n	800177c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d12b      	bne.n	8001774 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d127      	bne.n	8001774 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800173c:	2b00      	cmp	r3, #0
 800173e:	d119      	bne.n	8001774 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0220 	bic.w	r2, r2, #32
 800174e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f002 fe3b 	bl	80043f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800177a:	e00e      	b.n	800179a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fd75 	bl	8001278 <HAL_ADC_ErrorCallback>
}
 800178e:	e004      	b.n	800179a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fd57 	bl	8001264 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f043 0204 	orr.w	r2, r3, #4
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff fd4a 	bl	8001278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff fadc 	bl	8000fd8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fac3 	bl	8000fd8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa77 	bl	8002008 <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa2e 	bl	8001f9c <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	e010803f 	.word	0xe010803f

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Start_IT+0x26>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e048      	b.n	8001c24 <HAL_DMA_Start_IT+0xb8>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d137      	bne.n	8001c16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f9c0 	bl	8001f40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0216 	orr.w	r2, r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0208 	orr.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e005      	b.n	8001c22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c38:	4b92      	ldr	r3, [pc, #584]	; (8001e84 <HAL_DMA_IRQHandler+0x258>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a92      	ldr	r2, [pc, #584]	; (8001e88 <HAL_DMA_IRQHandler+0x25c>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2208      	movs	r2, #8
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2210      	movs	r2, #16
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d043      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03c      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2210      	movs	r2, #16
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d024      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	e01f      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e016      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0208 	bic.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2220      	movs	r2, #32
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808e 	beq.w	8001eca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8086 	beq.w	8001eca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d136      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x1da>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d07d      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
        }
        return;
 8001e42:	e078      	b.n	8001f36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01c      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d030      	beq.n	8001eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
 8001e70:	e02b      	b.n	8001eca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d027      	beq.n	8001eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
 8001e82:	e022      	b.n	8001eca <HAL_DMA_IRQHandler+0x29e>
 8001e84:	20000008 	.word	0x20000008
 8001e88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0210 	bic.w	r2, r2, #16
 8001ea8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d032      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d022      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d307      	bcc.n	8001f12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f2      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x2ca>
 8001f10:	e000      	b.n	8001f14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e000      	b.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f36:	bf00      	nop
    }
  }
}
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop

08001f40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d108      	bne.n	8001f80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f7e:	e007      	b.n	8001f90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	3b10      	subs	r3, #16
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <DMA_CalcBaseAndBitshift+0x64>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fb6:	4a13      	ldr	r2, [pc, #76]	; (8002004 <DMA_CalcBaseAndBitshift+0x68>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d909      	bls.n	8001fde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58
 8001fdc:	e007      	b.n	8001fee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	aaaaaaab 	.word	0xaaaaaaab
 8002004:	080069bc 	.word	0x080069bc

08002008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d855      	bhi.n	80020d4 <DMA_CheckFifoParam+0xcc>
 8002028:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <DMA_CheckFifoParam+0x28>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002041 	.word	0x08002041
 8002034:	08002053 	.word	0x08002053
 8002038:	08002041 	.word	0x08002041
 800203c:	080020d5 	.word	0x080020d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d045      	beq.n	80020d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002050:	e042      	b.n	80020d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800205a:	d13f      	bne.n	80020dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002060:	e03c      	b.n	80020dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206a:	d121      	bne.n	80020b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d836      	bhi.n	80020e0 <DMA_CheckFifoParam+0xd8>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <DMA_CheckFifoParam+0x70>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	08002089 	.word	0x08002089
 800207c:	0800208f 	.word	0x0800208f
 8002080:	08002089 	.word	0x08002089
 8002084:	080020a1 	.word	0x080020a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      break;
 800208c:	e02f      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209e:	e021      	b.n	80020e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a8:	d11e      	bne.n	80020e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ae:	e01b      	b.n	80020e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d902      	bls.n	80020bc <DMA_CheckFifoParam+0xb4>
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d003      	beq.n	80020c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020ba:	e018      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e015      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00e      	beq.n	80020ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
      break;
 80020d2:	e00b      	b.n	80020ec <DMA_CheckFifoParam+0xe4>
      break;
 80020d4:	bf00      	nop
 80020d6:	e00a      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020d8:	bf00      	nop
 80020da:	e008      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020dc:	bf00      	nop
 80020de:	e006      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020e0:	bf00      	nop
 80020e2:	e004      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;   
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020ec:	bf00      	nop
    }
  } 
  
  return status; 
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e165      	b.n	80023e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 8154 	bne.w	80023de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x4a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d123      	bne.n	800218e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	69b9      	ldr	r1, [r7, #24]
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00b      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ae 	beq.w	80023de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_GPIO_Init+0x300>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_GPIO_Init+0x304>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x21a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_GPIO_Init+0x308>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x216>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_GPIO_Init+0x30c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x212>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	; (800240c <HAL_GPIO_Init+0x310>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_GPIO_Init+0x314>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x20a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a49      	ldr	r2, [pc, #292]	; (8002414 <HAL_GPIO_Init+0x318>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x206>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a48      	ldr	r2, [pc, #288]	; (8002418 <HAL_GPIO_Init+0x31c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x202>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 80022fe:	2307      	movs	r3, #7
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4934      	ldr	r1, [pc, #208]	; (80023fc <HAL_GPIO_Init+0x300>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_GPIO_Init+0x320>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235a:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_GPIO_Init+0x320>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_GPIO_Init+0x320>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <HAL_GPIO_Init+0x320>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_GPIO_Init+0x320>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_GPIO_Init+0x320>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_GPIO_Init+0x320>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_GPIO_Init+0x320>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae96 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	3724      	adds	r7, #36	; 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40021400 	.word	0x40021400
 8002418:	40021800 	.word	0x40021800
 800241c:	40013c00 	.word	0x40013c00

08002420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e001      	b.n	8002442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	401a      	ands	r2, r3
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	429a      	cmp	r2, r3
 800249a:	d104      	bne.n	80024a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	041a      	lsls	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0ca      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d90c      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b6      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494c      	ldr	r1, [pc, #304]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d044      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e065      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4933      	ldr	r1, [pc, #204]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd16 	bl	8000fd8 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fd12 	bl	8000fd8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e04d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d20c      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e030      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4915      	ldr	r1, [pc, #84]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490d      	ldr	r1, [pc, #52]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f81d 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002642:	4601      	mov	r1, r0
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	5cd3      	ldrb	r3, [r2, r3]
 8002652:	fa21 f303 	lsr.w	r3, r1, r3
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fc78 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	080069c4 	.word	0x080069c4
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d007      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x32>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d008      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x38>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80b4 	bne.w	8002810 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026aa:	60bb      	str	r3, [r7, #8]
       break;
 80026ac:	e0b3      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026b0:	60bb      	str	r3, [r7, #8]
      break;
 80026b2:	e0b0      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026be:	4b58      	ldr	r3, [pc, #352]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04a      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ca:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	ea03 0501 	and.w	r5, r3, r1
 80026e0:	ea04 0602 	and.w	r6, r4, r2
 80026e4:	4629      	mov	r1, r5
 80026e6:	4632      	mov	r2, r6
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	0154      	lsls	r4, r2, #5
 80026f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026f6:	014b      	lsls	r3, r1, #5
 80026f8:	4619      	mov	r1, r3
 80026fa:	4622      	mov	r2, r4
 80026fc:	1b49      	subs	r1, r1, r5
 80026fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	f04f 0400 	mov.w	r4, #0
 800270a:	0194      	lsls	r4, r2, #6
 800270c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002710:	018b      	lsls	r3, r1, #6
 8002712:	1a5b      	subs	r3, r3, r1
 8002714:	eb64 0402 	sbc.w	r4, r4, r2
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	00e2      	lsls	r2, r4, #3
 8002722:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002726:	00d9      	lsls	r1, r3, #3
 8002728:	460b      	mov	r3, r1
 800272a:	4614      	mov	r4, r2
 800272c:	195b      	adds	r3, r3, r5
 800272e:	eb44 0406 	adc.w	r4, r4, r6
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	02a2      	lsls	r2, r4, #10
 800273c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002740:	0299      	lsls	r1, r3, #10
 8002742:	460b      	mov	r3, r1
 8002744:	4614      	mov	r4, r2
 8002746:	4618      	mov	r0, r3
 8002748:	4621      	mov	r1, r4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f04f 0400 	mov.w	r4, #0
 8002750:	461a      	mov	r2, r3
 8002752:	4623      	mov	r3, r4
 8002754:	f7fe fa5a 	bl	8000c0c <__aeabi_uldivmod>
 8002758:	4603      	mov	r3, r0
 800275a:	460c      	mov	r4, r1
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e049      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	f04f 0400 	mov.w	r4, #0
 800276a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	ea03 0501 	and.w	r5, r3, r1
 8002776:	ea04 0602 	and.w	r6, r4, r2
 800277a:	4629      	mov	r1, r5
 800277c:	4632      	mov	r2, r6
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	0154      	lsls	r4, r2, #5
 8002788:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800278c:	014b      	lsls	r3, r1, #5
 800278e:	4619      	mov	r1, r3
 8002790:	4622      	mov	r2, r4
 8002792:	1b49      	subs	r1, r1, r5
 8002794:	eb62 0206 	sbc.w	r2, r2, r6
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	0194      	lsls	r4, r2, #6
 80027a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	1a5b      	subs	r3, r3, r1
 80027aa:	eb64 0402 	sbc.w	r4, r4, r2
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027bc:	00d9      	lsls	r1, r3, #3
 80027be:	460b      	mov	r3, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	195b      	adds	r3, r3, r5
 80027c4:	eb44 0406 	adc.w	r4, r4, r6
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	02a2      	lsls	r2, r4, #10
 80027d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027d6:	0299      	lsls	r1, r3, #10
 80027d8:	460b      	mov	r3, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	4621      	mov	r1, r4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f04f 0400 	mov.w	r4, #0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	f7fe fa0f 	bl	8000c0c <__aeabi_uldivmod>
 80027ee:	4603      	mov	r3, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	60bb      	str	r3, [r7, #8]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002812:	60bb      	str	r3, [r7, #8]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	68bb      	ldr	r3, [r7, #8]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400

08002828 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d075      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002840:	4ba2      	ldr	r3, [pc, #648]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00c      	beq.n	8002866 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284c:	4b9f      	ldr	r3, [pc, #636]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002854:	2b08      	cmp	r3, #8
 8002856:	d112      	bne.n	800287e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002858:	4b9c      	ldr	r3, [pc, #624]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b99      	ldr	r3, [pc, #612]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d05b      	beq.n	800292a <HAL_RCC_OscConfig+0x102>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d157      	bne.n	800292a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e20b      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x6e>
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a8f      	ldr	r2, [pc, #572]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e01d      	b.n	80028d2 <HAL_RCC_OscConfig+0xaa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289e:	d10c      	bne.n	80028ba <HAL_RCC_OscConfig+0x92>
 80028a0:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a89      	ldr	r2, [pc, #548]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b87      	ldr	r3, [pc, #540]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a86      	ldr	r2, [pc, #536]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e00b      	b.n	80028d2 <HAL_RCC_OscConfig+0xaa>
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a83      	ldr	r2, [pc, #524]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d013      	beq.n	8002902 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fb7d 	bl	8000fd8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e2:	f7fe fb79 	bl	8000fd8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1d0      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0xba>
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fb69 	bl	8000fd8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290a:	f7fe fb65 	bl	8000fd8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	; 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1bc      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291c:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0xe2>
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d063      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002944:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800294c:	2b08      	cmp	r3, #8
 800294e:	d11c      	bne.n	800298a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002950:	4b5e      	ldr	r3, [pc, #376]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295c:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_OscConfig+0x14c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e190      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4952      	ldr	r1, [pc, #328]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002988:	e03a      	b.n	8002a00 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002992:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <HAL_RCC_OscConfig+0x2a8>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fb1e 	bl	8000fd8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe fb1a 	bl	8000fd8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e171      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b43      	ldr	r3, [pc, #268]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	493f      	ldr	r1, [pc, #252]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
 80029d2:	e015      	b.n	8002a00 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <HAL_RCC_OscConfig+0x2a8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fafd 	bl	8000fd8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe faf9 	bl	8000fd8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d030      	beq.n	8002a6e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d016      	beq.n	8002a42 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fadd 	bl	8000fd8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fad9 	bl	8000fd8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e130      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1fa>
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7fe fac6 	bl	8000fd8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fe fac2 	bl	8000fd8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e119      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 809f 	beq.w	8002bba <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10f      	bne.n	8002aac <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x2a4>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_OscConfig+0x2b0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d120      	bne.n	8002afa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_RCC_OscConfig+0x2b0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_RCC_OscConfig+0x2b0>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fa88 	bl	8000fd8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	e010      	b.n	8002aee <HAL_RCC_OscConfig+0x2c6>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
 8002ad8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fa7c 	bl	8000fd8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0d3      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2e8>
 8002b02:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e01c      	b.n	8002b4a <HAL_RCC_OscConfig+0x322>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x30a>
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x322>
 8002b32:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fa41 	bl	8000fd8 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fa3d 	bl	8000fd8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e092      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RCC_OscConfig+0x332>
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fa2b 	bl	8000fd8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fa27 	bl	8000fd8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e07c      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d068      	beq.n	8002c94 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d060      	beq.n	8002c90 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d145      	bne.n	8002c62 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <HAL_RCC_OscConfig+0x480>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f9fc 	bl	8000fd8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f9f8 	bl	8000fd8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	491d      	ldr	r1, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_RCC_OscConfig+0x480>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f9cd 	bl	8000fd8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe f9c9 	bl	8000fd8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e020      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x41a>
 8002c60:	e018      	b.n	8002c94 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_RCC_OscConfig+0x480>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f9b6 	bl	8000fd8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe f9b2 	bl	8000fd8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e009      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x47c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x448>
 8002c8e:	e001      	b.n	8002c94 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	42470060 	.word	0x42470060

08002cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e056      	b.n	8002d6c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f002 fa97 	bl	800520c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0104 	and.w	r1, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x26>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e18a      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x33c>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da2:	f7fe f919 	bl	8000fd8 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d00f      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x70>
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dca:	d107      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x68>
 8002dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d003      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de2:	e15b      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x82>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x82>
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dfc:	e14e      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	887a      	ldrh	r2, [r7, #2]
 8002e3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d007      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d178      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x10a>
 8002e78:	8b7b      	ldrh	r3, [r7, #26]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d166      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea2:	e053      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d11b      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x176>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d016      	beq.n	8002eea <HAL_SPI_TransmitReceive+0x176>
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d113      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d119      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x1b8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d014      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f2c:	f7fe f854 	bl	8000fd8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d807      	bhi.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d003      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f4a:	e0a7      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1a6      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x130>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1a1      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x130>
 8002f60:	e07c      	b.n	800305c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x1fc>
 8002f6a:	8b7b      	ldrh	r3, [r7, #26]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d16b      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f96:	e057      	b.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d114      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d119      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x2ae>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d014      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301e:	2301      	movs	r3, #1
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003022:	f7fd ffd9 	bl	8000fd8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_TransmitReceive+0x2c6>
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d102      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x2cc>
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003046:	e029      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1a2      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x224>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d19d      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f893 	bl	800318c <SPI_EndRxTxTransaction>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003078:	e010      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	e000      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800309a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	; 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c8:	e04c      	b.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d048      	beq.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80030d2:	f7fd ff81 	bl	8000fd8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d902      	bls.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d13d      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003100:	d111      	bne.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d004      	beq.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d107      	bne.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	d10f      	bne.n	8003150 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800314e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e00f      	b.n	8003184 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d1a3      	bne.n	80030ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <SPI_EndRxTxTransaction+0x7c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <SPI_EndRxTxTransaction+0x80>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0d5b      	lsrs	r3, r3, #21
 80031a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b6:	d112      	bne.n	80031de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2200      	movs	r2, #0
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff ff78 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e00f      	b.n	80031fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b80      	cmp	r3, #128	; 0x80
 80031f6:	d0f2      	beq.n	80031de <SPI_EndRxTxTransaction+0x52>
 80031f8:	e000      	b.n	80031fc <SPI_EndRxTxTransaction+0x70>
        break;
 80031fa:	bf00      	nop
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000008 	.word	0x20000008
 800320c:	165e9f81 	.word	0x165e9f81

08003210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e01d      	b.n	800325e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f002 fad0 	bl	80057dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 faee 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01d      	b.n	80032fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f002 fa4b 	bl	8005770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f000 fa9f 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2201      	movs	r2, #1
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fcda 	bl	8003cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_TIM_PWM_Start+0x74>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIM_PWM_Start+0x2c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_TIM_PWM_Start+0x78>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_TIM_PWM_Start+0x30>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_TIM_PWM_Start+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b06      	cmp	r3, #6
 800335a:	d007      	beq.n	800336c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40010400 	.word	0x40010400

08003380 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc9c 	bl	8003cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_TIM_PWM_Stop+0xa8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_PWM_Stop+0x2c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a21      	ldr	r2, [pc, #132]	; (800342c <HAL_TIM_PWM_Stop+0xac>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_PWM_Stop+0x30>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_TIM_PWM_Stop+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d017      	beq.n	80033e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <HAL_TIM_PWM_Stop+0x66>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	f240 4344 	movw	r3, #1092	; 0x444
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_TIM_PWM_Stop+0x66>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <HAL_TIM_PWM_Stop+0x96>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	f240 4344 	movw	r3, #1092	; 0x444
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_TIM_PWM_Stop+0x96>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010000 	.word	0x40010000
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0202 	mvn.w	r2, #2
 800345c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9be 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9b0 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9c1 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d122      	bne.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0204 	mvn.w	r2, #4
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f994 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f986 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f997 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0208 	mvn.w	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f96a 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f95c 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f96d 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b10      	cmp	r3, #16
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0210 	mvn.w	r2, #16
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2208      	movs	r2, #8
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f940 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f932 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f943 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0201 	mvn.w	r2, #1
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f90c 	bl	80037cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fbec 	bl	8003db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f908 	bl	800381c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0220 	mvn.w	r2, #32
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fbb6 	bl	8003da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003656:	2302      	movs	r3, #2
 8003658:	e0b4      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	f200 809f 	bhi.w	80037b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080037b1 	.word	0x080037b1
 8003680:	080037b1 	.word	0x080037b1
 8003684:	080037b1 	.word	0x080037b1
 8003688:	080036ed 	.word	0x080036ed
 800368c:	080037b1 	.word	0x080037b1
 8003690:	080037b1 	.word	0x080037b1
 8003694:	080037b1 	.word	0x080037b1
 8003698:	0800372f 	.word	0x0800372f
 800369c:	080037b1 	.word	0x080037b1
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	080037b1 	.word	0x080037b1
 80036a8:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f95c 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
      break;
 80036ea:	e062      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f9ac 	bl	8003a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
      break;
 800372c:	e041      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa01 	bl	8003b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0208 	orr.w	r2, r2, #8
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
      break;
 800376c:	e021      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fa55 	bl	8003c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <TIM_Base_SetConfig+0x114>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d00f      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3d      	ldr	r2, [pc, #244]	; (8003948 <TIM_Base_SetConfig+0x118>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3c      	ldr	r2, [pc, #240]	; (800394c <TIM_Base_SetConfig+0x11c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <TIM_Base_SetConfig+0x120>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <TIM_Base_SetConfig+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2f      	ldr	r2, [pc, #188]	; (8003944 <TIM_Base_SetConfig+0x114>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d027      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <TIM_Base_SetConfig+0x118>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d023      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <TIM_Base_SetConfig+0x11c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <TIM_Base_SetConfig+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <TIM_Base_SetConfig+0x124>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d017      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <TIM_Base_SetConfig+0x128>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <TIM_Base_SetConfig+0x12c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a26      	ldr	r2, [pc, #152]	; (8003960 <TIM_Base_SetConfig+0x130>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <TIM_Base_SetConfig+0x134>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <TIM_Base_SetConfig+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a23      	ldr	r2, [pc, #140]	; (800396c <TIM_Base_SetConfig+0x13c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <TIM_Base_SetConfig+0x114>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0xf8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	40001800 	.word	0x40001800
 8003968:	40001c00 	.word	0x40001c00
 800396c:	40002000 	.word	0x40002000

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC1_SetConfig+0x64>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_OC1_SetConfig+0x8e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40010400 	.word	0x40010400

08003a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0210 	bic.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0320 	bic.w	r3, r3, #32
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC2_SetConfig+0x68>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10d      	bne.n	8003ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC2_SetConfig+0x94>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d113      	bne.n	8003b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400

08003b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC3_SetConfig+0x66>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_OC3_SetConfig+0x92>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d113      	bne.n	8003bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40010400 	.word	0x40010400

08003c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	031b      	lsls	r3, r3, #12
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <TIM_OC4_SetConfig+0xa4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC4_SetConfig+0x68>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <TIM_OC4_SetConfig+0xa8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d109      	bne.n	8003ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e032      	b.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <_DoInit+0x8c>)
 8003dd4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2203      	movs	r2, #3
 8003de0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <_DoInit+0x90>)
 8003de6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <_DoInit+0x94>)
 8003dec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <_DoInit+0x90>)
 8003e0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <_DoInit+0x98>)
 8003e12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2210      	movs	r2, #16
 8003e18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3307      	adds	r3, #7
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <_DoInit+0x9c>)
 8003e32:	6810      	ldr	r0, [r2, #0]
 8003e34:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <_DoInit+0xa0>)
 8003e3a:	6810      	ldr	r0, [r2, #0]
 8003e3c:	6018      	str	r0, [r3, #0]
 8003e3e:	8891      	ldrh	r1, [r2, #4]
 8003e40:	7992      	ldrb	r2, [r2, #6]
 8003e42:	8099      	strh	r1, [r3, #4]
 8003e44:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	719a      	strb	r2, [r3, #6]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	200004b8 	.word	0x200004b8
 8003e5c:	08006978 	.word	0x08006978
 8003e60:	20000090 	.word	0x20000090
 8003e64:	20000490 	.word	0x20000490
 8003e68:	08006984 	.word	0x08006984
 8003e6c:	08006988 	.word	0x08006988

08003e70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d905      	bls.n	8003ea0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e007      	b.n	8003eb0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	6939      	ldr	r1, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	1acb      	subs	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b01      	subs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf28      	it	cs
 8003ebe:	4613      	movcs	r3, r2
 8003ec0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf28      	it	cs
 8003eca:	4613      	movcs	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fde4 	bl	8005aa8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d101      	bne.n	8003f0e <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1b5      	bne.n	8003e86 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d90e      	bls.n	8003f66 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fda7 	bl	8005aa8 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f64:	e01a      	b.n	8003f9c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fd96 	bl	8005aa8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6858      	ldr	r0, [r3, #4]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f001 fd89 	bl	8005aa8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	60da      	str	r2, [r3, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d808      	bhi.n	8003fd2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e004      	b.n	8003fdc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003fdc:	697b      	ldr	r3, [r7, #20]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <SEGGER_RTT_WriteNoLock+0x98>)
 800400a:	4413      	add	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d017      	beq.n	8004046 <SEGGER_RTT_WriteNoLock+0x5a>
 8004016:	2b01      	cmp	r3, #1
 8004018:	d302      	bcc.n	8004020 <SEGGER_RTT_WriteNoLock+0x34>
 800401a:	2b02      	cmp	r3, #2
 800401c:	d023      	beq.n	8004066 <SEGGER_RTT_WriteNoLock+0x7a>
 800401e:	e029      	b.n	8004074 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004020:	6978      	ldr	r0, [r7, #20]
 8004022:	f7ff ffbf 	bl	8003fa4 <_GetAvailWriteSpace>
 8004026:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d202      	bcs.n	8004036 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004034:	e021      	b.n	800407a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f7ff ff70 	bl	8003f24 <_WriteNoCheck>
    break;
 8004044:	e019      	b.n	800407a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ffac 	bl	8003fa4 <_GetAvailWriteSpace>
 800404c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4293      	cmp	r3, r2
 8004054:	bf28      	it	cs
 8004056:	4613      	movcs	r3, r2
 8004058:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7ff ff60 	bl	8003f24 <_WriteNoCheck>
    break;
 8004064:	e009      	b.n	800407a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff00 	bl	8003e70 <_WriteBlocking>
 8004070:	61f8      	str	r0, [r7, #28]
    break;
 8004072:	e002      	b.n	800407a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
    break;
 8004078:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200004b8 	.word	0x200004b8

08004088 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <SEGGER_RTT_Write+0x44>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <SEGGER_RTT_Write+0x18>
 800409c:	f7ff fe96 	bl	8003dcc <_DoInit>
  SEGGER_RTT_LOCK();
 80040a0:	f3ef 8311 	mrs	r3, BASEPRI
 80040a4:	f04f 0120 	mov.w	r1, #32
 80040a8:	f381 8811 	msr	BASEPRI, r1
 80040ac:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ff9a 	bl	8003fec <SEGGER_RTT_WriteNoLock>
 80040b8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80040c0:	693b      	ldr	r3, [r7, #16]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200004b8 	.word	0x200004b8

080040d0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80040de:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80040e6:	f7ff fe71 	bl	8003dcc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d24c      	bcs.n	8004190 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80040f6:	f3ef 8311 	mrs	r3, BASEPRI
 80040fa:	f04f 0120 	mov.w	r1, #32
 80040fe:	f381 8811 	msr	BASEPRI, r1
 8004102:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d032      	beq.n	8004170 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800410a:	4925      	ldr	r1, [pc, #148]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800411e:	4920      	ldr	r1, [pc, #128]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	3304      	adds	r3, #4
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004134:	491a      	ldr	r1, [pc, #104]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	3320      	adds	r3, #32
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004148:	4915      	ldr	r1, [pc, #84]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	3328      	adds	r3, #40	; 0x28
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800415c:	4910      	ldr	r1, [pc, #64]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004170:	490b      	ldr	r1, [pc, #44]	; (80041a0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	332c      	adds	r3, #44	; 0x2c
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e002      	b.n	8004196 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004196:	697b      	ldr	r3, [r7, #20]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200004b8 	.word	0x200004b8

080041a4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  _DoInit();
 80041a8:	f7ff fe10 	bl	8003dcc <_DoInit>
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041c4:	4a3e      	ldr	r2, [pc, #248]	; (80042c0 <MX_ADC1_Init+0x110>)
 80041c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80041c8:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041d0:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041d8:	2201      	movs	r2, #1
 80041da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041dc:	4b37      	ldr	r3, [pc, #220]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041f2:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <MX_ADC1_Init+0x114>)
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <MX_ADC1_Init+0x10c>)
 80041fe:	2205      	movs	r2, #5
 8004200:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <MX_ADC1_Init+0x10c>)
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800420a:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <MX_ADC1_Init+0x10c>)
 800420c:	2201      	movs	r2, #1
 800420e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004210:	482a      	ldr	r0, [pc, #168]	; (80042bc <MX_ADC1_Init+0x10c>)
 8004212:	f7fc ff0f 	bl	8001034 <HAL_ADC_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800421c:	f000 fdbc 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004220:	2309      	movs	r3, #9
 8004222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004224:	2301      	movs	r3, #1
 8004226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004228:	2302      	movs	r3, #2
 800422a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422c:	463b      	mov	r3, r7
 800422e:	4619      	mov	r1, r3
 8004230:	4822      	ldr	r0, [pc, #136]	; (80042bc <MX_ADC1_Init+0x10c>)
 8004232:	f7fd f82b 	bl	800128c <HAL_ADC_ConfigChannel>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800423c:	f000 fdac 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004244:	2302      	movs	r3, #2
 8004246:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004248:	2301      	movs	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424c:	463b      	mov	r3, r7
 800424e:	4619      	mov	r1, r3
 8004250:	481a      	ldr	r0, [pc, #104]	; (80042bc <MX_ADC1_Init+0x10c>)
 8004252:	f7fd f81b 	bl	800128c <HAL_ADC_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800425c:	f000 fd9c 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004260:	2301      	movs	r3, #1
 8004262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004264:	2303      	movs	r3, #3
 8004266:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004268:	463b      	mov	r3, r7
 800426a:	4619      	mov	r1, r3
 800426c:	4813      	ldr	r0, [pc, #76]	; (80042bc <MX_ADC1_Init+0x10c>)
 800426e:	f7fd f80d 	bl	800128c <HAL_ADC_ConfigChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004278:	f000 fd8e 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800427c:	2302      	movs	r3, #2
 800427e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004280:	2304      	movs	r3, #4
 8004282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004284:	463b      	mov	r3, r7
 8004286:	4619      	mov	r1, r3
 8004288:	480c      	ldr	r0, [pc, #48]	; (80042bc <MX_ADC1_Init+0x10c>)
 800428a:	f7fc ffff 	bl	800128c <HAL_ADC_ConfigChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8004294:	f000 fd80 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004298:	2303      	movs	r3, #3
 800429a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800429c:	2305      	movs	r3, #5
 800429e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042a0:	463b      	mov	r3, r7
 80042a2:	4619      	mov	r1, r3
 80042a4:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_ADC1_Init+0x10c>)
 80042a6:	f7fc fff1 	bl	800128c <HAL_ADC_ConfigChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80042b0:	f000 fd72 	bl	8004d98 <Error_Handler>
  }

}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000560 	.word	0x20000560
 80042c0:	40012000 	.word	0x40012000
 80042c4:	0f000001 	.word	0x0f000001

080042c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <HAL_ADC_MspInit+0x10c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d170      	bne.n	80043cc <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f8:	6453      	str	r3, [r2, #68]	; 0x44
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6313      	str	r3, [r2, #48]	; 0x30
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_ADC_MspInit+0x110>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 800433e:	230f      	movs	r3, #15
 8004340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004342:	2303      	movs	r3, #3
 8004344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	4822      	ldr	r0, [pc, #136]	; (80043dc <HAL_ADC_MspInit+0x114>)
 8004352:	f7fd fed3 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8004356:	2302      	movs	r3, #2
 8004358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800435a:	2303      	movs	r3, #3
 800435c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	4619      	mov	r1, r3
 8004368:	481d      	ldr	r0, [pc, #116]	; (80043e0 <HAL_ADC_MspInit+0x118>)
 800436a:	f7fd fec7 	bl	80020fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <HAL_ADC_MspInit+0x120>)
 8004372:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004376:	2200      	movs	r2, #0
 8004378:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004380:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800438c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004394:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 8004398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800439e:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043b0:	480c      	ldr	r0, [pc, #48]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043b2:	f7fd fb2d 	bl	8001a10 <HAL_DMA_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80043bc:	f000 fcec 	bl	8004d98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <HAL_ADC_MspInit+0x11c>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80043cc:	bf00      	nop
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40012000 	.word	0x40012000
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	200005a8 	.word	0x200005a8
 80043e8:	40026410 	.word	0x40026410
 80043ec:	00000000 	.word	0x00000000

080043f0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
//	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
//			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);

//	printf("%d\n", g_ADCBuffer[0]);
	Batt = (float) g_ADCBuffer[0] / 4095 * 3.3 * 2;
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_ADC_ConvCpltCallback+0x60>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004404:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004454 <HAL_ADC_ConvCpltCallback+0x64>
 8004408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800440c:	ee16 0a90 	vmov	r0, s13
 8004410:	f7fc f8ba 	bl	8000588 <__aeabi_f2d>
 8004414:	a30c      	add	r3, pc, #48	; (adr r3, 8004448 <HAL_ADC_ConvCpltCallback+0x58>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fc f90d 	bl	8000638 <__aeabi_dmul>
 800441e:	4603      	mov	r3, r0
 8004420:	460c      	mov	r4, r1
 8004422:	4618      	mov	r0, r3
 8004424:	4621      	mov	r1, r4
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	f7fb ff4f 	bl	80002cc <__adddf3>
 800442e:	4603      	mov	r3, r0
 8004430:	460c      	mov	r4, r1
 8004432:	4618      	mov	r0, r3
 8004434:	4621      	mov	r1, r4
 8004436:	f7fc fb99 	bl	8000b6c <__aeabi_d2f>
 800443a:	4602      	mov	r2, r0
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_ADC_ConvCpltCallback+0x68>)
 800443e:	601a      	str	r2, [r3, #0]
//	printf("Batt=%.4f\n", Batt);
//	printf("\n");

}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bd90      	pop	{r4, r7, pc}
 8004448:	66666666 	.word	0x66666666
 800444c:	400a6666 	.word	0x400a6666
 8004450:	20000b1c 	.word	0x20000b1c
 8004454:	457ff000 	.word	0x457ff000
 8004458:	20000844 	.word	0x20000844

0800445c <calculation_counter>:
 */

#include "buzzer.h"
#include "variable.h"

uint16_t calculation_counter(uint16_t Hz) { //タイマピリオドの計算
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	80fb      	strh	r3, [r7, #6]
	uint16_t count; //設定する値
	if (Hz == 0) {
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <calculation_counter+0x16>
		count = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	81fb      	strh	r3, [r7, #14]
 8004470:	e006      	b.n	8004480 <calculation_counter+0x24>
	} else {
		count = (1000000 / Hz - 1);
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	4a06      	ldr	r2, [pc, #24]	; (8004490 <calculation_counter+0x34>)
 8004476:	fb92 f3f3 	sdiv	r3, r2, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	81fb      	strh	r3, [r7, #14]
	}
	return count;
 8004480:	89fb      	ldrh	r3, [r7, #14]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	000f4240 	.word	0x000f4240

08004494 <set_buzzer>:

void set_buzzer(uint8_t index, uint16_t Hz, uint16_t ms) {
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
 800449e:	460b      	mov	r3, r1
 80044a0:	80bb      	strh	r3, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	807b      	strh	r3, [r7, #2]
	buzzer_index = 0;
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <set_buzzer+0x54>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
	buzzer_count = 0;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <set_buzzer+0x58>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	801a      	strh	r2, [r3, #0]
	buzzer[index].ms = ms;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <set_buzzer+0x5c>)
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	805a      	strh	r2, [r3, #2]
	buzzer[index].autoreload = calculation_counter(Hz);
 80044be:	79fc      	ldrb	r4, [r7, #7]
 80044c0:	88bb      	ldrh	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ffca 	bl	800445c <calculation_counter>
 80044c8:	4603      	mov	r3, r0
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <set_buzzer+0x5c>)
 80044ce:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	buzzer[index + 1].autoreload = 0xffff;
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	3301      	adds	r3, #1
 80044d6:	4a06      	ldr	r2, [pc, #24]	; (80044f0 <set_buzzer+0x5c>)
 80044d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044dc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}
 80044e8:	200004a7 	.word	0x200004a7
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	20000a4c 	.word	0x20000a4c

080044f4 <set_buzzer_mode>:

void set_buzzer_mode(uint8_t mode) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
	buzzer_flag = 0;
 80044fe:	4b63      	ldr	r3, [pc, #396]	; (800468c <set_buzzer_mode+0x198>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
	if (mode == 0) {
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <set_buzzer_mode+0x3e>
		set_buzzer(0, C_4, 600);
 800450a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800450e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004512:	2000      	movs	r0, #0
 8004514:	f7ff ffbe 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 8004518:	22c8      	movs	r2, #200	; 0xc8
 800451a:	2100      	movs	r1, #0
 800451c:	2001      	movs	r0, #1
 800451e:	f7ff ffb9 	bl	8004494 <set_buzzer>
		set_buzzer(2, C_4, 600);
 8004522:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004526:	f44f 7183 	mov.w	r1, #262	; 0x106
 800452a:	2002      	movs	r0, #2
 800452c:	f7ff ffb2 	bl	8004494 <set_buzzer>
 8004530:	e0a4      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 1) {
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d118      	bne.n	800456a <set_buzzer_mode+0x76>
		set_buzzer(0, 0, 200);
 8004538:	22c8      	movs	r2, #200	; 0xc8
 800453a:	2100      	movs	r1, #0
 800453c:	2000      	movs	r0, #0
 800453e:	f7ff ffa9 	bl	8004494 <set_buzzer>
		set_buzzer(1, D_4, 600);
 8004542:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004546:	f44f 7193 	mov.w	r1, #294	; 0x126
 800454a:	2001      	movs	r0, #1
 800454c:	f7ff ffa2 	bl	8004494 <set_buzzer>
		set_buzzer(2, 0, 200);
 8004550:	22c8      	movs	r2, #200	; 0xc8
 8004552:	2100      	movs	r1, #0
 8004554:	2002      	movs	r0, #2
 8004556:	f7ff ff9d 	bl	8004494 <set_buzzer>
		set_buzzer(3, D_4, 600);
 800455a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800455e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004562:	2003      	movs	r0, #3
 8004564:	f7ff ff96 	bl	8004494 <set_buzzer>
 8004568:	e088      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 2) {
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d113      	bne.n	8004598 <set_buzzer_mode+0xa4>
		set_buzzer(0, E_4, 600);
 8004570:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004574:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004578:	2000      	movs	r0, #0
 800457a:	f7ff ff8b 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 800457e:	22c8      	movs	r2, #200	; 0xc8
 8004580:	2100      	movs	r1, #0
 8004582:	2001      	movs	r0, #1
 8004584:	f7ff ff86 	bl	8004494 <set_buzzer>
		set_buzzer(2, E_4, 600);
 8004588:	f44f 7216 	mov.w	r2, #600	; 0x258
 800458c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004590:	2002      	movs	r0, #2
 8004592:	f7ff ff7f 	bl	8004494 <set_buzzer>
 8004596:	e071      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 3) {
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d113      	bne.n	80045c6 <set_buzzer_mode+0xd2>
		set_buzzer(0, F_4, 600);
 800459e:	f44f 7216 	mov.w	r2, #600	; 0x258
 80045a2:	f240 115d 	movw	r1, #349	; 0x15d
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7ff ff74 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 80045ac:	22c8      	movs	r2, #200	; 0xc8
 80045ae:	2100      	movs	r1, #0
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7ff ff6f 	bl	8004494 <set_buzzer>
		set_buzzer(2, F_4, 600);
 80045b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80045ba:	f240 115d 	movw	r1, #349	; 0x15d
 80045be:	2002      	movs	r0, #2
 80045c0:	f7ff ff68 	bl	8004494 <set_buzzer>
 80045c4:	e05a      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 4) {
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d113      	bne.n	80045f4 <set_buzzer_mode+0x100>
		set_buzzer(0, G_4, 600);
 80045cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80045d0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff ff5d 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 80045da:	22c8      	movs	r2, #200	; 0xc8
 80045dc:	2100      	movs	r1, #0
 80045de:	2001      	movs	r0, #1
 80045e0:	f7ff ff58 	bl	8004494 <set_buzzer>
		set_buzzer(2, G_4, 600);
 80045e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80045e8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80045ec:	2002      	movs	r0, #2
 80045ee:	f7ff ff51 	bl	8004494 <set_buzzer>
 80045f2:	e043      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 5) {
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d113      	bne.n	8004622 <set_buzzer_mode+0x12e>
		set_buzzer(0, A_4, 600);
 80045fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80045fe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004602:	2000      	movs	r0, #0
 8004604:	f7ff ff46 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 8004608:	22c8      	movs	r2, #200	; 0xc8
 800460a:	2100      	movs	r1, #0
 800460c:	2001      	movs	r0, #1
 800460e:	f7ff ff41 	bl	8004494 <set_buzzer>
		set_buzzer(2, A_4, 600);
 8004612:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004616:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800461a:	2002      	movs	r0, #2
 800461c:	f7ff ff3a 	bl	8004494 <set_buzzer>
 8004620:	e02c      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 6) {
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d113      	bne.n	8004650 <set_buzzer_mode+0x15c>
		set_buzzer(0, B_4, 600);
 8004628:	f44f 7216 	mov.w	r2, #600	; 0x258
 800462c:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff ff2f 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 8004636:	22c8      	movs	r2, #200	; 0xc8
 8004638:	2100      	movs	r1, #0
 800463a:	2001      	movs	r0, #1
 800463c:	f7ff ff2a 	bl	8004494 <set_buzzer>
		set_buzzer(2, B_4, 600);
 8004640:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004644:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8004648:	2002      	movs	r0, #2
 800464a:	f7ff ff23 	bl	8004494 <set_buzzer>
 800464e:	e015      	b.n	800467c <set_buzzer_mode+0x188>
	} else if (mode == 7) {
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b07      	cmp	r3, #7
 8004654:	d112      	bne.n	800467c <set_buzzer_mode+0x188>
		set_buzzer(0, C_5, 600);
 8004656:	f44f 7216 	mov.w	r2, #600	; 0x258
 800465a:	f240 210b 	movw	r1, #523	; 0x20b
 800465e:	2000      	movs	r0, #0
 8004660:	f7ff ff18 	bl	8004494 <set_buzzer>
		set_buzzer(1, 0, 200);
 8004664:	22c8      	movs	r2, #200	; 0xc8
 8004666:	2100      	movs	r1, #0
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff ff13 	bl	8004494 <set_buzzer>
		set_buzzer(2, C_5, 600);
 800466e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004672:	f240 210b 	movw	r1, #523	; 0x20b
 8004676:	2002      	movs	r0, #2
 8004678:	f7ff ff0c 	bl	8004494 <set_buzzer>
	}
	buzzer_flag = 1;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <set_buzzer_mode+0x198>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200004a8 	.word	0x200004a8

08004690 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <MX_DMA_Init+0x3c>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <MX_DMA_Init+0x3c>)
 80046a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <MX_DMA_Init+0x3c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	2100      	movs	r1, #0
 80046b6:	2038      	movs	r0, #56	; 0x38
 80046b8:	f7fd f973 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80046bc:	2038      	movs	r0, #56	; 0x38
 80046be:	f7fd f98c 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <MX_GPIO_Init+0x13c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4a47      	ldr	r2, [pc, #284]	; (800480c <MX_GPIO_Init+0x13c>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	6313      	str	r3, [r2, #48]	; 0x30
 80046f6:	4b45      	ldr	r3, [pc, #276]	; (800480c <MX_GPIO_Init+0x13c>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	4b41      	ldr	r3, [pc, #260]	; (800480c <MX_GPIO_Init+0x13c>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a40      	ldr	r2, [pc, #256]	; (800480c <MX_GPIO_Init+0x13c>)
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	6313      	str	r3, [r2, #48]	; 0x30
 8004712:	4b3e      	ldr	r3, [pc, #248]	; (800480c <MX_GPIO_Init+0x13c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <MX_GPIO_Init+0x13c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a39      	ldr	r2, [pc, #228]	; (800480c <MX_GPIO_Init+0x13c>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b37      	ldr	r3, [pc, #220]	; (800480c <MX_GPIO_Init+0x13c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <MX_GPIO_Init+0x13c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a32      	ldr	r2, [pc, #200]	; (800480c <MX_GPIO_Init+0x13c>)
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <MX_GPIO_Init+0x13c>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UI_LED_CENTER_Pin|SENLED_R_Pin, GPIO_PIN_RESET);
 8004756:	2200      	movs	r2, #0
 8004758:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800475c:	482c      	ldr	r0, [pc, #176]	; (8004810 <MX_GPIO_Init+0x140>)
 800475e:	f7fd fe77 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|FLAG_LED_Pin 
 8004762:	2200      	movs	r2, #0
 8004764:	f641 2170 	movw	r1, #6768	; 0x1a70
 8004768:	482a      	ldr	r0, [pc, #168]	; (8004814 <MX_GPIO_Init+0x144>)
 800476a:	f7fd fe71 	bl	8002450 <HAL_GPIO_WritePin>
                          |UI_LED_RIGHT_Pin|SENLED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	2101      	movs	r1, #1
 8004772:	4829      	ldr	r0, [pc, #164]	; (8004818 <MX_GPIO_Init+0x148>)
 8004774:	f7fd fe6c 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 8004778:	2201      	movs	r2, #1
 800477a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800477e:	4825      	ldr	r0, [pc, #148]	; (8004814 <MX_GPIO_Init+0x144>)
 8004780:	f7fd fe66 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin|MOTER_L_CWCCW_Pin, GPIO_PIN_SET);
 8004784:	2201      	movs	r2, #1
 8004786:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800478a:	4823      	ldr	r0, [pc, #140]	; (8004818 <MX_GPIO_Init+0x148>)
 800478c:	f7fd fe60 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UI_LED_CENTER_Pin|SENLED_R_Pin;
 8004790:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004796:	2301      	movs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	4619      	mov	r1, r3
 80047a8:	4819      	ldr	r0, [pc, #100]	; (8004810 <MX_GPIO_Init+0x140>)
 80047aa:	f7fd fca7 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 80047ae:	f641 3370 	movw	r3, #7024	; 0x1b70
 80047b2:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|UI_LED_RIGHT_Pin|SENLED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b4:	2301      	movs	r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4619      	mov	r1, r3
 80047c6:	4813      	ldr	r0, [pc, #76]	; (8004814 <MX_GPIO_Init+0x144>)
 80047c8:	f7fd fc98 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 80047cc:	f240 33c1 	movw	r3, #961	; 0x3c1
 80047d0:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047da:	2300      	movs	r3, #0
 80047dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	4619      	mov	r1, r3
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <MX_GPIO_Init+0x148>)
 80047e6:	f7fd fc89 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80047ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f4:	2301      	movs	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4619      	mov	r1, r3
 80047fe:	4806      	ldr	r0, [pc, #24]	; (8004818 <MX_GPIO_Init+0x148>)
 8004800:	f7fd fc7c 	bl	80020fc <HAL_GPIO_Init>

}
 8004804:	bf00      	nop
 8004806:	3728      	adds	r7, #40	; 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	40020800 	.word	0x40020800
 8004814:	40020000 	.word	0x40020000
 8004818:	40020400 	.word	0x40020400
 800481c:	00000000 	.word	0x00000000

08004820 <interrupt_1ms>:
#include "tim.h"
#include "stm32f4xx_hal_tim.h"
#include "other.h"
#include "adc.h"

void interrupt_1ms(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0

	//buzzer
	if (buzzer[buzzer_index].autoreload != 0xffff && buzzer_flag == 1) {
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <interrupt_1ms+0x140>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <interrupt_1ms+0x144>)
 800482e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004836:	4293      	cmp	r3, r2
 8004838:	d040      	beq.n	80048bc <interrupt_1ms+0x9c>
 800483a:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <interrupt_1ms+0x148>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d13c      	bne.n	80048bc <interrupt_1ms+0x9c>
		if (buzzer_count == 0) {
 8004842:	4b4a      	ldr	r3, [pc, #296]	; (800496c <interrupt_1ms+0x14c>)
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d131      	bne.n	80048ae <interrupt_1ms+0x8e>
			if (buzzer[buzzer_index].autoreload != 0) {
 800484a:	4b45      	ldr	r3, [pc, #276]	; (8004960 <interrupt_1ms+0x140>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b44      	ldr	r3, [pc, #272]	; (8004964 <interrupt_1ms+0x144>)
 8004852:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d025      	beq.n	80048a6 <interrupt_1ms+0x86>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800485a:	2104      	movs	r1, #4
 800485c:	4844      	ldr	r0, [pc, #272]	; (8004970 <interrupt_1ms+0x150>)
 800485e:	f7fe fd8f 	bl	8003380 <HAL_TIM_PWM_Stop>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <interrupt_1ms+0x140>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <interrupt_1ms+0x144>)
 800486a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <interrupt_1ms+0x150>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	635a      	str	r2, [r3, #52]	; 0x34
						buzzer[buzzer_index].autoreload / 2);
				__HAL_TIM_SET_AUTORELOAD(&htim3,
 8004878:	4b39      	ldr	r3, [pc, #228]	; (8004960 <interrupt_1ms+0x140>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <interrupt_1ms+0x144>)
 8004880:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <interrupt_1ms+0x150>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <interrupt_1ms+0x140>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <interrupt_1ms+0x144>)
 8004892:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004896:	461a      	mov	r2, r3
 8004898:	4b35      	ldr	r3, [pc, #212]	; (8004970 <interrupt_1ms+0x150>)
 800489a:	60da      	str	r2, [r3, #12]
						buzzer[buzzer_index].autoreload);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800489c:	2104      	movs	r1, #4
 800489e:	4834      	ldr	r0, [pc, #208]	; (8004970 <interrupt_1ms+0x150>)
 80048a0:	f7fe fd30 	bl	8003304 <HAL_TIM_PWM_Start>
 80048a4:	e003      	b.n	80048ae <interrupt_1ms+0x8e>
			} else {
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80048a6:	2104      	movs	r1, #4
 80048a8:	4831      	ldr	r0, [pc, #196]	; (8004970 <interrupt_1ms+0x150>)
 80048aa:	f7fe fd69 	bl	8003380 <HAL_TIM_PWM_Stop>
			}
		}
		buzzer_count++;
 80048ae:	4b2f      	ldr	r3, [pc, #188]	; (800496c <interrupt_1ms+0x14c>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	4b2d      	ldr	r3, [pc, #180]	; (800496c <interrupt_1ms+0x14c>)
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e006      	b.n	80048ca <interrupt_1ms+0xaa>
	} else {
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80048bc:	2104      	movs	r1, #4
 80048be:	482c      	ldr	r0, [pc, #176]	; (8004970 <interrupt_1ms+0x150>)
 80048c0:	f7fe fd5e 	bl	8003380 <HAL_TIM_PWM_Stop>
		buzzer_count = 0;
 80048c4:	4b29      	ldr	r3, [pc, #164]	; (800496c <interrupt_1ms+0x14c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	801a      	strh	r2, [r3, #0]
	}

	if (buzzer_count == buzzer[buzzer_index].ms) {
 80048ca:	4b25      	ldr	r3, [pc, #148]	; (8004960 <interrupt_1ms+0x140>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <interrupt_1ms+0x144>)
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	885a      	ldrh	r2, [r3, #2]
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <interrupt_1ms+0x14c>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d108      	bne.n	80048f0 <interrupt_1ms+0xd0>
		buzzer_count = 0;
 80048de:	4b23      	ldr	r3, [pc, #140]	; (800496c <interrupt_1ms+0x14c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
		buzzer_index++;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <interrupt_1ms+0x140>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <interrupt_1ms+0x140>)
 80048ee:	701a      	strb	r2, [r3, #0]
	}

	read_gyro();
 80048f0:	f000 fb2a 	bl	8004f48 <read_gyro>

	g_test = read_spi_en(LEFT, 0xFFFc);
 80048f4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80048f8:	2000      	movs	r0, #0
 80048fa:	f000 fb5d 	bl	8004fb8 <read_spi_en>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <interrupt_1ms+0x154>)
 8004904:	801a      	strh	r2, [r3, #0]


	for (int i = 0; i < 1000; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	e002      	b.n	8004912 <interrupt_1ms+0xf2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3301      	adds	r3, #1
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004918:	dbf8      	blt.n	800490c <interrupt_1ms+0xec>
		;
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 800491a:	2205      	movs	r2, #5
 800491c:	4916      	ldr	r1, [pc, #88]	; (8004978 <interrupt_1ms+0x158>)
 800491e:	4817      	ldr	r0, [pc, #92]	; (800497c <interrupt_1ms+0x15c>)
 8004920:	f7fc fbcc 	bl	80010bc <HAL_ADC_Start_DMA>
//			low_batt_flag=0xff;
//		}
//	} else {
//	//	low_batt_flag = 0;
//	}
	if (Batt < 3.72) {
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <interrupt_1ms+0x160>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fb fe2d 	bl	8000588 <__aeabi_f2d>
 800492e:	a30a      	add	r3, pc, #40	; (adr r3, 8004958 <interrupt_1ms+0x138>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fc f8f2 	bl	8000b1c <__aeabi_dcmplt>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <interrupt_1ms+0x126>
		low_batt_flag = 0xff;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <interrupt_1ms+0x164>)
 8004940:	22ff      	movs	r2, #255	; 0xff
 8004942:	701a      	strb	r2, [r3, #0]
	} else {
		low_batt_flag = 0;
	}
}
 8004944:	e002      	b.n	800494c <interrupt_1ms+0x12c>
		low_batt_flag = 0;
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <interrupt_1ms+0x164>)
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	f3af 8000 	nop.w
 8004958:	5c28f5c3 	.word	0x5c28f5c3
 800495c:	400dc28f 	.word	0x400dc28f
 8004960:	200004a7 	.word	0x200004a7
 8004964:	20000a4c 	.word	0x20000a4c
 8004968:	200004a8 	.word	0x200004a8
 800496c:	2000000c 	.word	0x2000000c
 8004970:	200006b8 	.word	0x200006b8
 8004974:	200004a4 	.word	0x200004a4
 8004978:	20000b1c 	.word	0x20000b1c
 800497c:	20000560 	.word	0x20000560
 8004980:	20000844 	.word	0x20000844
 8004984:	200004a9 	.word	0x200004a9

08004988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b085      	sub	sp, #20
 800498c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800498e:	f7fc fabd 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004992:	f000 f997 	bl	8004cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004996:	f7ff fe9b 	bl	80046d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800499a:	f7ff fe79 	bl	8004690 <MX_DMA_Init>
  MX_ADC1_Init();
 800499e:	f7ff fc07 	bl	80041b0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80049a2:	f000 fbc5 	bl	8005130 <MX_SPI2_Init>
  MX_SPI3_Init();
 80049a6:	f000 fbf9 	bl	800519c <MX_SPI3_Init>
  MX_TIM2_Init();
 80049aa:	f000 fded 	bl	8005588 <MX_TIM2_Init>
  MX_TIM3_Init();
 80049ae:	f000 fe4f 	bl	8005650 <MX_TIM3_Init>
  MX_TIM6_Init();
 80049b2:	f000 fea7 	bl	8005704 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80049b6:	48b6      	ldr	r0, [pc, #728]	; (8004c90 <main+0x308>)
 80049b8:	f7fe fc55 	bl	8003266 <HAL_TIM_Base_Start_IT>
	SEGGER_RTT_Init();
 80049bc:	f7ff fbf2 	bl	80041a4 <SEGGER_RTT_Init>
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7ff fb80 	bl	80040d0 <SEGGER_RTT_ConfigUpBuffer>
	printf("\x1b[0m");
 80049d0:	48b0      	ldr	r0, [pc, #704]	; (8004c94 <main+0x30c>)
 80049d2:	f001 f87d 	bl	8005ad0 <iprintf>
	init_walldata();
 80049d6:	f000 ffff 	bl	80059d8 <init_walldata>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, SET);
 80049da:	2201      	movs	r2, #1
 80049dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049e0:	48ad      	ldr	r0, [pc, #692]	; (8004c98 <main+0x310>)
 80049e2:	f7fd fd35 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 80049e6:	2201      	movs	r2, #1
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	48ac      	ldr	r0, [pc, #688]	; (8004c9c <main+0x314>)
 80049ec:	f7fd fd30 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 80049f0:	2201      	movs	r2, #1
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	48a9      	ldr	r0, [pc, #676]	; (8004c9c <main+0x314>)
 80049f6:	f7fd fd2b 	bl	8002450 <HAL_GPIO_WritePin>
	init_gyro();
 80049fa:	f000 fa57 	bl	8004eac <init_gyro>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80049fe:	2100      	movs	r1, #0
 8004a00:	48a7      	ldr	r0, [pc, #668]	; (8004ca0 <main+0x318>)
 8004a02:	f7fe fcbd 	bl	8003380 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004a06:	2104      	movs	r1, #4
 8004a08:	48a5      	ldr	r0, [pc, #660]	; (8004ca0 <main+0x318>)
 8004a0a:	f7fe fcb9 	bl	8003380 <HAL_TIM_PWM_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	u_int16_t i, j;
	uint8_t test = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	70fb      	strb	r3, [r7, #3]
//	float pi = 3.14;
	uint16_t en_test = 1234;
 8004a12:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8004a16:	803b      	strh	r3, [r7, #0]
//	walldata.real.column[1]++;

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8004a18:	2205      	movs	r2, #5
 8004a1a:	49a2      	ldr	r1, [pc, #648]	; (8004ca4 <main+0x31c>)
 8004a1c:	48a2      	ldr	r0, [pc, #648]	; (8004ca8 <main+0x320>)
 8004a1e:	f7fc fb4d 	bl	80010bc <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	for (i = 0; i < 17; i++) {
 8004a22:	2300      	movs	r3, #0
 8004a24:	80fb      	strh	r3, [r7, #6]
 8004a26:	e024      	b.n	8004a72 <main+0xea>
		for (j = 0; j < 17; j++) {
 8004a28:	2300      	movs	r3, #0
 8004a2a:	80bb      	strh	r3, [r7, #4]
 8004a2c:	e010      	b.n	8004a50 <main+0xc8>
			step_map[i][j] = i + j * 16;
 8004a2e:	88bb      	ldrh	r3, [r7, #4]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	b298      	uxth	r0, r3
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	88bb      	ldrh	r3, [r7, #4]
 8004a38:	88f9      	ldrh	r1, [r7, #6]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	b288      	uxth	r0, r1
 8004a3e:	499b      	ldr	r1, [pc, #620]	; (8004cac <main+0x324>)
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	4602      	mov	r2, r0
 8004a46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < 17; j++) {
 8004a4a:	88bb      	ldrh	r3, [r7, #4]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	80bb      	strh	r3, [r7, #4]
 8004a50:	88bb      	ldrh	r3, [r7, #4]
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d9eb      	bls.n	8004a2e <main+0xa6>
		}
		printf("i=%d,pari=%d\n", i, check_parity(i));
 8004a56:	88fc      	ldrh	r4, [r7, #6]
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fae8 	bl	8005030 <check_parity>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	4621      	mov	r1, r4
 8004a66:	4892      	ldr	r0, [pc, #584]	; (8004cb0 <main+0x328>)
 8004a68:	f001 f832 	bl	8005ad0 <iprintf>
	for (i = 0; i < 17; i++) {
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	80fb      	strh	r3, [r7, #6]
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d9d7      	bls.n	8004a28 <main+0xa0>
	}

	HAL_GPIO_WritePin(SENLED_RF_GPIO_Port, SENLED_RF_Pin, SET);
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a7e:	4886      	ldr	r0, [pc, #536]	; (8004c98 <main+0x310>)
 8004a80:	f7fd fce6 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_LF_GPIO_Port, SENLED_LF_Pin, SET);
 8004a84:	2201      	movs	r2, #1
 8004a86:	2140      	movs	r1, #64	; 0x40
 8004a88:	4883      	ldr	r0, [pc, #524]	; (8004c98 <main+0x310>)
 8004a8a:	f7fd fce1 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_R_GPIO_Port, SENLED_R_Pin, SET);
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a94:	4887      	ldr	r0, [pc, #540]	; (8004cb4 <main+0x32c>)
 8004a96:	f7fd fcdb 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENLED_L_GPIO_Port, SENLED_L_Pin, SET);
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	487e      	ldr	r0, [pc, #504]	; (8004c98 <main+0x310>)
 8004aa0:	f7fd fcd6 	bl	8002450 <HAL_GPIO_WritePin>


//	output_Walldata(REAL);
	while (1) {
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8004aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aa8:	487c      	ldr	r0, [pc, #496]	; (8004c9c <main+0x314>)
 8004aaa:	f7fd fcb9 	bl	8002420 <HAL_GPIO_ReadPin>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d128      	bne.n	8004b06 <main+0x17e>
			mode++;
 8004ab4:	4b80      	ldr	r3, [pc, #512]	; (8004cb8 <main+0x330>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <main+0x330>)
 8004abe:	701a      	strb	r2, [r3, #0]
			mode = mode % 8;
 8004ac0:	4b7d      	ldr	r3, [pc, #500]	; (8004cb8 <main+0x330>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <main+0x330>)
 8004acc:	701a      	strb	r2, [r3, #0]
			printf("%d\n", mode);
 8004ace:	4b7a      	ldr	r3, [pc, #488]	; (8004cb8 <main+0x330>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4879      	ldr	r0, [pc, #484]	; (8004cbc <main+0x334>)
 8004ad6:	f000 fffb 	bl	8005ad0 <iprintf>
			chattering();
 8004ada:	f000 f965 	bl	8004da8 <chattering>
			set_led(mode);
 8004ade:	4b76      	ldr	r3, [pc, #472]	; (8004cb8 <main+0x330>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 facc 	bl	8005080 <set_led>
			set_buzzer_mode(mode);
 8004ae8:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <main+0x330>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fd01 	bl	80044f4 <set_buzzer_mode>
			en_test = (uint16_t) mode;
 8004af2:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <main+0x330>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	803b      	strh	r3, [r7, #0]
			en_test = read_spi_en(RIGHT, 0x3FFF);
 8004af8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8004afc:	2001      	movs	r0, #1
 8004afe:	f000 fa5b 	bl	8004fb8 <read_spi_en>
 8004b02:	4603      	mov	r3, r0
 8004b04:	803b      	strh	r3, [r7, #0]
			//		printf("RIGHT=%x\n", en_test);
		}

		if (low_batt_flag == 0xff) {
 8004b06:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <main+0x338>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d10c      	bne.n	8004b28 <main+0x1a0>
			//		while(1){
			set_led(0);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f000 fab6 	bl	8005080 <set_led>
			HAL_Delay(100);
 8004b14:	2064      	movs	r0, #100	; 0x64
 8004b16:	f7fc fa6b 	bl	8000ff0 <HAL_Delay>
			set_led(7);
 8004b1a:	2007      	movs	r0, #7
 8004b1c:	f000 fab0 	bl	8005080 <set_led>
			HAL_Delay(100);
 8004b20:	2064      	movs	r0, #100	; 0x64
 8004b22:	f7fc fa65 	bl	8000ff0 <HAL_Delay>
 8004b26:	e004      	b.n	8004b32 <main+0x1aa>
			//		}
		} else {
			set_led(mode);
 8004b28:	4b63      	ldr	r3, [pc, #396]	; (8004cb8 <main+0x330>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 faa7 	bl	8005080 <set_led>
		}

		HAL_GPIO_TogglePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin);
 8004b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b36:	485f      	ldr	r0, [pc, #380]	; (8004cb4 <main+0x32c>)
 8004b38:	f7fd fca3 	bl	8002482 <HAL_GPIO_TogglePin>
//		printf("batt=%.3f\n",Batt);

//		printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1], g_ADCBuffer[2],
//				g_ADCBuffer[3], g_ADCBuffer[4]);

		HAL_Delay(1000);
 8004b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b40:	f7fc fa56 	bl	8000ff0 <HAL_Delay>

		if (mode == 0) {
 8004b44:	4b5c      	ldr	r3, [pc, #368]	; (8004cb8 <main+0x330>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ab      	beq.n	8004aa4 <main+0x11c>

		} else if (mode == 1) {
 8004b4c:	4b5a      	ldr	r3, [pc, #360]	; (8004cb8 <main+0x330>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d124      	bne.n	8004b9e <main+0x216>
			HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, SET);
 8004b54:	2201      	movs	r2, #1
 8004b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b5a:	4850      	ldr	r0, [pc, #320]	; (8004c9c <main+0x314>)
 8004b5c:	f7fd fc78 	bl	8002450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, SET);
 8004b60:	2201      	movs	r2, #1
 8004b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b66:	484d      	ldr	r0, [pc, #308]	; (8004c9c <main+0x314>)
 8004b68:	f7fd fc72 	bl	8002450 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	484c      	ldr	r0, [pc, #304]	; (8004ca0 <main+0x318>)
 8004b70:	f7fe fc06 	bl	8003380 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004b74:	2104      	movs	r1, #4
 8004b76:	484a      	ldr	r0, [pc, #296]	; (8004ca0 <main+0x318>)
 8004b78:	f7fe fc02 	bl	8003380 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8004b7c:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <main+0x318>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2232      	movs	r2, #50	; 0x32
 8004b82:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 8004b84:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <main+0x318>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2232      	movs	r2, #50	; 0x32
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4844      	ldr	r0, [pc, #272]	; (8004ca0 <main+0x318>)
 8004b90:	f7fe fbb8 	bl	8003304 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004b94:	2104      	movs	r1, #4
 8004b96:	4842      	ldr	r0, [pc, #264]	; (8004ca0 <main+0x318>)
 8004b98:	f7fe fbb4 	bl	8003304 <HAL_TIM_PWM_Start>
 8004b9c:	e782      	b.n	8004aa4 <main+0x11c>
		} else if (mode == 2) {
 8004b9e:	4b46      	ldr	r3, [pc, #280]	; (8004cb8 <main+0x330>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d118      	bne.n	8004bd8 <main+0x250>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	483d      	ldr	r0, [pc, #244]	; (8004ca0 <main+0x318>)
 8004baa:	f7fe fbe9 	bl	8003380 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004bae:	2104      	movs	r1, #4
 8004bb0:	483b      	ldr	r0, [pc, #236]	; (8004ca0 <main+0x318>)
 8004bb2:	f7fe fbe5 	bl	8003380 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <main+0x318>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	22c8      	movs	r2, #200	; 0xc8
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <main+0x318>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	22c8      	movs	r2, #200	; 0xc8
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4835      	ldr	r0, [pc, #212]	; (8004ca0 <main+0x318>)
 8004bca:	f7fe fb9b 	bl	8003304 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004bce:	2104      	movs	r1, #4
 8004bd0:	4833      	ldr	r0, [pc, #204]	; (8004ca0 <main+0x318>)
 8004bd2:	f7fe fb97 	bl	8003304 <HAL_TIM_PWM_Start>
 8004bd6:	e765      	b.n	8004aa4 <main+0x11c>
		} else if (mode == 3) {
 8004bd8:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <main+0x330>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d124      	bne.n	8004c2a <main+0x2a2>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004be0:	2100      	movs	r1, #0
 8004be2:	482f      	ldr	r0, [pc, #188]	; (8004ca0 <main+0x318>)
 8004be4:	f7fe fbcc 	bl	8003380 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004be8:	2104      	movs	r1, #4
 8004bea:	482d      	ldr	r0, [pc, #180]	; (8004ca0 <main+0x318>)
 8004bec:	f7fe fbc8 	bl	8003380 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, RESET);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bf6:	4829      	ldr	r0, [pc, #164]	; (8004c9c <main+0x314>)
 8004bf8:	f7fd fc2a 	bl	8002450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, RESET);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c02:	4826      	ldr	r0, [pc, #152]	; (8004c9c <main+0x314>)
 8004c04:	f7fd fc24 	bl	8002450 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <main+0x318>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2232      	movs	r2, #50	; 0x32
 8004c0e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <main+0x318>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2232      	movs	r2, #50	; 0x32
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4821      	ldr	r0, [pc, #132]	; (8004ca0 <main+0x318>)
 8004c1c:	f7fe fb72 	bl	8003304 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004c20:	2104      	movs	r1, #4
 8004c22:	481f      	ldr	r0, [pc, #124]	; (8004ca0 <main+0x318>)
 8004c24:	f7fe fb6e 	bl	8003304 <HAL_TIM_PWM_Start>
 8004c28:	e73c      	b.n	8004aa4 <main+0x11c>
		} else if (mode == 4) {
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <main+0x330>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d124      	bne.n	8004c7c <main+0x2f4>
			HAL_GPIO_WritePin(MOTER_L_CWCCW_GPIO_Port, MOTER_L_CWCCW_Pin, RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c38:	4818      	ldr	r0, [pc, #96]	; (8004c9c <main+0x314>)
 8004c3a:	f7fd fc09 	bl	8002450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTER_R_CWCCW_GPIO_Port, MOTER_R_CWCCW_Pin, RESET);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c44:	4815      	ldr	r0, [pc, #84]	; (8004c9c <main+0x314>)
 8004c46:	f7fd fc03 	bl	8002450 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4814      	ldr	r0, [pc, #80]	; (8004ca0 <main+0x318>)
 8004c4e:	f7fe fb97 	bl	8003380 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004c52:	2104      	movs	r1, #4
 8004c54:	4812      	ldr	r0, [pc, #72]	; (8004ca0 <main+0x318>)
 8004c56:	f7fe fb93 	bl	8003380 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <main+0x318>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	22c8      	movs	r2, #200	; 0xc8
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <main+0x318>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	22c8      	movs	r2, #200	; 0xc8
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <main+0x318>)
 8004c6e:	f7fe fb49 	bl	8003304 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004c72:	2104      	movs	r1, #4
 8004c74:	480a      	ldr	r0, [pc, #40]	; (8004ca0 <main+0x318>)
 8004c76:	f7fe fb45 	bl	8003304 <HAL_TIM_PWM_Start>
 8004c7a:	e713      	b.n	8004aa4 <main+0x11c>
		} else if (mode == 5) {
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <main+0x330>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	f43f af0f 	beq.w	8004aa4 <main+0x11c>

		} else if (mode == 6) {
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <main+0x330>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b06      	cmp	r3, #6
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8004c8c:	e70a      	b.n	8004aa4 <main+0x11c>
 8004c8e:	bf00      	nop
 8004c90:	200006f8 	.word	0x200006f8
 8004c94:	08006990 	.word	0x08006990
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	20000738 	.word	0x20000738
 8004ca4:	20000b1c 	.word	0x20000b1c
 8004ca8:	20000560 	.word	0x20000560
 8004cac:	2000084c 	.word	0x2000084c
 8004cb0:	08006998 	.word	0x08006998
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	200004a6 	.word	0x200004a6
 8004cbc:	080069a8 	.word	0x080069a8
 8004cc0:	200004a9 	.word	0x200004a9

08004cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b094      	sub	sp, #80	; 0x50
 8004cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cca:	f107 031c 	add.w	r3, r7, #28
 8004cce:	2234      	movs	r2, #52	; 0x34
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fef3 	bl	8005abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cd8:	f107 0308 	add.w	r3, r7, #8
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <SystemClock_Config+0xcc>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <SystemClock_Config+0xcc>)
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <SystemClock_Config+0xcc>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <SystemClock_Config+0xd0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <SystemClock_Config+0xd0>)
 8004d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <SystemClock_Config+0xd0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004d34:	2308      	movs	r3, #8
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004d38:	2364      	movs	r3, #100	; 0x64
 8004d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004d40:	2302      	movs	r3, #2
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d44:	2302      	movs	r3, #2
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d48:	f107 031c 	add.w	r3, r7, #28
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd fd6b 	bl	8002828 <HAL_RCC_OscConfig>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004d58:	f000 f81e 	bl	8004d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d60:	2302      	movs	r3, #2
 8004d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	2103      	movs	r1, #3
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd fb9d 	bl	80024b8 <HAL_RCC_ClockConfig>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004d84:	f000 f808 	bl	8004d98 <Error_Handler>
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3750      	adds	r7, #80	; 0x50
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40007000 	.word	0x40007000

08004d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <chattering>:
#include "gpio.h"

#define CHATT 10000
#define SECTOR_BASE_ADRR 0x08160000ul

void chattering(void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	int i = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004db2:	e002      	b.n	8004dba <chattering+0x12>
		i++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3301      	adds	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	ddf7      	ble.n	8004db4 <chattering+0xc>
	}
	while (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 8004dc4:	bf00      	nop
 8004dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dca:	480a      	ldr	r0, [pc, #40]	; (8004df4 <chattering+0x4c>)
 8004dcc:	f7fd fb28 	bl	8002420 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f7      	beq.n	8004dc6 <chattering+0x1e>
	}
	i = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004dda:	e002      	b.n	8004de2 <chattering+0x3a>
		i++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3301      	adds	r3, #1
 8004de0:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f242 720f 	movw	r2, #9999	; 0x270f
 8004de8:	4293      	cmp	r3, r2
 8004dea:	ddf7      	ble.n	8004ddc <chattering+0x34>
	}
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40020400 	.word	0x40020400

08004df8 <read_spi>:

void read_all_walldata(void) {
	read_flash(SECTOR_BASE_ADRR, (uint8_t*) &walldata, sizeof(walldata));
}

uint8_t read_spi(uint8_t addr) { //addrのデータを読み取る
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
	uint8_t data_tx[2], data_rx[2];
	data_tx[0] = (0x80 | addr); //readのMSB(1)とアドレス
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	733b      	strb	r3, [r7, #12]
	data_tx[1] = 0x00; //dummy
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e16:	480c      	ldr	r0, [pc, #48]	; (8004e48 <read_spi+0x50>)
 8004e18:	f7fd fb1a 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	f107 010c 	add.w	r1, r7, #12
 8004e24:	2301      	movs	r3, #1
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2302      	movs	r3, #2
 8004e2a:	4808      	ldr	r0, [pc, #32]	; (8004e4c <read_spi+0x54>)
 8004e2c:	f7fd ffa2 	bl	8002d74 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 8004e30:	2201      	movs	r2, #1
 8004e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e36:	4804      	ldr	r0, [pc, #16]	; (8004e48 <read_spi+0x50>)
 8004e38:	f7fd fb0a 	bl	8002450 <HAL_GPIO_WritePin>

	return data_rx[1];
 8004e3c:	7a7b      	ldrb	r3, [r7, #9]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40020000 	.word	0x40020000
 8004e4c:	20000608 	.word	0x20000608

08004e50 <write_spi>:

void write_spi(uint8_t addr, uint8_t data) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	4603      	mov	r3, r0
 8004e58:	460a      	mov	r2, r1
 8004e5a:	71fb      	strb	r3, [r7, #7]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	71bb      	strb	r3, [r7, #6]
	uint8_t data_rx[2], data_tx[2];
	data_tx[0] = 0x7f & addr;
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	723b      	strb	r3, [r7, #8]
	data_tx[1] = data;
 8004e6a:	79bb      	ldrb	r3, [r7, #6]
 8004e6c:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e74:	480b      	ldr	r0, [pc, #44]	; (8004ea4 <write_spi+0x54>)
 8004e76:	f7fd faeb 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_tx, data_rx, 2, 1);
 8004e7a:	f107 020c 	add.w	r2, r7, #12
 8004e7e:	f107 0108 	add.w	r1, r7, #8
 8004e82:	2301      	movs	r3, #1
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2302      	movs	r3, #2
 8004e88:	4807      	ldr	r0, [pc, #28]	; (8004ea8 <write_spi+0x58>)
 8004e8a:	f7fd ff73 	bl	8002d74 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, 1);
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e94:	4803      	ldr	r0, [pc, #12]	; (8004ea4 <write_spi+0x54>)
 8004e96:	f7fd fadb 	bl	8002450 <HAL_GPIO_WritePin>
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40020000 	.word	0x40020000
 8004ea8:	20000608 	.word	0x20000608

08004eac <init_gyro>:

void init_gyro(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
	read_spi(WHO_AM_I);
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7ff ffa1 	bl	8004df8 <read_spi>
	HAL_Delay(10);
 8004eb6:	200a      	movs	r0, #10
 8004eb8:	f7fc f89a 	bl	8000ff0 <HAL_Delay>
	if (read_spi(WHO_AM_I) != 0xe0) {
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7ff ff9b 	bl	8004df8 <read_spi>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2be0      	cmp	r3, #224	; 0xe0
 8004ec6:	d002      	beq.n	8004ece <init_gyro+0x22>
		printf("gyro init error\n");
 8004ec8:	481e      	ldr	r0, [pc, #120]	; (8004f44 <init_gyro+0x98>)
 8004eca:	f000 fe75 	bl	8005bb8 <puts>
	}
	HAL_Delay(10);
 8004ece:	200a      	movs	r0, #10
 8004ed0:	f7fc f88e 	bl	8000ff0 <HAL_Delay>
	write_spi(0x05, 0x00); //USER_CTRL いろんな機能をoffに
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2005      	movs	r0, #5
 8004ed8:	f7ff ffba 	bl	8004e50 <write_spi>
	HAL_Delay(10);
 8004edc:	200a      	movs	r0, #10
 8004ede:	f7fc f887 	bl	8000ff0 <HAL_Delay>
	write_spi(0x06, 0x09); //PWRMGMT_1 温度センサoff クロックを自動設定 スリープ解除
 8004ee2:	2109      	movs	r1, #9
 8004ee4:	2006      	movs	r0, #6
 8004ee6:	f7ff ffb3 	bl	8004e50 <write_spi>
	HAL_Delay(10);
 8004eea:	200a      	movs	r0, #10
 8004eec:	f7fc f880 	bl	8000ff0 <HAL_Delay>
	write_spi(0x07, 0x3f); //PWRMGMT_2 ジャイロ・加速度センサoff
 8004ef0:	213f      	movs	r1, #63	; 0x3f
 8004ef2:	2007      	movs	r0, #7
 8004ef4:	f7ff ffac 	bl	8004e50 <write_spi>

	HAL_Delay(10);
 8004ef8:	200a      	movs	r0, #10
 8004efa:	f7fc f879 	bl	8000ff0 <HAL_Delay>
	write_spi(0x7f, 0x20); //REG_BANK_SEL bank2に移動
 8004efe:	2120      	movs	r1, #32
 8004f00:	207f      	movs	r0, #127	; 0x7f
 8004f02:	f7ff ffa5 	bl	8004e50 <write_spi>

	HAL_Delay(10);
 8004f06:	200a      	movs	r0, #10
 8004f08:	f7fc f872 	bl	8000ff0 <HAL_Delay>
	write_spi(0x01, 0x06); //GYRO_CONFIG_1 +-2000dps non-filter
 8004f0c:	2106      	movs	r1, #6
 8004f0e:	2001      	movs	r0, #1
 8004f10:	f7ff ff9e 	bl	8004e50 <write_spi>
	HAL_Delay(10);
 8004f14:	200a      	movs	r0, #10
 8004f16:	f7fc f86b 	bl	8000ff0 <HAL_Delay>
	write_spi(0x14, 0x04); //ACCEL_CONFIG +-8g non-filter
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	2014      	movs	r0, #20
 8004f1e:	f7ff ff97 	bl	8004e50 <write_spi>

	HAL_Delay(10);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f7fc f864 	bl	8000ff0 <HAL_Delay>
	write_spi(0x7f, 0x00); //REG_BANK_SEL bank0に移動
 8004f28:	2100      	movs	r1, #0
 8004f2a:	207f      	movs	r0, #127	; 0x7f
 8004f2c:	f7ff ff90 	bl	8004e50 <write_spi>

	HAL_Delay(10);
 8004f30:	200a      	movs	r0, #10
 8004f32:	f7fc f85d 	bl	8000ff0 <HAL_Delay>
	write_spi(0x07, 0x00); //PWRMGMT_2 ジャイロ・加速度センサon
 8004f36:	2100      	movs	r1, #0
 8004f38:	2007      	movs	r0, #7
 8004f3a:	f7ff ff89 	bl	8004e50 <write_spi>
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	080069ac 	.word	0x080069ac

08004f48 <read_gyro>:

float read_gyro(void) {
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	uint8_t data_l;
	int8_t data_h;
	int16_t value;
	data_h = read_spi(0x37);
 8004f4e:	2037      	movs	r0, #55	; 0x37
 8004f50:	f7ff ff52 	bl	8004df8 <read_spi>
 8004f54:	4603      	mov	r3, r0
 8004f56:	71fb      	strb	r3, [r7, #7]
	data_l = read_spi(0x38);
 8004f58:	2038      	movs	r0, #56	; 0x38
 8004f5a:	f7ff ff4d 	bl	8004df8 <read_spi>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71bb      	strb	r3, [r7, #6]
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	b21a      	sxth	r2, r3
 8004f6a:	79bb      	ldrb	r3, [r7, #6]
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	80bb      	strh	r3, [r7, #4]
	return (float) value * 0.0610370189; //*2000/(2^15-1) return deg
 8004f72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7e:	ee17 0a90 	vmov	r0, s15
 8004f82:	f7fb fb01 	bl	8000588 <__aeabi_f2d>
 8004f86:	a30a      	add	r3, pc, #40	; (adr r3, 8004fb0 <read_gyro+0x68>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb fb54 	bl	8000638 <__aeabi_dmul>
 8004f90:	4603      	mov	r3, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4618      	mov	r0, r3
 8004f96:	4621      	mov	r1, r4
 8004f98:	f7fb fde8 	bl	8000b6c <__aeabi_d2f>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	ee07 3a90 	vmov	s15, r3
}
 8004fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	f3af 8000 	nop.w
 8004fb0:	800aaabd 	.word	0x800aaabd
 8004fb4:	3faf403e 	.word	0x3faf403e

08004fb8 <read_spi_en>:
	data_l = read_spi(0x32);
	value = (int16_t) (data_h << 8) | (int16_t) data_l;
	return (float) value * 0.00239427472762; //*9.8...*8/(2^15-1) return m/s^2
}

uint16_t read_spi_en(uint8_t le_ri, uint16_t addr) { //addrのデータを読み取る
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	71fb      	strb	r3, [r7, #7]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	80bb      	strh	r3, [r7, #4]
	uint16_t data_tx;
	uint16_t data_rx = 7;
 8004fc8:	2307      	movs	r3, #7
 8004fca:	81bb      	strh	r3, [r7, #12]

	data_tx = 0xffff;
 8004fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fd0:	81fb      	strh	r3, [r7, #14]
	//data_tx[0] = data_tx[0] || (check_parity(data_tx[0]) << 15);

//	printf("data_tx[0]=%x,%x\n", data_tx[0], data_tx[1]);

//	data_tx[1] = 0x0000; //dummy
	if (le_ri == LEFT) {
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <read_spi_en+0x2c>
		HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 0);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2180      	movs	r1, #128	; 0x80
 8004fdc:	4812      	ldr	r0, [pc, #72]	; (8005028 <read_spi_en+0x70>)
 8004fde:	f7fd fa37 	bl	8002450 <HAL_GPIO_WritePin>
 8004fe2:	e007      	b.n	8004ff4 <read_spi_en+0x3c>
	} else if (le_ri == RIGHT) {
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d104      	bne.n	8004ff4 <read_spi_en+0x3c>
		HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2140      	movs	r1, #64	; 0x40
 8004fee:	480e      	ldr	r0, [pc, #56]	; (8005028 <read_spi_en+0x70>)
 8004ff0:	f7fd fa2e 	bl	8002450 <HAL_GPIO_WritePin>
	}
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &data_tx, (uint8_t*) &data_rx, 1,
 8004ff4:	f107 020c 	add.w	r2, r7, #12
 8004ff8:	f107 010e 	add.w	r1, r7, #14
 8004ffc:	2364      	movs	r3, #100	; 0x64
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	2301      	movs	r3, #1
 8005002:	480a      	ldr	r0, [pc, #40]	; (800502c <read_spi_en+0x74>)
 8005004:	f7fd feb6 	bl	8002d74 <HAL_SPI_TransmitReceive>
			100);

	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
 8005008:	2201      	movs	r2, #1
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	4806      	ldr	r0, [pc, #24]	; (8005028 <read_spi_en+0x70>)
 800500e:	f7fd fa1f 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
 8005012:	2201      	movs	r2, #1
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	4804      	ldr	r0, [pc, #16]	; (8005028 <read_spi_en+0x70>)
 8005018:	f7fd fa1a 	bl	8002450 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CS_L_EN_GPIO_Port, CS_L_EN_Pin, 1);
//	HAL_GPIO_WritePin(CS_R_EN_GPIO_Port, CS_R_EN_Pin, 1);
//	printf("2nd rx0=%d,rx1=%d\n", data_rx[0], data_rx[1]);

//	return (uint16_t) ((uint16_t) (data_rx[0] << 8) + (uint16_t) data_rx[1]);
	return data_rx;
 800501c:	89bb      	ldrh	r3, [r7, #12]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40020400 	.word	0x40020400
 800502c:	20000660 	.word	0x20000660

08005030 <check_parity>:
	} else {

	}
}

uint16_t check_parity(uint16_t val) {
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 8;
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	b29a      	uxth	r2, r3
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	4053      	eors	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 4;
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	b29a      	uxth	r2, r3
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	4053      	eors	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 2;
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	b29a      	uxth	r2, r3
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	4053      	eors	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
	val ^= val >> 1;
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	4053      	eors	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
	return val & 0x0001;
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	b29b      	uxth	r3, r3
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <set_led>:

void set_led(uint8_t num) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
	if ((0x01 & num) != 0) {
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <set_led+0x24>
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, SET);
 8005096:	2201      	movs	r2, #1
 8005098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800509c:	4821      	ldr	r0, [pc, #132]	; (8005124 <set_led+0xa4>)
 800509e:	f7fd f9d7 	bl	8002450 <HAL_GPIO_WritePin>
 80050a2:	e005      	b.n	80050b0 <set_led+0x30>
	} else {
		HAL_GPIO_WritePin(UI_LED_RIGHT_GPIO_Port, UI_LED_RIGHT_Pin, RESET);
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050aa:	481e      	ldr	r0, [pc, #120]	; (8005124 <set_led+0xa4>)
 80050ac:	f7fd f9d0 	bl	8002450 <HAL_GPIO_WritePin>
	}
	if ((0x02 & num) != 0) {
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d006      	beq.n	80050ca <set_led+0x4a>
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, SET);
 80050bc:	2201      	movs	r2, #1
 80050be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050c2:	4819      	ldr	r0, [pc, #100]	; (8005128 <set_led+0xa8>)
 80050c4:	f7fd f9c4 	bl	8002450 <HAL_GPIO_WritePin>
 80050c8:	e005      	b.n	80050d6 <set_led+0x56>
	} else {
		HAL_GPIO_WritePin(UI_LED_CENTER_GPIO_Port, UI_LED_CENTER_Pin, RESET);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d0:	4815      	ldr	r0, [pc, #84]	; (8005128 <set_led+0xa8>)
 80050d2:	f7fd f9bd 	bl	8002450 <HAL_GPIO_WritePin>
	}
	if ((0x04 & num) != 0) {
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <set_led+0x6e>
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, SET);
 80050e2:	2201      	movs	r2, #1
 80050e4:	2101      	movs	r1, #1
 80050e6:	4811      	ldr	r0, [pc, #68]	; (800512c <set_led+0xac>)
 80050e8:	f7fd f9b2 	bl	8002450 <HAL_GPIO_WritePin>
 80050ec:	e004      	b.n	80050f8 <set_led+0x78>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_GPIO_Port, UI_LED_LEFT_Pin, RESET);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2101      	movs	r1, #1
 80050f2:	480e      	ldr	r0, [pc, #56]	; (800512c <set_led+0xac>)
 80050f4:	f7fd f9ac 	bl	8002450 <HAL_GPIO_WritePin>
	}
	if ((0x08 & num) != 0) {
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <set_led+0x90>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, SET);
 8005104:	2201      	movs	r2, #1
 8005106:	2110      	movs	r1, #16
 8005108:	4806      	ldr	r0, [pc, #24]	; (8005124 <set_led+0xa4>)
 800510a:	f7fd f9a1 	bl	8002450 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
	}
}
 800510e:	e004      	b.n	800511a <set_led+0x9a>
		HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, RESET);
 8005110:	2200      	movs	r2, #0
 8005112:	2110      	movs	r1, #16
 8005114:	4803      	ldr	r0, [pc, #12]	; (8005124 <set_led+0xa4>)
 8005116:	f7fd f99b 	bl	8002450 <HAL_GPIO_WritePin>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020000 	.word	0x40020000
 8005128:	40020800 	.word	0x40020800
 800512c:	40020400 	.word	0x40020400

08005130 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <MX_SPI2_Init+0x64>)
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <MX_SPI2_Init+0x68>)
 8005138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <MX_SPI2_Init+0x64>)
 800513c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <MX_SPI2_Init+0x64>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <MX_SPI2_Init+0x64>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <MX_SPI2_Init+0x64>)
 8005150:	2202      	movs	r2, #2
 8005152:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <MX_SPI2_Init+0x64>)
 8005156:	2201      	movs	r2, #1
 8005158:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <MX_SPI2_Init+0x64>)
 800515c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005160:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <MX_SPI2_Init+0x64>)
 8005164:	2218      	movs	r2, #24
 8005166:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <MX_SPI2_Init+0x64>)
 800516a:	2200      	movs	r2, #0
 800516c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <MX_SPI2_Init+0x64>)
 8005170:	2200      	movs	r2, #0
 8005172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <MX_SPI2_Init+0x64>)
 8005176:	2200      	movs	r2, #0
 8005178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <MX_SPI2_Init+0x64>)
 800517c:	220a      	movs	r2, #10
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005180:	4804      	ldr	r0, [pc, #16]	; (8005194 <MX_SPI2_Init+0x64>)
 8005182:	f7fd fd93 	bl	8002cac <HAL_SPI_Init>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800518c:	f7ff fe04 	bl	8004d98 <Error_Handler>
  }

}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000608 	.word	0x20000608
 8005198:	40003800 	.word	0x40003800

0800519c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <MX_SPI3_Init+0x68>)
 80051a2:	4a19      	ldr	r2, [pc, #100]	; (8005208 <MX_SPI3_Init+0x6c>)
 80051a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051a6:	4b17      	ldr	r3, [pc, #92]	; (8005204 <MX_SPI3_Init+0x68>)
 80051a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <MX_SPI3_Init+0x68>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <MX_SPI3_Init+0x68>)
 80051b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <MX_SPI3_Init+0x68>)
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <MX_SPI3_Init+0x68>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <MX_SPI3_Init+0x68>)
 80051ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <MX_SPI3_Init+0x68>)
 80051d2:	2218      	movs	r2, #24
 80051d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <MX_SPI3_Init+0x68>)
 80051d8:	2200      	movs	r2, #0
 80051da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <MX_SPI3_Init+0x68>)
 80051de:	2200      	movs	r2, #0
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <MX_SPI3_Init+0x68>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <MX_SPI3_Init+0x68>)
 80051ea:	220a      	movs	r2, #10
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80051ee:	4805      	ldr	r0, [pc, #20]	; (8005204 <MX_SPI3_Init+0x68>)
 80051f0:	f7fd fd5c 	bl	8002cac <HAL_SPI_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80051fa:	f7ff fdcd 	bl	8004d98 <Error_Handler>
  }

}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000660 	.word	0x20000660
 8005208:	40003c00 	.word	0x40003c00

0800520c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	f107 031c 	add.w	r3, r7, #28
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <HAL_SPI_MspInit+0x10c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12d      	bne.n	800528a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	4b3a      	ldr	r3, [pc, #232]	; (800531c <HAL_SPI_MspInit+0x110>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a39      	ldr	r2, [pc, #228]	; (800531c <HAL_SPI_MspInit+0x110>)
 8005238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_SPI_MspInit+0x110>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	4b33      	ldr	r3, [pc, #204]	; (800531c <HAL_SPI_MspInit+0x110>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a32      	ldr	r2, [pc, #200]	; (800531c <HAL_SPI_MspInit+0x110>)
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <HAL_SPI_MspInit+0x110>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 8005266:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800526a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	2302      	movs	r3, #2
 800526e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005274:	2303      	movs	r3, #3
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005278:	2305      	movs	r3, #5
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	4619      	mov	r1, r3
 8005282:	4827      	ldr	r0, [pc, #156]	; (8005320 <HAL_SPI_MspInit+0x114>)
 8005284:	f7fc ff3a 	bl	80020fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005288:	e041      	b.n	800530e <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a25      	ldr	r2, [pc, #148]	; (8005324 <HAL_SPI_MspInit+0x118>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d13c      	bne.n	800530e <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_SPI_MspInit+0x110>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_SPI_MspInit+0x110>)
 800529e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <HAL_SPI_MspInit+0x110>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b19      	ldr	r3, [pc, #100]	; (800531c <HAL_SPI_MspInit+0x110>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_SPI_MspInit+0x110>)
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_SPI_MspInit+0x110>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 80052cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052da:	2303      	movs	r3, #3
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80052de:	2307      	movs	r3, #7
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 80052e2:	f107 031c 	add.w	r3, r7, #28
 80052e6:	4619      	mov	r1, r3
 80052e8:	480d      	ldr	r0, [pc, #52]	; (8005320 <HAL_SPI_MspInit+0x114>)
 80052ea:	f7fc ff07 	bl	80020fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 80052ee:	2330      	movs	r3, #48	; 0x30
 80052f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f2:	2302      	movs	r3, #2
 80052f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	2303      	movs	r3, #3
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80052fe:	2306      	movs	r3, #6
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005302:	f107 031c 	add.w	r3, r7, #28
 8005306:	4619      	mov	r1, r3
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <HAL_SPI_MspInit+0x114>)
 800530a:	f7fc fef7 	bl	80020fc <HAL_GPIO_Init>
}
 800530e:	bf00      	nop
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40003800 	.word	0x40003800
 800531c:	40023800 	.word	0x40023800
 8005320:	40020400 	.word	0x40020400
 8005324:	40003c00 	.word	0x40003c00

08005328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <HAL_MspInit+0x4c>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <HAL_MspInit+0x4c>)
 8005338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800533c:	6453      	str	r3, [r2, #68]	; 0x44
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <HAL_MspInit+0x4c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005346:	607b      	str	r3, [r7, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_MspInit+0x4c>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	4a08      	ldr	r2, [pc, #32]	; (8005374 <HAL_MspInit+0x4c>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6413      	str	r3, [r2, #64]	; 0x40
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_MspInit+0x4c>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538a:	e7fe      	b.n	800538a <HardFault_Handler+0x4>

0800538c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005390:	e7fe      	b.n	8005390 <MemManage_Handler+0x4>

08005392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005392:	b480      	push	{r7}
 8005394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005396:	e7fe      	b.n	8005396 <BusFault_Handler+0x4>

08005398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800539c:	e7fe      	b.n	800539c <UsageFault_Handler+0x4>

0800539e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ba:	b480      	push	{r7}
 80053bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053cc:	f7fb fdf0 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053d8:	4803      	ldr	r0, [pc, #12]	; (80053e8 <TIM6_DAC_IRQHandler+0x14>)
 80053da:	f7fe f829 	bl	8003430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_1ms();
 80053de:	f7ff fa1f 	bl	8004820 <interrupt_1ms>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200006f8 	.word	0x200006f8

080053ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <DMA2_Stream0_IRQHandler+0x10>)
 80053f2:	f7fc fc1b 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200005a8 	.word	0x200005a8

08005400 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e00a      	b.n	8005428 <_read+0x28>
		*ptr++ = __io_getchar();
 8005412:	f3af 8000 	nop.w
 8005416:	4601      	mov	r1, r0
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	60ba      	str	r2, [r7, #8]
 800541e:	b2ca      	uxtb	r2, r1
 8005420:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	dbf0      	blt.n	8005412 <_read+0x12>
	}

	return len;
 8005430:	687b      	ldr	r3, [r7, #4]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

	(void) file; /* Not used, avoid warning */
	SEGGER_RTT_Write(0, ptr, len);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	461a      	mov	r2, r3
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	2000      	movs	r0, #0
 800544e:	f7fe fe1b 	bl	8004088 <SEGGER_RTT_Write>
	return len;
 8005452:	687b      	ldr	r3, [r7, #4]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_close>:

int _close(int file) {
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	return -1;
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <_fstat>:

int _fstat(int file, struct stat *st) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005484:	605a      	str	r2, [r3, #4]
	return 0;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_isatty>:

int _isatty(int file) {
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	return 1;
 800549c:	2301      	movs	r3, #1
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
	return 0;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <_sbrk+0x50>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <_sbrk+0x16>
		heap_end = &end;
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <_sbrk+0x50>)
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <_sbrk+0x54>)
 80054d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80054da:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <_sbrk+0x50>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <_sbrk+0x50>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	466a      	mov	r2, sp
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d907      	bls.n	80054fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80054ee:	f000 fab1 	bl	8005a54 <__errno>
 80054f2:	4602      	mov	r2, r0
 80054f4:	230c      	movs	r3, #12
 80054f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80054f8:	f04f 33ff 	mov.w	r3, #4294967295
 80054fc:	e006      	b.n	800550c <_sbrk+0x48>
	}

	heap_end += incr;
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <_sbrk+0x50>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4413      	add	r3, r2
 8005506:	4a03      	ldr	r2, [pc, #12]	; (8005514 <_sbrk+0x50>)
 8005508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800550a:	68fb      	ldr	r3, [r7, #12]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200004a0 	.word	0x200004a0
 8005518:	20000b68 	.word	0x20000b68

0800551c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <SystemInit+0x60>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <SystemInit+0x60>)
 8005528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800552c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <SystemInit+0x64>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a12      	ldr	r2, [pc, #72]	; (8005580 <SystemInit+0x64>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <SystemInit+0x64>)
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <SystemInit+0x64>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0e      	ldr	r2, [pc, #56]	; (8005580 <SystemInit+0x64>)
 8005548:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <SystemInit+0x64>)
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <SystemInit+0x68>)
 8005556:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <SystemInit+0x64>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <SystemInit+0x64>)
 800555e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <SystemInit+0x64>)
 8005566:	2200      	movs	r2, #0
 8005568:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <SystemInit+0x60>)
 800556c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005570:	609a      	str	r2, [r3, #8]
#endif
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00
 8005580:	40023800 	.word	0x40023800
 8005584:	24003010 	.word	0x24003010

08005588 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800558e:	f107 0320 	add.w	r3, r7, #32
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005598:	1d3b      	adds	r3, r7, #4
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	611a      	str	r2, [r3, #16]
 80055a6:	615a      	str	r2, [r3, #20]
 80055a8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <MX_TIM2_Init+0xc4>)
 80055ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <MX_TIM2_Init+0xc4>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055b8:	4b24      	ldr	r3, [pc, #144]	; (800564c <MX_TIM2_Init+0xc4>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <MX_TIM2_Init+0xc4>)
 80055c0:	f240 321f 	movw	r2, #799	; 0x31f
 80055c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055c6:	4b21      	ldr	r3, [pc, #132]	; (800564c <MX_TIM2_Init+0xc4>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055cc:	4b1f      	ldr	r3, [pc, #124]	; (800564c <MX_TIM2_Init+0xc4>)
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80055d2:	481e      	ldr	r0, [pc, #120]	; (800564c <MX_TIM2_Init+0xc4>)
 80055d4:	f7fd fe6b 	bl	80032ae <HAL_TIM_PWM_Init>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80055de:	f7ff fbdb 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055ea:	f107 0320 	add.w	r3, r7, #32
 80055ee:	4619      	mov	r1, r3
 80055f0:	4816      	ldr	r0, [pc, #88]	; (800564c <MX_TIM2_Init+0xc4>)
 80055f2:	f7fe fb92 	bl	8003d1a <HAL_TIMEx_MasterConfigSynchronization>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80055fc:	f7ff fbcc 	bl	8004d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005600:	2360      	movs	r3, #96	; 0x60
 8005602:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10-1;
 8005604:	2309      	movs	r3, #9
 8005606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	2200      	movs	r2, #0
 8005614:	4619      	mov	r1, r3
 8005616:	480d      	ldr	r0, [pc, #52]	; (800564c <MX_TIM2_Init+0xc4>)
 8005618:	f7fe f812 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8005622:	f7ff fbb9 	bl	8004d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	2204      	movs	r2, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4807      	ldr	r0, [pc, #28]	; (800564c <MX_TIM2_Init+0xc4>)
 800562e:	f7fe f807 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005638:	f7ff fbae 	bl	8004d98 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800563c:	4803      	ldr	r0, [pc, #12]	; (800564c <MX_TIM2_Init+0xc4>)
 800563e:	f000 f8f5 	bl	800582c <HAL_TIM_MspPostInit>

}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000738 	.word	0x20000738

08005650 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005656:	f107 0320 	add.w	r3, r7, #32
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <MX_TIM3_Init+0xac>)
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <MX_TIM3_Init+0xb0>)
 8005676:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8005678:	4b20      	ldr	r3, [pc, #128]	; (80056fc <MX_TIM3_Init+0xac>)
 800567a:	2263      	movs	r2, #99	; 0x63
 800567c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <MX_TIM3_Init+0xac>)
 8005680:	2200      	movs	r2, #0
 8005682:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3822-1;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <MX_TIM3_Init+0xac>)
 8005686:	f640 62ed 	movw	r2, #3821	; 0xeed
 800568a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800568c:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <MX_TIM3_Init+0xac>)
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <MX_TIM3_Init+0xac>)
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005698:	4818      	ldr	r0, [pc, #96]	; (80056fc <MX_TIM3_Init+0xac>)
 800569a:	f7fd fe08 	bl	80032ae <HAL_TIM_PWM_Init>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80056a4:	f7ff fb78 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056a8:	2300      	movs	r3, #0
 80056aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056b0:	f107 0320 	add.w	r3, r7, #32
 80056b4:	4619      	mov	r1, r3
 80056b6:	4811      	ldr	r0, [pc, #68]	; (80056fc <MX_TIM3_Init+0xac>)
 80056b8:	f7fe fb2f 	bl	8003d1a <HAL_TIMEx_MasterConfigSynchronization>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80056c2:	f7ff fb69 	bl	8004d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056c6:	2360      	movs	r3, #96	; 0x60
 80056c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1600;
 80056ca:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80056ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2204      	movs	r2, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4807      	ldr	r0, [pc, #28]	; (80056fc <MX_TIM3_Init+0xac>)
 80056e0:	f7fd ffae 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80056ea:	f7ff fb55 	bl	8004d98 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80056ee:	4803      	ldr	r0, [pc, #12]	; (80056fc <MX_TIM3_Init+0xac>)
 80056f0:	f000 f89c 	bl	800582c <HAL_TIM_MspPostInit>

}
 80056f4:	bf00      	nop
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200006b8 	.word	0x200006b8
 8005700:	40000400 	.word	0x40000400

08005704 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800570a:	463b      	mov	r3, r7
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <MX_TIM6_Init+0x64>)
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <MX_TIM6_Init+0x68>)
 8005716:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <MX_TIM6_Init+0x64>)
 800571a:	2263      	movs	r2, #99	; 0x63
 800571c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <MX_TIM6_Init+0x64>)
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8005724:	4b10      	ldr	r3, [pc, #64]	; (8005768 <MX_TIM6_Init+0x64>)
 8005726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800572a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <MX_TIM6_Init+0x64>)
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005732:	480d      	ldr	r0, [pc, #52]	; (8005768 <MX_TIM6_Init+0x64>)
 8005734:	f7fd fd6c 	bl	8003210 <HAL_TIM_Base_Init>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800573e:	f7ff fb2b 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800574a:	463b      	mov	r3, r7
 800574c:	4619      	mov	r1, r3
 800574e:	4806      	ldr	r0, [pc, #24]	; (8005768 <MX_TIM6_Init+0x64>)
 8005750:	f7fe fae3 	bl	8003d1a <HAL_TIMEx_MasterConfigSynchronization>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800575a:	f7ff fb1d 	bl	8004d98 <Error_Handler>
  }

}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200006f8 	.word	0x200006f8
 800576c:	40001000 	.word	0x40001000

08005770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800579e:	e012      	b.n	80057c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0c      	ldr	r2, [pc, #48]	; (80057d8 <HAL_TIM_PWM_MspInit+0x68>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10d      	bne.n	80057c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_TIM_PWM_MspInit+0x64>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40000400 	.word	0x40000400

080057dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <HAL_TIM_Base_MspInit+0x48>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d115      	bne.n	800581a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 80057f8:	f043 0310 	orr.w	r3, r3, #16
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800580a:	2200      	movs	r2, #0
 800580c:	2100      	movs	r1, #0
 800580e:	2036      	movs	r0, #54	; 0x36
 8005810:	f7fc f8c7 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005814:	2036      	movs	r0, #54	; 0x36
 8005816:	f7fc f8e0 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40001000 	.word	0x40001000
 8005828:	40023800 	.word	0x40023800

0800582c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d13d      	bne.n	80058ca <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a30      	ldr	r2, [pc, #192]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	4a29      	ldr	r2, [pc, #164]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6313      	str	r3, [r2, #48]	; 0x30
 800587a:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588c:	2302      	movs	r3, #2
 800588e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005894:	2300      	movs	r3, #0
 8005896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	4619      	mov	r1, r3
 80058a2:	481e      	ldr	r0, [pc, #120]	; (800591c <HAL_TIM_MspPostInit+0xf0>)
 80058a4:	f7fc fc2a 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 80058a8:	2308      	movs	r3, #8
 80058aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ac:	2302      	movs	r3, #2
 80058ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b4:	2300      	movs	r3, #0
 80058b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058b8:	2301      	movs	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4619      	mov	r1, r3
 80058c2:	4817      	ldr	r0, [pc, #92]	; (8005920 <HAL_TIM_MspPostInit+0xf4>)
 80058c4:	f7fc fc1a 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80058c8:	e022      	b.n	8005910 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <HAL_TIM_MspPostInit+0xf8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d11d      	bne.n	8005910 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d4:	2300      	movs	r3, #0
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6313      	str	r3, [r2, #48]	; 0x30
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_TIM_MspPostInit+0xec>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f4:	2302      	movs	r3, #2
 80058f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fc:	2300      	movs	r3, #0
 80058fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005900:	2302      	movs	r3, #2
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8005904:	f107 0314 	add.w	r3, r7, #20
 8005908:	4619      	mov	r1, r3
 800590a:	4804      	ldr	r0, [pc, #16]	; (800591c <HAL_TIM_MspPostInit+0xf0>)
 800590c:	f7fc fbf6 	bl	80020fc <HAL_GPIO_Init>
}
 8005910:	bf00      	nop
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	40020000 	.word	0x40020000
 8005920:	40020400 	.word	0x40020400
 8005924:	40000400 	.word	0x40000400

08005928 <clear_Map>:
		}

	}
}

void clear_Map(singlewalldata_t *walldate) {
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 16; i++) {
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e00e      	b.n	8005954 <clear_Map+0x2c>
		walldate->column[i] = 0;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	3310      	adds	r3, #16
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	2200      	movs	r2, #0
 8005942:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2100      	movs	r1, #0
 800594a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 16; i++) {
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3301      	adds	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d9ed      	bls.n	8005936 <clear_Map+0xe>
	}
	walldate->column[0] = 0xffff;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005960:	845a      	strh	r2, [r3, #34]	; 0x22
	walldate->row[0] = 0xffff;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005968:	801a      	strh	r2, [r3, #0]
	walldate->column[16] = 0xffff;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005970:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walldate->row[16] = 0xffff;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	841a      	strh	r2, [r3, #32]
	walldate->column[1] = 0x0001;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <clear_adachiMap>:

void clear_adachiMap(singlewalldata_t *walldate) {
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 17; i++) {
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
 800599a:	e014      	b.n	80059c6 <clear_adachiMap+0x38>
		walldate->column[i] = 0xffff;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	3310      	adds	r3, #16
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059aa:	805a      	strh	r2, [r3, #2]
		walldate->row[i] = 0xffff;
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		walldate->row[1] = 0xfffe;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059be:	805a      	strh	r2, [r3, #2]
	for (i = 0; i < 17; i++) {
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	3301      	adds	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d9e7      	bls.n	800599c <clear_adachiMap+0xe>
	}
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <init_walldata>:

void init_walldata(void) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
	clear_Map(&walldata.real);
 80059dc:	4805      	ldr	r0, [pc, #20]	; (80059f4 <init_walldata+0x1c>)
 80059de:	f7ff ffa3 	bl	8005928 <clear_Map>
	clear_Map(&walldata.checked);
 80059e2:	4805      	ldr	r0, [pc, #20]	; (80059f8 <init_walldata+0x20>)
 80059e4:	f7ff ffa0 	bl	8005928 <clear_Map>
	clear_adachiMap(&walldata.adachi);
 80059e8:	4804      	ldr	r0, [pc, #16]	; (80059fc <init_walldata+0x24>)
 80059ea:	f7ff ffd0 	bl	800598e <clear_adachiMap>
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000778 	.word	0x20000778
 80059f8:	200007bc 	.word	0x200007bc
 80059fc:	20000800 	.word	0x20000800

08005a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005a04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a06:	e003      	b.n	8005a10 <LoopCopyDataInit>

08005a08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a0e:	3104      	adds	r1, #4

08005a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a10:	480b      	ldr	r0, [pc, #44]	; (8005a40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a18:	d3f6      	bcc.n	8005a08 <CopyDataInit>
  ldr  r2, =_sbss
 8005a1a:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a1c:	e002      	b.n	8005a24 <LoopFillZerobss>

08005a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005a1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a20:	f842 3b04 	str.w	r3, [r2], #4

08005a24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a28:	d3f9      	bcc.n	8005a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a2a:	f7ff fd77 	bl	800551c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a2e:	f000 f817 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a32:	f7fe ffa9 	bl	8004988 <main>
  bx  lr    
 8005a36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005a38:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005a3c:	08006a7c 	.word	0x08006a7c
  ldr  r0, =_sdata
 8005a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a44:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8005a48:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005a4c:	20000b64 	.word	0x20000b64

08005a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a50:	e7fe      	b.n	8005a50 <ADC_IRQHandler>
	...

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000010 	.word	0x20000010

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4e0d      	ldr	r6, [pc, #52]	; (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1ba4      	subs	r4, r4, r6
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	42a5      	cmp	r5, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4e0b      	ldr	r6, [pc, #44]	; (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 ff74 	bl	8006960 <_init>
 8005a78:	1ba4      	subs	r4, r4, r6
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	42a5      	cmp	r5, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a88:	4798      	blx	r3
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a92:	4798      	blx	r3
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08006a74 	.word	0x08006a74
 8005a9c:	08006a74 	.word	0x08006a74
 8005aa0:	08006a74 	.word	0x08006a74
 8005aa4:	08006a78 	.word	0x08006a78

08005aa8 <memcpy>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	1e43      	subs	r3, r0, #1
 8005aac:	440a      	add	r2, r1
 8005aae:	4291      	cmp	r1, r2
 8005ab0:	d100      	bne.n	8005ab4 <memcpy+0xc>
 8005ab2:	bd10      	pop	{r4, pc}
 8005ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005abc:	e7f7      	b.n	8005aae <memcpy+0x6>

08005abe <memset>:
 8005abe:	4402      	add	r2, r0
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d100      	bne.n	8005ac8 <memset+0xa>
 8005ac6:	4770      	bx	lr
 8005ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8005acc:	e7f9      	b.n	8005ac2 <memset+0x4>
	...

08005ad0 <iprintf>:
 8005ad0:	b40f      	push	{r0, r1, r2, r3}
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <iprintf+0x2c>)
 8005ad4:	b513      	push	{r0, r1, r4, lr}
 8005ad6:	681c      	ldr	r4, [r3, #0]
 8005ad8:	b124      	cbz	r4, 8005ae4 <iprintf+0x14>
 8005ada:	69a3      	ldr	r3, [r4, #24]
 8005adc:	b913      	cbnz	r3, 8005ae4 <iprintf+0x14>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 fa22 	bl	8005f28 <__sinit>
 8005ae4:	ab05      	add	r3, sp, #20
 8005ae6:	9a04      	ldr	r2, [sp, #16]
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 fbdb 	bl	80062a8 <_vfiprintf_r>
 8005af2:	b002      	add	sp, #8
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	b004      	add	sp, #16
 8005afa:	4770      	bx	lr
 8005afc:	20000010 	.word	0x20000010

08005b00 <_puts_r>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	460e      	mov	r6, r1
 8005b04:	4605      	mov	r5, r0
 8005b06:	b118      	cbz	r0, 8005b10 <_puts_r+0x10>
 8005b08:	6983      	ldr	r3, [r0, #24]
 8005b0a:	b90b      	cbnz	r3, 8005b10 <_puts_r+0x10>
 8005b0c:	f000 fa0c 	bl	8005f28 <__sinit>
 8005b10:	69ab      	ldr	r3, [r5, #24]
 8005b12:	68ac      	ldr	r4, [r5, #8]
 8005b14:	b913      	cbnz	r3, 8005b1c <_puts_r+0x1c>
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fa06 	bl	8005f28 <__sinit>
 8005b1c:	4b23      	ldr	r3, [pc, #140]	; (8005bac <_puts_r+0xac>)
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d117      	bne.n	8005b52 <_puts_r+0x52>
 8005b22:	686c      	ldr	r4, [r5, #4]
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	071b      	lsls	r3, r3, #28
 8005b28:	d51d      	bpl.n	8005b66 <_puts_r+0x66>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	b1db      	cbz	r3, 8005b66 <_puts_r+0x66>
 8005b2e:	3e01      	subs	r6, #1
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60a3      	str	r3, [r4, #8]
 8005b3a:	b9e9      	cbnz	r1, 8005b78 <_puts_r+0x78>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da2e      	bge.n	8005b9e <_puts_r+0x9e>
 8005b40:	4622      	mov	r2, r4
 8005b42:	210a      	movs	r1, #10
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 f83f 	bl	8005bc8 <__swbuf_r>
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d011      	beq.n	8005b72 <_puts_r+0x72>
 8005b4e:	200a      	movs	r0, #10
 8005b50:	e011      	b.n	8005b76 <_puts_r+0x76>
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <_puts_r+0xb0>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d101      	bne.n	8005b5c <_puts_r+0x5c>
 8005b58:	68ac      	ldr	r4, [r5, #8]
 8005b5a:	e7e3      	b.n	8005b24 <_puts_r+0x24>
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <_puts_r+0xb4>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	bf08      	it	eq
 8005b62:	68ec      	ldreq	r4, [r5, #12]
 8005b64:	e7de      	b.n	8005b24 <_puts_r+0x24>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 f87f 	bl	8005c6c <__swsetup_r>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d0dd      	beq.n	8005b2e <_puts_r+0x2e>
 8005b72:	f04f 30ff 	mov.w	r0, #4294967295
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da04      	bge.n	8005b86 <_puts_r+0x86>
 8005b7c:	69a2      	ldr	r2, [r4, #24]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	dc06      	bgt.n	8005b90 <_puts_r+0x90>
 8005b82:	290a      	cmp	r1, #10
 8005b84:	d004      	beq.n	8005b90 <_puts_r+0x90>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	6022      	str	r2, [r4, #0]
 8005b8c:	7019      	strb	r1, [r3, #0]
 8005b8e:	e7cf      	b.n	8005b30 <_puts_r+0x30>
 8005b90:	4622      	mov	r2, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 f818 	bl	8005bc8 <__swbuf_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d1c9      	bne.n	8005b30 <_puts_r+0x30>
 8005b9c:	e7e9      	b.n	8005b72 <_puts_r+0x72>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	7018      	strb	r0, [r3, #0]
 8005ba8:	e7e5      	b.n	8005b76 <_puts_r+0x76>
 8005baa:	bf00      	nop
 8005bac:	080069f8 	.word	0x080069f8
 8005bb0:	08006a18 	.word	0x08006a18
 8005bb4:	080069d8 	.word	0x080069d8

08005bb8 <puts>:
 8005bb8:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <puts+0xc>)
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7ff bf9f 	b.w	8005b00 <_puts_r>
 8005bc2:	bf00      	nop
 8005bc4:	20000010 	.word	0x20000010

08005bc8 <__swbuf_r>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	460e      	mov	r6, r1
 8005bcc:	4614      	mov	r4, r2
 8005bce:	4605      	mov	r5, r0
 8005bd0:	b118      	cbz	r0, 8005bda <__swbuf_r+0x12>
 8005bd2:	6983      	ldr	r3, [r0, #24]
 8005bd4:	b90b      	cbnz	r3, 8005bda <__swbuf_r+0x12>
 8005bd6:	f000 f9a7 	bl	8005f28 <__sinit>
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <__swbuf_r+0x98>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	d12a      	bne.n	8005c36 <__swbuf_r+0x6e>
 8005be0:	686c      	ldr	r4, [r5, #4]
 8005be2:	69a3      	ldr	r3, [r4, #24]
 8005be4:	60a3      	str	r3, [r4, #8]
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	071a      	lsls	r2, r3, #28
 8005bea:	d52e      	bpl.n	8005c4a <__swbuf_r+0x82>
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	b363      	cbz	r3, 8005c4a <__swbuf_r+0x82>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	1ac0      	subs	r0, r0, r3
 8005bf6:	6963      	ldr	r3, [r4, #20]
 8005bf8:	b2f6      	uxtb	r6, r6
 8005bfa:	4283      	cmp	r3, r0
 8005bfc:	4637      	mov	r7, r6
 8005bfe:	dc04      	bgt.n	8005c0a <__swbuf_r+0x42>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 f926 	bl	8005e54 <_fflush_r>
 8005c08:	bb28      	cbnz	r0, 8005c56 <__swbuf_r+0x8e>
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	60a3      	str	r3, [r4, #8]
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	701e      	strb	r6, [r3, #0]
 8005c18:	6963      	ldr	r3, [r4, #20]
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	4283      	cmp	r3, r0
 8005c1e:	d004      	beq.n	8005c2a <__swbuf_r+0x62>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	07db      	lsls	r3, r3, #31
 8005c24:	d519      	bpl.n	8005c5a <__swbuf_r+0x92>
 8005c26:	2e0a      	cmp	r6, #10
 8005c28:	d117      	bne.n	8005c5a <__swbuf_r+0x92>
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 f911 	bl	8005e54 <_fflush_r>
 8005c32:	b190      	cbz	r0, 8005c5a <__swbuf_r+0x92>
 8005c34:	e00f      	b.n	8005c56 <__swbuf_r+0x8e>
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <__swbuf_r+0x9c>)
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	d101      	bne.n	8005c40 <__swbuf_r+0x78>
 8005c3c:	68ac      	ldr	r4, [r5, #8]
 8005c3e:	e7d0      	b.n	8005be2 <__swbuf_r+0x1a>
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <__swbuf_r+0xa0>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	bf08      	it	eq
 8005c46:	68ec      	ldreq	r4, [r5, #12]
 8005c48:	e7cb      	b.n	8005be2 <__swbuf_r+0x1a>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 f80d 	bl	8005c6c <__swsetup_r>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0cc      	beq.n	8005bf0 <__swbuf_r+0x28>
 8005c56:	f04f 37ff 	mov.w	r7, #4294967295
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	080069f8 	.word	0x080069f8
 8005c64:	08006a18 	.word	0x08006a18
 8005c68:	080069d8 	.word	0x080069d8

08005c6c <__swsetup_r>:
 8005c6c:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <__swsetup_r+0xcc>)
 8005c6e:	b570      	push	{r4, r5, r6, lr}
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	4606      	mov	r6, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	b125      	cbz	r5, 8005c82 <__swsetup_r+0x16>
 8005c78:	69ab      	ldr	r3, [r5, #24]
 8005c7a:	b913      	cbnz	r3, 8005c82 <__swsetup_r+0x16>
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f953 	bl	8005f28 <__sinit>
 8005c82:	4b2e      	ldr	r3, [pc, #184]	; (8005d3c <__swsetup_r+0xd0>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d10f      	bne.n	8005ca8 <__swsetup_r+0x3c>
 8005c88:	686c      	ldr	r4, [r5, #4]
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	0715      	lsls	r5, r2, #28
 8005c92:	d42c      	bmi.n	8005cee <__swsetup_r+0x82>
 8005c94:	06d0      	lsls	r0, r2, #27
 8005c96:	d411      	bmi.n	8005cbc <__swsetup_r+0x50>
 8005c98:	2209      	movs	r2, #9
 8005c9a:	6032      	str	r2, [r6, #0]
 8005c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	e03e      	b.n	8005d26 <__swsetup_r+0xba>
 8005ca8:	4b25      	ldr	r3, [pc, #148]	; (8005d40 <__swsetup_r+0xd4>)
 8005caa:	429c      	cmp	r4, r3
 8005cac:	d101      	bne.n	8005cb2 <__swsetup_r+0x46>
 8005cae:	68ac      	ldr	r4, [r5, #8]
 8005cb0:	e7eb      	b.n	8005c8a <__swsetup_r+0x1e>
 8005cb2:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <__swsetup_r+0xd8>)
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	bf08      	it	eq
 8005cb8:	68ec      	ldreq	r4, [r5, #12]
 8005cba:	e7e6      	b.n	8005c8a <__swsetup_r+0x1e>
 8005cbc:	0751      	lsls	r1, r2, #29
 8005cbe:	d512      	bpl.n	8005ce6 <__swsetup_r+0x7a>
 8005cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cc2:	b141      	cbz	r1, 8005cd6 <__swsetup_r+0x6a>
 8005cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d002      	beq.n	8005cd2 <__swsetup_r+0x66>
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 fa19 	bl	8006104 <_free_r>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	f043 0308 	orr.w	r3, r3, #8
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	b94b      	cbnz	r3, 8005d06 <__swsetup_r+0x9a>
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfc:	d003      	beq.n	8005d06 <__swsetup_r+0x9a>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f9bf 	bl	8006084 <__smakebuf_r>
 8005d06:	89a2      	ldrh	r2, [r4, #12]
 8005d08:	f012 0301 	ands.w	r3, r2, #1
 8005d0c:	d00c      	beq.n	8005d28 <__swsetup_r+0xbc>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	6963      	ldr	r3, [r4, #20]
 8005d14:	425b      	negs	r3, r3
 8005d16:	61a3      	str	r3, [r4, #24]
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b953      	cbnz	r3, 8005d32 <__swsetup_r+0xc6>
 8005d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005d24:	d1ba      	bne.n	8005c9c <__swsetup_r+0x30>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	0792      	lsls	r2, r2, #30
 8005d2a:	bf58      	it	pl
 8005d2c:	6963      	ldrpl	r3, [r4, #20]
 8005d2e:	60a3      	str	r3, [r4, #8]
 8005d30:	e7f2      	b.n	8005d18 <__swsetup_r+0xac>
 8005d32:	2000      	movs	r0, #0
 8005d34:	e7f7      	b.n	8005d26 <__swsetup_r+0xba>
 8005d36:	bf00      	nop
 8005d38:	20000010 	.word	0x20000010
 8005d3c:	080069f8 	.word	0x080069f8
 8005d40:	08006a18 	.word	0x08006a18
 8005d44:	080069d8 	.word	0x080069d8

08005d48 <__sflush_r>:
 8005d48:	898a      	ldrh	r2, [r1, #12]
 8005d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	4605      	mov	r5, r0
 8005d50:	0710      	lsls	r0, r2, #28
 8005d52:	460c      	mov	r4, r1
 8005d54:	d458      	bmi.n	8005e08 <__sflush_r+0xc0>
 8005d56:	684b      	ldr	r3, [r1, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dc05      	bgt.n	8005d68 <__sflush_r+0x20>
 8005d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dc02      	bgt.n	8005d68 <__sflush_r+0x20>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	d0f9      	beq.n	8005d62 <__sflush_r+0x1a>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d74:	682f      	ldr	r7, [r5, #0]
 8005d76:	6a21      	ldr	r1, [r4, #32]
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	d032      	beq.n	8005de2 <__sflush_r+0x9a>
 8005d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	075a      	lsls	r2, r3, #29
 8005d82:	d505      	bpl.n	8005d90 <__sflush_r+0x48>
 8005d84:	6863      	ldr	r3, [r4, #4]
 8005d86:	1ac0      	subs	r0, r0, r3
 8005d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d8a:	b10b      	cbz	r3, 8005d90 <__sflush_r+0x48>
 8005d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d8e:	1ac0      	subs	r0, r0, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	4602      	mov	r2, r0
 8005d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d96:	6a21      	ldr	r1, [r4, #32]
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b0      	blx	r6
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	d106      	bne.n	8005db0 <__sflush_r+0x68>
 8005da2:	6829      	ldr	r1, [r5, #0]
 8005da4:	291d      	cmp	r1, #29
 8005da6:	d848      	bhi.n	8005e3a <__sflush_r+0xf2>
 8005da8:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <__sflush_r+0x108>)
 8005daa:	40ca      	lsrs	r2, r1
 8005dac:	07d6      	lsls	r6, r2, #31
 8005dae:	d544      	bpl.n	8005e3a <__sflush_r+0xf2>
 8005db0:	2200      	movs	r2, #0
 8005db2:	6062      	str	r2, [r4, #4]
 8005db4:	04d9      	lsls	r1, r3, #19
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	d504      	bpl.n	8005dc6 <__sflush_r+0x7e>
 8005dbc:	1c42      	adds	r2, r0, #1
 8005dbe:	d101      	bne.n	8005dc4 <__sflush_r+0x7c>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b903      	cbnz	r3, 8005dc6 <__sflush_r+0x7e>
 8005dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8005dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dc8:	602f      	str	r7, [r5, #0]
 8005dca:	2900      	cmp	r1, #0
 8005dcc:	d0c9      	beq.n	8005d62 <__sflush_r+0x1a>
 8005dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	d002      	beq.n	8005ddc <__sflush_r+0x94>
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f994 	bl	8006104 <_free_r>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	6360      	str	r0, [r4, #52]	; 0x34
 8005de0:	e7c0      	b.n	8005d64 <__sflush_r+0x1c>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b0      	blx	r6
 8005de8:	1c41      	adds	r1, r0, #1
 8005dea:	d1c8      	bne.n	8005d7e <__sflush_r+0x36>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0c5      	beq.n	8005d7e <__sflush_r+0x36>
 8005df2:	2b1d      	cmp	r3, #29
 8005df4:	d001      	beq.n	8005dfa <__sflush_r+0xb2>
 8005df6:	2b16      	cmp	r3, #22
 8005df8:	d101      	bne.n	8005dfe <__sflush_r+0xb6>
 8005dfa:	602f      	str	r7, [r5, #0]
 8005dfc:	e7b1      	b.n	8005d62 <__sflush_r+0x1a>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	e7ad      	b.n	8005d64 <__sflush_r+0x1c>
 8005e08:	690f      	ldr	r7, [r1, #16]
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	d0a9      	beq.n	8005d62 <__sflush_r+0x1a>
 8005e0e:	0793      	lsls	r3, r2, #30
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	bf08      	it	eq
 8005e14:	694b      	ldreq	r3, [r1, #20]
 8005e16:	600f      	str	r7, [r1, #0]
 8005e18:	bf18      	it	ne
 8005e1a:	2300      	movne	r3, #0
 8005e1c:	eba6 0807 	sub.w	r8, r6, r7
 8005e20:	608b      	str	r3, [r1, #8]
 8005e22:	f1b8 0f00 	cmp.w	r8, #0
 8005e26:	dd9c      	ble.n	8005d62 <__sflush_r+0x1a>
 8005e28:	4643      	mov	r3, r8
 8005e2a:	463a      	mov	r2, r7
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b0      	blx	r6
 8005e34:	2800      	cmp	r0, #0
 8005e36:	dc06      	bgt.n	8005e46 <__sflush_r+0xfe>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e78e      	b.n	8005d64 <__sflush_r+0x1c>
 8005e46:	4407      	add	r7, r0
 8005e48:	eba8 0800 	sub.w	r8, r8, r0
 8005e4c:	e7e9      	b.n	8005e22 <__sflush_r+0xda>
 8005e4e:	bf00      	nop
 8005e50:	20400001 	.word	0x20400001

08005e54 <_fflush_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	690b      	ldr	r3, [r1, #16]
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b1db      	cbz	r3, 8005e96 <_fflush_r+0x42>
 8005e5e:	b118      	cbz	r0, 8005e68 <_fflush_r+0x14>
 8005e60:	6983      	ldr	r3, [r0, #24]
 8005e62:	b90b      	cbnz	r3, 8005e68 <_fflush_r+0x14>
 8005e64:	f000 f860 	bl	8005f28 <__sinit>
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <_fflush_r+0x48>)
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d109      	bne.n	8005e82 <_fflush_r+0x2e>
 8005e6e:	686c      	ldr	r4, [r5, #4]
 8005e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e74:	b17b      	cbz	r3, 8005e96 <_fflush_r+0x42>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e7e:	f7ff bf63 	b.w	8005d48 <__sflush_r>
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <_fflush_r+0x4c>)
 8005e84:	429c      	cmp	r4, r3
 8005e86:	d101      	bne.n	8005e8c <_fflush_r+0x38>
 8005e88:	68ac      	ldr	r4, [r5, #8]
 8005e8a:	e7f1      	b.n	8005e70 <_fflush_r+0x1c>
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_fflush_r+0x50>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	bf08      	it	eq
 8005e92:	68ec      	ldreq	r4, [r5, #12]
 8005e94:	e7ec      	b.n	8005e70 <_fflush_r+0x1c>
 8005e96:	2000      	movs	r0, #0
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
 8005e9a:	bf00      	nop
 8005e9c:	080069f8 	.word	0x080069f8
 8005ea0:	08006a18 	.word	0x08006a18
 8005ea4:	080069d8 	.word	0x080069d8

08005ea8 <std>:
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	4604      	mov	r4, r0
 8005eae:	e9c0 3300 	strd	r3, r3, [r0]
 8005eb2:	6083      	str	r3, [r0, #8]
 8005eb4:	8181      	strh	r1, [r0, #12]
 8005eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8005eb8:	81c2      	strh	r2, [r0, #14]
 8005eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ebe:	6183      	str	r3, [r0, #24]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	305c      	adds	r0, #92	; 0x5c
 8005ec6:	f7ff fdfa 	bl	8005abe <memset>
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <std+0x38>)
 8005ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <std+0x3c>)
 8005ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <std+0x40>)
 8005ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <std+0x44>)
 8005ed8:	6224      	str	r4, [r4, #32]
 8005eda:	6323      	str	r3, [r4, #48]	; 0x30
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	08006805 	.word	0x08006805
 8005ee4:	08006827 	.word	0x08006827
 8005ee8:	0800685f 	.word	0x0800685f
 8005eec:	08006883 	.word	0x08006883

08005ef0 <_cleanup_r>:
 8005ef0:	4901      	ldr	r1, [pc, #4]	; (8005ef8 <_cleanup_r+0x8>)
 8005ef2:	f000 b885 	b.w	8006000 <_fwalk_reent>
 8005ef6:	bf00      	nop
 8005ef8:	08005e55 	.word	0x08005e55

08005efc <__sfmoreglue>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	1e4a      	subs	r2, r1, #1
 8005f00:	2568      	movs	r5, #104	; 0x68
 8005f02:	4355      	muls	r5, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f0a:	f000 f949 	bl	80061a0 <_malloc_r>
 8005f0e:	4604      	mov	r4, r0
 8005f10:	b140      	cbz	r0, 8005f24 <__sfmoreglue+0x28>
 8005f12:	2100      	movs	r1, #0
 8005f14:	e9c0 1600 	strd	r1, r6, [r0]
 8005f18:	300c      	adds	r0, #12
 8005f1a:	60a0      	str	r0, [r4, #8]
 8005f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f20:	f7ff fdcd 	bl	8005abe <memset>
 8005f24:	4620      	mov	r0, r4
 8005f26:	bd70      	pop	{r4, r5, r6, pc}

08005f28 <__sinit>:
 8005f28:	6983      	ldr	r3, [r0, #24]
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	bb33      	cbnz	r3, 8005f7e <__sinit+0x56>
 8005f30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005f34:	6503      	str	r3, [r0, #80]	; 0x50
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <__sinit+0x58>)
 8005f38:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <__sinit+0x5c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6282      	str	r2, [r0, #40]	; 0x28
 8005f3e:	4298      	cmp	r0, r3
 8005f40:	bf04      	itt	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	6183      	streq	r3, [r0, #24]
 8005f46:	f000 f81f 	bl	8005f88 <__sfp>
 8005f4a:	6060      	str	r0, [r4, #4]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f81b 	bl	8005f88 <__sfp>
 8005f52:	60a0      	str	r0, [r4, #8]
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 f817 	bl	8005f88 <__sfp>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60e0      	str	r0, [r4, #12]
 8005f5e:	2104      	movs	r1, #4
 8005f60:	6860      	ldr	r0, [r4, #4]
 8005f62:	f7ff ffa1 	bl	8005ea8 <std>
 8005f66:	2201      	movs	r2, #1
 8005f68:	2109      	movs	r1, #9
 8005f6a:	68a0      	ldr	r0, [r4, #8]
 8005f6c:	f7ff ff9c 	bl	8005ea8 <std>
 8005f70:	2202      	movs	r2, #2
 8005f72:	2112      	movs	r1, #18
 8005f74:	68e0      	ldr	r0, [r4, #12]
 8005f76:	f7ff ff97 	bl	8005ea8 <std>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61a3      	str	r3, [r4, #24]
 8005f7e:	bd10      	pop	{r4, pc}
 8005f80:	080069d4 	.word	0x080069d4
 8005f84:	08005ef1 	.word	0x08005ef1

08005f88 <__sfp>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <__sfp+0x70>)
 8005f8c:	681e      	ldr	r6, [r3, #0]
 8005f8e:	69b3      	ldr	r3, [r6, #24]
 8005f90:	4607      	mov	r7, r0
 8005f92:	b913      	cbnz	r3, 8005f9a <__sfp+0x12>
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffc7 	bl	8005f28 <__sinit>
 8005f9a:	3648      	adds	r6, #72	; 0x48
 8005f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	d503      	bpl.n	8005fac <__sfp+0x24>
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	b133      	cbz	r3, 8005fb6 <__sfp+0x2e>
 8005fa8:	6836      	ldr	r6, [r6, #0]
 8005faa:	e7f7      	b.n	8005f9c <__sfp+0x14>
 8005fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fb0:	b16d      	cbz	r5, 8005fce <__sfp+0x46>
 8005fb2:	3468      	adds	r4, #104	; 0x68
 8005fb4:	e7f4      	b.n	8005fa0 <__sfp+0x18>
 8005fb6:	2104      	movs	r1, #4
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f7ff ff9f 	bl	8005efc <__sfmoreglue>
 8005fbe:	6030      	str	r0, [r6, #0]
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1f1      	bne.n	8005fa8 <__sfp+0x20>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4620      	mov	r0, r4
 8005fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <__sfp+0x74>)
 8005fd0:	6665      	str	r5, [r4, #100]	; 0x64
 8005fd2:	e9c4 5500 	strd	r5, r5, [r4]
 8005fd6:	60a5      	str	r5, [r4, #8]
 8005fd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005fdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fe8:	f7ff fd69 	bl	8005abe <memset>
 8005fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ff4:	e7e9      	b.n	8005fca <__sfp+0x42>
 8005ff6:	bf00      	nop
 8005ff8:	080069d4 	.word	0x080069d4
 8005ffc:	ffff0001 	.word	0xffff0001

08006000 <_fwalk_reent>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4680      	mov	r8, r0
 8006006:	4689      	mov	r9, r1
 8006008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800600c:	2600      	movs	r6, #0
 800600e:	b914      	cbnz	r4, 8006016 <_fwalk_reent+0x16>
 8006010:	4630      	mov	r0, r6
 8006012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006016:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800601a:	3f01      	subs	r7, #1
 800601c:	d501      	bpl.n	8006022 <_fwalk_reent+0x22>
 800601e:	6824      	ldr	r4, [r4, #0]
 8006020:	e7f5      	b.n	800600e <_fwalk_reent+0xe>
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d907      	bls.n	8006038 <_fwalk_reent+0x38>
 8006028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800602c:	3301      	adds	r3, #1
 800602e:	d003      	beq.n	8006038 <_fwalk_reent+0x38>
 8006030:	4629      	mov	r1, r5
 8006032:	4640      	mov	r0, r8
 8006034:	47c8      	blx	r9
 8006036:	4306      	orrs	r6, r0
 8006038:	3568      	adds	r5, #104	; 0x68
 800603a:	e7ee      	b.n	800601a <_fwalk_reent+0x1a>

0800603c <__swhatbuf_r>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	460e      	mov	r6, r1
 8006040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006044:	2900      	cmp	r1, #0
 8006046:	b096      	sub	sp, #88	; 0x58
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	da07      	bge.n	800605e <__swhatbuf_r+0x22>
 800604e:	2300      	movs	r3, #0
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	89b3      	ldrh	r3, [r6, #12]
 8006054:	061a      	lsls	r2, r3, #24
 8006056:	d410      	bmi.n	800607a <__swhatbuf_r+0x3e>
 8006058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605c:	e00e      	b.n	800607c <__swhatbuf_r+0x40>
 800605e:	466a      	mov	r2, sp
 8006060:	f000 fc36 	bl	80068d0 <_fstat_r>
 8006064:	2800      	cmp	r0, #0
 8006066:	dbf2      	blt.n	800604e <__swhatbuf_r+0x12>
 8006068:	9a01      	ldr	r2, [sp, #4]
 800606a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800606e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006072:	425a      	negs	r2, r3
 8006074:	415a      	adcs	r2, r3
 8006076:	602a      	str	r2, [r5, #0]
 8006078:	e7ee      	b.n	8006058 <__swhatbuf_r+0x1c>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	2000      	movs	r0, #0
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	b016      	add	sp, #88	; 0x58
 8006082:	bd70      	pop	{r4, r5, r6, pc}

08006084 <__smakebuf_r>:
 8006084:	898b      	ldrh	r3, [r1, #12]
 8006086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006088:	079d      	lsls	r5, r3, #30
 800608a:	4606      	mov	r6, r0
 800608c:	460c      	mov	r4, r1
 800608e:	d507      	bpl.n	80060a0 <__smakebuf_r+0x1c>
 8006090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	6123      	str	r3, [r4, #16]
 8006098:	2301      	movs	r3, #1
 800609a:	6163      	str	r3, [r4, #20]
 800609c:	b002      	add	sp, #8
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	ab01      	add	r3, sp, #4
 80060a2:	466a      	mov	r2, sp
 80060a4:	f7ff ffca 	bl	800603c <__swhatbuf_r>
 80060a8:	9900      	ldr	r1, [sp, #0]
 80060aa:	4605      	mov	r5, r0
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f877 	bl	80061a0 <_malloc_r>
 80060b2:	b948      	cbnz	r0, 80060c8 <__smakebuf_r+0x44>
 80060b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d4ef      	bmi.n	800609c <__smakebuf_r+0x18>
 80060bc:	f023 0303 	bic.w	r3, r3, #3
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	e7e3      	b.n	8006090 <__smakebuf_r+0xc>
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <__smakebuf_r+0x7c>)
 80060ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	6020      	str	r0, [r4, #0]
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	6163      	str	r3, [r4, #20]
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	6120      	str	r0, [r4, #16]
 80060de:	b15b      	cbz	r3, 80060f8 <__smakebuf_r+0x74>
 80060e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 fc05 	bl	80068f4 <_isatty_r>
 80060ea:	b128      	cbz	r0, 80060f8 <__smakebuf_r+0x74>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	431d      	orrs	r5, r3
 80060fc:	81a5      	strh	r5, [r4, #12]
 80060fe:	e7cd      	b.n	800609c <__smakebuf_r+0x18>
 8006100:	08005ef1 	.word	0x08005ef1

08006104 <_free_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	2900      	cmp	r1, #0
 800610a:	d045      	beq.n	8006198 <_free_r+0x94>
 800610c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006110:	1f0c      	subs	r4, r1, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfb8      	it	lt
 8006116:	18e4      	addlt	r4, r4, r3
 8006118:	f000 fc0e 	bl	8006938 <__malloc_lock>
 800611c:	4a1f      	ldr	r2, [pc, #124]	; (800619c <_free_r+0x98>)
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	4610      	mov	r0, r2
 8006122:	b933      	cbnz	r3, 8006132 <_free_r+0x2e>
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	6014      	str	r4, [r2, #0]
 8006128:	4628      	mov	r0, r5
 800612a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800612e:	f000 bc04 	b.w	800693a <__malloc_unlock>
 8006132:	42a3      	cmp	r3, r4
 8006134:	d90c      	bls.n	8006150 <_free_r+0x4c>
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	1862      	adds	r2, r4, r1
 800613a:	4293      	cmp	r3, r2
 800613c:	bf04      	itt	eq
 800613e:	681a      	ldreq	r2, [r3, #0]
 8006140:	685b      	ldreq	r3, [r3, #4]
 8006142:	6063      	str	r3, [r4, #4]
 8006144:	bf04      	itt	eq
 8006146:	1852      	addeq	r2, r2, r1
 8006148:	6022      	streq	r2, [r4, #0]
 800614a:	6004      	str	r4, [r0, #0]
 800614c:	e7ec      	b.n	8006128 <_free_r+0x24>
 800614e:	4613      	mov	r3, r2
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	b10a      	cbz	r2, 8006158 <_free_r+0x54>
 8006154:	42a2      	cmp	r2, r4
 8006156:	d9fa      	bls.n	800614e <_free_r+0x4a>
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	1858      	adds	r0, r3, r1
 800615c:	42a0      	cmp	r0, r4
 800615e:	d10b      	bne.n	8006178 <_free_r+0x74>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	4401      	add	r1, r0
 8006164:	1858      	adds	r0, r3, r1
 8006166:	4282      	cmp	r2, r0
 8006168:	6019      	str	r1, [r3, #0]
 800616a:	d1dd      	bne.n	8006128 <_free_r+0x24>
 800616c:	6810      	ldr	r0, [r2, #0]
 800616e:	6852      	ldr	r2, [r2, #4]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	4401      	add	r1, r0
 8006174:	6019      	str	r1, [r3, #0]
 8006176:	e7d7      	b.n	8006128 <_free_r+0x24>
 8006178:	d902      	bls.n	8006180 <_free_r+0x7c>
 800617a:	230c      	movs	r3, #12
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	e7d3      	b.n	8006128 <_free_r+0x24>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	1821      	adds	r1, r4, r0
 8006184:	428a      	cmp	r2, r1
 8006186:	bf04      	itt	eq
 8006188:	6811      	ldreq	r1, [r2, #0]
 800618a:	6852      	ldreq	r2, [r2, #4]
 800618c:	6062      	str	r2, [r4, #4]
 800618e:	bf04      	itt	eq
 8006190:	1809      	addeq	r1, r1, r0
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	605c      	str	r4, [r3, #4]
 8006196:	e7c7      	b.n	8006128 <_free_r+0x24>
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	bf00      	nop
 800619c:	200004ac 	.word	0x200004ac

080061a0 <_malloc_r>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	1ccd      	adds	r5, r1, #3
 80061a4:	f025 0503 	bic.w	r5, r5, #3
 80061a8:	3508      	adds	r5, #8
 80061aa:	2d0c      	cmp	r5, #12
 80061ac:	bf38      	it	cc
 80061ae:	250c      	movcc	r5, #12
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	4606      	mov	r6, r0
 80061b4:	db01      	blt.n	80061ba <_malloc_r+0x1a>
 80061b6:	42a9      	cmp	r1, r5
 80061b8:	d903      	bls.n	80061c2 <_malloc_r+0x22>
 80061ba:	230c      	movs	r3, #12
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	2000      	movs	r0, #0
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	f000 fbb9 	bl	8006938 <__malloc_lock>
 80061c6:	4a21      	ldr	r2, [pc, #132]	; (800624c <_malloc_r+0xac>)
 80061c8:	6814      	ldr	r4, [r2, #0]
 80061ca:	4621      	mov	r1, r4
 80061cc:	b991      	cbnz	r1, 80061f4 <_malloc_r+0x54>
 80061ce:	4c20      	ldr	r4, [pc, #128]	; (8006250 <_malloc_r+0xb0>)
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	b91b      	cbnz	r3, 80061dc <_malloc_r+0x3c>
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 fb05 	bl	80067e4 <_sbrk_r>
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	4629      	mov	r1, r5
 80061de:	4630      	mov	r0, r6
 80061e0:	f000 fb00 	bl	80067e4 <_sbrk_r>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d124      	bne.n	8006232 <_malloc_r+0x92>
 80061e8:	230c      	movs	r3, #12
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	4630      	mov	r0, r6
 80061ee:	f000 fba4 	bl	800693a <__malloc_unlock>
 80061f2:	e7e4      	b.n	80061be <_malloc_r+0x1e>
 80061f4:	680b      	ldr	r3, [r1, #0]
 80061f6:	1b5b      	subs	r3, r3, r5
 80061f8:	d418      	bmi.n	800622c <_malloc_r+0x8c>
 80061fa:	2b0b      	cmp	r3, #11
 80061fc:	d90f      	bls.n	800621e <_malloc_r+0x7e>
 80061fe:	600b      	str	r3, [r1, #0]
 8006200:	50cd      	str	r5, [r1, r3]
 8006202:	18cc      	adds	r4, r1, r3
 8006204:	4630      	mov	r0, r6
 8006206:	f000 fb98 	bl	800693a <__malloc_unlock>
 800620a:	f104 000b 	add.w	r0, r4, #11
 800620e:	1d23      	adds	r3, r4, #4
 8006210:	f020 0007 	bic.w	r0, r0, #7
 8006214:	1ac3      	subs	r3, r0, r3
 8006216:	d0d3      	beq.n	80061c0 <_malloc_r+0x20>
 8006218:	425a      	negs	r2, r3
 800621a:	50e2      	str	r2, [r4, r3]
 800621c:	e7d0      	b.n	80061c0 <_malloc_r+0x20>
 800621e:	428c      	cmp	r4, r1
 8006220:	684b      	ldr	r3, [r1, #4]
 8006222:	bf16      	itet	ne
 8006224:	6063      	strne	r3, [r4, #4]
 8006226:	6013      	streq	r3, [r2, #0]
 8006228:	460c      	movne	r4, r1
 800622a:	e7eb      	b.n	8006204 <_malloc_r+0x64>
 800622c:	460c      	mov	r4, r1
 800622e:	6849      	ldr	r1, [r1, #4]
 8006230:	e7cc      	b.n	80061cc <_malloc_r+0x2c>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d005      	beq.n	8006248 <_malloc_r+0xa8>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4630      	mov	r0, r6
 8006240:	f000 fad0 	bl	80067e4 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d0cf      	beq.n	80061e8 <_malloc_r+0x48>
 8006248:	6025      	str	r5, [r4, #0]
 800624a:	e7db      	b.n	8006204 <_malloc_r+0x64>
 800624c:	200004ac 	.word	0x200004ac
 8006250:	200004b0 	.word	0x200004b0

08006254 <__sfputc_r>:
 8006254:	6893      	ldr	r3, [r2, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	b410      	push	{r4}
 800625c:	6093      	str	r3, [r2, #8]
 800625e:	da08      	bge.n	8006272 <__sfputc_r+0x1e>
 8006260:	6994      	ldr	r4, [r2, #24]
 8006262:	42a3      	cmp	r3, r4
 8006264:	db01      	blt.n	800626a <__sfputc_r+0x16>
 8006266:	290a      	cmp	r1, #10
 8006268:	d103      	bne.n	8006272 <__sfputc_r+0x1e>
 800626a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626e:	f7ff bcab 	b.w	8005bc8 <__swbuf_r>
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	1c58      	adds	r0, r3, #1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	7019      	strb	r1, [r3, #0]
 800627a:	4608      	mov	r0, r1
 800627c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006280:	4770      	bx	lr

08006282 <__sfputs_r>:
 8006282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	4614      	mov	r4, r2
 800628a:	18d5      	adds	r5, r2, r3
 800628c:	42ac      	cmp	r4, r5
 800628e:	d101      	bne.n	8006294 <__sfputs_r+0x12>
 8006290:	2000      	movs	r0, #0
 8006292:	e007      	b.n	80062a4 <__sfputs_r+0x22>
 8006294:	463a      	mov	r2, r7
 8006296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ffda 	bl	8006254 <__sfputc_r>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d1f3      	bne.n	800628c <__sfputs_r+0xa>
 80062a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a8 <_vfiprintf_r>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	b09d      	sub	sp, #116	; 0x74
 80062b0:	4617      	mov	r7, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	4606      	mov	r6, r0
 80062b6:	b118      	cbz	r0, 80062c0 <_vfiprintf_r+0x18>
 80062b8:	6983      	ldr	r3, [r0, #24]
 80062ba:	b90b      	cbnz	r3, 80062c0 <_vfiprintf_r+0x18>
 80062bc:	f7ff fe34 	bl	8005f28 <__sinit>
 80062c0:	4b7c      	ldr	r3, [pc, #496]	; (80064b4 <_vfiprintf_r+0x20c>)
 80062c2:	429c      	cmp	r4, r3
 80062c4:	d158      	bne.n	8006378 <_vfiprintf_r+0xd0>
 80062c6:	6874      	ldr	r4, [r6, #4]
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	0718      	lsls	r0, r3, #28
 80062cc:	d55e      	bpl.n	800638c <_vfiprintf_r+0xe4>
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05b      	beq.n	800638c <_vfiprintf_r+0xe4>
 80062d4:	2300      	movs	r3, #0
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	2320      	movs	r3, #32
 80062da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062de:	2330      	movs	r3, #48	; 0x30
 80062e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e4:	9503      	str	r5, [sp, #12]
 80062e6:	f04f 0b01 	mov.w	fp, #1
 80062ea:	46b8      	mov	r8, r7
 80062ec:	4645      	mov	r5, r8
 80062ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062f2:	b10b      	cbz	r3, 80062f8 <_vfiprintf_r+0x50>
 80062f4:	2b25      	cmp	r3, #37	; 0x25
 80062f6:	d154      	bne.n	80063a2 <_vfiprintf_r+0xfa>
 80062f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80062fc:	d00b      	beq.n	8006316 <_vfiprintf_r+0x6e>
 80062fe:	4653      	mov	r3, sl
 8006300:	463a      	mov	r2, r7
 8006302:	4621      	mov	r1, r4
 8006304:	4630      	mov	r0, r6
 8006306:	f7ff ffbc 	bl	8006282 <__sfputs_r>
 800630a:	3001      	adds	r0, #1
 800630c:	f000 80c2 	beq.w	8006494 <_vfiprintf_r+0x1ec>
 8006310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006312:	4453      	add	r3, sl
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	f898 3000 	ldrb.w	r3, [r8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80ba 	beq.w	8006494 <_vfiprintf_r+0x1ec>
 8006320:	2300      	movs	r3, #0
 8006322:	f04f 32ff 	mov.w	r2, #4294967295
 8006326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006332:	931a      	str	r3, [sp, #104]	; 0x68
 8006334:	46a8      	mov	r8, r5
 8006336:	2205      	movs	r2, #5
 8006338:	f818 1b01 	ldrb.w	r1, [r8], #1
 800633c:	485e      	ldr	r0, [pc, #376]	; (80064b8 <_vfiprintf_r+0x210>)
 800633e:	f7f9 ff6f 	bl	8000220 <memchr>
 8006342:	9b04      	ldr	r3, [sp, #16]
 8006344:	bb78      	cbnz	r0, 80063a6 <_vfiprintf_r+0xfe>
 8006346:	06d9      	lsls	r1, r3, #27
 8006348:	bf44      	itt	mi
 800634a:	2220      	movmi	r2, #32
 800634c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006350:	071a      	lsls	r2, r3, #28
 8006352:	bf44      	itt	mi
 8006354:	222b      	movmi	r2, #43	; 0x2b
 8006356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800635a:	782a      	ldrb	r2, [r5, #0]
 800635c:	2a2a      	cmp	r2, #42	; 0x2a
 800635e:	d02a      	beq.n	80063b6 <_vfiprintf_r+0x10e>
 8006360:	9a07      	ldr	r2, [sp, #28]
 8006362:	46a8      	mov	r8, r5
 8006364:	2000      	movs	r0, #0
 8006366:	250a      	movs	r5, #10
 8006368:	4641      	mov	r1, r8
 800636a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636e:	3b30      	subs	r3, #48	; 0x30
 8006370:	2b09      	cmp	r3, #9
 8006372:	d969      	bls.n	8006448 <_vfiprintf_r+0x1a0>
 8006374:	b360      	cbz	r0, 80063d0 <_vfiprintf_r+0x128>
 8006376:	e024      	b.n	80063c2 <_vfiprintf_r+0x11a>
 8006378:	4b50      	ldr	r3, [pc, #320]	; (80064bc <_vfiprintf_r+0x214>)
 800637a:	429c      	cmp	r4, r3
 800637c:	d101      	bne.n	8006382 <_vfiprintf_r+0xda>
 800637e:	68b4      	ldr	r4, [r6, #8]
 8006380:	e7a2      	b.n	80062c8 <_vfiprintf_r+0x20>
 8006382:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <_vfiprintf_r+0x218>)
 8006384:	429c      	cmp	r4, r3
 8006386:	bf08      	it	eq
 8006388:	68f4      	ldreq	r4, [r6, #12]
 800638a:	e79d      	b.n	80062c8 <_vfiprintf_r+0x20>
 800638c:	4621      	mov	r1, r4
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff fc6c 	bl	8005c6c <__swsetup_r>
 8006394:	2800      	cmp	r0, #0
 8006396:	d09d      	beq.n	80062d4 <_vfiprintf_r+0x2c>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	b01d      	add	sp, #116	; 0x74
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a2:	46a8      	mov	r8, r5
 80063a4:	e7a2      	b.n	80062ec <_vfiprintf_r+0x44>
 80063a6:	4a44      	ldr	r2, [pc, #272]	; (80064b8 <_vfiprintf_r+0x210>)
 80063a8:	1a80      	subs	r0, r0, r2
 80063aa:	fa0b f000 	lsl.w	r0, fp, r0
 80063ae:	4318      	orrs	r0, r3
 80063b0:	9004      	str	r0, [sp, #16]
 80063b2:	4645      	mov	r5, r8
 80063b4:	e7be      	b.n	8006334 <_vfiprintf_r+0x8c>
 80063b6:	9a03      	ldr	r2, [sp, #12]
 80063b8:	1d11      	adds	r1, r2, #4
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	9103      	str	r1, [sp, #12]
 80063be:	2a00      	cmp	r2, #0
 80063c0:	db01      	blt.n	80063c6 <_vfiprintf_r+0x11e>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e004      	b.n	80063d0 <_vfiprintf_r+0x128>
 80063c6:	4252      	negs	r2, r2
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	9207      	str	r2, [sp, #28]
 80063ce:	9304      	str	r3, [sp, #16]
 80063d0:	f898 3000 	ldrb.w	r3, [r8]
 80063d4:	2b2e      	cmp	r3, #46	; 0x2e
 80063d6:	d10e      	bne.n	80063f6 <_vfiprintf_r+0x14e>
 80063d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80063dc:	2b2a      	cmp	r3, #42	; 0x2a
 80063de:	d138      	bne.n	8006452 <_vfiprintf_r+0x1aa>
 80063e0:	9b03      	ldr	r3, [sp, #12]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	9203      	str	r2, [sp, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bfb8      	it	lt
 80063ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80063f0:	f108 0802 	add.w	r8, r8, #2
 80063f4:	9305      	str	r3, [sp, #20]
 80063f6:	4d33      	ldr	r5, [pc, #204]	; (80064c4 <_vfiprintf_r+0x21c>)
 80063f8:	f898 1000 	ldrb.w	r1, [r8]
 80063fc:	2203      	movs	r2, #3
 80063fe:	4628      	mov	r0, r5
 8006400:	f7f9 ff0e 	bl	8000220 <memchr>
 8006404:	b140      	cbz	r0, 8006418 <_vfiprintf_r+0x170>
 8006406:	2340      	movs	r3, #64	; 0x40
 8006408:	1b40      	subs	r0, r0, r5
 800640a:	fa03 f000 	lsl.w	r0, r3, r0
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	4303      	orrs	r3, r0
 8006412:	f108 0801 	add.w	r8, r8, #1
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	f898 1000 	ldrb.w	r1, [r8]
 800641c:	482a      	ldr	r0, [pc, #168]	; (80064c8 <_vfiprintf_r+0x220>)
 800641e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006422:	2206      	movs	r2, #6
 8006424:	f108 0701 	add.w	r7, r8, #1
 8006428:	f7f9 fefa 	bl	8000220 <memchr>
 800642c:	2800      	cmp	r0, #0
 800642e:	d037      	beq.n	80064a0 <_vfiprintf_r+0x1f8>
 8006430:	4b26      	ldr	r3, [pc, #152]	; (80064cc <_vfiprintf_r+0x224>)
 8006432:	bb1b      	cbnz	r3, 800647c <_vfiprintf_r+0x1d4>
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	3307      	adds	r3, #7
 8006438:	f023 0307 	bic.w	r3, r3, #7
 800643c:	3308      	adds	r3, #8
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006442:	444b      	add	r3, r9
 8006444:	9309      	str	r3, [sp, #36]	; 0x24
 8006446:	e750      	b.n	80062ea <_vfiprintf_r+0x42>
 8006448:	fb05 3202 	mla	r2, r5, r2, r3
 800644c:	2001      	movs	r0, #1
 800644e:	4688      	mov	r8, r1
 8006450:	e78a      	b.n	8006368 <_vfiprintf_r+0xc0>
 8006452:	2300      	movs	r3, #0
 8006454:	f108 0801 	add.w	r8, r8, #1
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	4619      	mov	r1, r3
 800645c:	250a      	movs	r5, #10
 800645e:	4640      	mov	r0, r8
 8006460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006464:	3a30      	subs	r2, #48	; 0x30
 8006466:	2a09      	cmp	r2, #9
 8006468:	d903      	bls.n	8006472 <_vfiprintf_r+0x1ca>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0c3      	beq.n	80063f6 <_vfiprintf_r+0x14e>
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	e7c1      	b.n	80063f6 <_vfiprintf_r+0x14e>
 8006472:	fb05 2101 	mla	r1, r5, r1, r2
 8006476:	2301      	movs	r3, #1
 8006478:	4680      	mov	r8, r0
 800647a:	e7f0      	b.n	800645e <_vfiprintf_r+0x1b6>
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4622      	mov	r2, r4
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <_vfiprintf_r+0x228>)
 8006484:	a904      	add	r1, sp, #16
 8006486:	4630      	mov	r0, r6
 8006488:	f3af 8000 	nop.w
 800648c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006490:	4681      	mov	r9, r0
 8006492:	d1d5      	bne.n	8006440 <_vfiprintf_r+0x198>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	065b      	lsls	r3, r3, #25
 8006498:	f53f af7e 	bmi.w	8006398 <_vfiprintf_r+0xf0>
 800649c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649e:	e77d      	b.n	800639c <_vfiprintf_r+0xf4>
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4622      	mov	r2, r4
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <_vfiprintf_r+0x228>)
 80064a8:	a904      	add	r1, sp, #16
 80064aa:	4630      	mov	r0, r6
 80064ac:	f000 f888 	bl	80065c0 <_printf_i>
 80064b0:	e7ec      	b.n	800648c <_vfiprintf_r+0x1e4>
 80064b2:	bf00      	nop
 80064b4:	080069f8 	.word	0x080069f8
 80064b8:	08006a38 	.word	0x08006a38
 80064bc:	08006a18 	.word	0x08006a18
 80064c0:	080069d8 	.word	0x080069d8
 80064c4:	08006a3e 	.word	0x08006a3e
 80064c8:	08006a42 	.word	0x08006a42
 80064cc:	00000000 	.word	0x00000000
 80064d0:	08006283 	.word	0x08006283

080064d4 <_printf_common>:
 80064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	4691      	mov	r9, r2
 80064da:	461f      	mov	r7, r3
 80064dc:	688a      	ldr	r2, [r1, #8]
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bfb8      	it	lt
 80064e8:	4613      	movlt	r3, r2
 80064ea:	f8c9 3000 	str.w	r3, [r9]
 80064ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	b112      	cbz	r2, 80064fe <_printf_common+0x2a>
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c9 3000 	str.w	r3, [r9]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006508:	3302      	addmi	r3, #2
 800650a:	f8c9 3000 	strmi.w	r3, [r9]
 800650e:	6825      	ldr	r5, [r4, #0]
 8006510:	f015 0506 	ands.w	r5, r5, #6
 8006514:	d107      	bne.n	8006526 <_printf_common+0x52>
 8006516:	f104 0a19 	add.w	sl, r4, #25
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	f8d9 2000 	ldr.w	r2, [r9]
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	42ab      	cmp	r3, r5
 8006524:	dc28      	bgt.n	8006578 <_printf_common+0xa4>
 8006526:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	3300      	adds	r3, #0
 800652e:	bf18      	it	ne
 8006530:	2301      	movne	r3, #1
 8006532:	0692      	lsls	r2, r2, #26
 8006534:	d42d      	bmi.n	8006592 <_printf_common+0xbe>
 8006536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800653a:	4639      	mov	r1, r7
 800653c:	4630      	mov	r0, r6
 800653e:	47c0      	blx	r8
 8006540:	3001      	adds	r0, #1
 8006542:	d020      	beq.n	8006586 <_printf_common+0xb2>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	68e5      	ldr	r5, [r4, #12]
 8006548:	f8d9 2000 	ldr.w	r2, [r9]
 800654c:	f003 0306 	and.w	r3, r3, #6
 8006550:	2b04      	cmp	r3, #4
 8006552:	bf08      	it	eq
 8006554:	1aad      	subeq	r5, r5, r2
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	6922      	ldr	r2, [r4, #16]
 800655a:	bf0c      	ite	eq
 800655c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006560:	2500      	movne	r5, #0
 8006562:	4293      	cmp	r3, r2
 8006564:	bfc4      	itt	gt
 8006566:	1a9b      	subgt	r3, r3, r2
 8006568:	18ed      	addgt	r5, r5, r3
 800656a:	f04f 0900 	mov.w	r9, #0
 800656e:	341a      	adds	r4, #26
 8006570:	454d      	cmp	r5, r9
 8006572:	d11a      	bne.n	80065aa <_printf_common+0xd6>
 8006574:	2000      	movs	r0, #0
 8006576:	e008      	b.n	800658a <_printf_common+0xb6>
 8006578:	2301      	movs	r3, #1
 800657a:	4652      	mov	r2, sl
 800657c:	4639      	mov	r1, r7
 800657e:	4630      	mov	r0, r6
 8006580:	47c0      	blx	r8
 8006582:	3001      	adds	r0, #1
 8006584:	d103      	bne.n	800658e <_printf_common+0xba>
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	3501      	adds	r5, #1
 8006590:	e7c3      	b.n	800651a <_printf_common+0x46>
 8006592:	18e1      	adds	r1, r4, r3
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	2030      	movs	r0, #48	; 0x30
 8006598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800659c:	4422      	add	r2, r4
 800659e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a6:	3302      	adds	r3, #2
 80065a8:	e7c5      	b.n	8006536 <_printf_common+0x62>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4622      	mov	r2, r4
 80065ae:	4639      	mov	r1, r7
 80065b0:	4630      	mov	r0, r6
 80065b2:	47c0      	blx	r8
 80065b4:	3001      	adds	r0, #1
 80065b6:	d0e6      	beq.n	8006586 <_printf_common+0xb2>
 80065b8:	f109 0901 	add.w	r9, r9, #1
 80065bc:	e7d8      	b.n	8006570 <_printf_common+0x9c>
	...

080065c0 <_printf_i>:
 80065c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065c8:	460c      	mov	r4, r1
 80065ca:	7e09      	ldrb	r1, [r1, #24]
 80065cc:	b085      	sub	sp, #20
 80065ce:	296e      	cmp	r1, #110	; 0x6e
 80065d0:	4617      	mov	r7, r2
 80065d2:	4606      	mov	r6, r0
 80065d4:	4698      	mov	r8, r3
 80065d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d8:	f000 80b3 	beq.w	8006742 <_printf_i+0x182>
 80065dc:	d822      	bhi.n	8006624 <_printf_i+0x64>
 80065de:	2963      	cmp	r1, #99	; 0x63
 80065e0:	d036      	beq.n	8006650 <_printf_i+0x90>
 80065e2:	d80a      	bhi.n	80065fa <_printf_i+0x3a>
 80065e4:	2900      	cmp	r1, #0
 80065e6:	f000 80b9 	beq.w	800675c <_printf_i+0x19c>
 80065ea:	2958      	cmp	r1, #88	; 0x58
 80065ec:	f000 8083 	beq.w	80066f6 <_printf_i+0x136>
 80065f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065f8:	e032      	b.n	8006660 <_printf_i+0xa0>
 80065fa:	2964      	cmp	r1, #100	; 0x64
 80065fc:	d001      	beq.n	8006602 <_printf_i+0x42>
 80065fe:	2969      	cmp	r1, #105	; 0x69
 8006600:	d1f6      	bne.n	80065f0 <_printf_i+0x30>
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	0605      	lsls	r5, r0, #24
 8006608:	f103 0104 	add.w	r1, r3, #4
 800660c:	d52a      	bpl.n	8006664 <_printf_i+0xa4>
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da03      	bge.n	800661e <_printf_i+0x5e>
 8006616:	222d      	movs	r2, #45	; 0x2d
 8006618:	425b      	negs	r3, r3
 800661a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800661e:	486f      	ldr	r0, [pc, #444]	; (80067dc <_printf_i+0x21c>)
 8006620:	220a      	movs	r2, #10
 8006622:	e039      	b.n	8006698 <_printf_i+0xd8>
 8006624:	2973      	cmp	r1, #115	; 0x73
 8006626:	f000 809d 	beq.w	8006764 <_printf_i+0x1a4>
 800662a:	d808      	bhi.n	800663e <_printf_i+0x7e>
 800662c:	296f      	cmp	r1, #111	; 0x6f
 800662e:	d020      	beq.n	8006672 <_printf_i+0xb2>
 8006630:	2970      	cmp	r1, #112	; 0x70
 8006632:	d1dd      	bne.n	80065f0 <_printf_i+0x30>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	f043 0320 	orr.w	r3, r3, #32
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	e003      	b.n	8006646 <_printf_i+0x86>
 800663e:	2975      	cmp	r1, #117	; 0x75
 8006640:	d017      	beq.n	8006672 <_printf_i+0xb2>
 8006642:	2978      	cmp	r1, #120	; 0x78
 8006644:	d1d4      	bne.n	80065f0 <_printf_i+0x30>
 8006646:	2378      	movs	r3, #120	; 0x78
 8006648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800664c:	4864      	ldr	r0, [pc, #400]	; (80067e0 <_printf_i+0x220>)
 800664e:	e055      	b.n	80066fc <_printf_i+0x13c>
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	1d19      	adds	r1, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6011      	str	r1, [r2, #0]
 8006658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800665c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006660:	2301      	movs	r3, #1
 8006662:	e08c      	b.n	800677e <_printf_i+0x1be>
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6011      	str	r1, [r2, #0]
 8006668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800666c:	bf18      	it	ne
 800666e:	b21b      	sxthne	r3, r3
 8006670:	e7cf      	b.n	8006612 <_printf_i+0x52>
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	6825      	ldr	r5, [r4, #0]
 8006676:	1d18      	adds	r0, r3, #4
 8006678:	6010      	str	r0, [r2, #0]
 800667a:	0628      	lsls	r0, r5, #24
 800667c:	d501      	bpl.n	8006682 <_printf_i+0xc2>
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	e002      	b.n	8006688 <_printf_i+0xc8>
 8006682:	0668      	lsls	r0, r5, #25
 8006684:	d5fb      	bpl.n	800667e <_printf_i+0xbe>
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	4854      	ldr	r0, [pc, #336]	; (80067dc <_printf_i+0x21c>)
 800668a:	296f      	cmp	r1, #111	; 0x6f
 800668c:	bf14      	ite	ne
 800668e:	220a      	movne	r2, #10
 8006690:	2208      	moveq	r2, #8
 8006692:	2100      	movs	r1, #0
 8006694:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006698:	6865      	ldr	r5, [r4, #4]
 800669a:	60a5      	str	r5, [r4, #8]
 800669c:	2d00      	cmp	r5, #0
 800669e:	f2c0 8095 	blt.w	80067cc <_printf_i+0x20c>
 80066a2:	6821      	ldr	r1, [r4, #0]
 80066a4:	f021 0104 	bic.w	r1, r1, #4
 80066a8:	6021      	str	r1, [r4, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d13d      	bne.n	800672a <_printf_i+0x16a>
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	f040 808e 	bne.w	80067d0 <_printf_i+0x210>
 80066b4:	4665      	mov	r5, ip
 80066b6:	2a08      	cmp	r2, #8
 80066b8:	d10b      	bne.n	80066d2 <_printf_i+0x112>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	07db      	lsls	r3, r3, #31
 80066be:	d508      	bpl.n	80066d2 <_printf_i+0x112>
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bfde      	ittt	le
 80066c8:	2330      	movle	r3, #48	; 0x30
 80066ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066d2:	ebac 0305 	sub.w	r3, ip, r5
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	f8cd 8000 	str.w	r8, [sp]
 80066dc:	463b      	mov	r3, r7
 80066de:	aa03      	add	r2, sp, #12
 80066e0:	4621      	mov	r1, r4
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff fef6 	bl	80064d4 <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d14d      	bne.n	8006788 <_printf_i+0x1c8>
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	b005      	add	sp, #20
 80066f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f6:	4839      	ldr	r0, [pc, #228]	; (80067dc <_printf_i+0x21c>)
 80066f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	6821      	ldr	r1, [r4, #0]
 8006700:	1d1d      	adds	r5, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6015      	str	r5, [r2, #0]
 8006706:	060a      	lsls	r2, r1, #24
 8006708:	d50b      	bpl.n	8006722 <_printf_i+0x162>
 800670a:	07ca      	lsls	r2, r1, #31
 800670c:	bf44      	itt	mi
 800670e:	f041 0120 	orrmi.w	r1, r1, #32
 8006712:	6021      	strmi	r1, [r4, #0]
 8006714:	b91b      	cbnz	r3, 800671e <_printf_i+0x15e>
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	f022 0220 	bic.w	r2, r2, #32
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	e7b7      	b.n	8006692 <_printf_i+0xd2>
 8006722:	064d      	lsls	r5, r1, #25
 8006724:	bf48      	it	mi
 8006726:	b29b      	uxthmi	r3, r3
 8006728:	e7ef      	b.n	800670a <_printf_i+0x14a>
 800672a:	4665      	mov	r5, ip
 800672c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006730:	fb02 3311 	mls	r3, r2, r1, r3
 8006734:	5cc3      	ldrb	r3, [r0, r3]
 8006736:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800673a:	460b      	mov	r3, r1
 800673c:	2900      	cmp	r1, #0
 800673e:	d1f5      	bne.n	800672c <_printf_i+0x16c>
 8006740:	e7b9      	b.n	80066b6 <_printf_i+0xf6>
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	6961      	ldr	r1, [r4, #20]
 8006748:	1d18      	adds	r0, r3, #4
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	0628      	lsls	r0, r5, #24
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	d501      	bpl.n	8006756 <_printf_i+0x196>
 8006752:	6019      	str	r1, [r3, #0]
 8006754:	e002      	b.n	800675c <_printf_i+0x19c>
 8006756:	066a      	lsls	r2, r5, #25
 8006758:	d5fb      	bpl.n	8006752 <_printf_i+0x192>
 800675a:	8019      	strh	r1, [r3, #0]
 800675c:	2300      	movs	r3, #0
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	4665      	mov	r5, ip
 8006762:	e7b9      	b.n	80066d8 <_printf_i+0x118>
 8006764:	6813      	ldr	r3, [r2, #0]
 8006766:	1d19      	adds	r1, r3, #4
 8006768:	6011      	str	r1, [r2, #0]
 800676a:	681d      	ldr	r5, [r3, #0]
 800676c:	6862      	ldr	r2, [r4, #4]
 800676e:	2100      	movs	r1, #0
 8006770:	4628      	mov	r0, r5
 8006772:	f7f9 fd55 	bl	8000220 <memchr>
 8006776:	b108      	cbz	r0, 800677c <_printf_i+0x1bc>
 8006778:	1b40      	subs	r0, r0, r5
 800677a:	6060      	str	r0, [r4, #4]
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2300      	movs	r3, #0
 8006782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006786:	e7a7      	b.n	80066d8 <_printf_i+0x118>
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	462a      	mov	r2, r5
 800678c:	4639      	mov	r1, r7
 800678e:	4630      	mov	r0, r6
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d0aa      	beq.n	80066ec <_printf_i+0x12c>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	079b      	lsls	r3, r3, #30
 800679a:	d413      	bmi.n	80067c4 <_printf_i+0x204>
 800679c:	68e0      	ldr	r0, [r4, #12]
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	4298      	cmp	r0, r3
 80067a2:	bfb8      	it	lt
 80067a4:	4618      	movlt	r0, r3
 80067a6:	e7a3      	b.n	80066f0 <_printf_i+0x130>
 80067a8:	2301      	movs	r3, #1
 80067aa:	464a      	mov	r2, r9
 80067ac:	4639      	mov	r1, r7
 80067ae:	4630      	mov	r0, r6
 80067b0:	47c0      	blx	r8
 80067b2:	3001      	adds	r0, #1
 80067b4:	d09a      	beq.n	80066ec <_printf_i+0x12c>
 80067b6:	3501      	adds	r5, #1
 80067b8:	68e3      	ldr	r3, [r4, #12]
 80067ba:	9a03      	ldr	r2, [sp, #12]
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	42ab      	cmp	r3, r5
 80067c0:	dcf2      	bgt.n	80067a8 <_printf_i+0x1e8>
 80067c2:	e7eb      	b.n	800679c <_printf_i+0x1dc>
 80067c4:	2500      	movs	r5, #0
 80067c6:	f104 0919 	add.w	r9, r4, #25
 80067ca:	e7f5      	b.n	80067b8 <_printf_i+0x1f8>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1ac      	bne.n	800672a <_printf_i+0x16a>
 80067d0:	7803      	ldrb	r3, [r0, #0]
 80067d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067da:	e76c      	b.n	80066b6 <_printf_i+0xf6>
 80067dc:	08006a49 	.word	0x08006a49
 80067e0:	08006a5a 	.word	0x08006a5a

080067e4 <_sbrk_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4c06      	ldr	r4, [pc, #24]	; (8006800 <_sbrk_r+0x1c>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4605      	mov	r5, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	f7fe fe68 	bl	80054c4 <_sbrk>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_sbrk_r+0x1a>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_sbrk_r+0x1a>
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	20000b60 	.word	0x20000b60

08006804 <__sread>:
 8006804:	b510      	push	{r4, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	f000 f896 	bl	800693c <_read_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	bfab      	itete	ge
 8006814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006816:	89a3      	ldrhlt	r3, [r4, #12]
 8006818:	181b      	addge	r3, r3, r0
 800681a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800681e:	bfac      	ite	ge
 8006820:	6563      	strge	r3, [r4, #84]	; 0x54
 8006822:	81a3      	strhlt	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}

08006826 <__swrite>:
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	461f      	mov	r7, r3
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	05db      	lsls	r3, r3, #23
 8006830:	4605      	mov	r5, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4616      	mov	r6, r2
 8006836:	d505      	bpl.n	8006844 <__swrite+0x1e>
 8006838:	2302      	movs	r3, #2
 800683a:	2200      	movs	r2, #0
 800683c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006840:	f000 f868 	bl	8006914 <_lseek_r>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	4628      	mov	r0, r5
 8006856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	f000 b817 	b.w	800688c <_write_r>

0800685e <__sseek>:
 800685e:	b510      	push	{r4, lr}
 8006860:	460c      	mov	r4, r1
 8006862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006866:	f000 f855 	bl	8006914 <_lseek_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	bf15      	itete	ne
 8006870:	6560      	strne	r0, [r4, #84]	; 0x54
 8006872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800687a:	81a3      	strheq	r3, [r4, #12]
 800687c:	bf18      	it	ne
 800687e:	81a3      	strhne	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__sclose>:
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 b813 	b.w	80068b0 <_close_r>
	...

0800688c <_write_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4c07      	ldr	r4, [pc, #28]	; (80068ac <_write_r+0x20>)
 8006890:	4605      	mov	r5, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	2200      	movs	r2, #0
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fe fdcd 	bl	800543a <_write>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_write_r+0x1e>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_write_r+0x1e>
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20000b60 	.word	0x20000b60

080068b0 <_close_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4c06      	ldr	r4, [pc, #24]	; (80068cc <_close_r+0x1c>)
 80068b4:	2300      	movs	r3, #0
 80068b6:	4605      	mov	r5, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	f7fe fdce 	bl	800545c <_close>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_close_r+0x1a>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_close_r+0x1a>
 80068c8:	602b      	str	r3, [r5, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20000b60 	.word	0x20000b60

080068d0 <_fstat_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4c07      	ldr	r4, [pc, #28]	; (80068f0 <_fstat_r+0x20>)
 80068d4:	2300      	movs	r3, #0
 80068d6:	4605      	mov	r5, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	f7fe fdc9 	bl	8005474 <_fstat>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d102      	bne.n	80068ec <_fstat_r+0x1c>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	b103      	cbz	r3, 80068ec <_fstat_r+0x1c>
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	20000b60 	.word	0x20000b60

080068f4 <_isatty_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4c06      	ldr	r4, [pc, #24]	; (8006910 <_isatty_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4605      	mov	r5, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	f7fe fdc8 	bl	8005494 <_isatty>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_isatty_r+0x1a>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	b103      	cbz	r3, 800690e <_isatty_r+0x1a>
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	20000b60 	.word	0x20000b60

08006914 <_lseek_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4c07      	ldr	r4, [pc, #28]	; (8006934 <_lseek_r+0x20>)
 8006918:	4605      	mov	r5, r0
 800691a:	4608      	mov	r0, r1
 800691c:	4611      	mov	r1, r2
 800691e:	2200      	movs	r2, #0
 8006920:	6022      	str	r2, [r4, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fe fdc1 	bl	80054aa <_lseek>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_lseek_r+0x1e>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	b103      	cbz	r3, 8006932 <_lseek_r+0x1e>
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	20000b60 	.word	0x20000b60

08006938 <__malloc_lock>:
 8006938:	4770      	bx	lr

0800693a <__malloc_unlock>:
 800693a:	4770      	bx	lr

0800693c <_read_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4c07      	ldr	r4, [pc, #28]	; (800695c <_read_r+0x20>)
 8006940:	4605      	mov	r5, r0
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	2200      	movs	r2, #0
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fe fd58 	bl	8005400 <_read>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_read_r+0x1e>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	b103      	cbz	r3, 800695a <_read_r+0x1e>
 8006958:	602b      	str	r3, [r5, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20000b60 	.word	0x20000b60

08006960 <_init>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	bf00      	nop
 8006964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006966:	bc08      	pop	{r3}
 8006968:	469e      	mov	lr, r3
 800696a:	4770      	bx	lr

0800696c <_fini>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr
