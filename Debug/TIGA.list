
TIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080078a0  080078a0  000178a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  200001dc  08007db4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  08007db4  00020be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001514d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031e8  00000000  00000000  00035359  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00039680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024808  00000000  00000000  0003a608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f96a  00000000  00000000  0005ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2da5  00000000  00000000  0006e77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014151f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  0014159c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007884 	.word	0x08007884

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007884 	.word	0x08007884

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 fd07 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f003 fd8a 	bl	8004ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd1f 	bl	8001a3e <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 fce7 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000618 	.word	0x20000618

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000618 	.word	0x20000618

0800107c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e033      	b.n	80010fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f003 f8fa 	bl	8004294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010c2:	f023 0302 	bic.w	r3, r3, #2
 80010c6:	f043 0202 	orr.w	r2, r3, #2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fa32 	bl	8001538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ea:	e001      	b.n	80010f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_ADC_Start_DMA+0x1e>
 800111e:	2302      	movs	r3, #2
 8001120:	e0b1      	b.n	8001286 <HAL_ADC_Start_DMA+0x182>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d018      	beq.n	800116a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001148:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_ADC_Start_DMA+0x18c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a51      	ldr	r2, [pc, #324]	; (8001294 <HAL_ADC_Start_DMA+0x190>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	0c9a      	lsrs	r2, r3, #18
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800115c:	e002      	b.n	8001164 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3b01      	subs	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f9      	bne.n	800115e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	f040 8085 	bne.w	8001284 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b8:	d106      	bne.n	80011c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f023 0206 	bic.w	r2, r3, #6
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
 80011c6:	e002      	b.n	80011ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_ADC_Start_DMA+0x194>)
 80011d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	4a2f      	ldr	r2, [pc, #188]	; (800129c <HAL_ADC_Start_DMA+0x198>)
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <HAL_ADC_Start_DMA+0x19c>)
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <HAL_ADC_Start_DMA+0x1a0>)
 80011f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800120a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800121a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	334c      	adds	r3, #76	; 0x4c
 8001226:	4619      	mov	r1, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f000 fcc2 	bl	8001bb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d11c      	bne.n	8001284 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e013      	b.n	8001284 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_ADC_Start_DMA+0x1a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10e      	bne.n	8001284 <HAL_ADC_Start_DMA+0x180>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d107      	bne.n	8001284 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001282:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	431bde83 	.word	0x431bde83
 8001298:	40012300 	.word	0x40012300
 800129c:	08001731 	.word	0x08001731
 80012a0:	080017eb 	.word	0x080017eb
 80012a4:	08001807 	.word	0x08001807
 80012a8:	40012000 	.word	0x40012000

080012ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1c>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e113      	b.n	8001518 <HAL_ADC_ConfigChannel+0x244>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d925      	bls.n	800134c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d9      	ldr	r1, [r3, #12]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	3b1e      	subs	r3, #30
 8001316:	2207      	movs	r2, #7
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43da      	mvns	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	400a      	ands	r2, r1
 8001324:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68d9      	ldr	r1, [r3, #12]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4403      	add	r3, r0
 800133e:	3b1e      	subs	r3, #30
 8001340:	409a      	lsls	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	e022      	b.n	8001392 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6919      	ldr	r1, [r3, #16]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	2207      	movs	r2, #7
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	4603      	mov	r3, r0
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4403      	add	r3, r0
 8001388:	409a      	lsls	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b06      	cmp	r3, #6
 8001398:	d824      	bhi.n	80013e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b05      	subs	r3, #5
 80013ac:	221f      	movs	r2, #31
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b05      	subs	r3, #5
 80013d6:	fa00 f203 	lsl.w	r2, r0, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
 80013e2:	e04c      	b.n	800147e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d824      	bhi.n	8001436 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b23      	subs	r3, #35	; 0x23
 80013fe:	221f      	movs	r2, #31
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43da      	mvns	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	400a      	ands	r2, r1
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	3b23      	subs	r3, #35	; 0x23
 8001428:	fa00 f203 	lsl.w	r2, r0, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
 8001434:	e023      	b.n	800147e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3b41      	subs	r3, #65	; 0x41
 8001448:	221f      	movs	r2, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	400a      	ands	r2, r1
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b41      	subs	r3, #65	; 0x41
 8001472:	fa00 f203 	lsl.w	r2, r0, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_ADC_ConfigChannel+0x250>)
 8001480:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_ADC_ConfigChannel+0x254>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d10f      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1d8>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b12      	cmp	r3, #18
 8001492:	d10b      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_ADC_ConfigChannel+0x254>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12b      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23a>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_ADC_ConfigChannel+0x258>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d003      	beq.n	80014c8 <HAL_ADC_ConfigChannel+0x1f4>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b11      	cmp	r3, #17
 80014c6:	d122      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_ADC_ConfigChannel+0x258>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d111      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_ADC_ConfigChannel+0x25c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_ADC_ConfigChannel+0x260>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9a      	lsrs	r2, r3, #18
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001500:	e002      	b.n	8001508 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3b01      	subs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40012300 	.word	0x40012300
 8001528:	40012000 	.word	0x40012000
 800152c:	10000012 	.word	0x10000012
 8001530:	20000008 	.word	0x20000008
 8001534:	431bde83 	.word	0x431bde83

08001538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <ADC_Init+0x1f0>)
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <ADC_Init+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e00f      	b.n	8001636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0202 	bic.w	r2, r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01b      	beq.n	800169c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	035a      	lsls	r2, r3, #13
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	e007      	b.n	80016ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	051a      	lsls	r2, r3, #20
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ee:	025a      	lsls	r2, r3, #9
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	029a      	lsls	r2, r3, #10
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40012300 	.word	0x40012300
 800172c:	0f000001 	.word	0x0f000001

08001730 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001746:	2b00      	cmp	r3, #0
 8001748:	d13c      	bne.n	80017c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12b      	bne.n	80017bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d127      	bne.n	80017bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001784:	2b00      	cmp	r3, #0
 8001786:	d119      	bne.n	80017bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0220 	bic.w	r2, r2, #32
 8001796:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f002 fdfb 	bl	80043b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017c2:	e00e      	b.n	80017e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fd75 	bl	80012c0 <HAL_ADC_ErrorCallback>
}
 80017d6:	e004      	b.n	80017e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fd57 	bl	80012ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f043 0204 	orr.w	r2, r3, #4
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fd4a 	bl	80012c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fafe 	bl	8001064 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e099      	b.n	8001ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a94:	e00f      	b.n	8001ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a96:	f7ff fae5 	bl	8001064 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d908      	bls.n	8001ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e078      	b.n	8001ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e8      	bne.n	8001a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_DMA_Init+0x158>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f023 0307 	bic.w	r3, r3, #7
 8001b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d117      	bne.n	8001b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa77 	bl	8002050 <DMA_CheckFifoParam>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b76:	2301      	movs	r3, #1
 8001b78:	e016      	b.n	8001ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fa2e 	bl	8001fe4 <DMA_CalcBaseAndBitshift>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	e010803f 	.word	0xe010803f

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_DMA_Start_IT+0x26>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e048      	b.n	8001c6c <HAL_DMA_Start_IT+0xb8>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d137      	bne.n	8001c5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9c0 	bl	8001f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0216 	orr.w	r2, r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c32:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e005      	b.n	8001c6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_DMA_IRQHandler+0x258>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a92      	ldr	r2, [pc, #584]	; (8001ed0 <HAL_DMA_IRQHandler+0x25c>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0204 	bic.w	r2, r2, #4
 8001cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2208      	movs	r2, #8
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2204      	movs	r2, #4
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2210      	movs	r2, #16
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d043      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03c      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2210      	movs	r2, #16
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d018      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d024      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
 8001da2:	e01f      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2220      	movs	r2, #32
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 808e 	beq.w	8001f12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8086 	beq.w	8001f12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d136      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0216 	bic.w	r2, r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <HAL_DMA_IRQHandler+0x1da>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d07d      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
        }
        return;
 8001e8a:	e078      	b.n	8001f7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01c      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d030      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e02b      	b.n	8001f12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
 8001eca:	e022      	b.n	8001f12 <HAL_DMA_IRQHandler+0x29e>
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10f      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0210 	bic.w	r2, r2, #16
 8001ef0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d032      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2205      	movs	r2, #5
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d307      	bcc.n	8001f5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f2      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x2ca>
 8001f58:	e000      	b.n	8001f5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
 8001f7c:	e000      	b.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f7e:	bf00      	nop
    }
  }
}
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop

08001f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d108      	bne.n	8001fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fc6:	e007      	b.n	8001fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	60da      	str	r2, [r3, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b10      	subs	r3, #16
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ffe:	4a13      	ldr	r2, [pc, #76]	; (800204c <DMA_CalcBaseAndBitshift+0x68>)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d909      	bls.n	8002026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	; 0x58
 8002024:	e007      	b.n	8002036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	080078f0 	.word	0x080078f0

08002050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d855      	bhi.n	800211c <DMA_CheckFifoParam+0xcc>
 8002070:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <DMA_CheckFifoParam+0x28>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	08002089 	.word	0x08002089
 800207c:	0800209b 	.word	0x0800209b
 8002080:	08002089 	.word	0x08002089
 8002084:	0800211d 	.word	0x0800211d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d045      	beq.n	8002120 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002098:	e042      	b.n	8002120 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a2:	d13f      	bne.n	8002124 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a8:	e03c      	b.n	8002124 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b2:	d121      	bne.n	80020f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d836      	bhi.n	8002128 <DMA_CheckFifoParam+0xd8>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <DMA_CheckFifoParam+0x70>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d7 	.word	0x080020d7
 80020c8:	080020d1 	.word	0x080020d1
 80020cc:	080020e9 	.word	0x080020e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      break;
 80020d4:	e02f      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d024      	beq.n	800212c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e6:	e021      	b.n	800212c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f0:	d11e      	bne.n	8002130 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020f6:	e01b      	b.n	8002130 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d902      	bls.n	8002104 <DMA_CheckFifoParam+0xb4>
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d003      	beq.n	800210a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002102:	e018      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e015      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00e      	beq.n	8002134 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
      break;
 800211a:	e00b      	b.n	8002134 <DMA_CheckFifoParam+0xe4>
      break;
 800211c:	bf00      	nop
 800211e:	e00a      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 8002120:	bf00      	nop
 8002122:	e008      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 8002124:	bf00      	nop
 8002126:	e006      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 8002128:	bf00      	nop
 800212a:	e004      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 800212c:	bf00      	nop
 800212e:	e002      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;   
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 8002134:	bf00      	nop
    }
  } 
  
  return status; 
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_FLASH_Program+0xa0>)
 8002158:	7e1b      	ldrb	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_FLASH_Program+0x1e>
 800215e:	2302      	movs	r3, #2
 8002160:	e03b      	b.n	80021da <HAL_FLASH_Program+0x96>
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_FLASH_Program+0xa0>)
 8002164:	2201      	movs	r2, #1
 8002166:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800216c:	f000 f870 	bl	8002250 <FLASH_WaitForLastOperation>
 8002170:	4603      	mov	r3, r0
 8002172:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12b      	bne.n	80021d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002180:	783b      	ldrb	r3, [r7, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f000 f917 	bl	80023b8 <FLASH_Program_Byte>
 800218a:	e016      	b.n	80021ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002192:	883b      	ldrh	r3, [r7, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	f000 f8ea 	bl	8002370 <FLASH_Program_HalfWord>
 800219c:	e00d      	b.n	80021ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d105      	bne.n	80021b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f000 f8bf 	bl	800232c <FLASH_Program_Word>
 80021ae:	e004      	b.n	80021ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f000 f88b 	bl	80022d0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021be:	f000 f847 	bl	8002250 <FLASH_WaitForLastOperation>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_FLASH_Program+0xa4>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_FLASH_Program+0xa4>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_FLASH_Program+0xa0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000061c 	.word	0x2000061c
 80021e8:	40023c00 	.word	0x40023c00

080021ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_FLASH_Unlock+0x38>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da0b      	bge.n	8002216 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_FLASH_Unlock+0x38>)
 8002200:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_FLASH_Unlock+0x3c>)
 8002202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_FLASH_Unlock+0x38>)
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_FLASH_Unlock+0x40>)
 8002208:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_FLASH_Unlock+0x38>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da01      	bge.n	8002216 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002216:	79fb      	ldrb	r3, [r7, #7]
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40023c00 	.word	0x40023c00
 8002228:	45670123 	.word	0x45670123
 800222c:	cdef89ab 	.word	0xcdef89ab

08002230 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_FLASH_Lock+0x1c>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_FLASH_Lock+0x1c>)
 800223a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023c00 	.word	0x40023c00

08002250 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <FLASH_WaitForLastOperation+0x78>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002262:	f7fe feff 	bl	8001064 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002268:	e010      	b.n	800228c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d00c      	beq.n	800228c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <FLASH_WaitForLastOperation+0x38>
 8002278:	f7fe fef4 	bl	8001064 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d201      	bcs.n	800228c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e019      	b.n	80022c0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <FLASH_WaitForLastOperation+0x7c>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e8      	bne.n	800226a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <FLASH_WaitForLastOperation+0x7c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <FLASH_WaitForLastOperation+0x7c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <FLASH_WaitForLastOperation+0x7c>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022b6:	f000 f8a1 	bl	80023fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
  
}  
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000061c 	.word	0x2000061c
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <FLASH_Program_DoubleWord+0x58>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002306:	e9d7 1200 	ldrd	r1, r2, [r7]
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	0013      	movs	r3, r2
 8002314:	2400      	movs	r4, #0
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	3204      	adds	r2, #4
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bc90      	pop	{r4, r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00

0800232c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <FLASH_Program_Word+0x40>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <FLASH_Program_Word+0x40>)
 800233c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002340:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <FLASH_Program_Word+0x40>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <FLASH_Program_Word+0x40>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <FLASH_Program_Word+0x40>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	4a06      	ldr	r2, [pc, #24]	; (800236c <FLASH_Program_Word+0x40>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <FLASH_Program_HalfWord+0x44>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	801a      	strh	r2, [r3, #0]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023c00 	.word	0x40023c00

080023b8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <FLASH_Program_Byte+0x40>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	701a      	strb	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002416:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 800241a:	2210      	movs	r2, #16
 800241c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002434:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002438:	2220      	movs	r2, #32
 800243a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002452:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002470:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 800248e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 8002492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002496:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f043 0320 	orr.w	r3, r3, #32
 80024ac:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <FLASH_SetErrorCode+0xc8>)
 80024ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <FLASH_SetErrorCode+0xc4>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	60da      	str	r2, [r3, #12]
  }
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40023c00 	.word	0x40023c00
 80024c4:	2000061c 	.word	0x2000061c

080024c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_FLASHEx_Erase+0xd8>)
 80024dc:	7e1b      	ldrb	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_FLASHEx_Erase+0x1e>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e058      	b.n	8002598 <HAL_FLASHEx_Erase+0xd0>
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_FLASHEx_Erase+0xd8>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024f0:	f7ff feae 	bl	8002250 <FLASH_WaitForLastOperation>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d148      	bne.n	8002590 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d115      	bne.n	800253a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f000 f844 	bl	80025a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002520:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002524:	f7ff fe94 	bl	8002250 <FLASH_WaitForLastOperation>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_FLASHEx_Erase+0xdc>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_FLASHEx_Erase+0xdc>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	6113      	str	r3, [r2, #16]
 8002538:	e028      	b.n	800258c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e01c      	b.n	800257c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4619      	mov	r1, r3
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	f000 f850 	bl	80025f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002554:	f7ff fe7c 	bl	8002250 <FLASH_WaitForLastOperation>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_FLASHEx_Erase+0xdc>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_FLASHEx_Erase+0xdc>)
 8002562:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002566:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	601a      	str	r2, [r3, #0]
          break;
 8002574:	e00a      	b.n	800258c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4413      	add	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3da      	bcc.n	8002542 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800258c:	f000 f878 	bl	8002680 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_FLASHEx_Erase+0xd8>)
 8002592:	2200      	movs	r2, #0
 8002594:	761a      	strb	r2, [r3, #24]

  return status;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000061c 	.word	0x2000061c
 80025a4:	40023c00 	.word	0x40023c00

080025a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <FLASH_MassErase+0x44>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <FLASH_MassErase+0x44>)
 80025ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <FLASH_MassErase+0x44>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <FLASH_MassErase+0x44>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <FLASH_MassErase+0x44>)
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	4313      	orrs	r3, r2
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <FLASH_MassErase+0x44>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6113      	str	r3, [r2, #16]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e010      	b.n	800262e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d103      	bne.n	800261a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e009      	b.n	800262e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d103      	bne.n	8002628 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e002      	b.n	800262e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <FLASH_Erase_Sector+0x8c>)
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	490f      	ldr	r1, [pc, #60]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <FLASH_Erase_Sector+0x8c>)
 800264c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002650:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4313      	orrs	r3, r2
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <FLASH_Erase_Sector+0x8c>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <FLASH_Erase_Sector+0x8c>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <FLASH_Erase_Sector+0x8c>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	6113      	str	r3, [r2, #16]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40023c00 	.word	0x40023c00

08002680 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002684:	4b20      	ldr	r3, [pc, #128]	; (8002708 <FLASH_FlushCaches+0x88>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268c:	2b00      	cmp	r3, #0
 800268e:	d017      	beq.n	80026c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <FLASH_FlushCaches+0x88>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <FLASH_FlushCaches+0x88>)
 8002696:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800269a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <FLASH_FlushCaches+0x88>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026be:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d017      	beq.n	80026fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <FLASH_FlushCaches+0x88>)
 80026f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fa:	6013      	str	r3, [r2, #0]
  }
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e165      	b.n	80029f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 8154 	bne.w	80029ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x4a>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	69b9      	ldr	r1, [r7, #24]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d00b      	beq.n	80027f2 <HAL_GPIO_Init+0xe6>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e6:	2b11      	cmp	r3, #17
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b12      	cmp	r3, #18
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80ae 	beq.w	80029ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_GPIO_Init+0x2fc>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <HAL_GPIO_Init+0x2fc>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_GPIO_Init+0x2fc>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_GPIO_Init+0x300>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4e      	ldr	r2, [pc, #312]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d025      	beq.n	8002926 <HAL_GPIO_Init+0x21a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4d      	ldr	r2, [pc, #308]	; (8002a14 <HAL_GPIO_Init+0x308>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01f      	beq.n	8002922 <HAL_GPIO_Init+0x216>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d019      	beq.n	800291e <HAL_GPIO_Init+0x212>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4b      	ldr	r2, [pc, #300]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <HAL_GPIO_Init+0x314>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00d      	beq.n	8002916 <HAL_GPIO_Init+0x20a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <HAL_GPIO_Init+0x318>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <HAL_GPIO_Init+0x206>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <HAL_GPIO_Init+0x31c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d101      	bne.n	800290e <HAL_GPIO_Init+0x202>
 800290a:	2306      	movs	r3, #6
 800290c:	e00c      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 800290e:	2307      	movs	r3, #7
 8002910:	e00a      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 8002912:	2305      	movs	r3, #5
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 8002916:	2304      	movs	r3, #4
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x21c>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002938:	4934      	ldr	r1, [pc, #208]	; (8002a0c <HAL_GPIO_Init+0x300>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_GPIO_Init+0x320>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296a:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <HAL_GPIO_Init+0x320>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002970:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_GPIO_Init+0x320>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_GPIO_Init+0x320>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_GPIO_Init+0x320>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_GPIO_Init+0x320>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x320>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_GPIO_Init+0x320>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f ae96 	bls.w	8002728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	3724      	adds	r7, #36	; 0x24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40021400 	.word	0x40021400
 8002a28:	40021800 	.word	0x40021800
 8002a2c:	40013c00 	.word	0x40013c00

08002a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0ca      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b6      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a51      	ldr	r2, [pc, #324]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494c      	ldr	r1, [pc, #304]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07d      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06d      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e065      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4933      	ldr	r1, [pc, #204]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fa6e 	bl	8001064 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fa6a 	bl	8001064 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04d      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_ClockConfig+0x1b4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e030      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4915      	ldr	r1, [pc, #84]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490d      	ldr	r1, [pc, #52]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f81d 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4601      	mov	r1, r0
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe f9d0 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	080078f8 	.word	0x080078f8
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d007      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x32>
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x38>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 80b4 	bne.w	8002dec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c86:	60bb      	str	r3, [r7, #8]
       break;
 8002c88:	e0b3      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c8c:	60bb      	str	r3, [r7, #8]
      break;
 8002c8e:	e0b0      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c90:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d04a      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	ea03 0501 	and.w	r5, r3, r1
 8002cbc:	ea04 0602 	and.w	r6, r4, r2
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	0154      	lsls	r4, r2, #5
 8002cce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cd2:	014b      	lsls	r3, r1, #5
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	1b49      	subs	r1, r1, r5
 8002cda:	eb62 0206 	sbc.w	r2, r2, r6
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	f04f 0400 	mov.w	r4, #0
 8002ce6:	0194      	lsls	r4, r2, #6
 8002ce8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cec:	018b      	lsls	r3, r1, #6
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	00e2      	lsls	r2, r4, #3
 8002cfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d02:	00d9      	lsls	r1, r3, #3
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	195b      	adds	r3, r3, r5
 8002d0a:	eb44 0406 	adc.w	r4, r4, r6
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	02a2      	lsls	r2, r4, #10
 8002d18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d1c:	0299      	lsls	r1, r3, #10
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4614      	mov	r4, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	4621      	mov	r1, r4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 0400 	mov.w	r4, #0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	f7fd ffb2 	bl	8000c98 <__aeabi_uldivmod>
 8002d34:	4603      	mov	r3, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e049      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	f04f 0400 	mov.w	r4, #0
 8002d46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea03 0501 	and.w	r5, r3, r1
 8002d52:	ea04 0602 	and.w	r6, r4, r2
 8002d56:	4629      	mov	r1, r5
 8002d58:	4632      	mov	r2, r6
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	f04f 0400 	mov.w	r4, #0
 8002d62:	0154      	lsls	r4, r2, #5
 8002d64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d68:	014b      	lsls	r3, r1, #5
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	1b49      	subs	r1, r1, r5
 8002d70:	eb62 0206 	sbc.w	r2, r2, r6
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0194      	lsls	r4, r2, #6
 8002d7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	1a5b      	subs	r3, r3, r1
 8002d86:	eb64 0402 	sbc.w	r4, r4, r2
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d98:	00d9      	lsls	r1, r3, #3
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	195b      	adds	r3, r3, r5
 8002da0:	eb44 0406 	adc.w	r4, r4, r6
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	02a2      	lsls	r2, r4, #10
 8002dae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002db2:	0299      	lsls	r1, r3, #10
 8002db4:	460b      	mov	r3, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7fd ff67 	bl	8000c98 <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	60bb      	str	r3, [r7, #8]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dee:	60bb      	str	r3, [r7, #8]
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	68bb      	ldr	r3, [r7, #8]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	00f42400 	.word	0x00f42400

08002e04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d075      	beq.n	8002f08 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e1c:	4ba2      	ldr	r3, [pc, #648]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d00c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e28:	4b9f      	ldr	r3, [pc, #636]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d112      	bne.n	8002e5a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e34:	4b9c      	ldr	r3, [pc, #624]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	4b99      	ldr	r3, [pc, #612]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d05b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x102>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d157      	bne.n	8002f06 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e20b      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x6e>
 8002e64:	4b90      	ldr	r3, [pc, #576]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a8f      	ldr	r2, [pc, #572]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e01d      	b.n	8002eae <HAL_RCC_OscConfig+0xaa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x92>
 8002e7c:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a89      	ldr	r2, [pc, #548]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a86      	ldr	r2, [pc, #536]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0xaa>
 8002e96:	4b84      	ldr	r3, [pc, #528]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a83      	ldr	r2, [pc, #524]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b81      	ldr	r3, [pc, #516]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a80      	ldr	r2, [pc, #512]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe f8d5 	bl	8001064 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebe:	f7fe f8d1 	bl	8001064 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1d0      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed0:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0xba>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe f8c1 	bl	8001064 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee6:	f7fe f8bd 	bl	8001064 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1bc      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef8:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0xe2>
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d063      	beq.n	8002fdc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f14:	4b64      	ldr	r3, [pc, #400]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f38:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x14c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e190      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f50:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4952      	ldr	r1, [pc, #328]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f64:	e03a      	b.n	8002fdc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6e:	4b4f      	ldr	r3, [pc, #316]	; (80030ac <HAL_RCC_OscConfig+0x2a8>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f876 	bl	8001064 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f872 	bl	8001064 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e171      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	493f      	ldr	r1, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <HAL_RCC_OscConfig+0x2a8>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f855 	bl	8001064 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe f851 	bl	8001064 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e150      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd0:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d030      	beq.n	800304a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f835 	bl	8001064 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe f831 	bl	8001064 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e130      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8003012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1fa>
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe f81e 	bl	8001064 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe f81a 	bl	8001064 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e119      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 809f 	beq.w	8003196 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_OscConfig+0x2b0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d120      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_OscConfig+0x2b0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <HAL_RCC_OscConfig+0x2b0>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a0:	f7fd ffe0 	bl	8001064 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e010      	b.n	80030ca <HAL_RCC_OscConfig+0x2c6>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	42470000 	.word	0x42470000
 80030b0:	42470e80 	.word	0x42470e80
 80030b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd ffd4 	bl	8001064 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0d3      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x478>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x2e8>
 80030de:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	e01c      	b.n	8003126 <HAL_RCC_OscConfig+0x322>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x30a>
 80030f4:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a61      	ldr	r2, [pc, #388]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0x322>
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fd ff99 	bl	8001064 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fd ff95 	bl	8001064 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e092      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ee      	beq.n	8003136 <HAL_RCC_OscConfig+0x332>
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd ff83 	bl	8001064 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd ff7f 	bl	8001064 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e07c      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d068      	beq.n	8003270 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d060      	beq.n	800326c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d145      	bne.n	800323e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x480>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd ff54 	bl	8001064 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fd ff50 	bl	8001064 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	491d      	ldr	r1, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_RCC_OscConfig+0x480>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd ff25 	bl	8001064 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321e:	f7fd ff21 	bl	8001064 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e020      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x41a>
 800323c:	e018      	b.n	8003270 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_OscConfig+0x480>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd ff0e 	bl	8001064 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd ff0a 	bl	8001064 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e009      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_RCC_OscConfig+0x47c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x448>
 800326a:	e001      	b.n	8003270 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000
 8003280:	40023800 	.word	0x40023800
 8003284:	42470060 	.word	0x42470060

08003288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e056      	b.n	8003348 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f001 fb87 	bl	80049c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	ea42 0103 	orr.w	r1, r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	f003 0104 	and.w	r1, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003336:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e01d      	b.n	800339e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f001 fe10 	bl	8004f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fa58 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d007      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01d      	b.n	800343c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f001 fd8b 	bl	8004f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fa09 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0202 	mvn.w	r2, #2
 8003470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9be 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9b0 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9c1 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0204 	mvn.w	r2, #4
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f994 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f986 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f997 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0208 	mvn.w	r2, #8
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f96a 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f95c 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f96d 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b10      	cmp	r3, #16
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0210 	mvn.w	r2, #16
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2208      	movs	r2, #8
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f940 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f932 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f943 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0201 	mvn.w	r2, #1
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f90c 	bl	80037e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d10e      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b80      	cmp	r3, #128	; 0x80
 80035e2:	d107      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fbc7 	bl	8003d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f908 	bl	8003830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0220 	mvn.w	r2, #32
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fb91 	bl	8003d6e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800366a:	2302      	movs	r3, #2
 800366c:	e0b4      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	f200 809f 	bhi.w	80037c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	080036c1 	.word	0x080036c1
 8003690:	080037c5 	.word	0x080037c5
 8003694:	080037c5 	.word	0x080037c5
 8003698:	080037c5 	.word	0x080037c5
 800369c:	08003701 	.word	0x08003701
 80036a0:	080037c5 	.word	0x080037c5
 80036a4:	080037c5 	.word	0x080037c5
 80036a8:	080037c5 	.word	0x080037c5
 80036ac:	08003743 	.word	0x08003743
 80036b0:	080037c5 	.word	0x080037c5
 80036b4:	080037c5 	.word	0x080037c5
 80036b8:	080037c5 	.word	0x080037c5
 80036bc:	08003783 	.word	0x08003783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f95c 	bl	8003984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	619a      	str	r2, [r3, #24]
      break;
 80036fe:	e062      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f9ac 	bl	8003a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
      break;
 8003740:	e041      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa01 	bl	8003b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0208 	orr.w	r2, r2, #8
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0204 	bic.w	r2, r2, #4
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]
      break;
 8003780:	e021      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fa55 	bl	8003c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69d9      	ldr	r1, [r3, #28]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	61da      	str	r2, [r3, #28]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 0302 	bic.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_OC1_SetConfig+0x64>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0308 	bic.w	r3, r3, #8
 80039ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC1_SetConfig+0x8e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d111      	bne.n	8003a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0320 	bic.w	r3, r3, #32
 8003aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC2_SetConfig+0x68>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10d      	bne.n	8003ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x94>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d113      	bne.n	8003b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010400 	.word	0x40010400

08003b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC3_SetConfig+0x66>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0x92>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d113      	bne.n	8003c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400

08003c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <TIM_OC4_SetConfig+0xa4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC4_SetConfig+0x68>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <TIM_OC4_SetConfig+0xa8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e032      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <_DoInit+0x8c>)
 8003da0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2203      	movs	r2, #3
 8003da6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <_DoInit+0x90>)
 8003db2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <_DoInit+0x94>)
 8003db8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <_DoInit+0x90>)
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <_DoInit+0x98>)
 8003dde:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2210      	movs	r2, #16
 8003de4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <_DoInit+0x9c>)
 8003dfe:	6810      	ldr	r0, [r2, #0]
 8003e00:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <_DoInit+0xa0>)
 8003e06:	6810      	ldr	r0, [r2, #0]
 8003e08:	6018      	str	r0, [r3, #0]
 8003e0a:	8891      	ldrh	r1, [r2, #4]
 8003e0c:	7992      	ldrb	r2, [r2, #6]
 8003e0e:	8099      	strh	r1, [r3, #4]
 8003e10:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	719a      	strb	r2, [r3, #6]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	2000063c 	.word	0x2000063c
 8003e28:	080078a0 	.word	0x080078a0
 8003e2c:	200001f8 	.word	0x200001f8
 8003e30:	200005f8 	.word	0x200005f8
 8003e34:	080078ac 	.word	0x080078ac
 8003e38:	080078b0 	.word	0x080078b0

08003e3c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d905      	bls.n	8003e6c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e007      	b.n	8003e7c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1acb      	subs	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	4293      	cmp	r3, r2
 8003e88:	bf28      	it	cs
 8003e8a:	4613      	movcs	r3, r2
 8003e8c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4293      	cmp	r3, r2
 8003e94:	bf28      	it	cs
 8003e96:	4613      	movcs	r3, r2
 8003e98:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f972 	bl	8005190 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d101      	bne.n	8003eda <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1b5      	bne.n	8003e52 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d90e      	bls.n	8003f32 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 f935 	bl	8005190 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f30:	e01a      	b.n	8003f68 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f924 	bl	8005190 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6858      	ldr	r0, [r3, #4]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f001 f917 	bl	8005190 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	60da      	str	r2, [r3, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d808      	bhi.n	8003f9e <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e004      	b.n	8003fa8 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003fa8:	697b      	ldr	r3, [r7, #20]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <SEGGER_RTT_WriteNoLock+0x98>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d017      	beq.n	8004012 <SEGGER_RTT_WriteNoLock+0x5a>
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d302      	bcc.n	8003fec <SEGGER_RTT_WriteNoLock+0x34>
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d023      	beq.n	8004032 <SEGGER_RTT_WriteNoLock+0x7a>
 8003fea:	e029      	b.n	8004040 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7ff ffbf 	bl	8003f70 <_GetAvailWriteSpace>
 8003ff2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d202      	bcs.n	8004002 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004000:	e021      	b.n	8004046 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff70 	bl	8003ef0 <_WriteNoCheck>
    break;
 8004010:	e019      	b.n	8004046 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ffac 	bl	8003f70 <_GetAvailWriteSpace>
 8004018:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4293      	cmp	r3, r2
 8004020:	bf28      	it	cs
 8004022:	4613      	movcs	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff60 	bl	8003ef0 <_WriteNoCheck>
    break;
 8004030:	e009      	b.n	8004046 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff00 	bl	8003e3c <_WriteBlocking>
 800403c:	61f8      	str	r0, [r7, #28]
    break;
 800403e:	e002      	b.n	8004046 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
    break;
 8004044:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004046:	69fb      	ldr	r3, [r7, #28]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000063c 	.word	0x2000063c

08004054 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <SEGGER_RTT_Write+0x44>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <SEGGER_RTT_Write+0x18>
 8004068:	f7ff fe96 	bl	8003d98 <_DoInit>
  SEGGER_RTT_LOCK();
 800406c:	f3ef 8311 	mrs	r3, BASEPRI
 8004070:	f04f 0120 	mov.w	r1, #32
 8004074:	f381 8811 	msr	BASEPRI, r1
 8004078:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff ff9a 	bl	8003fb8 <SEGGER_RTT_WriteNoLock>
 8004084:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800408c:	693b      	ldr	r3, [r7, #16]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2000063c 	.word	0x2000063c

0800409c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80040b2:	f7ff fe71 	bl	8003d98 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4293      	cmp	r3, r2
 80040c0:	d24c      	bcs.n	800415c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80040c2:	f3ef 8311 	mrs	r3, BASEPRI
 80040c6:	f04f 0120 	mov.w	r1, #32
 80040ca:	f381 8811 	msr	BASEPRI, r1
 80040ce:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d032      	beq.n	800413c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80040d6:	4925      	ldr	r1, [pc, #148]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040ea:	4920      	ldr	r1, [pc, #128]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3304      	adds	r3, #4
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004100:	491a      	ldr	r1, [pc, #104]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3320      	adds	r3, #32
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004114:	4915      	ldr	r1, [pc, #84]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	3328      	adds	r3, #40	; 0x28
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004128:	4910      	ldr	r1, [pc, #64]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800413c:	490b      	ldr	r1, [pc, #44]	; (800416c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	332c      	adds	r3, #44	; 0x2c
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e002      	b.n	8004162 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000063c 	.word	0x2000063c

08004170 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  _DoInit();
 8004174:	f7ff fe10 	bl	8003d98 <_DoInit>
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}

0800417c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004182:	463b      	mov	r3, r7
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800418e:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <MX_ADC1_Init+0x10c>)
 8004190:	4a3e      	ldr	r2, [pc, #248]	; (800428c <MX_ADC1_Init+0x110>)
 8004192:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004194:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <MX_ADC1_Init+0x10c>)
 8004196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800419a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800419c:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <MX_ADC1_Init+0x10c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041a8:	4b37      	ldr	r3, [pc, #220]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <MX_ADC1_Init+0x114>)
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041ca:	2205      	movs	r2, #5
 80041cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041d8:	2201      	movs	r2, #1
 80041da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041dc:	482a      	ldr	r0, [pc, #168]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041de:	f7fc ff4d 	bl	800107c <HAL_ADC_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80041e8:	f000 fb02 	bl	80047f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80041ec:	2309      	movs	r3, #9
 80041ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041f0:	2301      	movs	r3, #1
 80041f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80041f4:	2302      	movs	r3, #2
 80041f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041f8:	463b      	mov	r3, r7
 80041fa:	4619      	mov	r1, r3
 80041fc:	4822      	ldr	r0, [pc, #136]	; (8004288 <MX_ADC1_Init+0x10c>)
 80041fe:	f7fd f869 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004208:	f000 faf2 	bl	80047f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800420c:	2300      	movs	r3, #0
 800420e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004210:	2302      	movs	r3, #2
 8004212:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004214:	2301      	movs	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004218:	463b      	mov	r3, r7
 800421a:	4619      	mov	r1, r3
 800421c:	481a      	ldr	r0, [pc, #104]	; (8004288 <MX_ADC1_Init+0x10c>)
 800421e:	f7fd f859 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004228:	f000 fae2 	bl	80047f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800422c:	2301      	movs	r3, #1
 800422e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004230:	2303      	movs	r3, #3
 8004232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004234:	463b      	mov	r3, r7
 8004236:	4619      	mov	r1, r3
 8004238:	4813      	ldr	r0, [pc, #76]	; (8004288 <MX_ADC1_Init+0x10c>)
 800423a:	f7fd f84b 	bl	80012d4 <HAL_ADC_ConfigChannel>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004244:	f000 fad4 	bl	80047f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004248:	2302      	movs	r3, #2
 800424a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800424c:	2304      	movs	r3, #4
 800424e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004250:	463b      	mov	r3, r7
 8004252:	4619      	mov	r1, r3
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <MX_ADC1_Init+0x10c>)
 8004256:	f7fd f83d 	bl	80012d4 <HAL_ADC_ConfigChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8004260:	f000 fac6 	bl	80047f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004264:	2303      	movs	r3, #3
 8004266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004268:	2305      	movs	r3, #5
 800426a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800426c:	463b      	mov	r3, r7
 800426e:	4619      	mov	r1, r3
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <MX_ADC1_Init+0x10c>)
 8004272:	f7fd f82f 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800427c:	f000 fab8 	bl	80047f0 <Error_Handler>
  }

}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200006e4 	.word	0x200006e4
 800428c:	40012000 	.word	0x40012000
 8004290:	0f000001 	.word	0x0f000001

08004294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <HAL_ADC_MspInit+0x10c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d170      	bne.n	8004398 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	4a39      	ldr	r2, [pc, #228]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	6453      	str	r3, [r2, #68]	; 0x44
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a32      	ldr	r2, [pc, #200]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	4a2b      	ldr	r2, [pc, #172]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	6313      	str	r3, [r2, #48]	; 0x30
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_ADC_MspInit+0x110>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 800430a:	230f      	movs	r3, #15
 800430c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800430e:	2303      	movs	r3, #3
 8004310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	4822      	ldr	r0, [pc, #136]	; (80043a8 <HAL_ADC_MspInit+0x114>)
 800431e:	f7fe f9f5 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 8004322:	2302      	movs	r3, #2
 8004324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004326:	2303      	movs	r3, #3
 8004328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	481d      	ldr	r0, [pc, #116]	; (80043ac <HAL_ADC_MspInit+0x118>)
 8004336:	f7fe f9e9 	bl	800270c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_ADC_MspInit+0x120>)
 800433e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800434c:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 800434e:	2200      	movs	r2, #0
 8004350:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004358:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 800435c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004360:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004368:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 800436c:	2200      	movs	r2, #0
 800436e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004372:	2200      	movs	r2, #0
 8004374:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004378:	2200      	movs	r2, #0
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800437c:	480c      	ldr	r0, [pc, #48]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 800437e:	f7fd fb6b 	bl	8001a58 <HAL_DMA_Init>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8004388:	f000 fa32 	bl	80047f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_ADC_MspInit+0x11c>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004398:	bf00      	nop
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40012000 	.word	0x40012000
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40020400 	.word	0x40020400
 80043b0:	2000072c 	.word	0x2000072c
 80043b4:	40026410 	.word	0x40026410

080043b8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043c8:	885b      	ldrh	r3, [r3, #2]
 80043ca:	4618      	mov	r0, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043ce:	889b      	ldrh	r3, [r3, #4]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80043d0:	461c      	mov	r4, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043d4:	88db      	ldrh	r3, [r3, #6]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80043d6:	461a      	mov	r2, r3
			g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4]);
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043da:	891b      	ldrh	r3, [r3, #8]
	printf("%4d,%4d,%4d,%4d,%4d\n", g_ADCBuffer[0], g_ADCBuffer[1],
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	4623      	mov	r3, r4
 80043e2:	4602      	mov	r2, r0
 80043e4:	4823      	ldr	r0, [pc, #140]	; (8004474 <HAL_ADC_ConvCpltCallback+0xbc>)
 80043e6:	f001 fb43 	bl	8005a70 <iprintf>

	printf("%d\n", g_ADCBuffer[0]);
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	4821      	ldr	r0, [pc, #132]	; (8004478 <HAL_ADC_ConvCpltCallback+0xc0>)
 80043f2:	f001 fb3d 	bl	8005a70 <iprintf>
	Batt = (float) g_ADCBuffer[0] / 4095 * 3.3 * 2;
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_ADC_ConvCpltCallback+0xb8>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800447c <HAL_ADC_ConvCpltCallback+0xc4>
 8004406:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800440a:	ee16 0a90 	vmov	r0, s13
 800440e:	f7fc f8c3 	bl	8000598 <__aeabi_f2d>
 8004412:	a315      	add	r3, pc, #84	; (adr r3, 8004468 <HAL_ADC_ConvCpltCallback+0xb0>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f916 	bl	8000648 <__aeabi_dmul>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4618      	mov	r0, r3
 8004422:	4621      	mov	r1, r4
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	f7fb ff58 	bl	80002dc <__adddf3>
 800442c:	4603      	mov	r3, r0
 800442e:	460c      	mov	r4, r1
 8004430:	4618      	mov	r0, r3
 8004432:	4621      	mov	r1, r4
 8004434:	f7fc fbe0 	bl	8000bf8 <__aeabi_d2f>
 8004438:	4602      	mov	r2, r0
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_ADC_ConvCpltCallback+0xc8>)
 800443c:	601a      	str	r2, [r3, #0]
	printf("Batt=%.4f\n", Batt);
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_ADC_ConvCpltCallback+0xc8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc f8a8 	bl	8000598 <__aeabi_f2d>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	461a      	mov	r2, r3
 800444e:	4623      	mov	r3, r4
 8004450:	480c      	ldr	r0, [pc, #48]	; (8004484 <HAL_ADC_ConvCpltCallback+0xcc>)
 8004452:	f001 fb0d 	bl	8005a70 <iprintf>
	printf("\n");
 8004456:	200a      	movs	r0, #10
 8004458:	f001 fb22 	bl	8005aa0 <putchar>

}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	f3af 8000 	nop.w
 8004468:	66666666 	.word	0x66666666
 800446c:	400a6666 	.word	0x400a6666
 8004470:	20000bd4 	.word	0x20000bd4
 8004474:	080078b8 	.word	0x080078b8
 8004478:	080078d0 	.word	0x080078d0
 800447c:	457ff000 	.word	0x457ff000
 8004480:	200009c8 	.word	0x200009c8
 8004484:	080078d4 	.word	0x080078d4

08004488 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <MX_DMA_Init+0x3c>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <MX_DMA_Init+0x3c>)
 8004498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800449c:	6313      	str	r3, [r2, #48]	; 0x30
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <MX_DMA_Init+0x3c>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2100      	movs	r1, #0
 80044ae:	2038      	movs	r0, #56	; 0x38
 80044b0:	f7fd fa9b 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80044b4:	2038      	movs	r0, #56	; 0x38
 80044b6:	f7fd fab4 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ce:	f107 0314 	add.w	r3, r7, #20
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <MX_GPIO_Init+0x128>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a42      	ldr	r2, [pc, #264]	; (80045f0 <MX_GPIO_Init+0x128>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <MX_GPIO_Init+0x128>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <MX_GPIO_Init+0x128>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <MX_GPIO_Init+0x128>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a34      	ldr	r2, [pc, #208]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a2d      	ldr	r2, [pc, #180]	; (80045f0 <MX_GPIO_Init+0x128>)
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <MX_GPIO_Init+0x128>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SENLED_R_Pin, GPIO_PIN_RESET);
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004554:	4827      	ldr	r0, [pc, #156]	; (80045f4 <MX_GPIO_Init+0x12c>)
 8004556:	f7fe fa83 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 800455a:	2200      	movs	r2, #0
 800455c:	f641 3170 	movw	r1, #7024	; 0x1b70
 8004560:	4825      	ldr	r0, [pc, #148]	; (80045f8 <MX_GPIO_Init+0x130>)
 8004562:	f7fe fa7d 	bl	8002a60 <HAL_GPIO_WritePin>
                          |FLAG_LED_Pin|GPIO_PIN_11|SEN_LED_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 8004566:	2200      	movs	r2, #0
 8004568:	f240 31c1 	movw	r1, #961	; 0x3c1
 800456c:	4823      	ldr	r0, [pc, #140]	; (80045fc <MX_GPIO_Init+0x134>)
 800456e:	f7fe fa77 	bl	8002a60 <HAL_GPIO_WritePin>
                          |MOTER_L_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SENLED_R_Pin;
 8004572:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004578:	2301      	movs	r3, #1
 800457a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4619      	mov	r1, r3
 800458a:	481a      	ldr	r0, [pc, #104]	; (80045f4 <MX_GPIO_Init+0x12c>)
 800458c:	f7fe f8be 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = UI_LED_LEFT_BO_Pin|SENLED_L_Pin|SENLED_LF_Pin|CS_GYRO_Pin 
 8004590:	f641 3370 	movw	r3, #7024	; 0x1b70
 8004594:	617b      	str	r3, [r7, #20]
                          |FLAG_LED_Pin|GPIO_PIN_11|SEN_LED_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459e:	2300      	movs	r3, #0
 80045a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	4619      	mov	r1, r3
 80045a8:	4813      	ldr	r0, [pc, #76]	; (80045f8 <MX_GPIO_Init+0x130>)
 80045aa:	f7fe f8af 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UI_LED1_Pin|CS_R_EN_Pin|CS_L_EN_Pin|MOTER_R_CWCCW_Pin 
 80045ae:	f240 33c1 	movw	r3, #961	; 0x3c1
 80045b2:	617b      	str	r3, [r7, #20]
                          |MOTER_L_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b4:	2301      	movs	r3, #1
 80045b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4619      	mov	r1, r3
 80045c6:	480d      	ldr	r0, [pc, #52]	; (80045fc <MX_GPIO_Init+0x134>)
 80045c8:	f7fe f8a0 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80045cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	4806      	ldr	r0, [pc, #24]	; (80045fc <MX_GPIO_Init+0x134>)
 80045e2:	f7fe f893 	bl	800270c <HAL_GPIO_Init>

}
 80045e6:	bf00      	nop
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40020800 	.word	0x40020800
 80045f8:	40020000 	.word	0x40020000
 80045fc:	40020400 	.word	0x40020400

08004600 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004606:	f7fc fcc7 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800460a:	f000 f887 	bl	800471c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800460e:	f7ff ff5b 	bl	80044c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8004612:	f7ff ff39 	bl	8004488 <MX_DMA_Init>
	MX_ADC1_Init();
 8004616:	f7ff fdb1 	bl	800417c <MX_ADC1_Init>
	MX_SPI2_Init();
 800461a:	f000 f969 	bl	80048f0 <MX_SPI2_Init>
	MX_SPI3_Init();
 800461e:	f000 f99d 	bl	800495c <MX_SPI3_Init>
	MX_TIM2_Init();
 8004622:	f000 fb95 	bl	8004d50 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004626:	f000 fbf5 	bl	8004e14 <MX_TIM3_Init>
	MX_TIM6_Init();
 800462a:	f000 fc4b 	bl	8004ec4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800462e:	4832      	ldr	r0, [pc, #200]	; (80046f8 <main+0xf8>)
 8004630:	f7fe feb9 	bl	80033a6 <HAL_TIM_Base_Start_IT>
	SEGGER_RTT_Init();
 8004634:	f7ff fd9c 	bl	8004170 <SEGGER_RTT_Init>
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	2200      	movs	r2, #0
 8004640:	2100      	movs	r1, #0
 8004642:	2000      	movs	r0, #0
 8004644:	f7ff fd2a 	bl	800409c <SEGGER_RTT_ConfigUpBuffer>
	printf("\x1b[0m");
 8004648:	482c      	ldr	r0, [pc, #176]	; (80046fc <main+0xfc>)
 800464a:	f001 fa11 	bl	8005a70 <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i=-1, j;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	603b      	str	r3, [r7, #0]
//	float pi = 3.14;
	read_flash(0x08160000ul, &i, sizeof(i));
 8004654:	463b      	mov	r3, r7
 8004656:	2204      	movs	r2, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4829      	ldr	r0, [pc, #164]	; (8004700 <main+0x100>)
 800465c:	f000 f937 	bl	80048ce <read_flash>
	printf("i=%d\n",i);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4827      	ldr	r0, [pc, #156]	; (8004704 <main+0x104>)
 8004666:	f001 fa03 	bl	8005a70 <iprintf>
	i++;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	603b      	str	r3, [r7, #0]
	write_flash(0x08160000ul, &i, sizeof(i));
 8004670:	463b      	mov	r3, r7
 8004672:	2204      	movs	r2, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4822      	ldr	r0, [pc, #136]	; (8004700 <main+0x100>)
 8004678:	f000 f8fd 	bl	8004876 <write_flash>

	HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 800467c:	2205      	movs	r2, #5
 800467e:	4922      	ldr	r1, [pc, #136]	; (8004708 <main+0x108>)
 8004680:	4822      	ldr	r0, [pc, #136]	; (800470c <main+0x10c>)
 8004682:	f7fc fd3f 	bl	8001104 <HAL_ADC_Start_DMA>
			sizeof(g_ADCBuffer) / sizeof(uint16_t));

	for (i = 0; i < 17; i++) {
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	e01b      	b.n	80046c4 <main+0xc4>
		for (j = 0; j < 17; j++) {
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e012      	b.n	80046b8 <main+0xb8>
			step_map[i][j] = i + j * 16;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	b29b      	uxth	r3, r3
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	b299      	uxth	r1, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b29a      	uxth	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	b290      	uxth	r0, r2
 80046a4:	491a      	ldr	r1, [pc, #104]	; (8004710 <main+0x110>)
 80046a6:	011a      	lsls	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	4602      	mov	r2, r0
 80046ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < 17; j++) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3301      	adds	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	dde9      	ble.n	8004692 <main+0x92>
	for (i = 0; i < 17; i++) {
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	dde0      	ble.n	800468c <main+0x8c>
		}
	}
	while (1) {
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 80046ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046ce:	4811      	ldr	r0, [pc, #68]	; (8004714 <main+0x114>)
 80046d0:	f7fe f9ae 	bl	8002a30 <HAL_GPIO_ReadPin>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <main+0xea>
			chattering();
 80046da:	f000 f891 	bl	8004800 <chattering>
			HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, 1);
 80046de:	2201      	movs	r2, #1
 80046e0:	2110      	movs	r1, #16
 80046e2:	480d      	ldr	r0, [pc, #52]	; (8004718 <main+0x118>)
 80046e4:	f7fe f9bc 	bl	8002a60 <HAL_GPIO_WritePin>
 80046e8:	e7ef      	b.n	80046ca <main+0xca>

		} else {
			HAL_GPIO_WritePin(UI_LED_LEFT_BO_GPIO_Port, UI_LED_LEFT_BO_Pin, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2110      	movs	r1, #16
 80046ee:	480a      	ldr	r0, [pc, #40]	; (8004718 <main+0x118>)
 80046f0:	f7fe f9b6 	bl	8002a60 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 80046f4:	e7e9      	b.n	80046ca <main+0xca>
 80046f6:	bf00      	nop
 80046f8:	2000087c 	.word	0x2000087c
 80046fc:	080078e0 	.word	0x080078e0
 8004700:	08160000 	.word	0x08160000
 8004704:	080078e8 	.word	0x080078e8
 8004708:	20000bd4 	.word	0x20000bd4
 800470c:	200006e4 	.word	0x200006e4
 8004710:	200009d0 	.word	0x200009d0
 8004714:	40020400 	.word	0x40020400
 8004718:	40020000 	.word	0x40020000

0800471c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b094      	sub	sp, #80	; 0x50
 8004720:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	2234      	movs	r2, #52	; 0x34
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fd3b 	bl	80051a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <SystemClock_Config+0xcc>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <SystemClock_Config+0xcc>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6413      	str	r3, [r2, #64]	; 0x40
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <SystemClock_Config+0xcc>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800475c:	2300      	movs	r3, #0
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4b22      	ldr	r3, [pc, #136]	; (80047ec <SystemClock_Config+0xd0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <SystemClock_Config+0xd0>)
 8004766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <SystemClock_Config+0xd0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004778:	2301      	movs	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800477c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004780:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004782:	2302      	movs	r3, #2
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800478c:	2308      	movs	r3, #8
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004790:	2364      	movs	r3, #100	; 0x64
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004794:	2302      	movs	r3, #2
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004798:	2302      	movs	r3, #2
 800479a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800479c:	2302      	movs	r3, #2
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fb2d 	bl	8002e04 <HAL_RCC_OscConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <SystemClock_Config+0x98>
		Error_Handler();
 80047b0:	f000 f81e 	bl	80047f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80047b4:	230f      	movs	r3, #15
 80047b6:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047b8:	2302      	movs	r3, #2
 80047ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80047c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	2103      	movs	r1, #3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f95f 	bl	8002a94 <HAL_RCC_ClockConfig>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <SystemClock_Config+0xc4>
		Error_Handler();
 80047dc:	f000 f808 	bl	80047f0 <Error_Handler>
	}
}
 80047e0:	bf00      	nop
 80047e2:	3750      	adds	r7, #80	; 0x50
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40007000 	.word	0x40007000

080047f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <chattering>:
#include "string.h"

#define CHATT 10000
#define SECTOR_BASE_ADRR 0x08160000ul

void chattering(void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
	int i = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 800480a:	e002      	b.n	8004812 <chattering+0x12>
		i++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f242 720f 	movw	r2, #9999	; 0x270f
 8004818:	4293      	cmp	r3, r2
 800481a:	ddf7      	ble.n	800480c <chattering+0xc>
	}
	while (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 800481c:	bf00      	nop
 800481e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004822:	4809      	ldr	r0, [pc, #36]	; (8004848 <chattering+0x48>)
 8004824:	f7fe f904 	bl	8002a30 <HAL_GPIO_ReadPin>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f7      	beq.n	800481e <chattering+0x1e>
	}
	while (i < CHATT) {
 800482e:	e002      	b.n	8004836 <chattering+0x36>
		i++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3301      	adds	r3, #1
 8004834:	607b      	str	r3, [r7, #4]
	while (i < CHATT) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f242 720f 	movw	r2, #9999	; 0x270f
 800483c:	4293      	cmp	r3, r2
 800483e:	ddf7      	ble.n	8004830 <chattering+0x30>
	}
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40020400 	.word	0x40020400

0800484c <erase_flash>:

void erase_flash(void) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; //erase only sector
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_15; //sector Name
 8004856:	230f      	movs	r3, #15
 8004858:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; //2.7 to 3.6V
 800485a:	2302      	movs	r3, #2
 800485c:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1; //Number of sectors to be erased.
 800485e:	2301      	movs	r3, #1
 8004860:	613b      	str	r3, [r7, #16]

	uint16_t SectorError; //srroe sector nomber

	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //erase sector
 8004862:	1cba      	adds	r2, r7, #2
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fe2d 	bl	80024c8 <HAL_FLASHEx_Erase>
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <write_flash>:

void write_flash(uint32_t address,uint8_t *data,uint32_t size){
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
	uint32_t add=address;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock(); //flash unlook
 8004886:	f7fd fcb1 	bl	80021ec <HAL_FLASH_Unlock>
	erase_flash();
 800488a:	f7ff ffdf 	bl	800484c <erase_flash>
	for(add=address;add<(address+size);add++){
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e010      	b.n	80048b6 <write_flash+0x40>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f04f 0400 	mov.w	r4, #0
 800489e:	461a      	mov	r2, r3
 80048a0:	4623      	mov	r3, r4
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fd fc4d 	bl	8002144 <HAL_FLASH_Program>
		data++;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
	for(add=address;add<(address+size);add++){
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4413      	add	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3e8      	bcc.n	8004894 <write_flash+0x1e>
	}
	HAL_FLASH_Lock(); //flash look
 80048c2:	f7fd fcb5 	bl	8002230 <HAL_FLASH_Lock>
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd90      	pop	{r4, r7, pc}

080048ce <read_flash>:
	uint8_t i = 0;
//write_flash(SECTOR_BASE_ADRR, data, size)

}

void read_flash(uint32_t address,uint8_t *data,uint32_t size) {
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
	memcpy(data,(uint8_t*)address,size);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4619      	mov	r1, r3
 80048e0:	68b8      	ldr	r0, [r7, #8]
 80048e2:	f000 fc55 	bl	8005190 <memcpy>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <MX_SPI2_Init+0x64>)
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <MX_SPI2_Init+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048fa:	4b16      	ldr	r3, [pc, #88]	; (8004954 <MX_SPI2_Init+0x64>)
 80048fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <MX_SPI2_Init+0x64>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <MX_SPI2_Init+0x64>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800490e:	4b11      	ldr	r3, [pc, #68]	; (8004954 <MX_SPI2_Init+0x64>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <MX_SPI2_Init+0x64>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_SPI2_Init+0x64>)
 800491c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <MX_SPI2_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <MX_SPI2_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <MX_SPI2_Init+0x64>)
 8004930:	2200      	movs	r2, #0
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <MX_SPI2_Init+0x64>)
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_SPI2_Init+0x64>)
 800493c:	220a      	movs	r2, #10
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004940:	4804      	ldr	r0, [pc, #16]	; (8004954 <MX_SPI2_Init+0x64>)
 8004942:	f7fe fca1 	bl	8003288 <HAL_SPI_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800494c:	f7ff ff50 	bl	80047f0 <Error_Handler>
  }

}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	2000078c 	.word	0x2000078c
 8004958:	40003800 	.word	0x40003800

0800495c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004962:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <MX_SPI3_Init+0x68>)
 8004964:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800496c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <MX_SPI3_Init+0x64>)
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004982:	2200      	movs	r2, #0
 8004984:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004990:	2200      	movs	r2, #0
 8004992:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <MX_SPI3_Init+0x64>)
 8004996:	2200      	movs	r2, #0
 8004998:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <MX_SPI3_Init+0x64>)
 800499c:	2200      	movs	r2, #0
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <MX_SPI3_Init+0x64>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <MX_SPI3_Init+0x64>)
 80049a8:	220a      	movs	r2, #10
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80049ac:	4804      	ldr	r0, [pc, #16]	; (80049c0 <MX_SPI3_Init+0x64>)
 80049ae:	f7fe fc6b 	bl	8003288 <HAL_SPI_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80049b8:	f7ff ff1a 	bl	80047f0 <Error_Handler>
  }

}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	200007e4 	.word	0x200007e4
 80049c4:	40003c00 	.word	0x40003c00

080049c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	; 0x30
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d0:	f107 031c 	add.w	r3, r7, #28
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <HAL_SPI_MspInit+0x10c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d12d      	bne.n	8004a46 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 80049f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f8:	6413      	str	r3, [r2, #64]	; 0x40
 80049fa:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a32      	ldr	r2, [pc, #200]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SCLK_GY_Pin|MISO_GY_Pin|MOSI_GY_Pin;
 8004a22:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a30:	2303      	movs	r3, #3
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a34:	2305      	movs	r3, #5
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a38:	f107 031c 	add.w	r3, r7, #28
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4827      	ldr	r0, [pc, #156]	; (8004adc <HAL_SPI_MspInit+0x114>)
 8004a40:	f7fd fe64 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004a44:	e041      	b.n	8004aca <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI3)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_SPI_MspInit+0x118>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d13c      	bne.n	8004aca <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a76:	f043 0302 	orr.w	r3, r3, #2
 8004a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7c:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_SPI_MspInit+0x110>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK_EN_Pin;
 8004a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCLK_EN_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	f107 031c 	add.w	r3, r7, #28
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	480d      	ldr	r0, [pc, #52]	; (8004adc <HAL_SPI_MspInit+0x114>)
 8004aa6:	f7fd fe31 	bl	800270c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_EN_Pin|MOSI_EN_Pin;
 8004aaa:	2330      	movs	r3, #48	; 0x30
 8004aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004aba:	2306      	movs	r3, #6
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4805      	ldr	r0, [pc, #20]	; (8004adc <HAL_SPI_MspInit+0x114>)
 8004ac6:	f7fd fe21 	bl	800270c <HAL_GPIO_Init>
}
 8004aca:	bf00      	nop
 8004acc:	3730      	adds	r7, #48	; 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40003800 	.word	0x40003800
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40003c00 	.word	0x40003c00

08004ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_MspInit+0x4c>)
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <HAL_MspInit+0x4c>)
 8004af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af8:	6453      	str	r3, [r2, #68]	; 0x44
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <HAL_MspInit+0x4c>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_MspInit+0x4c>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <HAL_MspInit+0x4c>)
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_MspInit+0x4c>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b46:	e7fe      	b.n	8004b46 <HardFault_Handler+0x4>

08004b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <MemManage_Handler+0x4>

08004b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <BusFault_Handler+0x4>

08004b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <UsageFault_Handler+0x4>

08004b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b88:	f7fc fa58 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b94:	4805      	ldr	r0, [pc, #20]	; (8004bac <TIM6_DAC_IRQHandler+0x1c>)
 8004b96:	f7fe fc55 	bl	8003444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  g_test++;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <TIM6_DAC_IRQHandler+0x20>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <TIM6_DAC_IRQHandler+0x20>)
 8004ba4:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2000087c 	.word	0x2000087c
 8004bb0:	2000060c 	.word	0x2000060c

08004bb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bb8:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <DMA2_Stream0_IRQHandler+0x10>)
 8004bba:	f7fd f85b 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2000072c 	.word	0x2000072c

08004bc8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e00a      	b.n	8004bf0 <_read+0x28>
		*ptr++ = __io_getchar();
 8004bda:	f3af 8000 	nop.w
 8004bde:	4601      	mov	r1, r0
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	60ba      	str	r2, [r7, #8]
 8004be6:	b2ca      	uxtb	r2, r1
 8004be8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3301      	adds	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	dbf0      	blt.n	8004bda <_read+0x12>
	}

	return len;
 8004bf8:	687b      	ldr	r3, [r7, #4]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
//		__io_putchar(*ptr++);
//	}
//	return len;

	(void) file; /* Not used, avoid warning */
	SEGGER_RTT_Write(0, ptr, len);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7ff fa1d 	bl	8004054 <SEGGER_RTT_Write>
	return len;
 8004c1a:	687b      	ldr	r3, [r7, #4]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_close>:

int _close(int file) {
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	return -1;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <_fstat>:

int _fstat(int file, struct stat *st) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c4c:	605a      	str	r2, [r3, #4]
	return 0;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_isatty>:

int _isatty(int file) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	return 1;
 8004c64:	2301      	movs	r3, #1
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
	return 0;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <_sbrk+0x50>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk+0x16>
		heap_end = &end;
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <_sbrk+0x50>)
 8004c9e:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <_sbrk+0x54>)
 8004ca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <_sbrk+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <_sbrk+0x50>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	466a      	mov	r2, sp
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d907      	bls.n	8004cc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cb6:	f000 fa41 	bl	800513c <__errno>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	e006      	b.n	8004cd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <_sbrk+0x50>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a03      	ldr	r2, [pc, #12]	; (8004cdc <_sbrk+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000608 	.word	0x20000608
 8004ce0:	20000be8 	.word	0x20000be8

08004ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <SystemInit+0x60>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <SystemInit+0x60>)
 8004cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <SystemInit+0x64>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <SystemInit+0x64>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <SystemInit+0x64>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <SystemInit+0x64>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <SystemInit+0x64>)
 8004d10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <SystemInit+0x64>)
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <SystemInit+0x68>)
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <SystemInit+0x64>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <SystemInit+0x64>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <SystemInit+0x64>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d32:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <SystemInit+0x60>)
 8004d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d38:	609a      	str	r2, [r3, #8]
#endif
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	24003010 	.word	0x24003010

08004d50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d56:	f107 0320 	add.w	r3, r7, #32
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004d72:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004d7a:	4b25      	ldr	r3, [pc, #148]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d92:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d98:	481d      	ldr	r0, [pc, #116]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004d9a:	f7fe fb28 	bl	80033ee <HAL_TIM_PWM_Init>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004da4:	f7ff fd24 	bl	80047f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004db0:	f107 0320 	add.w	r3, r7, #32
 8004db4:	4619      	mov	r1, r3
 8004db6:	4816      	ldr	r0, [pc, #88]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004db8:	f7fe ff94 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8004dc2:	f7ff fd15 	bl	80047f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dc6:	2360      	movs	r3, #96	; 0x60
 8004dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004dde:	f7fe fc39 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004de8:	f7ff fd02 	bl	80047f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	2204      	movs	r2, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4807      	ldr	r0, [pc, #28]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004df4:	f7fe fc2e 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004dfe:	f7ff fcf7 	bl	80047f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8004e02:	4803      	ldr	r0, [pc, #12]	; (8004e10 <MX_TIM2_Init+0xc0>)
 8004e04:	f000 f8f2 	bl	8004fec <HAL_TIM_MspPostInit>

}
 8004e08:	bf00      	nop
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200008bc 	.word	0x200008bc

08004e14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e1a:	f107 0320 	add.w	r3, r7, #32
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	611a      	str	r2, [r3, #16]
 8004e32:	615a      	str	r2, [r3, #20]
 8004e34:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004e36:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e38:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <MX_TIM3_Init+0xac>)
 8004e3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e42:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004e5a:	4818      	ldr	r0, [pc, #96]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e5c:	f7fe fac7 	bl	80033ee <HAL_TIM_PWM_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8004e66:	f7ff fcc3 	bl	80047f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e72:	f107 0320 	add.w	r3, r7, #32
 8004e76:	4619      	mov	r1, r3
 8004e78:	4810      	ldr	r0, [pc, #64]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004e7a:	f7fe ff33 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004e84:	f7ff fcb4 	bl	80047f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e88:	2360      	movs	r3, #96	; 0x60
 8004e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4807      	ldr	r0, [pc, #28]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004ea0:	f7fe fbd8 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004eaa:	f7ff fca1 	bl	80047f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004eae:	4803      	ldr	r0, [pc, #12]	; (8004ebc <MX_TIM3_Init+0xa8>)
 8004eb0:	f000 f89c 	bl	8004fec <HAL_TIM_MspPostInit>

}
 8004eb4:	bf00      	nop
 8004eb6:	3728      	adds	r7, #40	; 0x28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	2000083c 	.word	0x2000083c
 8004ec0:	40000400 	.word	0x40000400

08004ec4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eca:	463b      	mov	r3, r7
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <MX_TIM6_Init+0x68>)
 8004ed6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004eda:	2263      	movs	r2, #99	; 0x63
 8004edc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004eee:	2280      	movs	r2, #128	; 0x80
 8004ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ef2:	480d      	ldr	r0, [pc, #52]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004ef4:	f7fe fa2c 	bl	8003350 <HAL_TIM_Base_Init>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004efe:	f7ff fc77 	bl	80047f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f02:	2300      	movs	r3, #0
 8004f04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4806      	ldr	r0, [pc, #24]	; (8004f28 <MX_TIM6_Init+0x64>)
 8004f10:	f7fe fee8 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004f1a:	f7ff fc69 	bl	80047f0 <Error_Handler>
  }

}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2000087c 	.word	0x2000087c
 8004f2c:	40001000 	.word	0x40001000

08004f30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a12      	ldr	r2, [pc, #72]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004f5e:	e012      	b.n	8004f86 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <HAL_TIM_PWM_MspInit+0x68>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10d      	bne.n	8004f86 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_TIM_PWM_MspInit+0x64>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	40000400 	.word	0x40000400

08004f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_TIM_Base_MspInit+0x48>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d115      	bne.n	8004fda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fb8:	f043 0310 	orr.w	r3, r3, #16
 8004fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	2036      	movs	r0, #54	; 0x36
 8004fd0:	f7fc fd0b 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004fd4:	2036      	movs	r0, #54	; 0x36
 8004fd6:	f7fc fd24 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40001000 	.word	0x40001000
 8004fe8:	40023800 	.word	0x40023800

08004fec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d13d      	bne.n	800508a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTER_R_PWM_Pin;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005058:	2301      	movs	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_R_PWM_GPIO_Port, &GPIO_InitStruct);
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4619      	mov	r1, r3
 8005062:	481e      	ldr	r0, [pc, #120]	; (80050dc <HAL_TIM_MspPostInit+0xf0>)
 8005064:	f7fd fb52 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTER_L_PWM_Pin;
 8005068:	2308      	movs	r3, #8
 800506a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	2302      	movs	r3, #2
 800506e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005074:	2300      	movs	r3, #0
 8005076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005078:	2301      	movs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTER_L_PWM_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4619      	mov	r1, r3
 8005082:	4817      	ldr	r0, [pc, #92]	; (80050e0 <HAL_TIM_MspPostInit+0xf4>)
 8005084:	f7fd fb42 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005088:	e022      	b.n	80050d0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <HAL_TIM_MspPostInit+0xf8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d11d      	bne.n	80050d0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6313      	str	r3, [r2, #48]	; 0x30
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_TIM_MspPostInit+0xec>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	2302      	movs	r3, #2
 80050b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050bc:	2300      	movs	r3, #0
 80050be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050c0:	2302      	movs	r3, #2
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4619      	mov	r1, r3
 80050ca:	4804      	ldr	r0, [pc, #16]	; (80050dc <HAL_TIM_MspPostInit+0xf0>)
 80050cc:	f7fd fb1e 	bl	800270c <HAL_GPIO_Init>
}
 80050d0:	bf00      	nop
 80050d2:	3728      	adds	r7, #40	; 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40000400 	.word	0x40000400

080050e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80050e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80050ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050ee:	e003      	b.n	80050f8 <LoopCopyDataInit>

080050f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050f6:	3104      	adds	r1, #4

080050f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005100:	d3f6      	bcc.n	80050f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005104:	e002      	b.n	800510c <LoopFillZerobss>

08005106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005106:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005108:	f842 3b04 	str.w	r3, [r2], #4

0800510c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800510e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005110:	d3f9      	bcc.n	8005106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005112:	f7ff fde7 	bl	8004ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005116:	f000 f817 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7ff fa71 	bl	8004600 <main>
  bx  lr    
 800511e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005120:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005124:	08007bd8 	.word	0x08007bd8
  ldr  r0, =_sdata
 8005128:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800512c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005130:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005134:	20000be4 	.word	0x20000be4

08005138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC_IRQHandler>
	...

0800513c <__errno>:
 800513c:	4b01      	ldr	r3, [pc, #4]	; (8005144 <__errno+0x8>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4e0d      	ldr	r6, [pc, #52]	; (8005180 <__libc_init_array+0x38>)
 800514c:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 800514e:	1ba4      	subs	r4, r4, r6
 8005150:	10a4      	asrs	r4, r4, #2
 8005152:	2500      	movs	r5, #0
 8005154:	42a5      	cmp	r5, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	4e0b      	ldr	r6, [pc, #44]	; (8005188 <__libc_init_array+0x40>)
 800515a:	4c0c      	ldr	r4, [pc, #48]	; (800518c <__libc_init_array+0x44>)
 800515c:	f002 fb92 	bl	8007884 <_init>
 8005160:	1ba4      	subs	r4, r4, r6
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	2500      	movs	r5, #0
 8005166:	42a5      	cmp	r5, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005170:	4798      	blx	r3
 8005172:	3501      	adds	r5, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800517a:	4798      	blx	r3
 800517c:	3501      	adds	r5, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08007bd0 	.word	0x08007bd0
 8005184:	08007bd0 	.word	0x08007bd0
 8005188:	08007bd0 	.word	0x08007bd0
 800518c:	08007bd4 	.word	0x08007bd4

08005190 <memcpy>:
 8005190:	b510      	push	{r4, lr}
 8005192:	1e43      	subs	r3, r0, #1
 8005194:	440a      	add	r2, r1
 8005196:	4291      	cmp	r1, r2
 8005198:	d100      	bne.n	800519c <memcpy+0xc>
 800519a:	bd10      	pop	{r4, pc}
 800519c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a4:	e7f7      	b.n	8005196 <memcpy+0x6>

080051a6 <memset>:
 80051a6:	4402      	add	r2, r0
 80051a8:	4603      	mov	r3, r0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d100      	bne.n	80051b0 <memset+0xa>
 80051ae:	4770      	bx	lr
 80051b0:	f803 1b01 	strb.w	r1, [r3], #1
 80051b4:	e7f9      	b.n	80051aa <memset+0x4>

080051b6 <__cvt>:
 80051b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ba:	ec55 4b10 	vmov	r4, r5, d0
 80051be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	460e      	mov	r6, r1
 80051c8:	4691      	mov	r9, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4622      	movlt	r2, r4
 80051d0:	462b      	mov	r3, r5
 80051d2:	f027 0720 	bic.w	r7, r7, #32
 80051d6:	bfbb      	ittet	lt
 80051d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051dc:	461d      	movlt	r5, r3
 80051de:	2300      	movge	r3, #0
 80051e0:	232d      	movlt	r3, #45	; 0x2d
 80051e2:	bfb8      	it	lt
 80051e4:	4614      	movlt	r4, r2
 80051e6:	2f46      	cmp	r7, #70	; 0x46
 80051e8:	700b      	strb	r3, [r1, #0]
 80051ea:	d004      	beq.n	80051f6 <__cvt+0x40>
 80051ec:	2f45      	cmp	r7, #69	; 0x45
 80051ee:	d100      	bne.n	80051f2 <__cvt+0x3c>
 80051f0:	3601      	adds	r6, #1
 80051f2:	2102      	movs	r1, #2
 80051f4:	e000      	b.n	80051f8 <__cvt+0x42>
 80051f6:	2103      	movs	r1, #3
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	ab02      	add	r3, sp, #8
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4632      	mov	r2, r6
 8005202:	4653      	mov	r3, sl
 8005204:	ec45 4b10 	vmov	d0, r4, r5
 8005208:	f000 fcea 	bl	8005be0 <_dtoa_r>
 800520c:	2f47      	cmp	r7, #71	; 0x47
 800520e:	4680      	mov	r8, r0
 8005210:	d102      	bne.n	8005218 <__cvt+0x62>
 8005212:	f019 0f01 	tst.w	r9, #1
 8005216:	d026      	beq.n	8005266 <__cvt+0xb0>
 8005218:	2f46      	cmp	r7, #70	; 0x46
 800521a:	eb08 0906 	add.w	r9, r8, r6
 800521e:	d111      	bne.n	8005244 <__cvt+0x8e>
 8005220:	f898 3000 	ldrb.w	r3, [r8]
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d10a      	bne.n	800523e <__cvt+0x88>
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb fc72 	bl	8000b18 <__aeabi_dcmpeq>
 8005234:	b918      	cbnz	r0, 800523e <__cvt+0x88>
 8005236:	f1c6 0601 	rsb	r6, r6, #1
 800523a:	f8ca 6000 	str.w	r6, [sl]
 800523e:	f8da 3000 	ldr.w	r3, [sl]
 8005242:	4499      	add	r9, r3
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fb fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8005250:	b938      	cbnz	r0, 8005262 <__cvt+0xac>
 8005252:	2230      	movs	r2, #48	; 0x30
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	454b      	cmp	r3, r9
 8005258:	d205      	bcs.n	8005266 <__cvt+0xb0>
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	9103      	str	r1, [sp, #12]
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e7f8      	b.n	8005254 <__cvt+0x9e>
 8005262:	f8cd 900c 	str.w	r9, [sp, #12]
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800526a:	eba3 0308 	sub.w	r3, r3, r8
 800526e:	4640      	mov	r0, r8
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	b004      	add	sp, #16
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005278 <__exponent>:
 8005278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527a:	2900      	cmp	r1, #0
 800527c:	4604      	mov	r4, r0
 800527e:	bfba      	itte	lt
 8005280:	4249      	neglt	r1, r1
 8005282:	232d      	movlt	r3, #45	; 0x2d
 8005284:	232b      	movge	r3, #43	; 0x2b
 8005286:	2909      	cmp	r1, #9
 8005288:	f804 2b02 	strb.w	r2, [r4], #2
 800528c:	7043      	strb	r3, [r0, #1]
 800528e:	dd20      	ble.n	80052d2 <__exponent+0x5a>
 8005290:	f10d 0307 	add.w	r3, sp, #7
 8005294:	461f      	mov	r7, r3
 8005296:	260a      	movs	r6, #10
 8005298:	fb91 f5f6 	sdiv	r5, r1, r6
 800529c:	fb06 1115 	mls	r1, r6, r5, r1
 80052a0:	3130      	adds	r1, #48	; 0x30
 80052a2:	2d09      	cmp	r5, #9
 80052a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80052ac:	4629      	mov	r1, r5
 80052ae:	dc09      	bgt.n	80052c4 <__exponent+0x4c>
 80052b0:	3130      	adds	r1, #48	; 0x30
 80052b2:	3b02      	subs	r3, #2
 80052b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052b8:	42bb      	cmp	r3, r7
 80052ba:	4622      	mov	r2, r4
 80052bc:	d304      	bcc.n	80052c8 <__exponent+0x50>
 80052be:	1a10      	subs	r0, r2, r0
 80052c0:	b003      	add	sp, #12
 80052c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c4:	4613      	mov	r3, r2
 80052c6:	e7e7      	b.n	8005298 <__exponent+0x20>
 80052c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052cc:	f804 2b01 	strb.w	r2, [r4], #1
 80052d0:	e7f2      	b.n	80052b8 <__exponent+0x40>
 80052d2:	2330      	movs	r3, #48	; 0x30
 80052d4:	4419      	add	r1, r3
 80052d6:	7083      	strb	r3, [r0, #2]
 80052d8:	1d02      	adds	r2, r0, #4
 80052da:	70c1      	strb	r1, [r0, #3]
 80052dc:	e7ef      	b.n	80052be <__exponent+0x46>
	...

080052e0 <_printf_float>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	b08d      	sub	sp, #52	; 0x34
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052ec:	4616      	mov	r6, r2
 80052ee:	461f      	mov	r7, r3
 80052f0:	4605      	mov	r5, r0
 80052f2:	f001 faf7 	bl	80068e4 <_localeconv_r>
 80052f6:	6803      	ldr	r3, [r0, #0]
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fa ff90 	bl	8000220 <strlen>
 8005300:	2300      	movs	r3, #0
 8005302:	930a      	str	r3, [sp, #40]	; 0x28
 8005304:	f8d8 3000 	ldr.w	r3, [r8]
 8005308:	9005      	str	r0, [sp, #20]
 800530a:	3307      	adds	r3, #7
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	f103 0208 	add.w	r2, r3, #8
 8005314:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005318:	f8d4 b000 	ldr.w	fp, [r4]
 800531c:	f8c8 2000 	str.w	r2, [r8]
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005328:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800532c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f8cd 8018 	str.w	r8, [sp, #24]
 8005336:	f04f 32ff 	mov.w	r2, #4294967295
 800533a:	4ba7      	ldr	r3, [pc, #668]	; (80055d8 <_printf_float+0x2f8>)
 800533c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005340:	f7fb fc1c 	bl	8000b7c <__aeabi_dcmpun>
 8005344:	bb70      	cbnz	r0, 80053a4 <_printf_float+0xc4>
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	4ba3      	ldr	r3, [pc, #652]	; (80055d8 <_printf_float+0x2f8>)
 800534c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005350:	f7fb fbf6 	bl	8000b40 <__aeabi_dcmple>
 8005354:	bb30      	cbnz	r0, 80053a4 <_printf_float+0xc4>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fb fbe5 	bl	8000b2c <__aeabi_dcmplt>
 8005362:	b110      	cbz	r0, 800536a <_printf_float+0x8a>
 8005364:	232d      	movs	r3, #45	; 0x2d
 8005366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536a:	4a9c      	ldr	r2, [pc, #624]	; (80055dc <_printf_float+0x2fc>)
 800536c:	4b9c      	ldr	r3, [pc, #624]	; (80055e0 <_printf_float+0x300>)
 800536e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005372:	bf8c      	ite	hi
 8005374:	4690      	movhi	r8, r2
 8005376:	4698      	movls	r8, r3
 8005378:	2303      	movs	r3, #3
 800537a:	f02b 0204 	bic.w	r2, fp, #4
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	4633      	mov	r3, r6
 800538a:	aa0b      	add	r2, sp, #44	; 0x2c
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f9e6 	bl	8005760 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 808d 	bne.w	80054b4 <_printf_float+0x1d4>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b00d      	add	sp, #52	; 0x34
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb fbe6 	bl	8000b7c <__aeabi_dcmpun>
 80053b0:	b110      	cbz	r0, 80053b8 <_printf_float+0xd8>
 80053b2:	4a8c      	ldr	r2, [pc, #560]	; (80055e4 <_printf_float+0x304>)
 80053b4:	4b8c      	ldr	r3, [pc, #560]	; (80055e8 <_printf_float+0x308>)
 80053b6:	e7da      	b.n	800536e <_printf_float+0x8e>
 80053b8:	6861      	ldr	r1, [r4, #4]
 80053ba:	1c4b      	adds	r3, r1, #1
 80053bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80053c0:	a80a      	add	r0, sp, #40	; 0x28
 80053c2:	d13e      	bne.n	8005442 <_printf_float+0x162>
 80053c4:	2306      	movs	r3, #6
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	2300      	movs	r3, #0
 80053ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053ce:	ab09      	add	r3, sp, #36	; 0x24
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	ec49 8b10 	vmov	d0, r8, r9
 80053d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	f8cd a004 	str.w	sl, [sp, #4]
 80053e0:	6861      	ldr	r1, [r4, #4]
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7ff fee7 	bl	80051b6 <__cvt>
 80053e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053ec:	2b47      	cmp	r3, #71	; 0x47
 80053ee:	4680      	mov	r8, r0
 80053f0:	d109      	bne.n	8005406 <_printf_float+0x126>
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	1cd8      	adds	r0, r3, #3
 80053f6:	db02      	blt.n	80053fe <_printf_float+0x11e>
 80053f8:	6862      	ldr	r2, [r4, #4]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	dd47      	ble.n	800548e <_printf_float+0x1ae>
 80053fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8005402:	fa5f fa8a 	uxtb.w	sl, sl
 8005406:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800540a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800540c:	d824      	bhi.n	8005458 <_printf_float+0x178>
 800540e:	3901      	subs	r1, #1
 8005410:	4652      	mov	r2, sl
 8005412:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005416:	9109      	str	r1, [sp, #36]	; 0x24
 8005418:	f7ff ff2e 	bl	8005278 <__exponent>
 800541c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800541e:	1813      	adds	r3, r2, r0
 8005420:	2a01      	cmp	r2, #1
 8005422:	4681      	mov	r9, r0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	dc02      	bgt.n	800542e <_printf_float+0x14e>
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	07d1      	lsls	r1, r2, #31
 800542c:	d501      	bpl.n	8005432 <_printf_float+0x152>
 800542e:	3301      	adds	r3, #1
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0a5      	beq.n	8005386 <_printf_float+0xa6>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005440:	e7a1      	b.n	8005386 <_printf_float+0xa6>
 8005442:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005446:	f000 8177 	beq.w	8005738 <_printf_float+0x458>
 800544a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800544e:	d1bb      	bne.n	80053c8 <_printf_float+0xe8>
 8005450:	2900      	cmp	r1, #0
 8005452:	d1b9      	bne.n	80053c8 <_printf_float+0xe8>
 8005454:	2301      	movs	r3, #1
 8005456:	e7b6      	b.n	80053c6 <_printf_float+0xe6>
 8005458:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800545c:	d119      	bne.n	8005492 <_printf_float+0x1b2>
 800545e:	2900      	cmp	r1, #0
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	dd0c      	ble.n	800547e <_printf_float+0x19e>
 8005464:	6121      	str	r1, [r4, #16]
 8005466:	b913      	cbnz	r3, 800546e <_printf_float+0x18e>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	07d2      	lsls	r2, r2, #31
 800546c:	d502      	bpl.n	8005474 <_printf_float+0x194>
 800546e:	3301      	adds	r3, #1
 8005470:	440b      	add	r3, r1
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	65a3      	str	r3, [r4, #88]	; 0x58
 8005478:	f04f 0900 	mov.w	r9, #0
 800547c:	e7d9      	b.n	8005432 <_printf_float+0x152>
 800547e:	b913      	cbnz	r3, 8005486 <_printf_float+0x1a6>
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	07d0      	lsls	r0, r2, #31
 8005484:	d501      	bpl.n	800548a <_printf_float+0x1aa>
 8005486:	3302      	adds	r3, #2
 8005488:	e7f3      	b.n	8005472 <_printf_float+0x192>
 800548a:	2301      	movs	r3, #1
 800548c:	e7f1      	b.n	8005472 <_printf_float+0x192>
 800548e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005492:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005496:	4293      	cmp	r3, r2
 8005498:	db05      	blt.n	80054a6 <_printf_float+0x1c6>
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	07d1      	lsls	r1, r2, #31
 80054a0:	d5e8      	bpl.n	8005474 <_printf_float+0x194>
 80054a2:	3301      	adds	r3, #1
 80054a4:	e7e5      	b.n	8005472 <_printf_float+0x192>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfd4      	ite	le
 80054aa:	f1c3 0302 	rsble	r3, r3, #2
 80054ae:	2301      	movgt	r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	e7de      	b.n	8005472 <_printf_float+0x192>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	055a      	lsls	r2, r3, #21
 80054b8:	d407      	bmi.n	80054ca <_printf_float+0x1ea>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	4642      	mov	r2, r8
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	d12b      	bne.n	8005520 <_printf_float+0x240>
 80054c8:	e767      	b.n	800539a <_printf_float+0xba>
 80054ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054ce:	f240 80dc 	bls.w	800568a <_printf_float+0x3aa>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054da:	f7fb fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d033      	beq.n	800554a <_printf_float+0x26a>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4a41      	ldr	r2, [pc, #260]	; (80055ec <_printf_float+0x30c>)
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b8      	blx	r7
 80054ec:	3001      	adds	r0, #1
 80054ee:	f43f af54 	beq.w	800539a <_printf_float+0xba>
 80054f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f6:	429a      	cmp	r2, r3
 80054f8:	db02      	blt.n	8005500 <_printf_float+0x220>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	07d8      	lsls	r0, r3, #31
 80054fe:	d50f      	bpl.n	8005520 <_printf_float+0x240>
 8005500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	47b8      	blx	r7
 800550a:	3001      	adds	r0, #1
 800550c:	f43f af45 	beq.w	800539a <_printf_float+0xba>
 8005510:	f04f 0800 	mov.w	r8, #0
 8005514:	f104 091a 	add.w	r9, r4, #26
 8005518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	4543      	cmp	r3, r8
 800551e:	dc09      	bgt.n	8005534 <_printf_float+0x254>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	079b      	lsls	r3, r3, #30
 8005524:	f100 8103 	bmi.w	800572e <_printf_float+0x44e>
 8005528:	68e0      	ldr	r0, [r4, #12]
 800552a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552c:	4298      	cmp	r0, r3
 800552e:	bfb8      	it	lt
 8005530:	4618      	movlt	r0, r3
 8005532:	e734      	b.n	800539e <_printf_float+0xbe>
 8005534:	2301      	movs	r3, #1
 8005536:	464a      	mov	r2, r9
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f af2b 	beq.w	800539a <_printf_float+0xba>
 8005544:	f108 0801 	add.w	r8, r8, #1
 8005548:	e7e6      	b.n	8005518 <_printf_float+0x238>
 800554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	dc2b      	bgt.n	80055a8 <_printf_float+0x2c8>
 8005550:	2301      	movs	r3, #1
 8005552:	4a26      	ldr	r2, [pc, #152]	; (80055ec <_printf_float+0x30c>)
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af1d 	beq.w	800539a <_printf_float+0xba>
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	b923      	cbnz	r3, 800556e <_printf_float+0x28e>
 8005564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x28e>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	07d9      	lsls	r1, r3, #31
 800556c:	d5d8      	bpl.n	8005520 <_printf_float+0x240>
 800556e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f af0e 	beq.w	800539a <_printf_float+0xba>
 800557e:	f04f 0900 	mov.w	r9, #0
 8005582:	f104 0a1a 	add.w	sl, r4, #26
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	425b      	negs	r3, r3
 800558a:	454b      	cmp	r3, r9
 800558c:	dc01      	bgt.n	8005592 <_printf_float+0x2b2>
 800558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005590:	e794      	b.n	80054bc <_printf_float+0x1dc>
 8005592:	2301      	movs	r3, #1
 8005594:	4652      	mov	r2, sl
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	f43f aefc 	beq.w	800539a <_printf_float+0xba>
 80055a2:	f109 0901 	add.w	r9, r9, #1
 80055a6:	e7ee      	b.n	8005586 <_printf_float+0x2a6>
 80055a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ac:	429a      	cmp	r2, r3
 80055ae:	bfa8      	it	ge
 80055b0:	461a      	movge	r2, r3
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	4691      	mov	r9, r2
 80055b6:	dd07      	ble.n	80055c8 <_printf_float+0x2e8>
 80055b8:	4613      	mov	r3, r2
 80055ba:	4631      	mov	r1, r6
 80055bc:	4642      	mov	r2, r8
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f aee9 	beq.w	800539a <_printf_float+0xba>
 80055c8:	f104 031a 	add.w	r3, r4, #26
 80055cc:	f04f 0b00 	mov.w	fp, #0
 80055d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055d4:	9306      	str	r3, [sp, #24]
 80055d6:	e015      	b.n	8005604 <_printf_float+0x324>
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	08007910 	.word	0x08007910
 80055e0:	0800790c 	.word	0x0800790c
 80055e4:	08007918 	.word	0x08007918
 80055e8:	08007914 	.word	0x08007914
 80055ec:	0800791c 	.word	0x0800791c
 80055f0:	2301      	movs	r3, #1
 80055f2:	9a06      	ldr	r2, [sp, #24]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f aecd 	beq.w	800539a <_printf_float+0xba>
 8005600:	f10b 0b01 	add.w	fp, fp, #1
 8005604:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005608:	ebaa 0309 	sub.w	r3, sl, r9
 800560c:	455b      	cmp	r3, fp
 800560e:	dcef      	bgt.n	80055f0 <_printf_float+0x310>
 8005610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005614:	429a      	cmp	r2, r3
 8005616:	44d0      	add	r8, sl
 8005618:	db15      	blt.n	8005646 <_printf_float+0x366>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	07da      	lsls	r2, r3, #31
 800561e:	d412      	bmi.n	8005646 <_printf_float+0x366>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005624:	eba3 020a 	sub.w	r2, r3, sl
 8005628:	eba3 0a01 	sub.w	sl, r3, r1
 800562c:	4592      	cmp	sl, r2
 800562e:	bfa8      	it	ge
 8005630:	4692      	movge	sl, r2
 8005632:	f1ba 0f00 	cmp.w	sl, #0
 8005636:	dc0e      	bgt.n	8005656 <_printf_float+0x376>
 8005638:	f04f 0800 	mov.w	r8, #0
 800563c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005640:	f104 091a 	add.w	r9, r4, #26
 8005644:	e019      	b.n	800567a <_printf_float+0x39a>
 8005646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	d1e5      	bne.n	8005620 <_printf_float+0x340>
 8005654:	e6a1      	b.n	800539a <_printf_float+0xba>
 8005656:	4653      	mov	r3, sl
 8005658:	4642      	mov	r2, r8
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	d1e9      	bne.n	8005638 <_printf_float+0x358>
 8005664:	e699      	b.n	800539a <_printf_float+0xba>
 8005666:	2301      	movs	r3, #1
 8005668:	464a      	mov	r2, r9
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f ae92 	beq.w	800539a <_printf_float+0xba>
 8005676:	f108 0801 	add.w	r8, r8, #1
 800567a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	eba3 030a 	sub.w	r3, r3, sl
 8005684:	4543      	cmp	r3, r8
 8005686:	dcee      	bgt.n	8005666 <_printf_float+0x386>
 8005688:	e74a      	b.n	8005520 <_printf_float+0x240>
 800568a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568c:	2a01      	cmp	r2, #1
 800568e:	dc01      	bgt.n	8005694 <_printf_float+0x3b4>
 8005690:	07db      	lsls	r3, r3, #31
 8005692:	d53a      	bpl.n	800570a <_printf_float+0x42a>
 8005694:	2301      	movs	r3, #1
 8005696:	4642      	mov	r2, r8
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f ae7b 	beq.w	800539a <_printf_float+0xba>
 80056a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f108 0801 	add.w	r8, r8, #1
 80056b4:	f43f ae71 	beq.w	800539a <_printf_float+0xba>
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	2200      	movs	r2, #0
 80056bc:	f103 3aff 	add.w	sl, r3, #4294967295
 80056c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c4:	2300      	movs	r3, #0
 80056c6:	f7fb fa27 	bl	8000b18 <__aeabi_dcmpeq>
 80056ca:	b9c8      	cbnz	r0, 8005700 <_printf_float+0x420>
 80056cc:	4653      	mov	r3, sl
 80056ce:	4642      	mov	r2, r8
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	d10e      	bne.n	80056f8 <_printf_float+0x418>
 80056da:	e65e      	b.n	800539a <_printf_float+0xba>
 80056dc:	2301      	movs	r3, #1
 80056de:	4652      	mov	r2, sl
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f ae57 	beq.w	800539a <_printf_float+0xba>
 80056ec:	f108 0801 	add.w	r8, r8, #1
 80056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4543      	cmp	r3, r8
 80056f6:	dcf1      	bgt.n	80056dc <_printf_float+0x3fc>
 80056f8:	464b      	mov	r3, r9
 80056fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056fe:	e6de      	b.n	80054be <_printf_float+0x1de>
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	f104 0a1a 	add.w	sl, r4, #26
 8005708:	e7f2      	b.n	80056f0 <_printf_float+0x410>
 800570a:	2301      	movs	r3, #1
 800570c:	e7df      	b.n	80056ce <_printf_float+0x3ee>
 800570e:	2301      	movs	r3, #1
 8005710:	464a      	mov	r2, r9
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae3e 	beq.w	800539a <_printf_float+0xba>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	4543      	cmp	r3, r8
 800572a:	dcf0      	bgt.n	800570e <_printf_float+0x42e>
 800572c:	e6fc      	b.n	8005528 <_printf_float+0x248>
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	f104 0919 	add.w	r9, r4, #25
 8005736:	e7f4      	b.n	8005722 <_printf_float+0x442>
 8005738:	2900      	cmp	r1, #0
 800573a:	f43f ae8b 	beq.w	8005454 <_printf_float+0x174>
 800573e:	2300      	movs	r3, #0
 8005740:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005744:	ab09      	add	r3, sp, #36	; 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	ec49 8b10 	vmov	d0, r8, r9
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	f8cd a004 	str.w	sl, [sp, #4]
 8005752:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fd2d 	bl	80051b6 <__cvt>
 800575c:	4680      	mov	r8, r0
 800575e:	e648      	b.n	80053f2 <_printf_float+0x112>

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4691      	mov	r9, r2
 8005766:	461f      	mov	r7, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005770:	4293      	cmp	r3, r2
 8005772:	bfb8      	it	lt
 8005774:	4613      	movlt	r3, r2
 8005776:	f8c9 3000 	str.w	r3, [r9]
 800577a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800577e:	4606      	mov	r6, r0
 8005780:	460c      	mov	r4, r1
 8005782:	b112      	cbz	r2, 800578a <_printf_common+0x2a>
 8005784:	3301      	adds	r3, #1
 8005786:	f8c9 3000 	str.w	r3, [r9]
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	0699      	lsls	r1, r3, #26
 800578e:	bf42      	ittt	mi
 8005790:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005794:	3302      	addmi	r3, #2
 8005796:	f8c9 3000 	strmi.w	r3, [r9]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d107      	bne.n	80057b2 <_printf_common+0x52>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	f8d9 2000 	ldr.w	r2, [r9]
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	42ab      	cmp	r3, r5
 80057b0:	dc28      	bgt.n	8005804 <_printf_common+0xa4>
 80057b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	3300      	adds	r3, #0
 80057ba:	bf18      	it	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	0692      	lsls	r2, r2, #26
 80057c0:	d42d      	bmi.n	800581e <_printf_common+0xbe>
 80057c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c6:	4639      	mov	r1, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d020      	beq.n	8005812 <_printf_common+0xb2>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	68e5      	ldr	r5, [r4, #12]
 80057d4:	f8d9 2000 	ldr.w	r2, [r9]
 80057d8:	f003 0306 	and.w	r3, r3, #6
 80057dc:	2b04      	cmp	r3, #4
 80057de:	bf08      	it	eq
 80057e0:	1aad      	subeq	r5, r5, r2
 80057e2:	68a3      	ldr	r3, [r4, #8]
 80057e4:	6922      	ldr	r2, [r4, #16]
 80057e6:	bf0c      	ite	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	2500      	movne	r5, #0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfc4      	itt	gt
 80057f2:	1a9b      	subgt	r3, r3, r2
 80057f4:	18ed      	addgt	r5, r5, r3
 80057f6:	f04f 0900 	mov.w	r9, #0
 80057fa:	341a      	adds	r4, #26
 80057fc:	454d      	cmp	r5, r9
 80057fe:	d11a      	bne.n	8005836 <_printf_common+0xd6>
 8005800:	2000      	movs	r0, #0
 8005802:	e008      	b.n	8005816 <_printf_common+0xb6>
 8005804:	2301      	movs	r3, #1
 8005806:	4652      	mov	r2, sl
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d103      	bne.n	800581a <_printf_common+0xba>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	3501      	adds	r5, #1
 800581c:	e7c3      	b.n	80057a6 <_printf_common+0x46>
 800581e:	18e1      	adds	r1, r4, r3
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	2030      	movs	r0, #48	; 0x30
 8005824:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005828:	4422      	add	r2, r4
 800582a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800582e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005832:	3302      	adds	r3, #2
 8005834:	e7c5      	b.n	80057c2 <_printf_common+0x62>
 8005836:	2301      	movs	r3, #1
 8005838:	4622      	mov	r2, r4
 800583a:	4639      	mov	r1, r7
 800583c:	4630      	mov	r0, r6
 800583e:	47c0      	blx	r8
 8005840:	3001      	adds	r0, #1
 8005842:	d0e6      	beq.n	8005812 <_printf_common+0xb2>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7d8      	b.n	80057fc <_printf_common+0x9c>
	...

0800584c <_printf_i>:
 800584c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005850:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005854:	460c      	mov	r4, r1
 8005856:	7e09      	ldrb	r1, [r1, #24]
 8005858:	b085      	sub	sp, #20
 800585a:	296e      	cmp	r1, #110	; 0x6e
 800585c:	4617      	mov	r7, r2
 800585e:	4606      	mov	r6, r0
 8005860:	4698      	mov	r8, r3
 8005862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005864:	f000 80b3 	beq.w	80059ce <_printf_i+0x182>
 8005868:	d822      	bhi.n	80058b0 <_printf_i+0x64>
 800586a:	2963      	cmp	r1, #99	; 0x63
 800586c:	d036      	beq.n	80058dc <_printf_i+0x90>
 800586e:	d80a      	bhi.n	8005886 <_printf_i+0x3a>
 8005870:	2900      	cmp	r1, #0
 8005872:	f000 80b9 	beq.w	80059e8 <_printf_i+0x19c>
 8005876:	2958      	cmp	r1, #88	; 0x58
 8005878:	f000 8083 	beq.w	8005982 <_printf_i+0x136>
 800587c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005880:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005884:	e032      	b.n	80058ec <_printf_i+0xa0>
 8005886:	2964      	cmp	r1, #100	; 0x64
 8005888:	d001      	beq.n	800588e <_printf_i+0x42>
 800588a:	2969      	cmp	r1, #105	; 0x69
 800588c:	d1f6      	bne.n	800587c <_printf_i+0x30>
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	0605      	lsls	r5, r0, #24
 8005894:	f103 0104 	add.w	r1, r3, #4
 8005898:	d52a      	bpl.n	80058f0 <_printf_i+0xa4>
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da03      	bge.n	80058aa <_printf_i+0x5e>
 80058a2:	222d      	movs	r2, #45	; 0x2d
 80058a4:	425b      	negs	r3, r3
 80058a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058aa:	486f      	ldr	r0, [pc, #444]	; (8005a68 <_printf_i+0x21c>)
 80058ac:	220a      	movs	r2, #10
 80058ae:	e039      	b.n	8005924 <_printf_i+0xd8>
 80058b0:	2973      	cmp	r1, #115	; 0x73
 80058b2:	f000 809d 	beq.w	80059f0 <_printf_i+0x1a4>
 80058b6:	d808      	bhi.n	80058ca <_printf_i+0x7e>
 80058b8:	296f      	cmp	r1, #111	; 0x6f
 80058ba:	d020      	beq.n	80058fe <_printf_i+0xb2>
 80058bc:	2970      	cmp	r1, #112	; 0x70
 80058be:	d1dd      	bne.n	800587c <_printf_i+0x30>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	f043 0320 	orr.w	r3, r3, #32
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	e003      	b.n	80058d2 <_printf_i+0x86>
 80058ca:	2975      	cmp	r1, #117	; 0x75
 80058cc:	d017      	beq.n	80058fe <_printf_i+0xb2>
 80058ce:	2978      	cmp	r1, #120	; 0x78
 80058d0:	d1d4      	bne.n	800587c <_printf_i+0x30>
 80058d2:	2378      	movs	r3, #120	; 0x78
 80058d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058d8:	4864      	ldr	r0, [pc, #400]	; (8005a6c <_printf_i+0x220>)
 80058da:	e055      	b.n	8005988 <_printf_i+0x13c>
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	1d19      	adds	r1, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6011      	str	r1, [r2, #0]
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e08c      	b.n	8005a0a <_printf_i+0x1be>
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6011      	str	r1, [r2, #0]
 80058f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f8:	bf18      	it	ne
 80058fa:	b21b      	sxthne	r3, r3
 80058fc:	e7cf      	b.n	800589e <_printf_i+0x52>
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6010      	str	r0, [r2, #0]
 8005906:	0628      	lsls	r0, r5, #24
 8005908:	d501      	bpl.n	800590e <_printf_i+0xc2>
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e002      	b.n	8005914 <_printf_i+0xc8>
 800590e:	0668      	lsls	r0, r5, #25
 8005910:	d5fb      	bpl.n	800590a <_printf_i+0xbe>
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	4854      	ldr	r0, [pc, #336]	; (8005a68 <_printf_i+0x21c>)
 8005916:	296f      	cmp	r1, #111	; 0x6f
 8005918:	bf14      	ite	ne
 800591a:	220a      	movne	r2, #10
 800591c:	2208      	moveq	r2, #8
 800591e:	2100      	movs	r1, #0
 8005920:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005924:	6865      	ldr	r5, [r4, #4]
 8005926:	60a5      	str	r5, [r4, #8]
 8005928:	2d00      	cmp	r5, #0
 800592a:	f2c0 8095 	blt.w	8005a58 <_printf_i+0x20c>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	f021 0104 	bic.w	r1, r1, #4
 8005934:	6021      	str	r1, [r4, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d13d      	bne.n	80059b6 <_printf_i+0x16a>
 800593a:	2d00      	cmp	r5, #0
 800593c:	f040 808e 	bne.w	8005a5c <_printf_i+0x210>
 8005940:	4665      	mov	r5, ip
 8005942:	2a08      	cmp	r2, #8
 8005944:	d10b      	bne.n	800595e <_printf_i+0x112>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	07db      	lsls	r3, r3, #31
 800594a:	d508      	bpl.n	800595e <_printf_i+0x112>
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	bfde      	ittt	le
 8005954:	2330      	movle	r3, #48	; 0x30
 8005956:	f805 3c01 	strble.w	r3, [r5, #-1]
 800595a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800595e:	ebac 0305 	sub.w	r3, ip, r5
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f8cd 8000 	str.w	r8, [sp]
 8005968:	463b      	mov	r3, r7
 800596a:	aa03      	add	r2, sp, #12
 800596c:	4621      	mov	r1, r4
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff fef6 	bl	8005760 <_printf_common>
 8005974:	3001      	adds	r0, #1
 8005976:	d14d      	bne.n	8005a14 <_printf_i+0x1c8>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	b005      	add	sp, #20
 800597e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005982:	4839      	ldr	r0, [pc, #228]	; (8005a68 <_printf_i+0x21c>)
 8005984:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	1d1d      	adds	r5, r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6015      	str	r5, [r2, #0]
 8005992:	060a      	lsls	r2, r1, #24
 8005994:	d50b      	bpl.n	80059ae <_printf_i+0x162>
 8005996:	07ca      	lsls	r2, r1, #31
 8005998:	bf44      	itt	mi
 800599a:	f041 0120 	orrmi.w	r1, r1, #32
 800599e:	6021      	strmi	r1, [r4, #0]
 80059a0:	b91b      	cbnz	r3, 80059aa <_printf_i+0x15e>
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	f022 0220 	bic.w	r2, r2, #32
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	2210      	movs	r2, #16
 80059ac:	e7b7      	b.n	800591e <_printf_i+0xd2>
 80059ae:	064d      	lsls	r5, r1, #25
 80059b0:	bf48      	it	mi
 80059b2:	b29b      	uxthmi	r3, r3
 80059b4:	e7ef      	b.n	8005996 <_printf_i+0x14a>
 80059b6:	4665      	mov	r5, ip
 80059b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059bc:	fb02 3311 	mls	r3, r2, r1, r3
 80059c0:	5cc3      	ldrb	r3, [r0, r3]
 80059c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059c6:	460b      	mov	r3, r1
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d1f5      	bne.n	80059b8 <_printf_i+0x16c>
 80059cc:	e7b9      	b.n	8005942 <_printf_i+0xf6>
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	6825      	ldr	r5, [r4, #0]
 80059d2:	6961      	ldr	r1, [r4, #20]
 80059d4:	1d18      	adds	r0, r3, #4
 80059d6:	6010      	str	r0, [r2, #0]
 80059d8:	0628      	lsls	r0, r5, #24
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	d501      	bpl.n	80059e2 <_printf_i+0x196>
 80059de:	6019      	str	r1, [r3, #0]
 80059e0:	e002      	b.n	80059e8 <_printf_i+0x19c>
 80059e2:	066a      	lsls	r2, r5, #25
 80059e4:	d5fb      	bpl.n	80059de <_printf_i+0x192>
 80059e6:	8019      	strh	r1, [r3, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	4665      	mov	r5, ip
 80059ee:	e7b9      	b.n	8005964 <_printf_i+0x118>
 80059f0:	6813      	ldr	r3, [r2, #0]
 80059f2:	1d19      	adds	r1, r3, #4
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	681d      	ldr	r5, [r3, #0]
 80059f8:	6862      	ldr	r2, [r4, #4]
 80059fa:	2100      	movs	r1, #0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7fa fc17 	bl	8000230 <memchr>
 8005a02:	b108      	cbz	r0, 8005a08 <_printf_i+0x1bc>
 8005a04:	1b40      	subs	r0, r0, r5
 8005a06:	6060      	str	r0, [r4, #4]
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a12:	e7a7      	b.n	8005964 <_printf_i+0x118>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	462a      	mov	r2, r5
 8005a18:	4639      	mov	r1, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0aa      	beq.n	8005978 <_printf_i+0x12c>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	079b      	lsls	r3, r3, #30
 8005a26:	d413      	bmi.n	8005a50 <_printf_i+0x204>
 8005a28:	68e0      	ldr	r0, [r4, #12]
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	bfb8      	it	lt
 8005a30:	4618      	movlt	r0, r3
 8005a32:	e7a3      	b.n	800597c <_printf_i+0x130>
 8005a34:	2301      	movs	r3, #1
 8005a36:	464a      	mov	r2, r9
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	47c0      	blx	r8
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d09a      	beq.n	8005978 <_printf_i+0x12c>
 8005a42:	3501      	adds	r5, #1
 8005a44:	68e3      	ldr	r3, [r4, #12]
 8005a46:	9a03      	ldr	r2, [sp, #12]
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	42ab      	cmp	r3, r5
 8005a4c:	dcf2      	bgt.n	8005a34 <_printf_i+0x1e8>
 8005a4e:	e7eb      	b.n	8005a28 <_printf_i+0x1dc>
 8005a50:	2500      	movs	r5, #0
 8005a52:	f104 0919 	add.w	r9, r4, #25
 8005a56:	e7f5      	b.n	8005a44 <_printf_i+0x1f8>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ac      	bne.n	80059b6 <_printf_i+0x16a>
 8005a5c:	7803      	ldrb	r3, [r0, #0]
 8005a5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a66:	e76c      	b.n	8005942 <_printf_i+0xf6>
 8005a68:	0800791e 	.word	0x0800791e
 8005a6c:	0800792f 	.word	0x0800792f

08005a70 <iprintf>:
 8005a70:	b40f      	push	{r0, r1, r2, r3}
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <iprintf+0x2c>)
 8005a74:	b513      	push	{r0, r1, r4, lr}
 8005a76:	681c      	ldr	r4, [r3, #0]
 8005a78:	b124      	cbz	r4, 8005a84 <iprintf+0x14>
 8005a7a:	69a3      	ldr	r3, [r4, #24]
 8005a7c:	b913      	cbnz	r3, 8005a84 <iprintf+0x14>
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fea6 	bl	80067d0 <__sinit>
 8005a84:	ab05      	add	r3, sp, #20
 8005a86:	9a04      	ldr	r2, [sp, #16]
 8005a88:	68a1      	ldr	r1, [r4, #8]
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f001 fafb 	bl	8007088 <_vfiprintf_r>
 8005a92:	b002      	add	sp, #8
 8005a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a98:	b004      	add	sp, #16
 8005a9a:	4770      	bx	lr
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <putchar>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <putchar+0x24>)
 8005aa4:	681c      	ldr	r4, [r3, #0]
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	b124      	cbz	r4, 8005ab4 <putchar+0x14>
 8005aaa:	69a3      	ldr	r3, [r4, #24]
 8005aac:	b913      	cbnz	r3, 8005ab4 <putchar+0x14>
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fe8e 	bl	80067d0 <__sinit>
 8005ab4:	68a2      	ldr	r2, [r4, #8]
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	4620      	mov	r0, r4
 8005aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005abe:	f001 bbf9 	b.w	80072b4 <_putc_r>
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c

08005ac8 <quorem>:
 8005ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	6903      	ldr	r3, [r0, #16]
 8005ace:	690c      	ldr	r4, [r1, #16]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	f2c0 8082 	blt.w	8005bdc <quorem+0x114>
 8005ad8:	3c01      	subs	r4, #1
 8005ada:	f101 0714 	add.w	r7, r1, #20
 8005ade:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ae2:	f100 0614 	add.w	r6, r0, #20
 8005ae6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005aea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005aee:	eb06 030c 	add.w	r3, r6, ip
 8005af2:	3501      	adds	r5, #1
 8005af4:	eb07 090c 	add.w	r9, r7, ip
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	fbb0 f5f5 	udiv	r5, r0, r5
 8005afe:	b395      	cbz	r5, 8005b66 <quorem+0x9e>
 8005b00:	f04f 0a00 	mov.w	sl, #0
 8005b04:	4638      	mov	r0, r7
 8005b06:	46b6      	mov	lr, r6
 8005b08:	46d3      	mov	fp, sl
 8005b0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b0e:	b293      	uxth	r3, r2
 8005b10:	fb05 a303 	mla	r3, r5, r3, sl
 8005b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ebab 0303 	sub.w	r3, fp, r3
 8005b1e:	0c12      	lsrs	r2, r2, #16
 8005b20:	f8de b000 	ldr.w	fp, [lr]
 8005b24:	fb05 a202 	mla	r2, r5, r2, sl
 8005b28:	fa13 f38b 	uxtah	r3, r3, fp
 8005b2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b30:	fa1f fb82 	uxth.w	fp, r2
 8005b34:	f8de 2000 	ldr.w	r2, [lr]
 8005b38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b46:	4581      	cmp	r9, r0
 8005b48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b4c:	f84e 3b04 	str.w	r3, [lr], #4
 8005b50:	d2db      	bcs.n	8005b0a <quorem+0x42>
 8005b52:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b56:	b933      	cbnz	r3, 8005b66 <quorem+0x9e>
 8005b58:	9b01      	ldr	r3, [sp, #4]
 8005b5a:	3b04      	subs	r3, #4
 8005b5c:	429e      	cmp	r6, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	d330      	bcc.n	8005bc4 <quorem+0xfc>
 8005b62:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b66:	4640      	mov	r0, r8
 8005b68:	f001 f8e8 	bl	8006d3c <__mcmp>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	db25      	blt.n	8005bbc <quorem+0xf4>
 8005b70:	3501      	adds	r5, #1
 8005b72:	4630      	mov	r0, r6
 8005b74:	f04f 0c00 	mov.w	ip, #0
 8005b78:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b7c:	f8d0 e000 	ldr.w	lr, [r0]
 8005b80:	b293      	uxth	r3, r2
 8005b82:	ebac 0303 	sub.w	r3, ip, r3
 8005b86:	0c12      	lsrs	r2, r2, #16
 8005b88:	fa13 f38e 	uxtah	r3, r3, lr
 8005b8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b9a:	45b9      	cmp	r9, r7
 8005b9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ba0:	f840 3b04 	str.w	r3, [r0], #4
 8005ba4:	d2e8      	bcs.n	8005b78 <quorem+0xb0>
 8005ba6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005baa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005bae:	b92a      	cbnz	r2, 8005bbc <quorem+0xf4>
 8005bb0:	3b04      	subs	r3, #4
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	d30b      	bcc.n	8005bd0 <quorem+0x108>
 8005bb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	b003      	add	sp, #12
 8005bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	3b04      	subs	r3, #4
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	d1ca      	bne.n	8005b62 <quorem+0x9a>
 8005bcc:	3c01      	subs	r4, #1
 8005bce:	e7c5      	b.n	8005b5c <quorem+0x94>
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	d1ef      	bne.n	8005bb8 <quorem+0xf0>
 8005bd8:	3c01      	subs	r4, #1
 8005bda:	e7ea      	b.n	8005bb2 <quorem+0xea>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e7ee      	b.n	8005bbe <quorem+0xf6>

08005be0 <_dtoa_r>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	ec57 6b10 	vmov	r6, r7, d0
 8005be8:	b097      	sub	sp, #92	; 0x5c
 8005bea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bec:	9106      	str	r1, [sp, #24]
 8005bee:	4604      	mov	r4, r0
 8005bf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bf2:	9312      	str	r3, [sp, #72]	; 0x48
 8005bf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bf8:	e9cd 6700 	strd	r6, r7, [sp]
 8005bfc:	b93d      	cbnz	r5, 8005c0e <_dtoa_r+0x2e>
 8005bfe:	2010      	movs	r0, #16
 8005c00:	f000 fe7e 	bl	8006900 <malloc>
 8005c04:	6260      	str	r0, [r4, #36]	; 0x24
 8005c06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c0a:	6005      	str	r5, [r0, #0]
 8005c0c:	60c5      	str	r5, [r0, #12]
 8005c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	b151      	cbz	r1, 8005c2a <_dtoa_r+0x4a>
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	604a      	str	r2, [r1, #4]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4093      	lsls	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 feaa 	bl	8006978 <_Bfree>
 8005c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	1e3b      	subs	r3, r7, #0
 8005c2c:	bfbb      	ittet	lt
 8005c2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c32:	9301      	strlt	r3, [sp, #4]
 8005c34:	2300      	movge	r3, #0
 8005c36:	2201      	movlt	r2, #1
 8005c38:	bfac      	ite	ge
 8005c3a:	f8c8 3000 	strge.w	r3, [r8]
 8005c3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005c42:	4baf      	ldr	r3, [pc, #700]	; (8005f00 <_dtoa_r+0x320>)
 8005c44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c48:	ea33 0308 	bics.w	r3, r3, r8
 8005c4c:	d114      	bne.n	8005c78 <_dtoa_r+0x98>
 8005c4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	9b00      	ldr	r3, [sp, #0]
 8005c58:	b923      	cbnz	r3, 8005c64 <_dtoa_r+0x84>
 8005c5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f000 8542 	beq.w	80066e8 <_dtoa_r+0xb08>
 8005c64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005f14 <_dtoa_r+0x334>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8544 	beq.w	80066f8 <_dtoa_r+0xb18>
 8005c70:	f10b 0303 	add.w	r3, fp, #3
 8005c74:	f000 bd3e 	b.w	80066f4 <_dtoa_r+0xb14>
 8005c78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	f7fa ff48 	bl	8000b18 <__aeabi_dcmpeq>
 8005c88:	4681      	mov	r9, r0
 8005c8a:	b168      	cbz	r0, 8005ca8 <_dtoa_r+0xc8>
 8005c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c8e:	2301      	movs	r3, #1
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8524 	beq.w	80066e2 <_dtoa_r+0xb02>
 8005c9a:	4b9a      	ldr	r3, [pc, #616]	; (8005f04 <_dtoa_r+0x324>)
 8005c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	f000 bd28 	b.w	80066f8 <_dtoa_r+0xb18>
 8005ca8:	aa14      	add	r2, sp, #80	; 0x50
 8005caa:	a915      	add	r1, sp, #84	; 0x54
 8005cac:	ec47 6b10 	vmov	d0, r6, r7
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f001 f8ba 	bl	8006e2a <__d2b>
 8005cb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cba:	9004      	str	r0, [sp, #16]
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	d07c      	beq.n	8005dba <_dtoa_r+0x1da>
 8005cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005cc8:	46b2      	mov	sl, r6
 8005cca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b8b      	ldr	r3, [pc, #556]	; (8005f08 <_dtoa_r+0x328>)
 8005cda:	4650      	mov	r0, sl
 8005cdc:	4659      	mov	r1, fp
 8005cde:	f7fa fafb 	bl	80002d8 <__aeabi_dsub>
 8005ce2:	a381      	add	r3, pc, #516	; (adr r3, 8005ee8 <_dtoa_r+0x308>)
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f7fa fcae 	bl	8000648 <__aeabi_dmul>
 8005cec:	a380      	add	r3, pc, #512	; (adr r3, 8005ef0 <_dtoa_r+0x310>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa faf3 	bl	80002dc <__adddf3>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	f7fa fc3a 	bl	8000574 <__aeabi_i2d>
 8005d00:	a37d      	add	r3, pc, #500	; (adr r3, 8005ef8 <_dtoa_r+0x318>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fc9f 	bl	8000648 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4639      	mov	r1, r7
 8005d12:	f7fa fae3 	bl	80002dc <__adddf3>
 8005d16:	4606      	mov	r6, r0
 8005d18:	460f      	mov	r7, r1
 8005d1a:	f7fa ff45 	bl	8000ba8 <__aeabi_d2iz>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4682      	mov	sl, r0
 8005d22:	2300      	movs	r3, #0
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa ff00 	bl	8000b2c <__aeabi_dcmplt>
 8005d2c:	b148      	cbz	r0, 8005d42 <_dtoa_r+0x162>
 8005d2e:	4650      	mov	r0, sl
 8005d30:	f7fa fc20 	bl	8000574 <__aeabi_i2d>
 8005d34:	4632      	mov	r2, r6
 8005d36:	463b      	mov	r3, r7
 8005d38:	f7fa feee 	bl	8000b18 <__aeabi_dcmpeq>
 8005d3c:	b908      	cbnz	r0, 8005d42 <_dtoa_r+0x162>
 8005d3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d42:	f1ba 0f16 	cmp.w	sl, #22
 8005d46:	d859      	bhi.n	8005dfc <_dtoa_r+0x21c>
 8005d48:	4970      	ldr	r1, [pc, #448]	; (8005f0c <_dtoa_r+0x32c>)
 8005d4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d56:	f7fa ff07 	bl	8000b68 <__aeabi_dcmpgt>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d050      	beq.n	8005e00 <_dtoa_r+0x220>
 8005d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d62:	2300      	movs	r3, #0
 8005d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d68:	1b5d      	subs	r5, r3, r5
 8005d6a:	f1b5 0801 	subs.w	r8, r5, #1
 8005d6e:	bf49      	itett	mi
 8005d70:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d74:	2300      	movpl	r3, #0
 8005d76:	9305      	strmi	r3, [sp, #20]
 8005d78:	f04f 0800 	movmi.w	r8, #0
 8005d7c:	bf58      	it	pl
 8005d7e:	9305      	strpl	r3, [sp, #20]
 8005d80:	f1ba 0f00 	cmp.w	sl, #0
 8005d84:	db3e      	blt.n	8005e04 <_dtoa_r+0x224>
 8005d86:	2300      	movs	r3, #0
 8005d88:	44d0      	add	r8, sl
 8005d8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d8e:	9307      	str	r3, [sp, #28]
 8005d90:	9b06      	ldr	r3, [sp, #24]
 8005d92:	2b09      	cmp	r3, #9
 8005d94:	f200 8090 	bhi.w	8005eb8 <_dtoa_r+0x2d8>
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	bfc4      	itt	gt
 8005d9c:	3b04      	subgt	r3, #4
 8005d9e:	9306      	strgt	r3, [sp, #24]
 8005da0:	9b06      	ldr	r3, [sp, #24]
 8005da2:	f1a3 0302 	sub.w	r3, r3, #2
 8005da6:	bfcc      	ite	gt
 8005da8:	2500      	movgt	r5, #0
 8005daa:	2501      	movle	r5, #1
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	f200 808f 	bhi.w	8005ed0 <_dtoa_r+0x2f0>
 8005db2:	e8df f003 	tbb	[pc, r3]
 8005db6:	7f7d      	.short	0x7f7d
 8005db8:	7131      	.short	0x7131
 8005dba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005dbe:	441d      	add	r5, r3
 8005dc0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005dc4:	2820      	cmp	r0, #32
 8005dc6:	dd13      	ble.n	8005df0 <_dtoa_r+0x210>
 8005dc8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	fa08 f800 	lsl.w	r8, r8, r0
 8005dd2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005dd6:	fa23 f000 	lsr.w	r0, r3, r0
 8005dda:	ea48 0000 	orr.w	r0, r8, r0
 8005dde:	f7fa fbb9 	bl	8000554 <__aeabi_ui2d>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4682      	mov	sl, r0
 8005de6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005dea:	3d01      	subs	r5, #1
 8005dec:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dee:	e772      	b.n	8005cd6 <_dtoa_r+0xf6>
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	f1c0 0020 	rsb	r0, r0, #32
 8005df6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dfa:	e7f0      	b.n	8005dde <_dtoa_r+0x1fe>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e7b1      	b.n	8005d64 <_dtoa_r+0x184>
 8005e00:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e02:	e7b0      	b.n	8005d66 <_dtoa_r+0x186>
 8005e04:	9b05      	ldr	r3, [sp, #20]
 8005e06:	eba3 030a 	sub.w	r3, r3, sl
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	f1ca 0300 	rsb	r3, sl, #0
 8005e10:	9307      	str	r3, [sp, #28]
 8005e12:	2300      	movs	r3, #0
 8005e14:	930e      	str	r3, [sp, #56]	; 0x38
 8005e16:	e7bb      	b.n	8005d90 <_dtoa_r+0x1b0>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dd59      	ble.n	8005ed6 <_dtoa_r+0x2f6>
 8005e22:	9302      	str	r3, [sp, #8]
 8005e24:	4699      	mov	r9, r3
 8005e26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e28:	2200      	movs	r2, #0
 8005e2a:	6072      	str	r2, [r6, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f102 0014 	add.w	r0, r2, #20
 8005e32:	4298      	cmp	r0, r3
 8005e34:	6871      	ldr	r1, [r6, #4]
 8005e36:	d953      	bls.n	8005ee0 <_dtoa_r+0x300>
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fd69 	bl	8006910 <_Balloc>
 8005e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e40:	6030      	str	r0, [r6, #0]
 8005e42:	f1b9 0f0e 	cmp.w	r9, #14
 8005e46:	f8d3 b000 	ldr.w	fp, [r3]
 8005e4a:	f200 80e6 	bhi.w	800601a <_dtoa_r+0x43a>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	f000 80e3 	beq.w	800601a <_dtoa_r+0x43a>
 8005e54:	ed9d 7b00 	vldr	d7, [sp]
 8005e58:	f1ba 0f00 	cmp.w	sl, #0
 8005e5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e60:	dd74      	ble.n	8005f4c <_dtoa_r+0x36c>
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <_dtoa_r+0x32c>)
 8005e64:	f00a 030f 	and.w	r3, sl, #15
 8005e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e6c:	ed93 7b00 	vldr	d7, [r3]
 8005e70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e74:	06f0      	lsls	r0, r6, #27
 8005e76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005e7a:	d565      	bpl.n	8005f48 <_dtoa_r+0x368>
 8005e7c:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <_dtoa_r+0x330>)
 8005e7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e86:	f7fa fd09 	bl	800089c <__aeabi_ddiv>
 8005e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e8e:	f006 060f 	and.w	r6, r6, #15
 8005e92:	2503      	movs	r5, #3
 8005e94:	4f1e      	ldr	r7, [pc, #120]	; (8005f10 <_dtoa_r+0x330>)
 8005e96:	e04c      	b.n	8005f32 <_dtoa_r+0x352>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9e:	4453      	add	r3, sl
 8005ea0:	f103 0901 	add.w	r9, r3, #1
 8005ea4:	9302      	str	r3, [sp, #8]
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bfb8      	it	lt
 8005eac:	2301      	movlt	r3, #1
 8005eae:	e7ba      	b.n	8005e26 <_dtoa_r+0x246>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e7b2      	b.n	8005e1a <_dtoa_r+0x23a>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e7f0      	b.n	8005e9a <_dtoa_r+0x2ba>
 8005eb8:	2501      	movs	r5, #1
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9306      	str	r3, [sp, #24]
 8005ebe:	950a      	str	r5, [sp, #40]	; 0x28
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	9302      	str	r3, [sp, #8]
 8005ec6:	4699      	mov	r9, r3
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2312      	movs	r3, #18
 8005ecc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ece:	e7aa      	b.n	8005e26 <_dtoa_r+0x246>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed4:	e7f4      	b.n	8005ec0 <_dtoa_r+0x2e0>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	4699      	mov	r9, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	e7f5      	b.n	8005ecc <_dtoa_r+0x2ec>
 8005ee0:	3101      	adds	r1, #1
 8005ee2:	6071      	str	r1, [r6, #4]
 8005ee4:	0052      	lsls	r2, r2, #1
 8005ee6:	e7a2      	b.n	8005e2e <_dtoa_r+0x24e>
 8005ee8:	636f4361 	.word	0x636f4361
 8005eec:	3fd287a7 	.word	0x3fd287a7
 8005ef0:	8b60c8b3 	.word	0x8b60c8b3
 8005ef4:	3fc68a28 	.word	0x3fc68a28
 8005ef8:	509f79fb 	.word	0x509f79fb
 8005efc:	3fd34413 	.word	0x3fd34413
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	0800791d 	.word	0x0800791d
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	080079d8 	.word	0x080079d8
 8005f10:	080079b0 	.word	0x080079b0
 8005f14:	08007949 	.word	0x08007949
 8005f18:	07f1      	lsls	r1, r6, #31
 8005f1a:	d508      	bpl.n	8005f2e <_dtoa_r+0x34e>
 8005f1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f24:	f7fa fb90 	bl	8000648 <__aeabi_dmul>
 8005f28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	1076      	asrs	r6, r6, #1
 8005f30:	3708      	adds	r7, #8
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	d1f0      	bne.n	8005f18 <_dtoa_r+0x338>
 8005f36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f3e:	f7fa fcad 	bl	800089c <__aeabi_ddiv>
 8005f42:	e9cd 0100 	strd	r0, r1, [sp]
 8005f46:	e01a      	b.n	8005f7e <_dtoa_r+0x39e>
 8005f48:	2502      	movs	r5, #2
 8005f4a:	e7a3      	b.n	8005e94 <_dtoa_r+0x2b4>
 8005f4c:	f000 80a0 	beq.w	8006090 <_dtoa_r+0x4b0>
 8005f50:	f1ca 0600 	rsb	r6, sl, #0
 8005f54:	4b9f      	ldr	r3, [pc, #636]	; (80061d4 <_dtoa_r+0x5f4>)
 8005f56:	4fa0      	ldr	r7, [pc, #640]	; (80061d8 <_dtoa_r+0x5f8>)
 8005f58:	f006 020f 	and.w	r2, r6, #15
 8005f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f68:	f7fa fb6e 	bl	8000648 <__aeabi_dmul>
 8005f6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005f70:	1136      	asrs	r6, r6, #4
 8005f72:	2300      	movs	r3, #0
 8005f74:	2502      	movs	r5, #2
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	d17f      	bne.n	800607a <_dtoa_r+0x49a>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e1      	bne.n	8005f42 <_dtoa_r+0x362>
 8005f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8087 	beq.w	8006094 <_dtoa_r+0x4b4>
 8005f86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4b93      	ldr	r3, [pc, #588]	; (80061dc <_dtoa_r+0x5fc>)
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa fdcb 	bl	8000b2c <__aeabi_dcmplt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d07c      	beq.n	8006094 <_dtoa_r+0x4b4>
 8005f9a:	f1b9 0f00 	cmp.w	r9, #0
 8005f9e:	d079      	beq.n	8006094 <_dtoa_r+0x4b4>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	dd35      	ble.n	8006012 <_dtoa_r+0x432>
 8005fa6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005faa:	9308      	str	r3, [sp, #32]
 8005fac:	4639      	mov	r1, r7
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4b8b      	ldr	r3, [pc, #556]	; (80061e0 <_dtoa_r+0x600>)
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f7fa fb48 	bl	8000648 <__aeabi_dmul>
 8005fb8:	e9cd 0100 	strd	r0, r1, [sp]
 8005fbc:	9f02      	ldr	r7, [sp, #8]
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f7fa fad7 	bl	8000574 <__aeabi_i2d>
 8005fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fca:	f7fa fb3d 	bl	8000648 <__aeabi_dmul>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4b84      	ldr	r3, [pc, #528]	; (80061e4 <_dtoa_r+0x604>)
 8005fd2:	f7fa f983 	bl	80002dc <__adddf3>
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fdc:	2f00      	cmp	r7, #0
 8005fde:	d15d      	bne.n	800609c <_dtoa_r+0x4bc>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4b81      	ldr	r3, [pc, #516]	; (80061e8 <_dtoa_r+0x608>)
 8005fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fe8:	f7fa f976 	bl	80002d8 <__aeabi_dsub>
 8005fec:	462a      	mov	r2, r5
 8005fee:	4633      	mov	r3, r6
 8005ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ff4:	f7fa fdb8 	bl	8000b68 <__aeabi_dcmpgt>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f040 8288 	bne.w	800650e <_dtoa_r+0x92e>
 8005ffe:	462a      	mov	r2, r5
 8006000:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006008:	f7fa fd90 	bl	8000b2c <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 827c 	bne.w	800650a <_dtoa_r+0x92a>
 8006012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006016:	e9cd 2300 	strd	r2, r3, [sp]
 800601a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800601c:	2b00      	cmp	r3, #0
 800601e:	f2c0 8150 	blt.w	80062c2 <_dtoa_r+0x6e2>
 8006022:	f1ba 0f0e 	cmp.w	sl, #14
 8006026:	f300 814c 	bgt.w	80062c2 <_dtoa_r+0x6e2>
 800602a:	4b6a      	ldr	r3, [pc, #424]	; (80061d4 <_dtoa_r+0x5f4>)
 800602c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006030:	ed93 7b00 	vldr	d7, [r3]
 8006034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	ed8d 7b02 	vstr	d7, [sp, #8]
 800603c:	f280 80d8 	bge.w	80061f0 <_dtoa_r+0x610>
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	f300 80d4 	bgt.w	80061f0 <_dtoa_r+0x610>
 8006048:	f040 825e 	bne.w	8006508 <_dtoa_r+0x928>
 800604c:	2200      	movs	r2, #0
 800604e:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <_dtoa_r+0x608>)
 8006050:	ec51 0b17 	vmov	r0, r1, d7
 8006054:	f7fa faf8 	bl	8000648 <__aeabi_dmul>
 8006058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605c:	f7fa fd7a 	bl	8000b54 <__aeabi_dcmpge>
 8006060:	464f      	mov	r7, r9
 8006062:	464e      	mov	r6, r9
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8234 	bne.w	80064d2 <_dtoa_r+0x8f2>
 800606a:	2331      	movs	r3, #49	; 0x31
 800606c:	f10b 0501 	add.w	r5, fp, #1
 8006070:	f88b 3000 	strb.w	r3, [fp]
 8006074:	f10a 0a01 	add.w	sl, sl, #1
 8006078:	e22f      	b.n	80064da <_dtoa_r+0x8fa>
 800607a:	07f2      	lsls	r2, r6, #31
 800607c:	d505      	bpl.n	800608a <_dtoa_r+0x4aa>
 800607e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006082:	f7fa fae1 	bl	8000648 <__aeabi_dmul>
 8006086:	3501      	adds	r5, #1
 8006088:	2301      	movs	r3, #1
 800608a:	1076      	asrs	r6, r6, #1
 800608c:	3708      	adds	r7, #8
 800608e:	e772      	b.n	8005f76 <_dtoa_r+0x396>
 8006090:	2502      	movs	r5, #2
 8006092:	e774      	b.n	8005f7e <_dtoa_r+0x39e>
 8006094:	f8cd a020 	str.w	sl, [sp, #32]
 8006098:	464f      	mov	r7, r9
 800609a:	e791      	b.n	8005fc0 <_dtoa_r+0x3e0>
 800609c:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <_dtoa_r+0x5f4>)
 800609e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d047      	beq.n	800613c <_dtoa_r+0x55c>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	2000      	movs	r0, #0
 80060b2:	494e      	ldr	r1, [pc, #312]	; (80061ec <_dtoa_r+0x60c>)
 80060b4:	f7fa fbf2 	bl	800089c <__aeabi_ddiv>
 80060b8:	462a      	mov	r2, r5
 80060ba:	4633      	mov	r3, r6
 80060bc:	f7fa f90c 	bl	80002d8 <__aeabi_dsub>
 80060c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060c4:	465d      	mov	r5, fp
 80060c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ca:	f7fa fd6d 	bl	8000ba8 <__aeabi_d2iz>
 80060ce:	4606      	mov	r6, r0
 80060d0:	f7fa fa50 	bl	8000574 <__aeabi_i2d>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060dc:	f7fa f8fc 	bl	80002d8 <__aeabi_dsub>
 80060e0:	3630      	adds	r6, #48	; 0x30
 80060e2:	f805 6b01 	strb.w	r6, [r5], #1
 80060e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060ea:	e9cd 0100 	strd	r0, r1, [sp]
 80060ee:	f7fa fd1d 	bl	8000b2c <__aeabi_dcmplt>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d163      	bne.n	80061be <_dtoa_r+0x5de>
 80060f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fa:	2000      	movs	r0, #0
 80060fc:	4937      	ldr	r1, [pc, #220]	; (80061dc <_dtoa_r+0x5fc>)
 80060fe:	f7fa f8eb 	bl	80002d8 <__aeabi_dsub>
 8006102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006106:	f7fa fd11 	bl	8000b2c <__aeabi_dcmplt>
 800610a:	2800      	cmp	r0, #0
 800610c:	f040 80b7 	bne.w	800627e <_dtoa_r+0x69e>
 8006110:	eba5 030b 	sub.w	r3, r5, fp
 8006114:	429f      	cmp	r7, r3
 8006116:	f77f af7c 	ble.w	8006012 <_dtoa_r+0x432>
 800611a:	2200      	movs	r2, #0
 800611c:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <_dtoa_r+0x600>)
 800611e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006122:	f7fa fa91 	bl	8000648 <__aeabi_dmul>
 8006126:	2200      	movs	r2, #0
 8006128:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800612c:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <_dtoa_r+0x600>)
 800612e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006132:	f7fa fa89 	bl	8000648 <__aeabi_dmul>
 8006136:	e9cd 0100 	strd	r0, r1, [sp]
 800613a:	e7c4      	b.n	80060c6 <_dtoa_r+0x4e6>
 800613c:	462a      	mov	r2, r5
 800613e:	4633      	mov	r3, r6
 8006140:	f7fa fa82 	bl	8000648 <__aeabi_dmul>
 8006144:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006148:	eb0b 0507 	add.w	r5, fp, r7
 800614c:	465e      	mov	r6, fp
 800614e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006152:	f7fa fd29 	bl	8000ba8 <__aeabi_d2iz>
 8006156:	4607      	mov	r7, r0
 8006158:	f7fa fa0c 	bl	8000574 <__aeabi_i2d>
 800615c:	3730      	adds	r7, #48	; 0x30
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006166:	f7fa f8b7 	bl	80002d8 <__aeabi_dsub>
 800616a:	f806 7b01 	strb.w	r7, [r6], #1
 800616e:	42ae      	cmp	r6, r5
 8006170:	e9cd 0100 	strd	r0, r1, [sp]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	d126      	bne.n	80061c8 <_dtoa_r+0x5e8>
 800617a:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <_dtoa_r+0x60c>)
 800617c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006180:	f7fa f8ac 	bl	80002dc <__adddf3>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800618c:	f7fa fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8006190:	2800      	cmp	r0, #0
 8006192:	d174      	bne.n	800627e <_dtoa_r+0x69e>
 8006194:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006198:	2000      	movs	r0, #0
 800619a:	4914      	ldr	r1, [pc, #80]	; (80061ec <_dtoa_r+0x60c>)
 800619c:	f7fa f89c 	bl	80002d8 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a8:	f7fa fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f af30 	beq.w	8006012 <_dtoa_r+0x432>
 80061b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061b6:	2b30      	cmp	r3, #48	; 0x30
 80061b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80061bc:	d002      	beq.n	80061c4 <_dtoa_r+0x5e4>
 80061be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80061c2:	e04a      	b.n	800625a <_dtoa_r+0x67a>
 80061c4:	4615      	mov	r5, r2
 80061c6:	e7f4      	b.n	80061b2 <_dtoa_r+0x5d2>
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <_dtoa_r+0x600>)
 80061ca:	f7fa fa3d 	bl	8000648 <__aeabi_dmul>
 80061ce:	e9cd 0100 	strd	r0, r1, [sp]
 80061d2:	e7bc      	b.n	800614e <_dtoa_r+0x56e>
 80061d4:	080079d8 	.word	0x080079d8
 80061d8:	080079b0 	.word	0x080079b0
 80061dc:	3ff00000 	.word	0x3ff00000
 80061e0:	40240000 	.word	0x40240000
 80061e4:	401c0000 	.word	0x401c0000
 80061e8:	40140000 	.word	0x40140000
 80061ec:	3fe00000 	.word	0x3fe00000
 80061f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061f4:	465d      	mov	r5, fp
 80061f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7fa fb4d 	bl	800089c <__aeabi_ddiv>
 8006202:	f7fa fcd1 	bl	8000ba8 <__aeabi_d2iz>
 8006206:	4680      	mov	r8, r0
 8006208:	f7fa f9b4 	bl	8000574 <__aeabi_i2d>
 800620c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006210:	f7fa fa1a 	bl	8000648 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006220:	f7fa f85a 	bl	80002d8 <__aeabi_dsub>
 8006224:	f805 6b01 	strb.w	r6, [r5], #1
 8006228:	eba5 060b 	sub.w	r6, r5, fp
 800622c:	45b1      	cmp	r9, r6
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	d139      	bne.n	80062a8 <_dtoa_r+0x6c8>
 8006234:	f7fa f852 	bl	80002dc <__adddf3>
 8006238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	f7fa fc92 	bl	8000b68 <__aeabi_dcmpgt>
 8006244:	b9c8      	cbnz	r0, 800627a <_dtoa_r+0x69a>
 8006246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	f7fa fc63 	bl	8000b18 <__aeabi_dcmpeq>
 8006252:	b110      	cbz	r0, 800625a <_dtoa_r+0x67a>
 8006254:	f018 0f01 	tst.w	r8, #1
 8006258:	d10f      	bne.n	800627a <_dtoa_r+0x69a>
 800625a:	9904      	ldr	r1, [sp, #16]
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fb8b 	bl	8006978 <_Bfree>
 8006262:	2300      	movs	r3, #0
 8006264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006266:	702b      	strb	r3, [r5, #0]
 8006268:	f10a 0301 	add.w	r3, sl, #1
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8241 	beq.w	80066f8 <_dtoa_r+0xb18>
 8006276:	601d      	str	r5, [r3, #0]
 8006278:	e23e      	b.n	80066f8 <_dtoa_r+0xb18>
 800627a:	f8cd a020 	str.w	sl, [sp, #32]
 800627e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006282:	2a39      	cmp	r2, #57	; 0x39
 8006284:	f105 33ff 	add.w	r3, r5, #4294967295
 8006288:	d108      	bne.n	800629c <_dtoa_r+0x6bc>
 800628a:	459b      	cmp	fp, r3
 800628c:	d10a      	bne.n	80062a4 <_dtoa_r+0x6c4>
 800628e:	9b08      	ldr	r3, [sp, #32]
 8006290:	3301      	adds	r3, #1
 8006292:	9308      	str	r3, [sp, #32]
 8006294:	2330      	movs	r3, #48	; 0x30
 8006296:	f88b 3000 	strb.w	r3, [fp]
 800629a:	465b      	mov	r3, fp
 800629c:	781a      	ldrb	r2, [r3, #0]
 800629e:	3201      	adds	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e78c      	b.n	80061be <_dtoa_r+0x5de>
 80062a4:	461d      	mov	r5, r3
 80062a6:	e7ea      	b.n	800627e <_dtoa_r+0x69e>
 80062a8:	2200      	movs	r2, #0
 80062aa:	4b9b      	ldr	r3, [pc, #620]	; (8006518 <_dtoa_r+0x938>)
 80062ac:	f7fa f9cc 	bl	8000648 <__aeabi_dmul>
 80062b0:	2200      	movs	r2, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	f7fa fc2e 	bl	8000b18 <__aeabi_dcmpeq>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d09a      	beq.n	80061f6 <_dtoa_r+0x616>
 80062c0:	e7cb      	b.n	800625a <_dtoa_r+0x67a>
 80062c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	f000 808b 	beq.w	80063e0 <_dtoa_r+0x800>
 80062ca:	9a06      	ldr	r2, [sp, #24]
 80062cc:	2a01      	cmp	r2, #1
 80062ce:	dc6e      	bgt.n	80063ae <_dtoa_r+0x7ce>
 80062d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d067      	beq.n	80063a6 <_dtoa_r+0x7c6>
 80062d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062da:	9f07      	ldr	r7, [sp, #28]
 80062dc:	9d05      	ldr	r5, [sp, #20]
 80062de:	9a05      	ldr	r2, [sp, #20]
 80062e0:	2101      	movs	r1, #1
 80062e2:	441a      	add	r2, r3
 80062e4:	4620      	mov	r0, r4
 80062e6:	9205      	str	r2, [sp, #20]
 80062e8:	4498      	add	r8, r3
 80062ea:	f000 fbe5 	bl	8006ab8 <__i2b>
 80062ee:	4606      	mov	r6, r0
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	dd0c      	ble.n	800630e <_dtoa_r+0x72e>
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	dd09      	ble.n	800630e <_dtoa_r+0x72e>
 80062fa:	4545      	cmp	r5, r8
 80062fc:	9a05      	ldr	r2, [sp, #20]
 80062fe:	462b      	mov	r3, r5
 8006300:	bfa8      	it	ge
 8006302:	4643      	movge	r3, r8
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	9205      	str	r2, [sp, #20]
 8006308:	1aed      	subs	r5, r5, r3
 800630a:	eba8 0803 	sub.w	r8, r8, r3
 800630e:	9b07      	ldr	r3, [sp, #28]
 8006310:	b1eb      	cbz	r3, 800634e <_dtoa_r+0x76e>
 8006312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d067      	beq.n	80063e8 <_dtoa_r+0x808>
 8006318:	b18f      	cbz	r7, 800633e <_dtoa_r+0x75e>
 800631a:	4631      	mov	r1, r6
 800631c:	463a      	mov	r2, r7
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fc6a 	bl	8006bf8 <__pow5mult>
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	4601      	mov	r1, r0
 8006328:	4606      	mov	r6, r0
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fbcd 	bl	8006aca <__multiply>
 8006330:	9904      	ldr	r1, [sp, #16]
 8006332:	9008      	str	r0, [sp, #32]
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fb1f 	bl	8006978 <_Bfree>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	9b07      	ldr	r3, [sp, #28]
 8006340:	1bda      	subs	r2, r3, r7
 8006342:	d004      	beq.n	800634e <_dtoa_r+0x76e>
 8006344:	9904      	ldr	r1, [sp, #16]
 8006346:	4620      	mov	r0, r4
 8006348:	f000 fc56 	bl	8006bf8 <__pow5mult>
 800634c:	9004      	str	r0, [sp, #16]
 800634e:	2101      	movs	r1, #1
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fbb1 	bl	8006ab8 <__i2b>
 8006356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006358:	4607      	mov	r7, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 81d0 	beq.w	8006700 <_dtoa_r+0xb20>
 8006360:	461a      	mov	r2, r3
 8006362:	4601      	mov	r1, r0
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fc47 	bl	8006bf8 <__pow5mult>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	2b01      	cmp	r3, #1
 800636e:	4607      	mov	r7, r0
 8006370:	dc40      	bgt.n	80063f4 <_dtoa_r+0x814>
 8006372:	9b00      	ldr	r3, [sp, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d139      	bne.n	80063ec <_dtoa_r+0x80c>
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637e:	2b00      	cmp	r3, #0
 8006380:	d136      	bne.n	80063f0 <_dtoa_r+0x810>
 8006382:	9b01      	ldr	r3, [sp, #4]
 8006384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006388:	0d1b      	lsrs	r3, r3, #20
 800638a:	051b      	lsls	r3, r3, #20
 800638c:	b12b      	cbz	r3, 800639a <_dtoa_r+0x7ba>
 800638e:	9b05      	ldr	r3, [sp, #20]
 8006390:	3301      	adds	r3, #1
 8006392:	9305      	str	r3, [sp, #20]
 8006394:	f108 0801 	add.w	r8, r8, #1
 8006398:	2301      	movs	r3, #1
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d12a      	bne.n	80063f8 <_dtoa_r+0x818>
 80063a2:	2001      	movs	r0, #1
 80063a4:	e030      	b.n	8006408 <_dtoa_r+0x828>
 80063a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ac:	e795      	b.n	80062da <_dtoa_r+0x6fa>
 80063ae:	9b07      	ldr	r3, [sp, #28]
 80063b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80063b4:	42bb      	cmp	r3, r7
 80063b6:	bfbf      	itttt	lt
 80063b8:	9b07      	ldrlt	r3, [sp, #28]
 80063ba:	9707      	strlt	r7, [sp, #28]
 80063bc:	1afa      	sublt	r2, r7, r3
 80063be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80063c0:	bfbb      	ittet	lt
 80063c2:	189b      	addlt	r3, r3, r2
 80063c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80063c6:	1bdf      	subge	r7, r3, r7
 80063c8:	2700      	movlt	r7, #0
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	bfb5      	itete	lt
 80063d0:	9b05      	ldrlt	r3, [sp, #20]
 80063d2:	9d05      	ldrge	r5, [sp, #20]
 80063d4:	eba3 0509 	sublt.w	r5, r3, r9
 80063d8:	464b      	movge	r3, r9
 80063da:	bfb8      	it	lt
 80063dc:	2300      	movlt	r3, #0
 80063de:	e77e      	b.n	80062de <_dtoa_r+0x6fe>
 80063e0:	9f07      	ldr	r7, [sp, #28]
 80063e2:	9d05      	ldr	r5, [sp, #20]
 80063e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063e6:	e783      	b.n	80062f0 <_dtoa_r+0x710>
 80063e8:	9a07      	ldr	r2, [sp, #28]
 80063ea:	e7ab      	b.n	8006344 <_dtoa_r+0x764>
 80063ec:	2300      	movs	r3, #0
 80063ee:	e7d4      	b.n	800639a <_dtoa_r+0x7ba>
 80063f0:	9b00      	ldr	r3, [sp, #0]
 80063f2:	e7d2      	b.n	800639a <_dtoa_r+0x7ba>
 80063f4:	2300      	movs	r3, #0
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80063fe:	6918      	ldr	r0, [r3, #16]
 8006400:	f000 fb0c 	bl	8006a1c <__hi0bits>
 8006404:	f1c0 0020 	rsb	r0, r0, #32
 8006408:	4440      	add	r0, r8
 800640a:	f010 001f 	ands.w	r0, r0, #31
 800640e:	d047      	beq.n	80064a0 <_dtoa_r+0x8c0>
 8006410:	f1c0 0320 	rsb	r3, r0, #32
 8006414:	2b04      	cmp	r3, #4
 8006416:	dd3b      	ble.n	8006490 <_dtoa_r+0x8b0>
 8006418:	9b05      	ldr	r3, [sp, #20]
 800641a:	f1c0 001c 	rsb	r0, r0, #28
 800641e:	4403      	add	r3, r0
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	4405      	add	r5, r0
 8006424:	4480      	add	r8, r0
 8006426:	9b05      	ldr	r3, [sp, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	dd05      	ble.n	8006438 <_dtoa_r+0x858>
 800642c:	461a      	mov	r2, r3
 800642e:	9904      	ldr	r1, [sp, #16]
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fc2f 	bl	8006c94 <__lshift>
 8006436:	9004      	str	r0, [sp, #16]
 8006438:	f1b8 0f00 	cmp.w	r8, #0
 800643c:	dd05      	ble.n	800644a <_dtoa_r+0x86a>
 800643e:	4639      	mov	r1, r7
 8006440:	4642      	mov	r2, r8
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fc26 	bl	8006c94 <__lshift>
 8006448:	4607      	mov	r7, r0
 800644a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800644c:	b353      	cbz	r3, 80064a4 <_dtoa_r+0x8c4>
 800644e:	4639      	mov	r1, r7
 8006450:	9804      	ldr	r0, [sp, #16]
 8006452:	f000 fc73 	bl	8006d3c <__mcmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	da24      	bge.n	80064a4 <_dtoa_r+0x8c4>
 800645a:	2300      	movs	r3, #0
 800645c:	220a      	movs	r2, #10
 800645e:	9904      	ldr	r1, [sp, #16]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 faa0 	bl	80069a6 <__multadd>
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	9004      	str	r0, [sp, #16]
 800646a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 814d 	beq.w	800670e <_dtoa_r+0xb2e>
 8006474:	2300      	movs	r3, #0
 8006476:	4631      	mov	r1, r6
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fa93 	bl	80069a6 <__multadd>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	4606      	mov	r6, r0
 8006486:	dc4f      	bgt.n	8006528 <_dtoa_r+0x948>
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	2b02      	cmp	r3, #2
 800648c:	dd4c      	ble.n	8006528 <_dtoa_r+0x948>
 800648e:	e011      	b.n	80064b4 <_dtoa_r+0x8d4>
 8006490:	d0c9      	beq.n	8006426 <_dtoa_r+0x846>
 8006492:	9a05      	ldr	r2, [sp, #20]
 8006494:	331c      	adds	r3, #28
 8006496:	441a      	add	r2, r3
 8006498:	9205      	str	r2, [sp, #20]
 800649a:	441d      	add	r5, r3
 800649c:	4498      	add	r8, r3
 800649e:	e7c2      	b.n	8006426 <_dtoa_r+0x846>
 80064a0:	4603      	mov	r3, r0
 80064a2:	e7f6      	b.n	8006492 <_dtoa_r+0x8b2>
 80064a4:	f1b9 0f00 	cmp.w	r9, #0
 80064a8:	dc38      	bgt.n	800651c <_dtoa_r+0x93c>
 80064aa:	9b06      	ldr	r3, [sp, #24]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	dd35      	ble.n	800651c <_dtoa_r+0x93c>
 80064b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	b963      	cbnz	r3, 80064d2 <_dtoa_r+0x8f2>
 80064b8:	4639      	mov	r1, r7
 80064ba:	2205      	movs	r2, #5
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fa72 	bl	80069a6 <__multadd>
 80064c2:	4601      	mov	r1, r0
 80064c4:	4607      	mov	r7, r0
 80064c6:	9804      	ldr	r0, [sp, #16]
 80064c8:	f000 fc38 	bl	8006d3c <__mcmp>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f73f adcc 	bgt.w	800606a <_dtoa_r+0x48a>
 80064d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d4:	465d      	mov	r5, fp
 80064d6:	ea6f 0a03 	mvn.w	sl, r3
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	4639      	mov	r1, r7
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fa49 	bl	8006978 <_Bfree>
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	f43f aeb7 	beq.w	800625a <_dtoa_r+0x67a>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	d005      	beq.n	80064fe <_dtoa_r+0x91e>
 80064f2:	45b1      	cmp	r9, r6
 80064f4:	d003      	beq.n	80064fe <_dtoa_r+0x91e>
 80064f6:	4649      	mov	r1, r9
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fa3d 	bl	8006978 <_Bfree>
 80064fe:	4631      	mov	r1, r6
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fa39 	bl	8006978 <_Bfree>
 8006506:	e6a8      	b.n	800625a <_dtoa_r+0x67a>
 8006508:	2700      	movs	r7, #0
 800650a:	463e      	mov	r6, r7
 800650c:	e7e1      	b.n	80064d2 <_dtoa_r+0x8f2>
 800650e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006512:	463e      	mov	r6, r7
 8006514:	e5a9      	b.n	800606a <_dtoa_r+0x48a>
 8006516:	bf00      	nop
 8006518:	40240000 	.word	0x40240000
 800651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80fa 	beq.w	800671c <_dtoa_r+0xb3c>
 8006528:	2d00      	cmp	r5, #0
 800652a:	dd05      	ble.n	8006538 <_dtoa_r+0x958>
 800652c:	4631      	mov	r1, r6
 800652e:	462a      	mov	r2, r5
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fbaf 	bl	8006c94 <__lshift>
 8006536:	4606      	mov	r6, r0
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04c      	beq.n	80065d8 <_dtoa_r+0x9f8>
 800653e:	6871      	ldr	r1, [r6, #4]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f9e5 	bl	8006910 <_Balloc>
 8006546:	6932      	ldr	r2, [r6, #16]
 8006548:	3202      	adds	r2, #2
 800654a:	4605      	mov	r5, r0
 800654c:	0092      	lsls	r2, r2, #2
 800654e:	f106 010c 	add.w	r1, r6, #12
 8006552:	300c      	adds	r0, #12
 8006554:	f7fe fe1c 	bl	8005190 <memcpy>
 8006558:	2201      	movs	r2, #1
 800655a:	4629      	mov	r1, r5
 800655c:	4620      	mov	r0, r4
 800655e:	f000 fb99 	bl	8006c94 <__lshift>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	f8cd b014 	str.w	fp, [sp, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	46b1      	mov	r9, r6
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	4606      	mov	r6, r0
 8006572:	4639      	mov	r1, r7
 8006574:	9804      	ldr	r0, [sp, #16]
 8006576:	f7ff faa7 	bl	8005ac8 <quorem>
 800657a:	4649      	mov	r1, r9
 800657c:	4605      	mov	r5, r0
 800657e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006582:	9804      	ldr	r0, [sp, #16]
 8006584:	f000 fbda 	bl	8006d3c <__mcmp>
 8006588:	4632      	mov	r2, r6
 800658a:	9000      	str	r0, [sp, #0]
 800658c:	4639      	mov	r1, r7
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fbee 	bl	8006d70 <__mdiff>
 8006594:	68c3      	ldr	r3, [r0, #12]
 8006596:	4602      	mov	r2, r0
 8006598:	bb03      	cbnz	r3, 80065dc <_dtoa_r+0x9fc>
 800659a:	4601      	mov	r1, r0
 800659c:	9008      	str	r0, [sp, #32]
 800659e:	9804      	ldr	r0, [sp, #16]
 80065a0:	f000 fbcc 	bl	8006d3c <__mcmp>
 80065a4:	9a08      	ldr	r2, [sp, #32]
 80065a6:	4603      	mov	r3, r0
 80065a8:	4611      	mov	r1, r2
 80065aa:	4620      	mov	r0, r4
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	f000 f9e3 	bl	8006978 <_Bfree>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	b9a3      	cbnz	r3, 80065e0 <_dtoa_r+0xa00>
 80065b6:	9a06      	ldr	r2, [sp, #24]
 80065b8:	b992      	cbnz	r2, 80065e0 <_dtoa_r+0xa00>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	b982      	cbnz	r2, 80065e0 <_dtoa_r+0xa00>
 80065be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065c2:	d029      	beq.n	8006618 <_dtoa_r+0xa38>
 80065c4:	9b00      	ldr	r3, [sp, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd01      	ble.n	80065ce <_dtoa_r+0x9ee>
 80065ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80065ce:	9b05      	ldr	r3, [sp, #20]
 80065d0:	1c5d      	adds	r5, r3, #1
 80065d2:	f883 8000 	strb.w	r8, [r3]
 80065d6:	e782      	b.n	80064de <_dtoa_r+0x8fe>
 80065d8:	4630      	mov	r0, r6
 80065da:	e7c2      	b.n	8006562 <_dtoa_r+0x982>
 80065dc:	2301      	movs	r3, #1
 80065de:	e7e3      	b.n	80065a8 <_dtoa_r+0x9c8>
 80065e0:	9a00      	ldr	r2, [sp, #0]
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	db04      	blt.n	80065f0 <_dtoa_r+0xa10>
 80065e6:	d125      	bne.n	8006634 <_dtoa_r+0xa54>
 80065e8:	9a06      	ldr	r2, [sp, #24]
 80065ea:	bb1a      	cbnz	r2, 8006634 <_dtoa_r+0xa54>
 80065ec:	9a07      	ldr	r2, [sp, #28]
 80065ee:	bb0a      	cbnz	r2, 8006634 <_dtoa_r+0xa54>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	ddec      	ble.n	80065ce <_dtoa_r+0x9ee>
 80065f4:	2201      	movs	r2, #1
 80065f6:	9904      	ldr	r1, [sp, #16]
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fb4b 	bl	8006c94 <__lshift>
 80065fe:	4639      	mov	r1, r7
 8006600:	9004      	str	r0, [sp, #16]
 8006602:	f000 fb9b 	bl	8006d3c <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	dc03      	bgt.n	8006612 <_dtoa_r+0xa32>
 800660a:	d1e0      	bne.n	80065ce <_dtoa_r+0x9ee>
 800660c:	f018 0f01 	tst.w	r8, #1
 8006610:	d0dd      	beq.n	80065ce <_dtoa_r+0x9ee>
 8006612:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006616:	d1d8      	bne.n	80065ca <_dtoa_r+0x9ea>
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	9a05      	ldr	r2, [sp, #20]
 800661c:	1c5d      	adds	r5, r3, #1
 800661e:	2339      	movs	r3, #57	; 0x39
 8006620:	7013      	strb	r3, [r2, #0]
 8006622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006626:	2b39      	cmp	r3, #57	; 0x39
 8006628:	f105 32ff 	add.w	r2, r5, #4294967295
 800662c:	d04f      	beq.n	80066ce <_dtoa_r+0xaee>
 800662e:	3301      	adds	r3, #1
 8006630:	7013      	strb	r3, [r2, #0]
 8006632:	e754      	b.n	80064de <_dtoa_r+0x8fe>
 8006634:	9a05      	ldr	r2, [sp, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f102 0501 	add.w	r5, r2, #1
 800663c:	dd06      	ble.n	800664c <_dtoa_r+0xa6c>
 800663e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006642:	d0e9      	beq.n	8006618 <_dtoa_r+0xa38>
 8006644:	f108 0801 	add.w	r8, r8, #1
 8006648:	9b05      	ldr	r3, [sp, #20]
 800664a:	e7c2      	b.n	80065d2 <_dtoa_r+0x9f2>
 800664c:	9a02      	ldr	r2, [sp, #8]
 800664e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006652:	eba5 030b 	sub.w	r3, r5, fp
 8006656:	4293      	cmp	r3, r2
 8006658:	d021      	beq.n	800669e <_dtoa_r+0xabe>
 800665a:	2300      	movs	r3, #0
 800665c:	220a      	movs	r2, #10
 800665e:	9904      	ldr	r1, [sp, #16]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 f9a0 	bl	80069a6 <__multadd>
 8006666:	45b1      	cmp	r9, r6
 8006668:	9004      	str	r0, [sp, #16]
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 020a 	mov.w	r2, #10
 8006672:	4649      	mov	r1, r9
 8006674:	4620      	mov	r0, r4
 8006676:	d105      	bne.n	8006684 <_dtoa_r+0xaa4>
 8006678:	f000 f995 	bl	80069a6 <__multadd>
 800667c:	4681      	mov	r9, r0
 800667e:	4606      	mov	r6, r0
 8006680:	9505      	str	r5, [sp, #20]
 8006682:	e776      	b.n	8006572 <_dtoa_r+0x992>
 8006684:	f000 f98f 	bl	80069a6 <__multadd>
 8006688:	4631      	mov	r1, r6
 800668a:	4681      	mov	r9, r0
 800668c:	2300      	movs	r3, #0
 800668e:	220a      	movs	r2, #10
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f988 	bl	80069a6 <__multadd>
 8006696:	4606      	mov	r6, r0
 8006698:	e7f2      	b.n	8006680 <_dtoa_r+0xaa0>
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	2201      	movs	r2, #1
 80066a0:	9904      	ldr	r1, [sp, #16]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 faf6 	bl	8006c94 <__lshift>
 80066a8:	4639      	mov	r1, r7
 80066aa:	9004      	str	r0, [sp, #16]
 80066ac:	f000 fb46 	bl	8006d3c <__mcmp>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dcb6      	bgt.n	8006622 <_dtoa_r+0xa42>
 80066b4:	d102      	bne.n	80066bc <_dtoa_r+0xadc>
 80066b6:	f018 0f01 	tst.w	r8, #1
 80066ba:	d1b2      	bne.n	8006622 <_dtoa_r+0xa42>
 80066bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066c0:	2b30      	cmp	r3, #48	; 0x30
 80066c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80066c6:	f47f af0a 	bne.w	80064de <_dtoa_r+0x8fe>
 80066ca:	4615      	mov	r5, r2
 80066cc:	e7f6      	b.n	80066bc <_dtoa_r+0xadc>
 80066ce:	4593      	cmp	fp, r2
 80066d0:	d105      	bne.n	80066de <_dtoa_r+0xafe>
 80066d2:	2331      	movs	r3, #49	; 0x31
 80066d4:	f10a 0a01 	add.w	sl, sl, #1
 80066d8:	f88b 3000 	strb.w	r3, [fp]
 80066dc:	e6ff      	b.n	80064de <_dtoa_r+0x8fe>
 80066de:	4615      	mov	r5, r2
 80066e0:	e79f      	b.n	8006622 <_dtoa_r+0xa42>
 80066e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006748 <_dtoa_r+0xb68>
 80066e6:	e007      	b.n	80066f8 <_dtoa_r+0xb18>
 80066e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800674c <_dtoa_r+0xb6c>
 80066ee:	b11b      	cbz	r3, 80066f8 <_dtoa_r+0xb18>
 80066f0:	f10b 0308 	add.w	r3, fp, #8
 80066f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4658      	mov	r0, fp
 80066fa:	b017      	add	sp, #92	; 0x5c
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	9b06      	ldr	r3, [sp, #24]
 8006702:	2b01      	cmp	r3, #1
 8006704:	f77f ae35 	ble.w	8006372 <_dtoa_r+0x792>
 8006708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	e649      	b.n	80063a2 <_dtoa_r+0x7c2>
 800670e:	9b02      	ldr	r3, [sp, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc03      	bgt.n	800671c <_dtoa_r+0xb3c>
 8006714:	9b06      	ldr	r3, [sp, #24]
 8006716:	2b02      	cmp	r3, #2
 8006718:	f73f aecc 	bgt.w	80064b4 <_dtoa_r+0x8d4>
 800671c:	465d      	mov	r5, fp
 800671e:	4639      	mov	r1, r7
 8006720:	9804      	ldr	r0, [sp, #16]
 8006722:	f7ff f9d1 	bl	8005ac8 <quorem>
 8006726:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800672a:	f805 8b01 	strb.w	r8, [r5], #1
 800672e:	9a02      	ldr	r2, [sp, #8]
 8006730:	eba5 030b 	sub.w	r3, r5, fp
 8006734:	429a      	cmp	r2, r3
 8006736:	ddb0      	ble.n	800669a <_dtoa_r+0xaba>
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	9904      	ldr	r1, [sp, #16]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f931 	bl	80069a6 <__multadd>
 8006744:	9004      	str	r0, [sp, #16]
 8006746:	e7ea      	b.n	800671e <_dtoa_r+0xb3e>
 8006748:	0800791c 	.word	0x0800791c
 800674c:	08007940 	.word	0x08007940

08006750 <std>:
 8006750:	2300      	movs	r3, #0
 8006752:	b510      	push	{r4, lr}
 8006754:	4604      	mov	r4, r0
 8006756:	e9c0 3300 	strd	r3, r3, [r0]
 800675a:	6083      	str	r3, [r0, #8]
 800675c:	8181      	strh	r1, [r0, #12]
 800675e:	6643      	str	r3, [r0, #100]	; 0x64
 8006760:	81c2      	strh	r2, [r0, #14]
 8006762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006766:	6183      	str	r3, [r0, #24]
 8006768:	4619      	mov	r1, r3
 800676a:	2208      	movs	r2, #8
 800676c:	305c      	adds	r0, #92	; 0x5c
 800676e:	f7fe fd1a 	bl	80051a6 <memset>
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <std+0x38>)
 8006774:	6263      	str	r3, [r4, #36]	; 0x24
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <std+0x3c>)
 8006778:	62a3      	str	r3, [r4, #40]	; 0x28
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <std+0x40>)
 800677c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <std+0x44>)
 8006780:	6224      	str	r4, [r4, #32]
 8006782:	6323      	str	r3, [r4, #48]	; 0x30
 8006784:	bd10      	pop	{r4, pc}
 8006786:	bf00      	nop
 8006788:	08007341 	.word	0x08007341
 800678c:	08007363 	.word	0x08007363
 8006790:	0800739b 	.word	0x0800739b
 8006794:	080073bf 	.word	0x080073bf

08006798 <_cleanup_r>:
 8006798:	4901      	ldr	r1, [pc, #4]	; (80067a0 <_cleanup_r+0x8>)
 800679a:	f000 b885 	b.w	80068a8 <_fwalk_reent>
 800679e:	bf00      	nop
 80067a0:	08007699 	.word	0x08007699

080067a4 <__sfmoreglue>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	1e4a      	subs	r2, r1, #1
 80067a8:	2568      	movs	r5, #104	; 0x68
 80067aa:	4355      	muls	r5, r2
 80067ac:	460e      	mov	r6, r1
 80067ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067b2:	f000 fbe5 	bl	8006f80 <_malloc_r>
 80067b6:	4604      	mov	r4, r0
 80067b8:	b140      	cbz	r0, 80067cc <__sfmoreglue+0x28>
 80067ba:	2100      	movs	r1, #0
 80067bc:	e9c0 1600 	strd	r1, r6, [r0]
 80067c0:	300c      	adds	r0, #12
 80067c2:	60a0      	str	r0, [r4, #8]
 80067c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067c8:	f7fe fced 	bl	80051a6 <memset>
 80067cc:	4620      	mov	r0, r4
 80067ce:	bd70      	pop	{r4, r5, r6, pc}

080067d0 <__sinit>:
 80067d0:	6983      	ldr	r3, [r0, #24]
 80067d2:	b510      	push	{r4, lr}
 80067d4:	4604      	mov	r4, r0
 80067d6:	bb33      	cbnz	r3, 8006826 <__sinit+0x56>
 80067d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80067dc:	6503      	str	r3, [r0, #80]	; 0x50
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <__sinit+0x58>)
 80067e0:	4a12      	ldr	r2, [pc, #72]	; (800682c <__sinit+0x5c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6282      	str	r2, [r0, #40]	; 0x28
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bf04      	itt	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	6183      	streq	r3, [r0, #24]
 80067ee:	f000 f81f 	bl	8006830 <__sfp>
 80067f2:	6060      	str	r0, [r4, #4]
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f81b 	bl	8006830 <__sfp>
 80067fa:	60a0      	str	r0, [r4, #8]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f817 	bl	8006830 <__sfp>
 8006802:	2200      	movs	r2, #0
 8006804:	60e0      	str	r0, [r4, #12]
 8006806:	2104      	movs	r1, #4
 8006808:	6860      	ldr	r0, [r4, #4]
 800680a:	f7ff ffa1 	bl	8006750 <std>
 800680e:	2201      	movs	r2, #1
 8006810:	2109      	movs	r1, #9
 8006812:	68a0      	ldr	r0, [r4, #8]
 8006814:	f7ff ff9c 	bl	8006750 <std>
 8006818:	2202      	movs	r2, #2
 800681a:	2112      	movs	r1, #18
 800681c:	68e0      	ldr	r0, [r4, #12]
 800681e:	f7ff ff97 	bl	8006750 <std>
 8006822:	2301      	movs	r3, #1
 8006824:	61a3      	str	r3, [r4, #24]
 8006826:	bd10      	pop	{r4, pc}
 8006828:	08007908 	.word	0x08007908
 800682c:	08006799 	.word	0x08006799

08006830 <__sfp>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <__sfp+0x70>)
 8006834:	681e      	ldr	r6, [r3, #0]
 8006836:	69b3      	ldr	r3, [r6, #24]
 8006838:	4607      	mov	r7, r0
 800683a:	b913      	cbnz	r3, 8006842 <__sfp+0x12>
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ffc7 	bl	80067d0 <__sinit>
 8006842:	3648      	adds	r6, #72	; 0x48
 8006844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006848:	3b01      	subs	r3, #1
 800684a:	d503      	bpl.n	8006854 <__sfp+0x24>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	b133      	cbz	r3, 800685e <__sfp+0x2e>
 8006850:	6836      	ldr	r6, [r6, #0]
 8006852:	e7f7      	b.n	8006844 <__sfp+0x14>
 8006854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006858:	b16d      	cbz	r5, 8006876 <__sfp+0x46>
 800685a:	3468      	adds	r4, #104	; 0x68
 800685c:	e7f4      	b.n	8006848 <__sfp+0x18>
 800685e:	2104      	movs	r1, #4
 8006860:	4638      	mov	r0, r7
 8006862:	f7ff ff9f 	bl	80067a4 <__sfmoreglue>
 8006866:	6030      	str	r0, [r6, #0]
 8006868:	2800      	cmp	r0, #0
 800686a:	d1f1      	bne.n	8006850 <__sfp+0x20>
 800686c:	230c      	movs	r3, #12
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4604      	mov	r4, r0
 8006872:	4620      	mov	r0, r4
 8006874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <__sfp+0x74>)
 8006878:	6665      	str	r5, [r4, #100]	; 0x64
 800687a:	e9c4 5500 	strd	r5, r5, [r4]
 800687e:	60a5      	str	r5, [r4, #8]
 8006880:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006884:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006888:	2208      	movs	r2, #8
 800688a:	4629      	mov	r1, r5
 800688c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006890:	f7fe fc89 	bl	80051a6 <memset>
 8006894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800689c:	e7e9      	b.n	8006872 <__sfp+0x42>
 800689e:	bf00      	nop
 80068a0:	08007908 	.word	0x08007908
 80068a4:	ffff0001 	.word	0xffff0001

080068a8 <_fwalk_reent>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4680      	mov	r8, r0
 80068ae:	4689      	mov	r9, r1
 80068b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068b4:	2600      	movs	r6, #0
 80068b6:	b914      	cbnz	r4, 80068be <_fwalk_reent+0x16>
 80068b8:	4630      	mov	r0, r6
 80068ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80068c2:	3f01      	subs	r7, #1
 80068c4:	d501      	bpl.n	80068ca <_fwalk_reent+0x22>
 80068c6:	6824      	ldr	r4, [r4, #0]
 80068c8:	e7f5      	b.n	80068b6 <_fwalk_reent+0xe>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d907      	bls.n	80068e0 <_fwalk_reent+0x38>
 80068d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068d4:	3301      	adds	r3, #1
 80068d6:	d003      	beq.n	80068e0 <_fwalk_reent+0x38>
 80068d8:	4629      	mov	r1, r5
 80068da:	4640      	mov	r0, r8
 80068dc:	47c8      	blx	r9
 80068de:	4306      	orrs	r6, r0
 80068e0:	3568      	adds	r5, #104	; 0x68
 80068e2:	e7ee      	b.n	80068c2 <_fwalk_reent+0x1a>

080068e4 <_localeconv_r>:
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <_localeconv_r+0x14>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a18      	ldr	r0, [r3, #32]
 80068ea:	4b04      	ldr	r3, [pc, #16]	; (80068fc <_localeconv_r+0x18>)
 80068ec:	2800      	cmp	r0, #0
 80068ee:	bf08      	it	eq
 80068f0:	4618      	moveq	r0, r3
 80068f2:	30f0      	adds	r0, #240	; 0xf0
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	2000000c 	.word	0x2000000c
 80068fc:	20000070 	.word	0x20000070

08006900 <malloc>:
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <malloc+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f000 bb3b 	b.w	8006f80 <_malloc_r>
 800690a:	bf00      	nop
 800690c:	2000000c 	.word	0x2000000c

08006910 <_Balloc>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006914:	4604      	mov	r4, r0
 8006916:	460e      	mov	r6, r1
 8006918:	b93d      	cbnz	r5, 800692a <_Balloc+0x1a>
 800691a:	2010      	movs	r0, #16
 800691c:	f7ff fff0 	bl	8006900 <malloc>
 8006920:	6260      	str	r0, [r4, #36]	; 0x24
 8006922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006926:	6005      	str	r5, [r0, #0]
 8006928:	60c5      	str	r5, [r0, #12]
 800692a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800692c:	68eb      	ldr	r3, [r5, #12]
 800692e:	b183      	cbz	r3, 8006952 <_Balloc+0x42>
 8006930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006938:	b9b8      	cbnz	r0, 800696a <_Balloc+0x5a>
 800693a:	2101      	movs	r1, #1
 800693c:	fa01 f506 	lsl.w	r5, r1, r6
 8006940:	1d6a      	adds	r2, r5, #5
 8006942:	0092      	lsls	r2, r2, #2
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fabf 	bl	8006ec8 <_calloc_r>
 800694a:	b160      	cbz	r0, 8006966 <_Balloc+0x56>
 800694c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006950:	e00e      	b.n	8006970 <_Balloc+0x60>
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	2104      	movs	r1, #4
 8006956:	4620      	mov	r0, r4
 8006958:	f000 fab6 	bl	8006ec8 <_calloc_r>
 800695c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695e:	60e8      	str	r0, [r5, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e4      	bne.n	8006930 <_Balloc+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	6802      	ldr	r2, [r0, #0]
 800696c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006970:	2300      	movs	r3, #0
 8006972:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006976:	e7f7      	b.n	8006968 <_Balloc+0x58>

08006978 <_Bfree>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800697c:	4606      	mov	r6, r0
 800697e:	460d      	mov	r5, r1
 8006980:	b93c      	cbnz	r4, 8006992 <_Bfree+0x1a>
 8006982:	2010      	movs	r0, #16
 8006984:	f7ff ffbc 	bl	8006900 <malloc>
 8006988:	6270      	str	r0, [r6, #36]	; 0x24
 800698a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800698e:	6004      	str	r4, [r0, #0]
 8006990:	60c4      	str	r4, [r0, #12]
 8006992:	b13d      	cbz	r5, 80069a4 <_Bfree+0x2c>
 8006994:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006996:	686a      	ldr	r2, [r5, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800699e:	6029      	str	r1, [r5, #0]
 80069a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80069a4:	bd70      	pop	{r4, r5, r6, pc}

080069a6 <__multadd>:
 80069a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069aa:	690d      	ldr	r5, [r1, #16]
 80069ac:	461f      	mov	r7, r3
 80069ae:	4606      	mov	r6, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	f101 0c14 	add.w	ip, r1, #20
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8dc 0000 	ldr.w	r0, [ip]
 80069bc:	b281      	uxth	r1, r0
 80069be:	fb02 7101 	mla	r1, r2, r1, r7
 80069c2:	0c0f      	lsrs	r7, r1, #16
 80069c4:	0c00      	lsrs	r0, r0, #16
 80069c6:	fb02 7000 	mla	r0, r2, r0, r7
 80069ca:	b289      	uxth	r1, r1
 80069cc:	3301      	adds	r3, #1
 80069ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80069d2:	429d      	cmp	r5, r3
 80069d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80069d8:	f84c 1b04 	str.w	r1, [ip], #4
 80069dc:	dcec      	bgt.n	80069b8 <__multadd+0x12>
 80069de:	b1d7      	cbz	r7, 8006a16 <__multadd+0x70>
 80069e0:	68a3      	ldr	r3, [r4, #8]
 80069e2:	42ab      	cmp	r3, r5
 80069e4:	dc12      	bgt.n	8006a0c <__multadd+0x66>
 80069e6:	6861      	ldr	r1, [r4, #4]
 80069e8:	4630      	mov	r0, r6
 80069ea:	3101      	adds	r1, #1
 80069ec:	f7ff ff90 	bl	8006910 <_Balloc>
 80069f0:	6922      	ldr	r2, [r4, #16]
 80069f2:	3202      	adds	r2, #2
 80069f4:	f104 010c 	add.w	r1, r4, #12
 80069f8:	4680      	mov	r8, r0
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	300c      	adds	r0, #12
 80069fe:	f7fe fbc7 	bl	8005190 <memcpy>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff ffb7 	bl	8006978 <_Bfree>
 8006a0a:	4644      	mov	r4, r8
 8006a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a10:	3501      	adds	r5, #1
 8006a12:	615f      	str	r7, [r3, #20]
 8006a14:	6125      	str	r5, [r4, #16]
 8006a16:	4620      	mov	r0, r4
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a1c <__hi0bits>:
 8006a1c:	0c02      	lsrs	r2, r0, #16
 8006a1e:	0412      	lsls	r2, r2, #16
 8006a20:	4603      	mov	r3, r0
 8006a22:	b9b2      	cbnz	r2, 8006a52 <__hi0bits+0x36>
 8006a24:	0403      	lsls	r3, r0, #16
 8006a26:	2010      	movs	r0, #16
 8006a28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a2c:	bf04      	itt	eq
 8006a2e:	021b      	lsleq	r3, r3, #8
 8006a30:	3008      	addeq	r0, #8
 8006a32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a36:	bf04      	itt	eq
 8006a38:	011b      	lsleq	r3, r3, #4
 8006a3a:	3004      	addeq	r0, #4
 8006a3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a40:	bf04      	itt	eq
 8006a42:	009b      	lsleq	r3, r3, #2
 8006a44:	3002      	addeq	r0, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db06      	blt.n	8006a58 <__hi0bits+0x3c>
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	d503      	bpl.n	8006a56 <__hi0bits+0x3a>
 8006a4e:	3001      	adds	r0, #1
 8006a50:	4770      	bx	lr
 8006a52:	2000      	movs	r0, #0
 8006a54:	e7e8      	b.n	8006a28 <__hi0bits+0xc>
 8006a56:	2020      	movs	r0, #32
 8006a58:	4770      	bx	lr

08006a5a <__lo0bits>:
 8006a5a:	6803      	ldr	r3, [r0, #0]
 8006a5c:	f013 0207 	ands.w	r2, r3, #7
 8006a60:	4601      	mov	r1, r0
 8006a62:	d00b      	beq.n	8006a7c <__lo0bits+0x22>
 8006a64:	07da      	lsls	r2, r3, #31
 8006a66:	d423      	bmi.n	8006ab0 <__lo0bits+0x56>
 8006a68:	0798      	lsls	r0, r3, #30
 8006a6a:	bf49      	itett	mi
 8006a6c:	085b      	lsrmi	r3, r3, #1
 8006a6e:	089b      	lsrpl	r3, r3, #2
 8006a70:	2001      	movmi	r0, #1
 8006a72:	600b      	strmi	r3, [r1, #0]
 8006a74:	bf5c      	itt	pl
 8006a76:	600b      	strpl	r3, [r1, #0]
 8006a78:	2002      	movpl	r0, #2
 8006a7a:	4770      	bx	lr
 8006a7c:	b298      	uxth	r0, r3
 8006a7e:	b9a8      	cbnz	r0, 8006aac <__lo0bits+0x52>
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	2010      	movs	r0, #16
 8006a84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a88:	bf04      	itt	eq
 8006a8a:	0a1b      	lsreq	r3, r3, #8
 8006a8c:	3008      	addeq	r0, #8
 8006a8e:	071a      	lsls	r2, r3, #28
 8006a90:	bf04      	itt	eq
 8006a92:	091b      	lsreq	r3, r3, #4
 8006a94:	3004      	addeq	r0, #4
 8006a96:	079a      	lsls	r2, r3, #30
 8006a98:	bf04      	itt	eq
 8006a9a:	089b      	lsreq	r3, r3, #2
 8006a9c:	3002      	addeq	r0, #2
 8006a9e:	07da      	lsls	r2, r3, #31
 8006aa0:	d402      	bmi.n	8006aa8 <__lo0bits+0x4e>
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	d006      	beq.n	8006ab4 <__lo0bits+0x5a>
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	4770      	bx	lr
 8006aac:	4610      	mov	r0, r2
 8006aae:	e7e9      	b.n	8006a84 <__lo0bits+0x2a>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	4770      	bx	lr
 8006ab4:	2020      	movs	r0, #32
 8006ab6:	4770      	bx	lr

08006ab8 <__i2b>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	2101      	movs	r1, #1
 8006abe:	f7ff ff27 	bl	8006910 <_Balloc>
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	6144      	str	r4, [r0, #20]
 8006ac6:	6102      	str	r2, [r0, #16]
 8006ac8:	bd10      	pop	{r4, pc}

08006aca <__multiply>:
 8006aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ace:	4614      	mov	r4, r2
 8006ad0:	690a      	ldr	r2, [r1, #16]
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	bfb8      	it	lt
 8006ad8:	460b      	movlt	r3, r1
 8006ada:	4688      	mov	r8, r1
 8006adc:	bfbc      	itt	lt
 8006ade:	46a0      	movlt	r8, r4
 8006ae0:	461c      	movlt	r4, r3
 8006ae2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ae6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006aee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006af2:	eb07 0609 	add.w	r6, r7, r9
 8006af6:	42b3      	cmp	r3, r6
 8006af8:	bfb8      	it	lt
 8006afa:	3101      	addlt	r1, #1
 8006afc:	f7ff ff08 	bl	8006910 <_Balloc>
 8006b00:	f100 0514 	add.w	r5, r0, #20
 8006b04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006b08:	462b      	mov	r3, r5
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4573      	cmp	r3, lr
 8006b0e:	d316      	bcc.n	8006b3e <__multiply+0x74>
 8006b10:	f104 0214 	add.w	r2, r4, #20
 8006b14:	f108 0114 	add.w	r1, r8, #20
 8006b18:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006b1c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	9201      	str	r2, [sp, #4]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d80c      	bhi.n	8006b44 <__multiply+0x7a>
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	dd03      	ble.n	8006b36 <__multiply+0x6c>
 8006b2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d05d      	beq.n	8006bf2 <__multiply+0x128>
 8006b36:	6106      	str	r6, [r0, #16]
 8006b38:	b003      	add	sp, #12
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	f843 2b04 	str.w	r2, [r3], #4
 8006b42:	e7e3      	b.n	8006b0c <__multiply+0x42>
 8006b44:	f8b2 b000 	ldrh.w	fp, [r2]
 8006b48:	f1bb 0f00 	cmp.w	fp, #0
 8006b4c:	d023      	beq.n	8006b96 <__multiply+0xcc>
 8006b4e:	4689      	mov	r9, r1
 8006b50:	46ac      	mov	ip, r5
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b5a:	f8dc a000 	ldr.w	sl, [ip]
 8006b5e:	b2a3      	uxth	r3, r4
 8006b60:	fa1f fa8a 	uxth.w	sl, sl
 8006b64:	fb0b a303 	mla	r3, fp, r3, sl
 8006b68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b6c:	f8dc 4000 	ldr.w	r4, [ip]
 8006b70:	4443      	add	r3, r8
 8006b72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006b76:	fb0b 840a 	mla	r4, fp, sl, r8
 8006b7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006b7e:	46e2      	mov	sl, ip
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b86:	454f      	cmp	r7, r9
 8006b88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006b8c:	f84a 3b04 	str.w	r3, [sl], #4
 8006b90:	d82b      	bhi.n	8006bea <__multiply+0x120>
 8006b92:	f8cc 8004 	str.w	r8, [ip, #4]
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006b9c:	3204      	adds	r2, #4
 8006b9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ba2:	d020      	beq.n	8006be6 <__multiply+0x11c>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	46a8      	mov	r8, r5
 8006baa:	f04f 0b00 	mov.w	fp, #0
 8006bae:	f8b9 c000 	ldrh.w	ip, [r9]
 8006bb2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006bb6:	fb0a 440c 	mla	r4, sl, ip, r4
 8006bba:	445c      	add	r4, fp
 8006bbc:	46c4      	mov	ip, r8
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006bc4:	f84c 3b04 	str.w	r3, [ip], #4
 8006bc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bcc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006bd0:	0c1b      	lsrs	r3, r3, #16
 8006bd2:	fb0a b303 	mla	r3, sl, r3, fp
 8006bd6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006bda:	454f      	cmp	r7, r9
 8006bdc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006be0:	d805      	bhi.n	8006bee <__multiply+0x124>
 8006be2:	f8c8 3004 	str.w	r3, [r8, #4]
 8006be6:	3504      	adds	r5, #4
 8006be8:	e79b      	b.n	8006b22 <__multiply+0x58>
 8006bea:	46d4      	mov	ip, sl
 8006bec:	e7b3      	b.n	8006b56 <__multiply+0x8c>
 8006bee:	46e0      	mov	r8, ip
 8006bf0:	e7dd      	b.n	8006bae <__multiply+0xe4>
 8006bf2:	3e01      	subs	r6, #1
 8006bf4:	e799      	b.n	8006b2a <__multiply+0x60>
	...

08006bf8 <__pow5mult>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	f012 0203 	ands.w	r2, r2, #3
 8006c02:	4606      	mov	r6, r0
 8006c04:	460f      	mov	r7, r1
 8006c06:	d007      	beq.n	8006c18 <__pow5mult+0x20>
 8006c08:	3a01      	subs	r2, #1
 8006c0a:	4c21      	ldr	r4, [pc, #132]	; (8006c90 <__pow5mult+0x98>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c12:	f7ff fec8 	bl	80069a6 <__multadd>
 8006c16:	4607      	mov	r7, r0
 8006c18:	10ad      	asrs	r5, r5, #2
 8006c1a:	d035      	beq.n	8006c88 <__pow5mult+0x90>
 8006c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c1e:	b93c      	cbnz	r4, 8006c30 <__pow5mult+0x38>
 8006c20:	2010      	movs	r0, #16
 8006c22:	f7ff fe6d 	bl	8006900 <malloc>
 8006c26:	6270      	str	r0, [r6, #36]	; 0x24
 8006c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c2c:	6004      	str	r4, [r0, #0]
 8006c2e:	60c4      	str	r4, [r0, #12]
 8006c30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c38:	b94c      	cbnz	r4, 8006c4e <__pow5mult+0x56>
 8006c3a:	f240 2171 	movw	r1, #625	; 0x271
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ff3a 	bl	8006ab8 <__i2b>
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	07eb      	lsls	r3, r5, #31
 8006c54:	d50a      	bpl.n	8006c6c <__pow5mult+0x74>
 8006c56:	4639      	mov	r1, r7
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff35 	bl	8006aca <__multiply>
 8006c60:	4639      	mov	r1, r7
 8006c62:	4681      	mov	r9, r0
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff fe87 	bl	8006978 <_Bfree>
 8006c6a:	464f      	mov	r7, r9
 8006c6c:	106d      	asrs	r5, r5, #1
 8006c6e:	d00b      	beq.n	8006c88 <__pow5mult+0x90>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	b938      	cbnz	r0, 8006c84 <__pow5mult+0x8c>
 8006c74:	4622      	mov	r2, r4
 8006c76:	4621      	mov	r1, r4
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff ff26 	bl	8006aca <__multiply>
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	f8c0 8000 	str.w	r8, [r0]
 8006c84:	4604      	mov	r4, r0
 8006c86:	e7e4      	b.n	8006c52 <__pow5mult+0x5a>
 8006c88:	4638      	mov	r0, r7
 8006c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8e:	bf00      	nop
 8006c90:	08007aa0 	.word	0x08007aa0

08006c94 <__lshift>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	460c      	mov	r4, r1
 8006c9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	6849      	ldr	r1, [r1, #4]
 8006ca2:	eb0a 0903 	add.w	r9, sl, r3
 8006ca6:	68a3      	ldr	r3, [r4, #8]
 8006ca8:	4607      	mov	r7, r0
 8006caa:	4616      	mov	r6, r2
 8006cac:	f109 0501 	add.w	r5, r9, #1
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	db32      	blt.n	8006d1a <__lshift+0x86>
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff fe2b 	bl	8006910 <_Balloc>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	f100 0114 	add.w	r1, r0, #20
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4553      	cmp	r3, sl
 8006cc6:	db2b      	blt.n	8006d20 <__lshift+0x8c>
 8006cc8:	6920      	ldr	r0, [r4, #16]
 8006cca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cce:	f104 0314 	add.w	r3, r4, #20
 8006cd2:	f016 021f 	ands.w	r2, r6, #31
 8006cd6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cde:	d025      	beq.n	8006d2c <__lshift+0x98>
 8006ce0:	f1c2 0e20 	rsb	lr, r2, #32
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	681e      	ldr	r6, [r3, #0]
 8006ce8:	468a      	mov	sl, r1
 8006cea:	4096      	lsls	r6, r2
 8006cec:	4330      	orrs	r0, r6
 8006cee:	f84a 0b04 	str.w	r0, [sl], #4
 8006cf2:	f853 0b04 	ldr.w	r0, [r3], #4
 8006cf6:	459c      	cmp	ip, r3
 8006cf8:	fa20 f00e 	lsr.w	r0, r0, lr
 8006cfc:	d814      	bhi.n	8006d28 <__lshift+0x94>
 8006cfe:	6048      	str	r0, [r1, #4]
 8006d00:	b108      	cbz	r0, 8006d06 <__lshift+0x72>
 8006d02:	f109 0502 	add.w	r5, r9, #2
 8006d06:	3d01      	subs	r5, #1
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f7ff fe32 	bl	8006978 <_Bfree>
 8006d14:	4640      	mov	r0, r8
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	3101      	adds	r1, #1
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	e7c7      	b.n	8006cb0 <__lshift+0x1c>
 8006d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d24:	3301      	adds	r3, #1
 8006d26:	e7cd      	b.n	8006cc4 <__lshift+0x30>
 8006d28:	4651      	mov	r1, sl
 8006d2a:	e7dc      	b.n	8006ce6 <__lshift+0x52>
 8006d2c:	3904      	subs	r1, #4
 8006d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d32:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d36:	459c      	cmp	ip, r3
 8006d38:	d8f9      	bhi.n	8006d2e <__lshift+0x9a>
 8006d3a:	e7e4      	b.n	8006d06 <__lshift+0x72>

08006d3c <__mcmp>:
 8006d3c:	6903      	ldr	r3, [r0, #16]
 8006d3e:	690a      	ldr	r2, [r1, #16]
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	b530      	push	{r4, r5, lr}
 8006d44:	d10c      	bne.n	8006d60 <__mcmp+0x24>
 8006d46:	0092      	lsls	r2, r2, #2
 8006d48:	3014      	adds	r0, #20
 8006d4a:	3114      	adds	r1, #20
 8006d4c:	1884      	adds	r4, r0, r2
 8006d4e:	4411      	add	r1, r2
 8006d50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d58:	4295      	cmp	r5, r2
 8006d5a:	d003      	beq.n	8006d64 <__mcmp+0x28>
 8006d5c:	d305      	bcc.n	8006d6a <__mcmp+0x2e>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd30      	pop	{r4, r5, pc}
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d3f3      	bcc.n	8006d50 <__mcmp+0x14>
 8006d68:	e7fa      	b.n	8006d60 <__mcmp+0x24>
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e7f7      	b.n	8006d60 <__mcmp+0x24>

08006d70 <__mdiff>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	460d      	mov	r5, r1
 8006d76:	4607      	mov	r7, r0
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	f7ff ffdd 	bl	8006d3c <__mcmp>
 8006d82:	1e06      	subs	r6, r0, #0
 8006d84:	d108      	bne.n	8006d98 <__mdiff+0x28>
 8006d86:	4631      	mov	r1, r6
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff fdc1 	bl	8006910 <_Balloc>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d98:	bfa4      	itt	ge
 8006d9a:	4623      	movge	r3, r4
 8006d9c:	462c      	movge	r4, r5
 8006d9e:	4638      	mov	r0, r7
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	bfa6      	itte	ge
 8006da4:	461d      	movge	r5, r3
 8006da6:	2600      	movge	r6, #0
 8006da8:	2601      	movlt	r6, #1
 8006daa:	f7ff fdb1 	bl	8006910 <_Balloc>
 8006dae:	692b      	ldr	r3, [r5, #16]
 8006db0:	60c6      	str	r6, [r0, #12]
 8006db2:	6926      	ldr	r6, [r4, #16]
 8006db4:	f105 0914 	add.w	r9, r5, #20
 8006db8:	f104 0214 	add.w	r2, r4, #20
 8006dbc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006dc0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006dc4:	f100 0514 	add.w	r5, r0, #20
 8006dc8:	f04f 0e00 	mov.w	lr, #0
 8006dcc:	f852 ab04 	ldr.w	sl, [r2], #4
 8006dd0:	f859 4b04 	ldr.w	r4, [r9], #4
 8006dd4:	fa1e f18a 	uxtah	r1, lr, sl
 8006dd8:	b2a3      	uxth	r3, r4
 8006dda:	1ac9      	subs	r1, r1, r3
 8006ddc:	0c23      	lsrs	r3, r4, #16
 8006dde:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006de2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006de6:	b289      	uxth	r1, r1
 8006de8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006dec:	45c8      	cmp	r8, r9
 8006dee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006df2:	4694      	mov	ip, r2
 8006df4:	f845 3b04 	str.w	r3, [r5], #4
 8006df8:	d8e8      	bhi.n	8006dcc <__mdiff+0x5c>
 8006dfa:	45bc      	cmp	ip, r7
 8006dfc:	d304      	bcc.n	8006e08 <__mdiff+0x98>
 8006dfe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006e02:	b183      	cbz	r3, 8006e26 <__mdiff+0xb6>
 8006e04:	6106      	str	r6, [r0, #16]
 8006e06:	e7c5      	b.n	8006d94 <__mdiff+0x24>
 8006e08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e0c:	fa1e f381 	uxtah	r3, lr, r1
 8006e10:	141a      	asrs	r2, r3, #16
 8006e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e1c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006e20:	f845 3b04 	str.w	r3, [r5], #4
 8006e24:	e7e9      	b.n	8006dfa <__mdiff+0x8a>
 8006e26:	3e01      	subs	r6, #1
 8006e28:	e7e9      	b.n	8006dfe <__mdiff+0x8e>

08006e2a <__d2b>:
 8006e2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e2e:	460e      	mov	r6, r1
 8006e30:	2101      	movs	r1, #1
 8006e32:	ec59 8b10 	vmov	r8, r9, d0
 8006e36:	4615      	mov	r5, r2
 8006e38:	f7ff fd6a 	bl	8006910 <_Balloc>
 8006e3c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e40:	4607      	mov	r7, r0
 8006e42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e46:	bb34      	cbnz	r4, 8006e96 <__d2b+0x6c>
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	f1b8 0300 	subs.w	r3, r8, #0
 8006e4e:	d027      	beq.n	8006ea0 <__d2b+0x76>
 8006e50:	a802      	add	r0, sp, #8
 8006e52:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006e56:	f7ff fe00 	bl	8006a5a <__lo0bits>
 8006e5a:	9900      	ldr	r1, [sp, #0]
 8006e5c:	b1f0      	cbz	r0, 8006e9c <__d2b+0x72>
 8006e5e:	9a01      	ldr	r2, [sp, #4]
 8006e60:	f1c0 0320 	rsb	r3, r0, #32
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	40c2      	lsrs	r2, r0
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	9201      	str	r2, [sp, #4]
 8006e70:	9b01      	ldr	r3, [sp, #4]
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf14      	ite	ne
 8006e78:	2102      	movne	r1, #2
 8006e7a:	2101      	moveq	r1, #1
 8006e7c:	6139      	str	r1, [r7, #16]
 8006e7e:	b1c4      	cbz	r4, 8006eb2 <__d2b+0x88>
 8006e80:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006e84:	4404      	add	r4, r0
 8006e86:	6034      	str	r4, [r6, #0]
 8006e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e8c:	6028      	str	r0, [r5, #0]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	b003      	add	sp, #12
 8006e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e9a:	e7d5      	b.n	8006e48 <__d2b+0x1e>
 8006e9c:	6179      	str	r1, [r7, #20]
 8006e9e:	e7e7      	b.n	8006e70 <__d2b+0x46>
 8006ea0:	a801      	add	r0, sp, #4
 8006ea2:	f7ff fdda 	bl	8006a5a <__lo0bits>
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6139      	str	r1, [r7, #16]
 8006eae:	3020      	adds	r0, #32
 8006eb0:	e7e5      	b.n	8006e7e <__d2b+0x54>
 8006eb2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006eb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006eba:	6030      	str	r0, [r6, #0]
 8006ebc:	6918      	ldr	r0, [r3, #16]
 8006ebe:	f7ff fdad 	bl	8006a1c <__hi0bits>
 8006ec2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ec6:	e7e1      	b.n	8006e8c <__d2b+0x62>

08006ec8 <_calloc_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	fb02 f401 	mul.w	r4, r2, r1
 8006ece:	4621      	mov	r1, r4
 8006ed0:	f000 f856 	bl	8006f80 <_malloc_r>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	b118      	cbz	r0, 8006ee0 <_calloc_r+0x18>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	2100      	movs	r1, #0
 8006edc:	f7fe f963 	bl	80051a6 <memset>
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}

08006ee4 <_free_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d045      	beq.n	8006f78 <_free_r+0x94>
 8006eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef0:	1f0c      	subs	r4, r1, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bfb8      	it	lt
 8006ef6:	18e4      	addlt	r4, r4, r3
 8006ef8:	f000 fc80 	bl	80077fc <__malloc_lock>
 8006efc:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <_free_r+0x98>)
 8006efe:	6813      	ldr	r3, [r2, #0]
 8006f00:	4610      	mov	r0, r2
 8006f02:	b933      	cbnz	r3, 8006f12 <_free_r+0x2e>
 8006f04:	6063      	str	r3, [r4, #4]
 8006f06:	6014      	str	r4, [r2, #0]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f0e:	f000 bc76 	b.w	80077fe <__malloc_unlock>
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	d90c      	bls.n	8006f30 <_free_r+0x4c>
 8006f16:	6821      	ldr	r1, [r4, #0]
 8006f18:	1862      	adds	r2, r4, r1
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	bf04      	itt	eq
 8006f1e:	681a      	ldreq	r2, [r3, #0]
 8006f20:	685b      	ldreq	r3, [r3, #4]
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	bf04      	itt	eq
 8006f26:	1852      	addeq	r2, r2, r1
 8006f28:	6022      	streq	r2, [r4, #0]
 8006f2a:	6004      	str	r4, [r0, #0]
 8006f2c:	e7ec      	b.n	8006f08 <_free_r+0x24>
 8006f2e:	4613      	mov	r3, r2
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	b10a      	cbz	r2, 8006f38 <_free_r+0x54>
 8006f34:	42a2      	cmp	r2, r4
 8006f36:	d9fa      	bls.n	8006f2e <_free_r+0x4a>
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	1858      	adds	r0, r3, r1
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d10b      	bne.n	8006f58 <_free_r+0x74>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	4401      	add	r1, r0
 8006f44:	1858      	adds	r0, r3, r1
 8006f46:	4282      	cmp	r2, r0
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	d1dd      	bne.n	8006f08 <_free_r+0x24>
 8006f4c:	6810      	ldr	r0, [r2, #0]
 8006f4e:	6852      	ldr	r2, [r2, #4]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	4401      	add	r1, r0
 8006f54:	6019      	str	r1, [r3, #0]
 8006f56:	e7d7      	b.n	8006f08 <_free_r+0x24>
 8006f58:	d902      	bls.n	8006f60 <_free_r+0x7c>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	e7d3      	b.n	8006f08 <_free_r+0x24>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428a      	cmp	r2, r1
 8006f66:	bf04      	itt	eq
 8006f68:	6811      	ldreq	r1, [r2, #0]
 8006f6a:	6852      	ldreq	r2, [r2, #4]
 8006f6c:	6062      	str	r2, [r4, #4]
 8006f6e:	bf04      	itt	eq
 8006f70:	1809      	addeq	r1, r1, r0
 8006f72:	6021      	streq	r1, [r4, #0]
 8006f74:	605c      	str	r4, [r3, #4]
 8006f76:	e7c7      	b.n	8006f08 <_free_r+0x24>
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000610 	.word	0x20000610

08006f80 <_malloc_r>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	1ccd      	adds	r5, r1, #3
 8006f84:	f025 0503 	bic.w	r5, r5, #3
 8006f88:	3508      	adds	r5, #8
 8006f8a:	2d0c      	cmp	r5, #12
 8006f8c:	bf38      	it	cc
 8006f8e:	250c      	movcc	r5, #12
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	4606      	mov	r6, r0
 8006f94:	db01      	blt.n	8006f9a <_malloc_r+0x1a>
 8006f96:	42a9      	cmp	r1, r5
 8006f98:	d903      	bls.n	8006fa2 <_malloc_r+0x22>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	6033      	str	r3, [r6, #0]
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	f000 fc2b 	bl	80077fc <__malloc_lock>
 8006fa6:	4a21      	ldr	r2, [pc, #132]	; (800702c <_malloc_r+0xac>)
 8006fa8:	6814      	ldr	r4, [r2, #0]
 8006faa:	4621      	mov	r1, r4
 8006fac:	b991      	cbnz	r1, 8006fd4 <_malloc_r+0x54>
 8006fae:	4c20      	ldr	r4, [pc, #128]	; (8007030 <_malloc_r+0xb0>)
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	b91b      	cbnz	r3, 8006fbc <_malloc_r+0x3c>
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 f9b3 	bl	8007320 <_sbrk_r>
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f000 f9ae 	bl	8007320 <_sbrk_r>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d124      	bne.n	8007012 <_malloc_r+0x92>
 8006fc8:	230c      	movs	r3, #12
 8006fca:	6033      	str	r3, [r6, #0]
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f000 fc16 	bl	80077fe <__malloc_unlock>
 8006fd2:	e7e4      	b.n	8006f9e <_malloc_r+0x1e>
 8006fd4:	680b      	ldr	r3, [r1, #0]
 8006fd6:	1b5b      	subs	r3, r3, r5
 8006fd8:	d418      	bmi.n	800700c <_malloc_r+0x8c>
 8006fda:	2b0b      	cmp	r3, #11
 8006fdc:	d90f      	bls.n	8006ffe <_malloc_r+0x7e>
 8006fde:	600b      	str	r3, [r1, #0]
 8006fe0:	50cd      	str	r5, [r1, r3]
 8006fe2:	18cc      	adds	r4, r1, r3
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f000 fc0a 	bl	80077fe <__malloc_unlock>
 8006fea:	f104 000b 	add.w	r0, r4, #11
 8006fee:	1d23      	adds	r3, r4, #4
 8006ff0:	f020 0007 	bic.w	r0, r0, #7
 8006ff4:	1ac3      	subs	r3, r0, r3
 8006ff6:	d0d3      	beq.n	8006fa0 <_malloc_r+0x20>
 8006ff8:	425a      	negs	r2, r3
 8006ffa:	50e2      	str	r2, [r4, r3]
 8006ffc:	e7d0      	b.n	8006fa0 <_malloc_r+0x20>
 8006ffe:	428c      	cmp	r4, r1
 8007000:	684b      	ldr	r3, [r1, #4]
 8007002:	bf16      	itet	ne
 8007004:	6063      	strne	r3, [r4, #4]
 8007006:	6013      	streq	r3, [r2, #0]
 8007008:	460c      	movne	r4, r1
 800700a:	e7eb      	b.n	8006fe4 <_malloc_r+0x64>
 800700c:	460c      	mov	r4, r1
 800700e:	6849      	ldr	r1, [r1, #4]
 8007010:	e7cc      	b.n	8006fac <_malloc_r+0x2c>
 8007012:	1cc4      	adds	r4, r0, #3
 8007014:	f024 0403 	bic.w	r4, r4, #3
 8007018:	42a0      	cmp	r0, r4
 800701a:	d005      	beq.n	8007028 <_malloc_r+0xa8>
 800701c:	1a21      	subs	r1, r4, r0
 800701e:	4630      	mov	r0, r6
 8007020:	f000 f97e 	bl	8007320 <_sbrk_r>
 8007024:	3001      	adds	r0, #1
 8007026:	d0cf      	beq.n	8006fc8 <_malloc_r+0x48>
 8007028:	6025      	str	r5, [r4, #0]
 800702a:	e7db      	b.n	8006fe4 <_malloc_r+0x64>
 800702c:	20000610 	.word	0x20000610
 8007030:	20000614 	.word	0x20000614

08007034 <__sfputc_r>:
 8007034:	6893      	ldr	r3, [r2, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	b410      	push	{r4}
 800703c:	6093      	str	r3, [r2, #8]
 800703e:	da08      	bge.n	8007052 <__sfputc_r+0x1e>
 8007040:	6994      	ldr	r4, [r2, #24]
 8007042:	42a3      	cmp	r3, r4
 8007044:	db01      	blt.n	800704a <__sfputc_r+0x16>
 8007046:	290a      	cmp	r1, #10
 8007048:	d103      	bne.n	8007052 <__sfputc_r+0x1e>
 800704a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704e:	f000 b9bb 	b.w	80073c8 <__swbuf_r>
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	1c58      	adds	r0, r3, #1
 8007056:	6010      	str	r0, [r2, #0]
 8007058:	7019      	strb	r1, [r3, #0]
 800705a:	4608      	mov	r0, r1
 800705c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007060:	4770      	bx	lr

08007062 <__sfputs_r>:
 8007062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	4614      	mov	r4, r2
 800706a:	18d5      	adds	r5, r2, r3
 800706c:	42ac      	cmp	r4, r5
 800706e:	d101      	bne.n	8007074 <__sfputs_r+0x12>
 8007070:	2000      	movs	r0, #0
 8007072:	e007      	b.n	8007084 <__sfputs_r+0x22>
 8007074:	463a      	mov	r2, r7
 8007076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ffda 	bl	8007034 <__sfputc_r>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d1f3      	bne.n	800706c <__sfputs_r+0xa>
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007088 <_vfiprintf_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	b09d      	sub	sp, #116	; 0x74
 8007090:	4617      	mov	r7, r2
 8007092:	461d      	mov	r5, r3
 8007094:	4606      	mov	r6, r0
 8007096:	b118      	cbz	r0, 80070a0 <_vfiprintf_r+0x18>
 8007098:	6983      	ldr	r3, [r0, #24]
 800709a:	b90b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x18>
 800709c:	f7ff fb98 	bl	80067d0 <__sinit>
 80070a0:	4b7c      	ldr	r3, [pc, #496]	; (8007294 <_vfiprintf_r+0x20c>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d158      	bne.n	8007158 <_vfiprintf_r+0xd0>
 80070a6:	6874      	ldr	r4, [r6, #4]
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	0718      	lsls	r0, r3, #28
 80070ac:	d55e      	bpl.n	800716c <_vfiprintf_r+0xe4>
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05b      	beq.n	800716c <_vfiprintf_r+0xe4>
 80070b4:	2300      	movs	r3, #0
 80070b6:	9309      	str	r3, [sp, #36]	; 0x24
 80070b8:	2320      	movs	r3, #32
 80070ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070be:	2330      	movs	r3, #48	; 0x30
 80070c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c4:	9503      	str	r5, [sp, #12]
 80070c6:	f04f 0b01 	mov.w	fp, #1
 80070ca:	46b8      	mov	r8, r7
 80070cc:	4645      	mov	r5, r8
 80070ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070d2:	b10b      	cbz	r3, 80070d8 <_vfiprintf_r+0x50>
 80070d4:	2b25      	cmp	r3, #37	; 0x25
 80070d6:	d154      	bne.n	8007182 <_vfiprintf_r+0xfa>
 80070d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80070dc:	d00b      	beq.n	80070f6 <_vfiprintf_r+0x6e>
 80070de:	4653      	mov	r3, sl
 80070e0:	463a      	mov	r2, r7
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff ffbc 	bl	8007062 <__sfputs_r>
 80070ea:	3001      	adds	r0, #1
 80070ec:	f000 80c2 	beq.w	8007274 <_vfiprintf_r+0x1ec>
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	4453      	add	r3, sl
 80070f4:	9309      	str	r3, [sp, #36]	; 0x24
 80070f6:	f898 3000 	ldrb.w	r3, [r8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80ba 	beq.w	8007274 <_vfiprintf_r+0x1ec>
 8007100:	2300      	movs	r3, #0
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007112:	931a      	str	r3, [sp, #104]	; 0x68
 8007114:	46a8      	mov	r8, r5
 8007116:	2205      	movs	r2, #5
 8007118:	f818 1b01 	ldrb.w	r1, [r8], #1
 800711c:	485e      	ldr	r0, [pc, #376]	; (8007298 <_vfiprintf_r+0x210>)
 800711e:	f7f9 f887 	bl	8000230 <memchr>
 8007122:	9b04      	ldr	r3, [sp, #16]
 8007124:	bb78      	cbnz	r0, 8007186 <_vfiprintf_r+0xfe>
 8007126:	06d9      	lsls	r1, r3, #27
 8007128:	bf44      	itt	mi
 800712a:	2220      	movmi	r2, #32
 800712c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007130:	071a      	lsls	r2, r3, #28
 8007132:	bf44      	itt	mi
 8007134:	222b      	movmi	r2, #43	; 0x2b
 8007136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800713a:	782a      	ldrb	r2, [r5, #0]
 800713c:	2a2a      	cmp	r2, #42	; 0x2a
 800713e:	d02a      	beq.n	8007196 <_vfiprintf_r+0x10e>
 8007140:	9a07      	ldr	r2, [sp, #28]
 8007142:	46a8      	mov	r8, r5
 8007144:	2000      	movs	r0, #0
 8007146:	250a      	movs	r5, #10
 8007148:	4641      	mov	r1, r8
 800714a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714e:	3b30      	subs	r3, #48	; 0x30
 8007150:	2b09      	cmp	r3, #9
 8007152:	d969      	bls.n	8007228 <_vfiprintf_r+0x1a0>
 8007154:	b360      	cbz	r0, 80071b0 <_vfiprintf_r+0x128>
 8007156:	e024      	b.n	80071a2 <_vfiprintf_r+0x11a>
 8007158:	4b50      	ldr	r3, [pc, #320]	; (800729c <_vfiprintf_r+0x214>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d101      	bne.n	8007162 <_vfiprintf_r+0xda>
 800715e:	68b4      	ldr	r4, [r6, #8]
 8007160:	e7a2      	b.n	80070a8 <_vfiprintf_r+0x20>
 8007162:	4b4f      	ldr	r3, [pc, #316]	; (80072a0 <_vfiprintf_r+0x218>)
 8007164:	429c      	cmp	r4, r3
 8007166:	bf08      	it	eq
 8007168:	68f4      	ldreq	r4, [r6, #12]
 800716a:	e79d      	b.n	80070a8 <_vfiprintf_r+0x20>
 800716c:	4621      	mov	r1, r4
 800716e:	4630      	mov	r0, r6
 8007170:	f000 f98e 	bl	8007490 <__swsetup_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	d09d      	beq.n	80070b4 <_vfiprintf_r+0x2c>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	b01d      	add	sp, #116	; 0x74
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	46a8      	mov	r8, r5
 8007184:	e7a2      	b.n	80070cc <_vfiprintf_r+0x44>
 8007186:	4a44      	ldr	r2, [pc, #272]	; (8007298 <_vfiprintf_r+0x210>)
 8007188:	1a80      	subs	r0, r0, r2
 800718a:	fa0b f000 	lsl.w	r0, fp, r0
 800718e:	4318      	orrs	r0, r3
 8007190:	9004      	str	r0, [sp, #16]
 8007192:	4645      	mov	r5, r8
 8007194:	e7be      	b.n	8007114 <_vfiprintf_r+0x8c>
 8007196:	9a03      	ldr	r2, [sp, #12]
 8007198:	1d11      	adds	r1, r2, #4
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	2a00      	cmp	r2, #0
 80071a0:	db01      	blt.n	80071a6 <_vfiprintf_r+0x11e>
 80071a2:	9207      	str	r2, [sp, #28]
 80071a4:	e004      	b.n	80071b0 <_vfiprintf_r+0x128>
 80071a6:	4252      	negs	r2, r2
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	9207      	str	r2, [sp, #28]
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	f898 3000 	ldrb.w	r3, [r8]
 80071b4:	2b2e      	cmp	r3, #46	; 0x2e
 80071b6:	d10e      	bne.n	80071d6 <_vfiprintf_r+0x14e>
 80071b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80071bc:	2b2a      	cmp	r3, #42	; 0x2a
 80071be:	d138      	bne.n	8007232 <_vfiprintf_r+0x1aa>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	1d1a      	adds	r2, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	9203      	str	r2, [sp, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfb8      	it	lt
 80071cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80071d0:	f108 0802 	add.w	r8, r8, #2
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	4d33      	ldr	r5, [pc, #204]	; (80072a4 <_vfiprintf_r+0x21c>)
 80071d8:	f898 1000 	ldrb.w	r1, [r8]
 80071dc:	2203      	movs	r2, #3
 80071de:	4628      	mov	r0, r5
 80071e0:	f7f9 f826 	bl	8000230 <memchr>
 80071e4:	b140      	cbz	r0, 80071f8 <_vfiprintf_r+0x170>
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	1b40      	subs	r0, r0, r5
 80071ea:	fa03 f000 	lsl.w	r0, r3, r0
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	4303      	orrs	r3, r0
 80071f2:	f108 0801 	add.w	r8, r8, #1
 80071f6:	9304      	str	r3, [sp, #16]
 80071f8:	f898 1000 	ldrb.w	r1, [r8]
 80071fc:	482a      	ldr	r0, [pc, #168]	; (80072a8 <_vfiprintf_r+0x220>)
 80071fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007202:	2206      	movs	r2, #6
 8007204:	f108 0701 	add.w	r7, r8, #1
 8007208:	f7f9 f812 	bl	8000230 <memchr>
 800720c:	2800      	cmp	r0, #0
 800720e:	d037      	beq.n	8007280 <_vfiprintf_r+0x1f8>
 8007210:	4b26      	ldr	r3, [pc, #152]	; (80072ac <_vfiprintf_r+0x224>)
 8007212:	bb1b      	cbnz	r3, 800725c <_vfiprintf_r+0x1d4>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	3307      	adds	r3, #7
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	3308      	adds	r3, #8
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	444b      	add	r3, r9
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	e750      	b.n	80070ca <_vfiprintf_r+0x42>
 8007228:	fb05 3202 	mla	r2, r5, r2, r3
 800722c:	2001      	movs	r0, #1
 800722e:	4688      	mov	r8, r1
 8007230:	e78a      	b.n	8007148 <_vfiprintf_r+0xc0>
 8007232:	2300      	movs	r3, #0
 8007234:	f108 0801 	add.w	r8, r8, #1
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	4619      	mov	r1, r3
 800723c:	250a      	movs	r5, #10
 800723e:	4640      	mov	r0, r8
 8007240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007244:	3a30      	subs	r2, #48	; 0x30
 8007246:	2a09      	cmp	r2, #9
 8007248:	d903      	bls.n	8007252 <_vfiprintf_r+0x1ca>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c3      	beq.n	80071d6 <_vfiprintf_r+0x14e>
 800724e:	9105      	str	r1, [sp, #20]
 8007250:	e7c1      	b.n	80071d6 <_vfiprintf_r+0x14e>
 8007252:	fb05 2101 	mla	r1, r5, r1, r2
 8007256:	2301      	movs	r3, #1
 8007258:	4680      	mov	r8, r0
 800725a:	e7f0      	b.n	800723e <_vfiprintf_r+0x1b6>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4622      	mov	r2, r4
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <_vfiprintf_r+0x228>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4630      	mov	r0, r6
 8007268:	f7fe f83a 	bl	80052e0 <_printf_float>
 800726c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007270:	4681      	mov	r9, r0
 8007272:	d1d5      	bne.n	8007220 <_vfiprintf_r+0x198>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	065b      	lsls	r3, r3, #25
 8007278:	f53f af7e 	bmi.w	8007178 <_vfiprintf_r+0xf0>
 800727c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800727e:	e77d      	b.n	800717c <_vfiprintf_r+0xf4>
 8007280:	ab03      	add	r3, sp, #12
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4622      	mov	r2, r4
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <_vfiprintf_r+0x228>)
 8007288:	a904      	add	r1, sp, #16
 800728a:	4630      	mov	r0, r6
 800728c:	f7fe fade 	bl	800584c <_printf_i>
 8007290:	e7ec      	b.n	800726c <_vfiprintf_r+0x1e4>
 8007292:	bf00      	nop
 8007294:	08007970 	.word	0x08007970
 8007298:	08007aac 	.word	0x08007aac
 800729c:	08007990 	.word	0x08007990
 80072a0:	08007950 	.word	0x08007950
 80072a4:	08007ab2 	.word	0x08007ab2
 80072a8:	08007ab6 	.word	0x08007ab6
 80072ac:	080052e1 	.word	0x080052e1
 80072b0:	08007063 	.word	0x08007063

080072b4 <_putc_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	460d      	mov	r5, r1
 80072b8:	4614      	mov	r4, r2
 80072ba:	4606      	mov	r6, r0
 80072bc:	b118      	cbz	r0, 80072c6 <_putc_r+0x12>
 80072be:	6983      	ldr	r3, [r0, #24]
 80072c0:	b90b      	cbnz	r3, 80072c6 <_putc_r+0x12>
 80072c2:	f7ff fa85 	bl	80067d0 <__sinit>
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <_putc_r+0x60>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	d112      	bne.n	80072f2 <_putc_r+0x3e>
 80072cc:	6874      	ldr	r4, [r6, #4]
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	60a3      	str	r3, [r4, #8]
 80072d6:	da16      	bge.n	8007306 <_putc_r+0x52>
 80072d8:	69a2      	ldr	r2, [r4, #24]
 80072da:	4293      	cmp	r3, r2
 80072dc:	db02      	blt.n	80072e4 <_putc_r+0x30>
 80072de:	b2eb      	uxtb	r3, r5
 80072e0:	2b0a      	cmp	r3, #10
 80072e2:	d110      	bne.n	8007306 <_putc_r+0x52>
 80072e4:	4622      	mov	r2, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072ee:	f000 b86b 	b.w	80073c8 <__swbuf_r>
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <_putc_r+0x64>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	d101      	bne.n	80072fc <_putc_r+0x48>
 80072f8:	68b4      	ldr	r4, [r6, #8]
 80072fa:	e7e8      	b.n	80072ce <_putc_r+0x1a>
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <_putc_r+0x68>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	bf08      	it	eq
 8007302:	68f4      	ldreq	r4, [r6, #12]
 8007304:	e7e3      	b.n	80072ce <_putc_r+0x1a>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	701d      	strb	r5, [r3, #0]
 800730e:	b2e8      	uxtb	r0, r5
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	bf00      	nop
 8007314:	08007970 	.word	0x08007970
 8007318:	08007990 	.word	0x08007990
 800731c:	08007950 	.word	0x08007950

08007320 <_sbrk_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4c06      	ldr	r4, [pc, #24]	; (800733c <_sbrk_r+0x1c>)
 8007324:	2300      	movs	r3, #0
 8007326:	4605      	mov	r5, r0
 8007328:	4608      	mov	r0, r1
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	f7fd fcae 	bl	8004c8c <_sbrk>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_sbrk_r+0x1a>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	b103      	cbz	r3, 800733a <_sbrk_r+0x1a>
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20000be0 	.word	0x20000be0

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 fa5a 	bl	8007800 <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	; 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	05db      	lsls	r3, r3, #23
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	f000 f9b6 	bl	80076ec <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	4628      	mov	r0, r5
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b869 	b.w	800746c <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f9a3 	bl	80076ec <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b8d3 	b.w	800756c <_close_r>
	...

080073c8 <__swbuf_r>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	460e      	mov	r6, r1
 80073cc:	4614      	mov	r4, r2
 80073ce:	4605      	mov	r5, r0
 80073d0:	b118      	cbz	r0, 80073da <__swbuf_r+0x12>
 80073d2:	6983      	ldr	r3, [r0, #24]
 80073d4:	b90b      	cbnz	r3, 80073da <__swbuf_r+0x12>
 80073d6:	f7ff f9fb 	bl	80067d0 <__sinit>
 80073da:	4b21      	ldr	r3, [pc, #132]	; (8007460 <__swbuf_r+0x98>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d12a      	bne.n	8007436 <__swbuf_r+0x6e>
 80073e0:	686c      	ldr	r4, [r5, #4]
 80073e2:	69a3      	ldr	r3, [r4, #24]
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	071a      	lsls	r2, r3, #28
 80073ea:	d52e      	bpl.n	800744a <__swbuf_r+0x82>
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	b363      	cbz	r3, 800744a <__swbuf_r+0x82>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	1ac0      	subs	r0, r0, r3
 80073f6:	6963      	ldr	r3, [r4, #20]
 80073f8:	b2f6      	uxtb	r6, r6
 80073fa:	4283      	cmp	r3, r0
 80073fc:	4637      	mov	r7, r6
 80073fe:	dc04      	bgt.n	800740a <__swbuf_r+0x42>
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f948 	bl	8007698 <_fflush_r>
 8007408:	bb28      	cbnz	r0, 8007456 <__swbuf_r+0x8e>
 800740a:	68a3      	ldr	r3, [r4, #8]
 800740c:	3b01      	subs	r3, #1
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	701e      	strb	r6, [r3, #0]
 8007418:	6963      	ldr	r3, [r4, #20]
 800741a:	3001      	adds	r0, #1
 800741c:	4283      	cmp	r3, r0
 800741e:	d004      	beq.n	800742a <__swbuf_r+0x62>
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d519      	bpl.n	800745a <__swbuf_r+0x92>
 8007426:	2e0a      	cmp	r6, #10
 8007428:	d117      	bne.n	800745a <__swbuf_r+0x92>
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f000 f933 	bl	8007698 <_fflush_r>
 8007432:	b190      	cbz	r0, 800745a <__swbuf_r+0x92>
 8007434:	e00f      	b.n	8007456 <__swbuf_r+0x8e>
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <__swbuf_r+0x9c>)
 8007438:	429c      	cmp	r4, r3
 800743a:	d101      	bne.n	8007440 <__swbuf_r+0x78>
 800743c:	68ac      	ldr	r4, [r5, #8]
 800743e:	e7d0      	b.n	80073e2 <__swbuf_r+0x1a>
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <__swbuf_r+0xa0>)
 8007442:	429c      	cmp	r4, r3
 8007444:	bf08      	it	eq
 8007446:	68ec      	ldreq	r4, [r5, #12]
 8007448:	e7cb      	b.n	80073e2 <__swbuf_r+0x1a>
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f81f 	bl	8007490 <__swsetup_r>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0cc      	beq.n	80073f0 <__swbuf_r+0x28>
 8007456:	f04f 37ff 	mov.w	r7, #4294967295
 800745a:	4638      	mov	r0, r7
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745e:	bf00      	nop
 8007460:	08007970 	.word	0x08007970
 8007464:	08007990 	.word	0x08007990
 8007468:	08007950 	.word	0x08007950

0800746c <_write_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4c07      	ldr	r4, [pc, #28]	; (800748c <_write_r+0x20>)
 8007470:	4605      	mov	r5, r0
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	2200      	movs	r2, #0
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7fd fbc1 	bl	8004c02 <_write>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_write_r+0x1e>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	b103      	cbz	r3, 800748a <_write_r+0x1e>
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000be0 	.word	0x20000be0

08007490 <__swsetup_r>:
 8007490:	4b32      	ldr	r3, [pc, #200]	; (800755c <__swsetup_r+0xcc>)
 8007492:	b570      	push	{r4, r5, r6, lr}
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	4606      	mov	r6, r0
 8007498:	460c      	mov	r4, r1
 800749a:	b125      	cbz	r5, 80074a6 <__swsetup_r+0x16>
 800749c:	69ab      	ldr	r3, [r5, #24]
 800749e:	b913      	cbnz	r3, 80074a6 <__swsetup_r+0x16>
 80074a0:	4628      	mov	r0, r5
 80074a2:	f7ff f995 	bl	80067d0 <__sinit>
 80074a6:	4b2e      	ldr	r3, [pc, #184]	; (8007560 <__swsetup_r+0xd0>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d10f      	bne.n	80074cc <__swsetup_r+0x3c>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	0715      	lsls	r5, r2, #28
 80074b6:	d42c      	bmi.n	8007512 <__swsetup_r+0x82>
 80074b8:	06d0      	lsls	r0, r2, #27
 80074ba:	d411      	bmi.n	80074e0 <__swsetup_r+0x50>
 80074bc:	2209      	movs	r2, #9
 80074be:	6032      	str	r2, [r6, #0]
 80074c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	e03e      	b.n	800754a <__swsetup_r+0xba>
 80074cc:	4b25      	ldr	r3, [pc, #148]	; (8007564 <__swsetup_r+0xd4>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	d101      	bne.n	80074d6 <__swsetup_r+0x46>
 80074d2:	68ac      	ldr	r4, [r5, #8]
 80074d4:	e7eb      	b.n	80074ae <__swsetup_r+0x1e>
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <__swsetup_r+0xd8>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	bf08      	it	eq
 80074dc:	68ec      	ldreq	r4, [r5, #12]
 80074de:	e7e6      	b.n	80074ae <__swsetup_r+0x1e>
 80074e0:	0751      	lsls	r1, r2, #29
 80074e2:	d512      	bpl.n	800750a <__swsetup_r+0x7a>
 80074e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074e6:	b141      	cbz	r1, 80074fa <__swsetup_r+0x6a>
 80074e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ec:	4299      	cmp	r1, r3
 80074ee:	d002      	beq.n	80074f6 <__swsetup_r+0x66>
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff fcf7 	bl	8006ee4 <_free_r>
 80074f6:	2300      	movs	r3, #0
 80074f8:	6363      	str	r3, [r4, #52]	; 0x34
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	2300      	movs	r3, #0
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f043 0308 	orr.w	r3, r3, #8
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	b94b      	cbnz	r3, 800752a <__swsetup_r+0x9a>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d003      	beq.n	800752a <__swsetup_r+0x9a>
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f917 	bl	8007758 <__smakebuf_r>
 800752a:	89a2      	ldrh	r2, [r4, #12]
 800752c:	f012 0301 	ands.w	r3, r2, #1
 8007530:	d00c      	beq.n	800754c <__swsetup_r+0xbc>
 8007532:	2300      	movs	r3, #0
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	6963      	ldr	r3, [r4, #20]
 8007538:	425b      	negs	r3, r3
 800753a:	61a3      	str	r3, [r4, #24]
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	b953      	cbnz	r3, 8007556 <__swsetup_r+0xc6>
 8007540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007544:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007548:	d1ba      	bne.n	80074c0 <__swsetup_r+0x30>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	0792      	lsls	r2, r2, #30
 800754e:	bf58      	it	pl
 8007550:	6963      	ldrpl	r3, [r4, #20]
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	e7f2      	b.n	800753c <__swsetup_r+0xac>
 8007556:	2000      	movs	r0, #0
 8007558:	e7f7      	b.n	800754a <__swsetup_r+0xba>
 800755a:	bf00      	nop
 800755c:	2000000c 	.word	0x2000000c
 8007560:	08007970 	.word	0x08007970
 8007564:	08007990 	.word	0x08007990
 8007568:	08007950 	.word	0x08007950

0800756c <_close_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4c06      	ldr	r4, [pc, #24]	; (8007588 <_close_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4605      	mov	r5, r0
 8007574:	4608      	mov	r0, r1
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	f7fd fb54 	bl	8004c24 <_close>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_close_r+0x1a>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	b103      	cbz	r3, 8007586 <_close_r+0x1a>
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000be0 	.word	0x20000be0

0800758c <__sflush_r>:
 800758c:	898a      	ldrh	r2, [r1, #12]
 800758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	0710      	lsls	r0, r2, #28
 8007596:	460c      	mov	r4, r1
 8007598:	d458      	bmi.n	800764c <__sflush_r+0xc0>
 800759a:	684b      	ldr	r3, [r1, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc05      	bgt.n	80075ac <__sflush_r+0x20>
 80075a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dc02      	bgt.n	80075ac <__sflush_r+0x20>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	d0f9      	beq.n	80075a6 <__sflush_r+0x1a>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b8:	682f      	ldr	r7, [r5, #0]
 80075ba:	6a21      	ldr	r1, [r4, #32]
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	d032      	beq.n	8007626 <__sflush_r+0x9a>
 80075c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	075a      	lsls	r2, r3, #29
 80075c6:	d505      	bpl.n	80075d4 <__sflush_r+0x48>
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	1ac0      	subs	r0, r0, r3
 80075cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075ce:	b10b      	cbz	r3, 80075d4 <__sflush_r+0x48>
 80075d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075d2:	1ac0      	subs	r0, r0, r3
 80075d4:	2300      	movs	r3, #0
 80075d6:	4602      	mov	r2, r0
 80075d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075da:	6a21      	ldr	r1, [r4, #32]
 80075dc:	4628      	mov	r0, r5
 80075de:	47b0      	blx	r6
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	d106      	bne.n	80075f4 <__sflush_r+0x68>
 80075e6:	6829      	ldr	r1, [r5, #0]
 80075e8:	291d      	cmp	r1, #29
 80075ea:	d848      	bhi.n	800767e <__sflush_r+0xf2>
 80075ec:	4a29      	ldr	r2, [pc, #164]	; (8007694 <__sflush_r+0x108>)
 80075ee:	40ca      	lsrs	r2, r1
 80075f0:	07d6      	lsls	r6, r2, #31
 80075f2:	d544      	bpl.n	800767e <__sflush_r+0xf2>
 80075f4:	2200      	movs	r2, #0
 80075f6:	6062      	str	r2, [r4, #4]
 80075f8:	04d9      	lsls	r1, r3, #19
 80075fa:	6922      	ldr	r2, [r4, #16]
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	d504      	bpl.n	800760a <__sflush_r+0x7e>
 8007600:	1c42      	adds	r2, r0, #1
 8007602:	d101      	bne.n	8007608 <__sflush_r+0x7c>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b903      	cbnz	r3, 800760a <__sflush_r+0x7e>
 8007608:	6560      	str	r0, [r4, #84]	; 0x54
 800760a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800760c:	602f      	str	r7, [r5, #0]
 800760e:	2900      	cmp	r1, #0
 8007610:	d0c9      	beq.n	80075a6 <__sflush_r+0x1a>
 8007612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007616:	4299      	cmp	r1, r3
 8007618:	d002      	beq.n	8007620 <__sflush_r+0x94>
 800761a:	4628      	mov	r0, r5
 800761c:	f7ff fc62 	bl	8006ee4 <_free_r>
 8007620:	2000      	movs	r0, #0
 8007622:	6360      	str	r0, [r4, #52]	; 0x34
 8007624:	e7c0      	b.n	80075a8 <__sflush_r+0x1c>
 8007626:	2301      	movs	r3, #1
 8007628:	4628      	mov	r0, r5
 800762a:	47b0      	blx	r6
 800762c:	1c41      	adds	r1, r0, #1
 800762e:	d1c8      	bne.n	80075c2 <__sflush_r+0x36>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0c5      	beq.n	80075c2 <__sflush_r+0x36>
 8007636:	2b1d      	cmp	r3, #29
 8007638:	d001      	beq.n	800763e <__sflush_r+0xb2>
 800763a:	2b16      	cmp	r3, #22
 800763c:	d101      	bne.n	8007642 <__sflush_r+0xb6>
 800763e:	602f      	str	r7, [r5, #0]
 8007640:	e7b1      	b.n	80075a6 <__sflush_r+0x1a>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	e7ad      	b.n	80075a8 <__sflush_r+0x1c>
 800764c:	690f      	ldr	r7, [r1, #16]
 800764e:	2f00      	cmp	r7, #0
 8007650:	d0a9      	beq.n	80075a6 <__sflush_r+0x1a>
 8007652:	0793      	lsls	r3, r2, #30
 8007654:	680e      	ldr	r6, [r1, #0]
 8007656:	bf08      	it	eq
 8007658:	694b      	ldreq	r3, [r1, #20]
 800765a:	600f      	str	r7, [r1, #0]
 800765c:	bf18      	it	ne
 800765e:	2300      	movne	r3, #0
 8007660:	eba6 0807 	sub.w	r8, r6, r7
 8007664:	608b      	str	r3, [r1, #8]
 8007666:	f1b8 0f00 	cmp.w	r8, #0
 800766a:	dd9c      	ble.n	80075a6 <__sflush_r+0x1a>
 800766c:	4643      	mov	r3, r8
 800766e:	463a      	mov	r2, r7
 8007670:	6a21      	ldr	r1, [r4, #32]
 8007672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007674:	4628      	mov	r0, r5
 8007676:	47b0      	blx	r6
 8007678:	2800      	cmp	r0, #0
 800767a:	dc06      	bgt.n	800768a <__sflush_r+0xfe>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	e78e      	b.n	80075a8 <__sflush_r+0x1c>
 800768a:	4407      	add	r7, r0
 800768c:	eba8 0800 	sub.w	r8, r8, r0
 8007690:	e7e9      	b.n	8007666 <__sflush_r+0xda>
 8007692:	bf00      	nop
 8007694:	20400001 	.word	0x20400001

08007698 <_fflush_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	690b      	ldr	r3, [r1, #16]
 800769c:	4605      	mov	r5, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b1db      	cbz	r3, 80076da <_fflush_r+0x42>
 80076a2:	b118      	cbz	r0, 80076ac <_fflush_r+0x14>
 80076a4:	6983      	ldr	r3, [r0, #24]
 80076a6:	b90b      	cbnz	r3, 80076ac <_fflush_r+0x14>
 80076a8:	f7ff f892 	bl	80067d0 <__sinit>
 80076ac:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <_fflush_r+0x48>)
 80076ae:	429c      	cmp	r4, r3
 80076b0:	d109      	bne.n	80076c6 <_fflush_r+0x2e>
 80076b2:	686c      	ldr	r4, [r5, #4]
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	b17b      	cbz	r3, 80076da <_fflush_r+0x42>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f7ff bf63 	b.w	800758c <__sflush_r>
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <_fflush_r+0x4c>)
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d101      	bne.n	80076d0 <_fflush_r+0x38>
 80076cc:	68ac      	ldr	r4, [r5, #8]
 80076ce:	e7f1      	b.n	80076b4 <_fflush_r+0x1c>
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <_fflush_r+0x50>)
 80076d2:	429c      	cmp	r4, r3
 80076d4:	bf08      	it	eq
 80076d6:	68ec      	ldreq	r4, [r5, #12]
 80076d8:	e7ec      	b.n	80076b4 <_fflush_r+0x1c>
 80076da:	2000      	movs	r0, #0
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	bf00      	nop
 80076e0:	08007970 	.word	0x08007970
 80076e4:	08007990 	.word	0x08007990
 80076e8:	08007950 	.word	0x08007950

080076ec <_lseek_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4c07      	ldr	r4, [pc, #28]	; (800770c <_lseek_r+0x20>)
 80076f0:	4605      	mov	r5, r0
 80076f2:	4608      	mov	r0, r1
 80076f4:	4611      	mov	r1, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	6022      	str	r2, [r4, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f7fd fab9 	bl	8004c72 <_lseek>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_lseek_r+0x1e>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	b103      	cbz	r3, 800770a <_lseek_r+0x1e>
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	20000be0 	.word	0x20000be0

08007710 <__swhatbuf_r>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	460e      	mov	r6, r1
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	2900      	cmp	r1, #0
 800771a:	b096      	sub	sp, #88	; 0x58
 800771c:	4614      	mov	r4, r2
 800771e:	461d      	mov	r5, r3
 8007720:	da07      	bge.n	8007732 <__swhatbuf_r+0x22>
 8007722:	2300      	movs	r3, #0
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	89b3      	ldrh	r3, [r6, #12]
 8007728:	061a      	lsls	r2, r3, #24
 800772a:	d410      	bmi.n	800774e <__swhatbuf_r+0x3e>
 800772c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007730:	e00e      	b.n	8007750 <__swhatbuf_r+0x40>
 8007732:	466a      	mov	r2, sp
 8007734:	f000 f884 	bl	8007840 <_fstat_r>
 8007738:	2800      	cmp	r0, #0
 800773a:	dbf2      	blt.n	8007722 <__swhatbuf_r+0x12>
 800773c:	9a01      	ldr	r2, [sp, #4]
 800773e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007746:	425a      	negs	r2, r3
 8007748:	415a      	adcs	r2, r3
 800774a:	602a      	str	r2, [r5, #0]
 800774c:	e7ee      	b.n	800772c <__swhatbuf_r+0x1c>
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	2000      	movs	r0, #0
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	b016      	add	sp, #88	; 0x58
 8007756:	bd70      	pop	{r4, r5, r6, pc}

08007758 <__smakebuf_r>:
 8007758:	898b      	ldrh	r3, [r1, #12]
 800775a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800775c:	079d      	lsls	r5, r3, #30
 800775e:	4606      	mov	r6, r0
 8007760:	460c      	mov	r4, r1
 8007762:	d507      	bpl.n	8007774 <__smakebuf_r+0x1c>
 8007764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	2301      	movs	r3, #1
 800776e:	6163      	str	r3, [r4, #20]
 8007770:	b002      	add	sp, #8
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	ab01      	add	r3, sp, #4
 8007776:	466a      	mov	r2, sp
 8007778:	f7ff ffca 	bl	8007710 <__swhatbuf_r>
 800777c:	9900      	ldr	r1, [sp, #0]
 800777e:	4605      	mov	r5, r0
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff fbfd 	bl	8006f80 <_malloc_r>
 8007786:	b948      	cbnz	r0, 800779c <__smakebuf_r+0x44>
 8007788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800778c:	059a      	lsls	r2, r3, #22
 800778e:	d4ef      	bmi.n	8007770 <__smakebuf_r+0x18>
 8007790:	f023 0303 	bic.w	r3, r3, #3
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	e7e3      	b.n	8007764 <__smakebuf_r+0xc>
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <__smakebuf_r+0x7c>)
 800779e:	62b3      	str	r3, [r6, #40]	; 0x28
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	6020      	str	r0, [r4, #0]
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	6163      	str	r3, [r4, #20]
 80077ae:	9b01      	ldr	r3, [sp, #4]
 80077b0:	6120      	str	r0, [r4, #16]
 80077b2:	b15b      	cbz	r3, 80077cc <__smakebuf_r+0x74>
 80077b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 f853 	bl	8007864 <_isatty_r>
 80077be:	b128      	cbz	r0, 80077cc <__smakebuf_r+0x74>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	431d      	orrs	r5, r3
 80077d0:	81a5      	strh	r5, [r4, #12]
 80077d2:	e7cd      	b.n	8007770 <__smakebuf_r+0x18>
 80077d4:	08006799 	.word	0x08006799

080077d8 <__ascii_mbtowc>:
 80077d8:	b082      	sub	sp, #8
 80077da:	b901      	cbnz	r1, 80077de <__ascii_mbtowc+0x6>
 80077dc:	a901      	add	r1, sp, #4
 80077de:	b142      	cbz	r2, 80077f2 <__ascii_mbtowc+0x1a>
 80077e0:	b14b      	cbz	r3, 80077f6 <__ascii_mbtowc+0x1e>
 80077e2:	7813      	ldrb	r3, [r2, #0]
 80077e4:	600b      	str	r3, [r1, #0]
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	1c10      	adds	r0, r2, #0
 80077ea:	bf18      	it	ne
 80077ec:	2001      	movne	r0, #1
 80077ee:	b002      	add	sp, #8
 80077f0:	4770      	bx	lr
 80077f2:	4610      	mov	r0, r2
 80077f4:	e7fb      	b.n	80077ee <__ascii_mbtowc+0x16>
 80077f6:	f06f 0001 	mvn.w	r0, #1
 80077fa:	e7f8      	b.n	80077ee <__ascii_mbtowc+0x16>

080077fc <__malloc_lock>:
 80077fc:	4770      	bx	lr

080077fe <__malloc_unlock>:
 80077fe:	4770      	bx	lr

08007800 <_read_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4c07      	ldr	r4, [pc, #28]	; (8007820 <_read_r+0x20>)
 8007804:	4605      	mov	r5, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	6022      	str	r2, [r4, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7fd f9da 	bl	8004bc8 <_read>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_read_r+0x1e>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	b103      	cbz	r3, 800781e <_read_r+0x1e>
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20000be0 	.word	0x20000be0

08007824 <__ascii_wctomb>:
 8007824:	b149      	cbz	r1, 800783a <__ascii_wctomb+0x16>
 8007826:	2aff      	cmp	r2, #255	; 0xff
 8007828:	bf85      	ittet	hi
 800782a:	238a      	movhi	r3, #138	; 0x8a
 800782c:	6003      	strhi	r3, [r0, #0]
 800782e:	700a      	strbls	r2, [r1, #0]
 8007830:	f04f 30ff 	movhi.w	r0, #4294967295
 8007834:	bf98      	it	ls
 8007836:	2001      	movls	r0, #1
 8007838:	4770      	bx	lr
 800783a:	4608      	mov	r0, r1
 800783c:	4770      	bx	lr
	...

08007840 <_fstat_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4c07      	ldr	r4, [pc, #28]	; (8007860 <_fstat_r+0x20>)
 8007844:	2300      	movs	r3, #0
 8007846:	4605      	mov	r5, r0
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	f7fd f9f5 	bl	8004c3c <_fstat>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d102      	bne.n	800785c <_fstat_r+0x1c>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	b103      	cbz	r3, 800785c <_fstat_r+0x1c>
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	20000be0 	.word	0x20000be0

08007864 <_isatty_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4c06      	ldr	r4, [pc, #24]	; (8007880 <_isatty_r+0x1c>)
 8007868:	2300      	movs	r3, #0
 800786a:	4605      	mov	r5, r0
 800786c:	4608      	mov	r0, r1
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	f7fd f9f4 	bl	8004c5c <_isatty>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_isatty_r+0x1a>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	b103      	cbz	r3, 800787e <_isatty_r+0x1a>
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	20000be0 	.word	0x20000be0

08007884 <_init>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr

08007890 <_fini>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr
